// Christian Duncan
// GraphWriter Class
//    for GD2004, Graph Drawing Contest
//    For the formats please see GraphReader

// package GD4;

import java.io.*;
import java.util.*;

/*********************
 * GraphWriter Class
 *    Writes a Graph in various formats
 *    Currently only GD4 format works
 *********************/
public class GraphWriter {
    public static void writeGD4(Writer out, Graph g) 
	throws IOException {
	writeGD4(out, g, false);
    }

    public static void writeGD4(Writer out, Graph g, boolean includeComments) 
	throws IOException {
	PrintWriter pout = new PrintWriter(new BufferedWriter(out));
	writeGD4(pout, g, includeComments);
    }

    public static void writeGD4(PrintWriter out, Graph g, boolean includeComments)
	throws IOException {
	if (includeComments) {
	    out.println("# GD4 format: automatically generated by GD4.GraphWriter");
	}
	out.println(g.numNodes() + (includeComments ? " # Number of Nodes " : ""));

	int i;
	Iterator it;

	// Write out the nodes
	i = 0;
	it = g.nodeIterator();
	while (it.hasNext()) {
	    Node n = (Node) it.next();
	    out.println(n.getX() + " " + n.getY() +
			(includeComments ? " # Node " + i : ""));
	    i++;
	}

	// Write out the edges
	i = 0;
	it = g.edgeIterator();
	while (it.hasNext()) {
	    Edge e = (Edge) it.next();
	    out.println(e.getStartNode().getId() + " " +
			e.getEndNode().getId() +
			(includeComments ? " # Edge " + i : ""));
	    i++;
	}

	out.flush();
    }

    /************************************************
     * Output the graph in the format used by
     *    Stephen Kobourov's group
     *    Sample:
     *-------------------------------------
     *       node 0 250 300
     *       node 1 300 100
     *       node 2 350 300 
     *       node 3 200 200
     *       node 4 400 200
     *       
     *       edge 0 1
     *       edge 1 2
     *       edge 2 3
     *       edge 3 4
     *-------------------------------------
     ************************************************/
    public static void writeKob(Writer out, Graph g) 
	throws IOException {
	PrintWriter pout = new PrintWriter(new BufferedWriter(out));
	writeKob(pout, g);
    }

    public static void writeKob(PrintWriter out, Graph g)
	throws IOException {
	int i;
	Iterator it;

	// Write out the nodes
	i = 0;
	it = g.nodeIterator();
	while (it.hasNext()) {
	    Node n = (Node) it.next();
	    out.println("NODE " + i + 
			" " + (int) (n.getX() + 0.5) + 
			" " + (int) (n.getY() + 0.5));
	    i++;
	}
	out.println();

	// Write out the edges
	i = 0;
	it = g.edgeIterator();
	while (it.hasNext()) {
	    Edge e = (Edge) it.next();
	    out.println("EDGE " + e.getStartNode().getId() + " " +
			e.getEndNode().getId());
	    i++;
	}

	out.flush();
    }
}
