#!/bin/tcsh

set TPTP4X = "$TPTP_HOME/ServiceTools/tptp4X"
set SystemOnTPTP = "$TPTP_HOME/SystemExecution/SystemOnTPTP"
set TempDir = "/tmp/AGMMV_$$"
set ModalModelFinder = "Vampire-SAT---"
set VampireTypesFile = "$TPTP_HOME/ServiceTools/AGMVDir/Vampire-SAT___Types.p"
set ModalModelVerifier = "Leo-III---"
set TryToProve = "$TPTP_HOME/ServiceTools/TryToProve"

#----Check that there is a problem file and an interpretation file
if ($#argv != 3) then
    echo "Usage: $0 <time_limit> <problem file> <interpretation file>"
    exit
else 
    set CPULimit = $1
    set ProblemFile = $2
    set ModelFile = $3
    if (!(`grep -E -c '^ *tff\(.*, *axiom(-local|-global)? *,' $ProblemFile`) && \
        !(`grep -E -c '^ *tff\(.*, *conjecture *,' $ProblemFile`)) then
        echo "The problem file must have an axiom or a conjecture"
        exit
    end
    if (!(`grep -E -c '^ *tff\(.*, *interpretation *,' $ModelFile`) && \
        echo "The interpretation file must have an interpretation"
        exit
    end
endif

onintr cleanup
mkdir -p $TempDir
set VerificationFile = "$TempDir/AGMMVVerificationFile_$$"
set VerificationProofFile = "$TempDir/AGMMVVerificationProofFile_$$"

echo "% Checking the interpretation is satisfiable using $ModalModelFinder"
rm -f $VerificationProofFile
rm -f $VerificationFile
touch $VerificationFile
cat $VampireTypesFile >> $VerificationFile
echo "" >> $VerificationFile
sed -e "s/, *interpretation *,/,axiom,/" $ModelFile >> $VerificationFile
$TryToProve -q1 -n1 -t $CPULimit -p "0" -m $ModalModelFinder $VerificationFile | grep "SZS" | \
sed -e "s/ for .*//" > $VerificationProofFile
if (`grep -c "SZS status Satisfiable" $VerificationProofFile`) then
    echo "% Interpretation is satisfiable"
else
    echo "% Interpretation not shown to be satisfiable"
endif

echo "% Building the verification problem"
set VerificationFile = "$TempDir/AGMMVVerificationFile_$$"
rm -f $VerificationFile
touch $VerificationFile

#----Note the modal interpretation logic
echo 'tff(the_logic,logic,$$fomlModel).' >> $VerificationFile
echo "" >> $VerificationFile
echo "% Set the logic"

#----Extract types from the interpretation file
$TPTP4X -u machine $ModelFile | \
    grep -E '^ *tff\(.*, *type *,' | \
    $TPTP4X -- >> $VerificationFile
echo "" >> $VerificationFile
echo "% Extracted the types"

#----Extract the interpretation from the interpretation file
$TPTP4X -u machine $ModelFile | grep -E '^ *tff\(.*, *interpretation *,' | \
sed -e 's/$distinct(\([^,]*\),\([^,)]*\))/ \1 != \2 /g' | \
sed -e 's/$distinct(\([^,]*\),\([^,)]*\),\([^)]*\))/ ( \1 != \2 \& \1 != \3 \& \2 != \3 ) /g' | \
$TPTP4X -- >> $VerificationFile
echo "" >> $VerificationFile
echo "% Extracted the interpretation"

#----Extract global axioms from the problem file
$TPTP4X -u machine $ProblemFile | \
    grep -E '^ *tff\(.*, *axiom *,' | \
    sed -e "s/, *axiom *,/,conjecture-global,/" | \
    $TPTP4X -- >> $VerificationFile
echo "" >> $VerificationFile
echo "% Extracted the global axioms"

#----Extract local axioms from the problem file
$TPTP4X -u machine $ProblemFile | \
    grep -E '^ *tff\(.*, *axiom-local *,' | \
    sed -e "s/, *axiom-local *,/,conjecture-local,/" | \
    $TPTP4X -- >> $VerificationFile
echo "" >> $VerificationFile
echo "% Extracted the local axioms"

#----Extract conjecture from the problem file and negate
$TPTP4X -u machine $ProblemFile | \
    grep -E '^ *tff\(.*, *conjecture *,' | \
    sed -e "s/, *conjecture *,/,conjecture-local, ~ ( /" -e "s/)\./))./" | \
    $TPTP4X -- >> $VerificationFile
echo "% Extracted the conjecture"

#DEBUG cat $VerificationFile

echo "% Running the modal model verifier $ModalModelVerifier"
#DEBUG echo -n "% ";date '+%T %N'
rm -f $VerificationProofFile
$SystemOnTPTP -q1 $ModalModelVerifier $CPULimit $VerificationFile > $VerificationProofFile
#DEBUG echo "% Ran $ModalModelVerifier"
#DEBUG echo -n "% ";date '+%T %N'
#DEBUG echo "---------- OUTPUT -----------"
#DEBUG cat $VerificationProofFile
#DEBUG echo "-----------------------------"
if (`grep -c 'SZS status Theorem' $VerificationProofFile`) then
    echo -n "% SZS status Success"
else 
    echo -n "% SZS status NoSuccess"
endif
if (`expr match "$VerificationFile" "^$TempDir"` == 0) then
    echo " for problem $ProblemFile and $ModelFile"
else
    echo ""
endif

cleanup:
echo "% AGMMV ended, cleaning up"
rm -rf $TempDir
