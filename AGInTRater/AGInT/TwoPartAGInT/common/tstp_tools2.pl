#!/usr/bin/perl -w

#-------------------------------
# Author: Yury Puzis
# Date: July 2005
#-------------------------------

1;

sub Helpme {
  my ($e, $f) = @_;
  open ($handle,"$f") || die "TSTP tool: Cannot find help for $e: $!";
  while (defined($Line = <$handle>)) {
    if ($Line eq "=> $e\n" || $Line eq "=> ".substr($e, 2)) {
      while (defined($Line = <$handle>) && substr($Line,0,2) ne "=>") {
        print $Line;
      }
      last;
    }
  }
  close($handle);
}

sub WriteTstp {
  my ($Problem, @f) = @_;
  open ($handle,">$Problem") ||die "TSTP tool: Cannot create file $Problem: $!";
  print $handle "% this file was automatically generated by tstp_tools.pl\n\n";
  foreach (@f) {
     print $handle "$_\n"; 
  }
  close ($handle);
}

#assumes formulas are already sorted by clusters
sub GetFormulaData {
  my @ret = ();
  my ($field, $entry, @f) = @_;
  foreach (@f) { push(@ret, GetField($field, $entry, $_)); }
  @ret;
}


sub GetClusterRelevancy {
  my @ret = ();
  my (@f) = @_;
  $fprevc = GetField("cluster", 1, $f[0]);
  push(@ret, GetField("cluster", 2, $f[0])); 
  foreach $e (@f) { 
    $fcluster = GetField("cluster", 1, $e);
#    print "$fcluster\n";
    if ($fcluster != $fprevc) {
      push(@ret, GetField("cluster", 2, $e)); 
      $fprevc = $fcluster;
    }
  }
  @ret;
}

sub GetFormulaRelevancy { 
  return GetFormulaData("relevance", 1, @_);
}

sub GetClusterNumbers {
  return GetFormulaData("cluster", 1, @_);
}

sub GetNumberOfClusters {
  return GetField("cluster", 4, $_[0]);
}

sub GetFormulaNames {
  my (@r) = ();
  my (@f) = @_;
  foreach (@f)  { 
     ($Name, $z, $x, $c, $v) = GetAllParts($_);
     push(@r, $Name); 
  }
  @r;
}

sub GetFormulaContents {
  my (@r) = ();
  my (@f) = @_;
  foreach (@f)  { 
     ($n, $z, $Cont, $c, $v) = GetAllParts($_);
     push(@r, $Cont); 
  }
  @r;
}

sub GetFormulaTypes {
  my (@r) = ();
  my (@f) = @_;
  foreach (@f)  { 
     ($n, $Type, $x, $c, $v) = GetAllParts($_);
     push(@r, $Type); 
  }
  @r;
}

sub GetUsefullInfo {
  my($formula) = @_;
  ($A, $B, $C, $D, $E)=( $formula =~ /[^\(]*\(([^,]*),([^,]*),\n\s*\((.*)\),\n\s*(.*),\n\s*(\[.*\])\)\./s);
  $E;
}

sub GetAllParts {
  my($formula) = @_;
  ($A, $B, $C, $D, $E)=( $formula =~ /[^\(]*\(([^,]*),([^,]*),\n\s*\((.*)\),\n\s*(.*),\n\s*(\[.*\])\)\./s);
  return ($A, $B, $C, $D, $E);
}

#find a filed with name "$name" and extract entry # $entry
sub GetField {
  my($name, $entry, $formula) = @_;
  $A = GetUsefullInfo($formula);
#  $A =~ s/[ \n\]\[]//g;
  my (@B) = split("[\(\)\,]", $A);
  for ($i = 0; $i < scalar(@B)-$entry; $i++) {
    if ($B[$i] eq $name) { return $B[$i+$entry]; }
  }
}

#sub GetAllParts {
#  my ($f) = @_;
#  return($f =~ /[^\(]*\(([^,]*),([^,]*),\n\s*\((.*)\),\n\s*(.*),\n\s*(\[.*\])\)\./s);
#}

sub ByRelevancy{
  GetField("relevance", 1, $a) <=> GetField("relevance", 1, $b);
}

sub GetFName {
  print "--- $a\n";
  $NameA = ( $a =~ /(.*)\./s);
#  ($NameA, $_, $_, $_, $_) = GetAllParts($a);
  print "name $NameA\n";
  return $NameA;
}

sub ByName {
  print "***\n $a\n ***\n $b\n";
  print GetFName($a)."\n";
  print GetFName($b)."\n";
  GetFName($a) <=> GetFName($b);
}

sub ByInterestingnessAndIteration{
  $br = GetField("interesting", 1, $b);
  $ar = GetField("interesting", 1, $a);
  if ($br == $ar) {
    $bi = GetField("iteration", 1, $b);
    $ai = GetField("iteration", 1, $a);
    $bi <=> $ai;
  } else {
    $br <=> $ar;
  }
}

sub ByInterestingness{
  GetField("interesting", 1, $b) <=> GetField("interesting", 1, $a);
}

sub ByRelevantClusters{ 
  $af =  GetField("cluster", 2, $a);
  $bf =  GetField("cluster", 2, $b);
  if ($af == $bf) {
    return GetField("cluster", 1, $a) <=> GetField("cluster", 1, $b);
  } else {
    return $af <=> $bf;
  }
}

sub ReadTstp{
  my ($Problem) = @_;
  open ($handle,"$Problem") || die "TSTP tool: Cannot read file $Problem: $!";
  #shouldn't there be close() here?
  return ParseTstp($handle);
}

sub ParseTstp {
  my ($handle) = @_;
  my (@cls) = ();
  while (defined($Line = <$handle>)) {
    if(($Line eq "\n")||($Line=~ /\%/)){
      next;
    }
    $Block.=$Line;
    if ($Line =~ /\)\./){
      push(@cls, $Block);
      $Block = "";
    }
  }
  close ($handle);
  return (@cls);
}

sub ReadTstpPipe{
  my ($Problem) = @_;
  open ($handle,"$Problem|") || die "TSTP tool: Cannot read file $Problem: $!";
  return ParseTstp($handle);
}

#can be used with SPASS only!
sub GetFOFformulae{
  my ($mfile) = @_;
  open($handle,"$mfile") || die "TSTP tool: Cannot read file $mfile: $!";
  while (defined($Line = <$handle>)) {
    if ($Line =~ "Formulae used") {
      ($Line) = ($Line =~ /[^\:]*\:\s([^\n]*)\n/s);
      @formulas = split(" ", $Line);
      last;
    }
  }
  close ($handle);
  return (@formulas);
}

sub GetSolutionFileFromPattern {
  my ($mfile, $mprover) = @_;
  my $Nextfile = substr($mfile,0, 8);
  my $Nextdir = substr($Nextfile, 0, 3);	
  my $Soldir = "/huge/tptp/TSTP/Solutions";   #in repository
  #my $Soldir = "Solutions";                    #local
  my $Solfile = "$Soldir/$Nextdir/$Nextfile/$mprover.THM-Ref.s";
  return $Solfile;
}

#'formulas' contain a simple list of formualas by name. (can get with GetFOFf..
sub FindFOFMatch{
  my ($Name, @formulas) = @_;
  my $i = 0;
  foreach $elem (@formulas) {
    if ($elem eq $Name){
      return "used";
    }
    $i++;
  }
  return "~";
}

sub SetFiled {
  my($s, $formula) = @_;
  #$formula =~ s/]\)\.$/,$s]\)\./;
  $formula =~ s/]\)\./,$s]\)\./;
}
