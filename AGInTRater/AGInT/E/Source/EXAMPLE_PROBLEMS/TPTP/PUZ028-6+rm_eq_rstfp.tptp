%--------------------------------------------------------------------------
% File     : PUZ028-6 : TPTP v2.1.0. Released v2.0.0.
% Domain   : Puzzles
% Problem  : People at a party
% Version  : [SETHEO] axioms : Special.
% English  : We can always choose 3 persons who are either familiar with 
%            each other or not familiar with each other, from 6 persons 
%            who meet at a party.

% Refs     : 
% Source   : [TPTP]
% Names    : 

% Status   : unknown
% Rating   : 1.00 v2.1.0
% Syntax   : Number of clauses    :   41 (   1 non-Horn;  36 unit;  41 RR)
%            Number of literals   :   51 (   0 equality)
%            Maximal clause size  :    5 (   1 average)
%            Number of predicates :    4 (   0 propositional; 1-2 arity)
%            Number of functors   :    6 (   6 constant; 0-0 arity)
%            Number of variables  :   12 (   0 singleton)
%            Maximal term depth   :    1 (   1 average)

% Comments : This version is unsatisfiable because familiarity is symmetric.
%          : tptp2X -f tptp -t rm_equality:rstfp PUZ028-6.p 
%--------------------------------------------------------------------------
input_clause(person_1,axiom,
    [++ person(1)]).

input_clause(person_2,axiom,
    [++ person(2)]).

input_clause(person_3,axiom,
    [++ person(3)]).

input_clause(person_4,axiom,
    [++ person(4)]).

input_clause(person_5,axiom,
    [++ person(5)]).

input_clause(person_6,axiom,
    [++ person(6)]).

input_clause(not_equal_1_2,axiom,
    [++ not_equal(1, 2)]).

input_clause(not_equal_1_3,axiom,
    [++ not_equal(1, 3)]).

input_clause(not_equal_1_4,axiom,
    [++ not_equal(1, 4)]).

input_clause(not_equal_1_5,axiom,
    [++ not_equal(1, 5)]).

input_clause(not_equal_1_6,axiom,
    [++ not_equal(1, 6)]).

input_clause(not_equal_2_1,axiom,
    [++ not_equal(2, 1)]).

input_clause(not_equal_2_3,axiom,
    [++ not_equal(2, 3)]).

input_clause(not_equal_2_4,axiom,
    [++ not_equal(2, 4)]).

input_clause(not_equal_2_5,axiom,
    [++ not_equal(2, 5)]).

input_clause(not_equal_2_6,axiom,
    [++ not_equal(2, 6)]).

input_clause(not_equal_3_1,axiom,
    [++ not_equal(3, 1)]).

input_clause(not_equal_3_2,axiom,
    [++ not_equal(3, 2)]).

input_clause(not_equal_3_4,axiom,
    [++ not_equal(3, 4)]).

input_clause(not_equal_3_5,axiom,
    [++ not_equal(3, 5)]).

input_clause(not_equal_3_6,axiom,
    [++ not_equal(3, 6)]).

input_clause(not_equal_4_1,axiom,
    [++ not_equal(4, 1)]).

input_clause(not_equal_4_2,axiom,
    [++ not_equal(4, 2)]).

input_clause(not_equal_4_3,axiom,
    [++ not_equal(4, 3)]).

input_clause(not_equal_4_5,axiom,
    [++ not_equal(4, 5)]).

input_clause(not_equal_4_6,axiom,
    [++ not_equal(4, 6)]).

input_clause(not_equal_5_1,axiom,
    [++ not_equal(5, 1)]).

input_clause(not_equal_5_2,axiom,
    [++ not_equal(5, 2)]).

input_clause(not_equal_5_3,axiom,
    [++ not_equal(5, 3)]).

input_clause(not_equal_5_4,axiom,
    [++ not_equal(5, 4)]).

input_clause(not_equal_5_6,axiom,
    [++ not_equal(5, 6)]).

input_clause(not_equal_6_1,axiom,
    [++ not_equal(6, 1)]).

input_clause(not_equal_6_2,axiom,
    [++ not_equal(6, 2)]).

input_clause(not_equal_6_3,axiom,
    [++ not_equal(6, 3)]).

input_clause(not_equal_6_4,axiom,
    [++ not_equal(6, 4)]).

input_clause(not_equal_6_5,axiom,
    [++ not_equal(6, 5)]).

input_clause(familiar_or_not,axiom,
    [++ familiar(X, Y),
     ++ not_familiar(X, Y),
     -- person(X),
     -- person(Y),
     -- not_equal(X, Y)]).

input_clause(symmetry_of_familiar,axiom,
    [-- familiar(X1, X2),
     ++ familiar(X2, X1)]).

input_clause(symmetry_of_not_familiar,axiom,
    [-- not_familiar(X1, X2),
     ++ not_familiar(X2, X1)]).

input_clause(three_familiar,conjecture,
    [-- familiar(X1, X2),
     -- familiar(X2, X3),
     -- familiar(X3, X1)]).

input_clause(three_not_familiar,conjecture,
    [-- not_familiar(X1, X2),
     -- not_familiar(X2, X3),
     -- not_familiar(X3, X1)]).
%--------------------------------------------------------------------------
