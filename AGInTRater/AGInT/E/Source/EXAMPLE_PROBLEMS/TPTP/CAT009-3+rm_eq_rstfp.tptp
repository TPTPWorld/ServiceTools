%--------------------------------------------------------------------------
% File     : CAT009-3 : TPTP v2.1.0. Released v1.0.0.
% Domain   : Category Theory
% Problem  : If xy is defined, then domain(xy) = domain(y)
% Version  : [Sco79] axioms : Reduced > Complete.
% English  : 

% Refs     : [Sco79] Scott (1979), Identity and Existence in Intuitionist L
% Source   : [ANL]
% Names    : p9.ver3.in [ANL]

% Status   : unsatisfiable
% Rating   : 0.82 v2.1.0, 0.78 v2.0.0
% Syntax   : Number of clauses    :   19 (   2 non-Horn;   5 unit;  14 RR)
%            Number of literals   :   39 (  16 equality)
%            Maximal clause size  :    4 (   2 average)
%            Number of predicates :    3 (   0 propositional; 1-2 arity)
%            Number of functors   :    6 (   2 constant; 0-2 arity)
%            Number of variables  :   31 (   4 singleton)
%            Maximal term depth   :    3 (   1 average)

% Comments : Axioms simplified by Art Quaife. The ANL version has been 
%            extended to use all axioms.
%          : tptp2X -f tptp -t rm_equality:rstfp CAT009-3.p 
%--------------------------------------------------------------------------
input_clause(equivalence_implies_existence1,axiom,
    [-- equivalent(X, Y),
     ++ there_exists(X)]).

input_clause(equivalence_implies_existence2,axiom,
    [-- equivalent(X, Y),
     ++ equal(X, Y)]).

input_clause(existence_and_equality_implies_equivalence1,axiom,
    [-- there_exists(X),
     -- equal(X, Y),
     ++ equivalent(X, Y)]).

input_clause(domain_has_elements,axiom,
    [-- there_exists(domain(X)),
     ++ there_exists(X)]).

input_clause(codomain_has_elements,axiom,
    [-- there_exists(codomain(X)),
     ++ there_exists(X)]).

input_clause(composition_implies_domain,axiom,
    [-- there_exists(compose(X, Y)),
     ++ there_exists(domain(X))]).

input_clause(domain_codomain_composition1,axiom,
    [-- there_exists(compose(X, Y)),
     ++ equal(domain(X), codomain(Y))]).

input_clause(domain_codomain_composition2,axiom,
    [-- there_exists(domain(X)),
     -- equal(domain(X), codomain(Y)),
     ++ there_exists(compose(X, Y))]).

input_clause(associativity_of_compose,axiom,
    [++ equal(compose(X, compose(Y, Z)), compose(compose(X, Y), Z))]).

input_clause(compose_domain,axiom,
    [++ equal(compose(X, domain(X)), X)]).

input_clause(compose_codomain,axiom,
    [++ equal(compose(codomain(X), X), X)]).

input_clause(equivalence_implies_existence3,axiom,
    [-- equivalent(X, Y),
     ++ there_exists(Y)]).

input_clause(existence_and_equality_implies_equivalence2,axiom,
    [-- there_exists(X),
     -- there_exists(Y),
     -- equal(X, Y),
     ++ equivalent(X, Y)]).

input_clause(composition_implies_codomain,axiom,
    [-- there_exists(compose(X, Y)),
     ++ there_exists(codomain(X))]).

input_clause(indiscernibles1,axiom,
    [++ there_exists(f1(X, Y)),
     ++ equal(X, Y)]).

input_clause(indiscernibles2,axiom,
    [++ equal(X, f1(X, Y)),
     ++ equal(Y, f1(X, Y)),
     ++ equal(X, Y)]).

input_clause(indiscernibles3,axiom,
    [-- equal(X, f1(X, Y)),
     -- equal(Y, f1(X, Y)),
     ++ equal(X, Y)]).

input_clause(ab_exists,hypothesis,
    [++ there_exists(compose(a, b))]).

input_clause(prove_domain_of_ab_equals_domain_of_b,conjecture,
    [-- equal(domain(compose(a, b)), domain(b))]).
%--------------------------------------------------------------------------
