%--------------------------------------------------------------------------
% File     : BOO010-2 : TPTP v2.1.0. Released v1.0.0.
% Domain   : Boolean Algebra
% Problem  : Addition absorbtion (X + (X * Y) = X)
% Version  : [ANL] (equality) axioms.
% English  : 

% Refs     : 
% Source   : [ANL]
% Names    : prob4_part2.ver2.in [ANL]

% Status   : unsatisfiable
% Rating   : 0.33 v2.1.0, 0.38 v2.0.0
% Syntax   : Number of clauses    :   15 (   0 non-Horn;  15 unit;   1 RR)
%            Number of literals   :   15 (  15 equality)
%            Maximal clause size  :    1 (   1 average)
%            Number of predicates :    1 (   0 propositional; 2-2 arity)
%            Number of functors   :    7 (   4 constant; 0-2 arity)
%            Number of variables  :   24 (   0 singleton)
%            Maximal term depth   :    3 (   2 average)

% Comments : 
%          : tptp2X -f tptp -t rm_equality:rstfp BOO010-2.p 
%--------------------------------------------------------------------------
input_clause(commutativity_of_add,axiom,
    [++ equal(add(X, Y), add(Y, X))]).

input_clause(commutativity_of_multiply,axiom,
    [++ equal(multiply(X, Y), multiply(Y, X))]).

input_clause(distributivity1,axiom,
    [++ equal(add(multiply(X, Y), Z), multiply(add(X, Z), add(Y, Z)))]).

input_clause(distributivity2,axiom,
    [++ equal(add(X, multiply(Y, Z)), multiply(add(X, Y), add(X, Z)))]).

input_clause(distributivity3,axiom,
    [++ equal(multiply(add(X, Y), Z), add(multiply(X, Z), multiply(Y, Z)))]).

input_clause(distributivity4,axiom,
    [++ equal(multiply(X, add(Y, Z)), add(multiply(X, Y), multiply(X, Z)))]).

input_clause(additive_inverse1,axiom,
    [++ equal(add(X, inverse(X)), multiplicative_identity)]).

input_clause(additive_inverse2,axiom,
    [++ equal(add(inverse(X), X), multiplicative_identity)]).

input_clause(multiplicative_inverse1,axiom,
    [++ equal(multiply(X, inverse(X)), additive_identity)]).

input_clause(multiplicative_inverse2,axiom,
    [++ equal(multiply(inverse(X), X), additive_identity)]).

input_clause(multiplicative_id1,axiom,
    [++ equal(multiply(X, multiplicative_identity), X)]).

input_clause(multiplicative_id2,axiom,
    [++ equal(multiply(multiplicative_identity, X), X)]).

input_clause(additive_id1,axiom,
    [++ equal(add(X, additive_identity), X)]).

input_clause(additive_id2,axiom,
    [++ equal(add(additive_identity, X), X)]).

input_clause(prove_a_plus_ab_is_a,conjecture,
    [-- equal(add(a, multiply(a, b)), a)]).
%--------------------------------------------------------------------------
