%--------------------------------------------------------------------------
% File     : CAT004-2 : TPTP v2.1.0. Released v1.0.0.
% Domain   : Category Theory
% Problem  : X and Y epimorphisms, XY well-defined => XY epimorphism
% Version  : [Qua89] (equality) axioms.
% English  : If x and y are epimorphisms and xy is well-defined, then 
%            xy is an epimorphism.

% Refs     : [Qua89] Quaife (1989), Email to L. Wos
% Source   : [ANL]
% Names    : p4.ver2.in [ANL]

% Status   : unsatisfiable
% Rating   : 0.67 v2.1.0, 1.00 v2.0.0
% Syntax   : Number of clauses    :   14 (   0 non-Horn;   9 unit;  10 RR)
%            Number of literals   :   26 (  26 equality)
%            Maximal clause size  :    5 (   1 average)
%            Number of predicates :    1 (   0 propositional; 2-2 arity)
%            Number of functors   :    7 (   4 constant; 0-2 arity)
%            Number of variables  :   17 (   0 singleton)
%            Maximal term depth   :    3 (   2 average)

% Comments : 
%          : tptp2X -f tptp -t rm_equality:rstfp CAT004-2.p 
%--------------------------------------------------------------------------
input_clause(codomain_of_domain_is_domain,axiom,
    [++ equal(codomain(domain(X)), domain(X))]).

input_clause(domain_of_codomain_is_codomain,axiom,
    [++ equal(domain(codomain(X)), codomain(X))]).

input_clause(domain_composition,axiom,
    [++ equal(compose(domain(X), X), X)]).

input_clause(codomain_composition,axiom,
    [++ equal(compose(X, codomain(X)), X)]).

input_clause(codomain_domain1,axiom,
    [-- equal(codomain(X), domain(Y)),
     ++ equal(domain(compose(X, Y)), domain(X))]).

input_clause(codomain_domain2,axiom,
    [-- equal(codomain(X), domain(Y)),
     ++ equal(codomain(compose(X, Y)), codomain(Y))]).

input_clause(star_property,axiom,
    [-- equal(codomain(X), domain(Y)),
     -- equal(codomain(Y), domain(Z)),
     ++ equal(compose(X, compose(Y, Z)), compose(compose(X, Y), Z))]).

input_clause(epimorphism1,hypothesis,
    [-- equal(codomain(a), domain(X)),
     -- equal(compose(a, X), Y),
     -- equal(codomain(a), domain(Z)),
     -- equal(compose(a, Z), Y),
     ++ equal(X, Z)]).

input_clause(epimorphism2,hypothesis,
    [-- equal(codomain(b), domain(X)),
     -- equal(compose(b, X), Y),
     -- equal(codomain(b), domain(Z)),
     -- equal(compose(b, Z), Y),
     ++ equal(X, Z)]).

input_clause(codomain_of_a_equals_domain_of_b,hypothesis,
    [++ equal(codomain(a), domain(b))]).

input_clause(codomain_of_ab_equals_domain_of_h,hypothesis,
    [++ equal(codomain(compose(a, b)), domain(h))]).

input_clause(codomain_of_ab_equals_domain_of_g,hypothesis,
    [++ equal(codomain(compose(a, b)), domain(g))]).

input_clause(ab_h_equals_ab_g,hypothesis,
    [++ equal(compose(compose(a, b), h), compose(compose(a, b), g))]).

input_clause(prove_h_equals_g,conjecture,
    [-- equal(h, g)]).
%--------------------------------------------------------------------------
