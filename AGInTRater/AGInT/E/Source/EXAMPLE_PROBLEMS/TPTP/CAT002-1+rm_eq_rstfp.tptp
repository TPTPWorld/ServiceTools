%--------------------------------------------------------------------------
% File     : CAT002-1 : TPTP v2.1.0. Released v1.0.0.
% Domain   : Category Theory
% Problem  : X and Y monomorphisms, XY well-defined => XY monomorphism
% Version  : [Mit67] axioms.
% English  : If x and y are monomorphisms and xy is well-defined then 
%            xy is a monomorphism.

% Refs     : [Mit67] Mitchell (1967), Theory of Categories
%          : [MOW76] McCharen et al. (1976), Problems and Experiments for a
% Source   : [ANL]
% Names    : C2 [MOW76]
%          : p2.ver1.in [ANL]

% Status   : unsatisfiable
% Rating   : 0.50 v2.1.0, 0.40 v2.0.0
% Syntax   : Number of clauses    :   24 (   0 non-Horn;  10 unit;  18 RR)
%            Number of literals   :   55 (   4 equality)
%            Maximal clause size  :    4 (   2 average)
%            Number of predicates :    4 (   0 propositional; 1-3 arity)
%            Number of functors   :    9 (   6 constant; 0-2 arity)
%            Number of variables  :   58 (   5 singleton)
%            Maximal term depth   :    2 (   1 average)

% Comments : 
%          : tptp2X -f tptp -t rm_equality:rstfp CAT002-1.p 
%--------------------------------------------------------------------------
input_clause(closure_of_composition,axiom,
    [-- defined(X, Y),
     ++ product(X, Y, compose(X, Y))]).

input_clause(associative_property1,axiom,
    [-- product(X, Y, Z),
     ++ defined(X, Y)]).

input_clause(associative_property2,axiom,
    [-- product(X, Y, Xy),
     -- defined(Xy, Z),
     ++ defined(Y, Z)]).

input_clause(category_theory_axiom1,axiom,
    [-- product(X, Y, Xy),
     -- product(Y, Z, Yz),
     -- defined(Xy, Z),
     ++ defined(X, Yz)]).

input_clause(category_theory_axiom2,axiom,
    [-- product(X, Y, Xy),
     -- product(Xy, Z, Xyz),
     -- product(Y, Z, Yz),
     ++ product(X, Yz, Xyz)]).

input_clause(category_theory_axiom3,axiom,
    [-- product(Y, Z, Yz),
     -- defined(X, Yz),
     ++ defined(X, Y)]).

input_clause(category_theory_axiom4,axiom,
    [-- product(Y, Z, Yz),
     -- product(X, Y, Xy),
     -- defined(X, Yz),
     ++ defined(Xy, Z)]).

input_clause(category_theory_axiom5,axiom,
    [-- product(Y, Z, Yz),
     -- product(X, Yz, Xyz),
     -- product(X, Y, Xy),
     ++ product(Xy, Z, Xyz)]).

input_clause(category_theory_axiom6,axiom,
    [-- defined(X, Y),
     -- defined(Y, Z),
     -- identity_map(Y),
     ++ defined(X, Z)]).

input_clause(domain_is_an_identity_map,axiom,
    [++ identity_map(domain(X))]).

input_clause(codomain_is_an_identity_map,axiom,
    [++ identity_map(codomain(X))]).

input_clause(mapping_from_x_to_its_domain,axiom,
    [++ defined(X, domain(X))]).

input_clause(mapping_from_codomain_of_x_to_x,axiom,
    [++ defined(codomain(X), X)]).

input_clause(product_on_domain,axiom,
    [++ product(X, domain(X), X)]).

input_clause(product_on_codomain,axiom,
    [++ product(codomain(X), X, X)]).

input_clause(identity1,axiom,
    [-- defined(X, Y),
     -- identity_map(X),
     ++ product(X, Y, Y)]).

input_clause(identity2,axiom,
    [-- defined(X, Y),
     -- identity_map(Y),
     ++ product(X, Y, X)]).

input_clause(composition_is_well_defined,axiom,
    [-- product(X, Y, Z),
     -- product(X, Y, W),
     ++ equal(Z, W)]).

input_clause(cancellation_for_product1,hypothesis,
    [-- product(a, X, W),
     -- product(a, Y, W),
     ++ equal(X, Y)]).

input_clause(cancellation_for_product2,hypothesis,
    [-- product(b, X, W),
     -- product(b, Y, W),
     ++ equal(X, Y)]).

input_clause(ab_equals_c,hypothesis,
    [++ product(a, b, c)]).

input_clause(ch_equals_d,hypothesis,
    [++ product(c, h, d)]).

input_clause(cg_equals_d,hypothesis,
    [++ product(c, g, d)]).

input_clause(prove_h_equals_g,conjecture,
    [-- equal(h, g)]).
%--------------------------------------------------------------------------
