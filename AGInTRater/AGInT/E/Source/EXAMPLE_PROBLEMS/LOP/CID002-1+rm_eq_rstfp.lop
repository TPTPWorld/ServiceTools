#--------------------------------------------------------------------------
# File     : CID002-1 : TPTP v2.1.0. Released v1.1.0.
# Domain   : Circuit Design
# Problem  : Interchange inputs to outputs
# Version  : [ANL] axioms.
# English  : Design a circuit with inputs x and y whose outputs are y and 
#            x, and contains no crossings of wires

# Refs     : [WO+92] Wos et al. (1992), Automated Reasoning: Introduction a
# Source   : [ANL]
# Names    : interchange.ver1.clauses [ANL]

# Status   : unsatisfiable
# Rating   : 0.83 v2.1.0, 1.00 v2.0.0
# Syntax   : Number of clauses    :   38 (   0 non-Horn;  23 unit;  30 RR)
#            Number of literals   :   53 (  20 equality)
#            Maximal clause size  :    2 (   1 average)
#            Number of predicates :    2 (   0 propositional; 2-3 arity)
#            Number of functors   :   11 (   3 constant; 0-4 arity)
#            Number of variables  :   99 (   1 singleton)
#            Maximal term depth   :    4 (   2 average)

# Comments : We represent the circuit built up so far by circuit(top(X), 
#            middle(Y),bottom(Z)), where top and bottom are lists of
#            outputs, counting outward from the middle.
#          : The original uses the equality clauses as demodulators.
#          : tptp2X -f setheo:sign -t rm_equality:rstfp CID002-1.p 
#--------------------------------------------------------------------------
# and_definition1, axiom.
equal(and(0, 0), 0) <- .

# and_definition2, axiom.
equal(and(0, 1), 0) <- .

# and_definition3, axiom.
equal(and(1, 0), 0) <- .

# and_definition4, axiom.
equal(and(1, 1), 1) <- .

# or_definition1, axiom.
equal(or(0, 0), 0) <- .

# or_definition2, axiom.
equal(or(0, 1), 1) <- .

# or_definition3, axiom.
equal(or(1, 0), 1) <- .

# or_definition4, axiom.
equal(or(1, 1), 1) <- .

# not_definition1, axiom.
equal(not(0), 1) <- .

# not_definition2, axiom.
equal(not(1), 0) <- .

# split_and_keep_middle1, axiom.
circuit(top(connect(and(Y, X1), X2)), middle(Y), bottom(connect(and(Y, Z1), Z2))) <- 
    circuit(top(connect(X1, X2)), middle(Y), bottom(connect(Z1, Z2))).

# split_and_keep_middle2, axiom.
circuit(top(connect(or(Y, X1), X2)), middle(Y), bottom(connect(or(Y, Z1), Z2))) <- 
    circuit(top(connect(X1, X2)), middle(Y), bottom(connect(Z1, Z2))).

# split_and_omit_middle1, axiom.
circuit(top(connect(and(Y, X1), X2)), nil, bottom(connect(and(Y, Z1), Z2))) <- 
    circuit(top(connect(X1, X2)), middle(Y), bottom(connect(Z1, Z2))).

# split_and_omit_middle2, axiom.
circuit(top(connect(or(Y, X1), X2)), nil, bottom(connect(or(Y, Z1), Z2))) <- 
    circuit(top(connect(X1, X2)), middle(Y), bottom(connect(Z1, Z2))).

# join_across_empty_middle1, axiom.
circuit(top(X2), middle(and(X1, Y1)), bottom(Y2)) <- 
    circuit(top(connect(X1, X2)), nil, bottom(connect(Y1, Y2))).

# join_across_empty_middle2, axiom.
circuit(top(X2), middle(or(X1, Y1)), bottom(Y2)) <- 
    circuit(top(connect(X1, X2)), nil, bottom(connect(Y1, Y2))).

# join_across_middle1, axiom.
circuit(top(connect(X1, X2)), middle(and(X1, Y1)), bottom(connect(Y1, Y2))) <- 
    circuit(top(connect(X1, X2)), nil, bottom(connect(Y1, Y2))).

# join_across_middle2, axiom.
circuit(top(connect(X1, X2)), middle(or(X1, Y1)), bottom(connect(Y1, Y2))) <- 
    circuit(top(connect(X1, X2)), nil, bottom(connect(Y1, Y2))).

# join_to_middle1, axiom.
circuit(top(connect(and(Y, X1), connect(X1, X2))), nil, bottom(connect(and(Y, Z1), connect(Z1, Z2)))) <- 
    circuit(top(connect(X1, X2)), middle(Y), bottom(connect(Z1, Z2))).

# join_to_middle2, axiom.
circuit(top(connect(or(Y, X1), connect(X1, X2))), nil, bottom(connect(or(Y, Z1), connect(Z1, Z2)))) <- 
    circuit(top(connect(X1, X2)), middle(Y), bottom(connect(Z1, Z2))).

# join_nearest_middle1, axiom.
circuit(top(connect(and(X1, X2), X3)), middle(Y), bottom(connect(and(Z1, Z2), Z3))) <- 
    circuit(top(connect(X1, connect(X2, X3))), middle(Y), bottom(connect(Z1, connect(Z2, Z3)))).

# join_nearest_middle2, axiom.
circuit(top(connect(or(X1, X2), X3)), middle(Y), bottom(connect(or(Z1, Z2), Z3))) <- 
    circuit(top(connect(X1, connect(X2, X3))), middle(Y), bottom(connect(Z1, connect(Z2, Z3)))).

# invert_middle, axiom.
circuit(top(X), middle(not(Y)), bottom(Z)) <- 
    circuit(top(X), middle(Y), bottom(Z)).

# invert_adjacent1, axiom.
circuit(top(connect(not(X1), X2)), middle(Y), bottom(connect(not(Z1), Z2))) <- 
    circuit(top(connect(X1, X2)), middle(Y), bottom(connect(Z1, Z2))).

# invert_adjacent2, axiom.
circuit(top(connect(not(X1), X2)), nil, bottom(connect(not(Z1), Z2))) <- 
    circuit(top(connect(X1, X2)), nil, bottom(connect(Z1, Z2))).

# subsume_symmetric, axiom.
circuit(top(X), Y, bottom(X)) <- .

# and_table_definition, axiom.
equal(and(table(X1, X2, X3, X4), table(Y1, Y2, Y3, Y4)), table(and(X1, Y1), and(X2, Y2), and(X3, Y3), and(X4, Y4))) <- .

# and_definition5, axiom.
equal(and(nil, X), X) <- .

# or_table_definition, axiom.
equal(or(table(X1, X2, X3, X4), table(Y1, Y2, Y3, Y4)), table(or(X1, Y1), or(X2, Y2), or(X3, Y3), or(X4, Y4))) <- .

# or_definition5, axiom.
equal(or(nil, X), X) <- .

# not_table_definition, axiom.
equal(not(table(X1, X2, X3, X4)), table(not(X1), not(X2), not(X3), not(X4))) <- .

# not_definition3, axiom.
equal(not(nil), nil) <- .

# empty_table, axiom.
equal(table(0, 0, 0, 0), nil) <- .

# full_table, axiom.
equal(table(1, 1, 1, 1), nil) <- .

# connect_definition1, axiom.
equal(connect(nil, X), X) <- .

# connect_definition2, axiom.
equal(connect(X, connect(X, Y)), connect(X, Y)) <- .

# input_configuration, hypothesis.
circuit(top(connect(table(0, 0, 1, 1), nil)), nil, bottom(connect(table(0, 1, 0, 1), nil))) <- .

# prove_output_configuration, conjecture.
 <- circuit(top(connect(table(0, 1, 0, 1), nil)), nil, bottom(connect(table(0, 0, 1, 1), nil))).

#--------------------------------------------------------------------------
