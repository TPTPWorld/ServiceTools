/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./static/js/helpers.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Lexer.js":
/*!***************************************************!*\
  !*** ./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Lexer.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _antlr = _interopRequireDefault(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar serializedATN = [\"\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\", \"\\u5964\\x02e\\u02ED\\b\\x01\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\", \"\\x04\\x04\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\", \"\\t\\x07\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\", \"\\f\\t\\f\\x04\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\", \"\\t\\x10\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\", \"\\x04\\x14\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\", \"\\t\\x17\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\", \"\\x04\\x1B\\t\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\", \"\\t\\x1E\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\\\"\\t\\\"\\x04#\", \"\\t#\\x04$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04\", \"*\\t*\\x04+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x04\", \"1\\t1\\x042\\t2\\x043\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x04\", \"8\\t8\\x049\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04\", \"?\\t?\\x04@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04\", \"F\\tF\\x04G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04\", \"M\\tM\\x04N\\tN\\x04O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04\", \"T\\tT\\x04U\\tU\\x04V\\tV\\x04W\\tW\\x04X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04\", \"[\\t[\\x04\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t`\\x04a\\ta\\x04\", \"b\\tb\\x04c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04\", \"i\\ti\\x04j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x03\\x02\\x03\\x02\", \"\\x03\\x02\\x03\\x02\\x03\\x02\\x03\\x03\\x03\\x03\\x03\\x04\", \"\\x03\\x04\\x03\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\\x05\", \"\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\\x03\\x06\", \"\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\b\", \"\\x03\\b\\x03\\b\\x03\\b\\x03\\b\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\", \"\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\x0B\\x03\\x0B\\x03\", \"\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\", \"\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\\x03\", \"\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\\x11\\x03\", \"\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x13\\x03\\x13\\x03\", \"\\x13\\x03\\x14\\x03\\x14\\x03\\x15\\x03\\x15\\x03\\x16\\x03\", \"\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\", \"\\x16\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\", \"\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x18\\x03\\x18\\x03\", \"\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\\x18\\x03\", \"\\x18\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\", \"\\x19\\x03\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\", \"\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x03\", \"\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1B\\x03\", \"\\x1B\\x03\\x1B\\x03\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\", \"\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\", \"\\x1C\\x03\\x1C\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\", \"\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\", \"\\x1D\\x03\\x1D\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x03\", \"\\x1E\\x03\\x1E\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\", \"\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03 \\x03 \\x03 \\x03\", \" \\x03 \\x03 \\x03 \\x03 \\x03 \\x03!\\x03!\\x03!\\x03!\\x03\", \"!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03!\\x03\\\"\\x03\", \"\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03#\\x03#\\x03\", \"#\\x03#\\x03#\\x03#\\x03#\\x03#\\x03$\\x03$\\x03$\\x03$\\x03\", \"$\\x03$\\x03$\\x03$\\x03$\\x03$\\x03$\\x03$\\x03$\\x03%\\x03\", \"%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03%\\x03\", \"%\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03&\\x03\", \"&\\x03&\\x03&\\x03&\\x03'\\x03'\\x03'\\x03'\\x03'\\x03\", \"'\\x03'\\x03'\\x03'\\x03(\\x03(\\x03(\\x03(\\x03(\\x03\", \"(\\x03)\\x03)\\x03)\\x03)\\x03)\\x03)\\x03*\\x03*\\x03*\\x03\", \"*\\x03*\\x03*\\x03+\\x03+\\x03+\\x03+\\x03+\\x03+\\x03,\\x03\", \",\\x03,\\x03,\\x03,\\x03,\\x03-\\x03-\\x03-\\x05-\\u01F3\\n-\\x03\", \".\\x03.\\x03.\\x05.\\u01F8\\n.\\x03/\\x03/\\x030\\x030\\x031\\x03\", \"1\\x032\\x032\\x033\\x033\\x034\\x034\\x035\\x035\\x035\\x03\", \"5\\x055\\u020A\\n5\\x036\\x036\\x037\\x037\\x038\\x038\\x038\\x03\", \"8\\x039\\x039\\x039\\x03:\\x03:\\x03:\\x03;\\x03;\\x03;\\x03\", \";\\x03<\\x03<\\x03<\\x03=\\x03=\\x03=\\x03>\\x03>\\x03?\\x03\", \"?\\x03?\\x03@\\x03@\\x03@\\x03A\\x03A\\x03A\\x03B\\x03B\\x03\", \"C\\x03C\\x03D\\x03D\\x03D\\x03E\\x03E\\x03E\\x03F\\x03F\\x03\", \"G\\x03G\\x03H\\x03H\\x03H\\x03H\\x03I\\x03I\\x03I\\x03J\\x03\", \"J\\x03J\\x03J\\x03K\\x03K\\x03K\\x03L\\x03L\\x03L\\x03M\\x03\", \"M\\x03N\\x03N\\x03N\\x03O\\x03O\\x03P\\x03P\\x03Q\\x03Q\\x03\", \"R\\x03R\\x03R\\x03S\\x03S\\x03S\\x03S\\x03T\\x03T\\x05T\\u0262\", \"\\nT\\x03U\\x03U\\x03U\\x03V\\x03V\\x05V\\u0269\\nV\\x03W\\x03\", \"W\\x05W\\u026D\\nW\\x03X\\x03X\\x03X\\x03Y\\x03Y\\x03Y\\x03Y\\x03\", \"Z\\x03Z\\x05Z\\u0278\\nZ\\x03[\\x03[\\x03[\\x03\\\\\\x03\\\\\\x03\", \"]\\x03]\\x05]\\u0281\\n]\\x03^\\x03^\\x07^\\u0285\\n^\\f^\\x0E^\\u0288\", \"\\x0B^\\x03_\\x03_\\x05_\\u028C\\n_\\x03_\\x03_\\x03_\\x03`\\x03\", \"`\\x03`\\x03a\\x03a\\x03a\\x07a\\u0297\\na\\fa\\x0Ea\\u029A\\x0B\", \"a\\x03b\\x03b\\x05b\\u029E\\nb\\x03c\\x03c\\x03c\\x03d\\x03d\\x07\", \"d\\u02A5\\nd\\fd\\x0Ed\\u02A8\\x0Bd\\x03e\\x03e\\x03e\\x03f\\x03\", \"f\\x03f\\x03f\\x03f\\x03g\\x03g\\x07g\\u02B4\\ng\\fg\\x0Eg\\u02B7\", \"\\x0Bg\\x03h\\x03h\\x07h\\u02BB\\nh\\fh\\x0Eh\\u02BE\\x0Bh\\x03i\", \"\\x03i\\x06i\\u02C2\\ni\\ri\\x0Ei\\u02C3\\x03i\\x03i\\x03j\\x03j\", \"\\x06j\\u02CA\\nj\\rj\\x0Ej\\u02CB\\x03j\\x03j\\x03k\\x06k\\u02D1\\n\", \"k\\rk\\x0Ek\\u02D2\\x03k\\x03k\\x03l\\x03l\\x07l\\u02D9\\nl\\fl\\x0E\", \"l\\u02DC\\x0Bl\\x03l\\x03l\\x03m\\x03m\\x03m\\x03m\\x07m\\u02E4\", \"\\nm\\fm\\x0Em\\u02E7\\x0Bm\\x03m\\x03m\\x03m\\x03m\\x03m\\x03\", \"\\u02E5\\x02n\\x03\\x03\\x05\\x04\\x07\\x05\\t\\x06\\x0B\\x07\", \"\\r\\b\\x0F\\t\\x11\\n\\x13\\x0B\\x15\\f\\x17\\r\\x19\\x0E\\x1B\\x0F\", \"\\x1D\\x10\\x1F\\x11!\\x12#\\x13%\\x14'\\x15)\\x16+\\x17\", \"-\\x18/\\x191\\x1A3\\x1B5\\x1C7\\x1D9\\x1E;\\x1F= ?!A\\\"C#E$\", \"G%I&K'M(O)Q*S+U,W-Y\\x02[\\x02]\\x02_\\x02a\\x02c\\x02e\\x02\", \"g\\x02i\\x02k.m/o0q1s2u3w4y5{6}7\\x7F8\\x819\\x83:\\x85;\\x87\", \"<\\x89=\\x8B>\\x8D?\\x8F@\\x91A\\x93B\\x95C\\x97D\\x99E\\x9B\", \"F\\x9DG\\x9FH\\xA1I\\xA3J\\xA5K\\xA7L\\xA9M\\xABN\\xADO\\xAF\", \"P\\xB1Q\\xB3R\\xB5S\\xB7T\\xB9U\\xBBV\\xBDW\\xBFX\\xC1Y\\xC3\", \"Z\\xC5[\\xC7\\\\\\xC9]\\xCB^\\xCD_\\xCF`\\xD1a\\xD3b\\xD5c\\xD7\", \"d\\xD9e\\x03\\x02\\x0E\\x05\\x02\\\"#%]_\\x80\\x04\\x02$$^^\\x05\", \"\\x02\\\"(*]_\\x80\\x04\\x02))^^\\x04\\x02--//\\x04\\x02GGgg\\x03\", \"\\x023;\\x03\\x022;\\x03\\x02c|\\x03\\x02C\\\\\\x05\\x02\\x0B\", \"\\f\\x0F\\x0F\\\"\\\"\\x04\\x02\\f\\f\\x0F\\x0F\\x02\\u02F9\\x02\\x03\", \"\\x03\\x02\\x02\\x02\\x02\\x05\\x03\\x02\\x02\\x02\\x02\\x07\", \"\\x03\\x02\\x02\\x02\\x02\\t\\x03\\x02\\x02\\x02\\x02\\x0B\", \"\\x03\\x02\\x02\\x02\\x02\\r\\x03\\x02\\x02\\x02\\x02\\x0F\", \"\\x03\\x02\\x02\\x02\\x02\\x11\\x03\\x02\\x02\\x02\\x02\\x13\", \"\\x03\\x02\\x02\\x02\\x02\\x15\\x03\\x02\\x02\\x02\\x02\\x17\", \"\\x03\\x02\\x02\\x02\\x02\\x19\\x03\\x02\\x02\\x02\\x02\\x1B\", \"\\x03\\x02\\x02\\x02\\x02\\x1D\\x03\\x02\\x02\\x02\\x02\\x1F\", \"\\x03\\x02\\x02\\x02\\x02!\\x03\\x02\\x02\\x02\\x02#\\x03\", \"\\x02\\x02\\x02\\x02%\\x03\\x02\\x02\\x02\\x02'\\x03\\x02\", \"\\x02\\x02\\x02)\\x03\\x02\\x02\\x02\\x02+\\x03\\x02\\x02\", \"\\x02\\x02-\\x03\\x02\\x02\\x02\\x02/\\x03\\x02\\x02\\x02\", \"\\x021\\x03\\x02\\x02\\x02\\x023\\x03\\x02\\x02\\x02\\x02\", \"5\\x03\\x02\\x02\\x02\\x027\\x03\\x02\\x02\\x02\\x029\\x03\", \"\\x02\\x02\\x02\\x02;\\x03\\x02\\x02\\x02\\x02=\\x03\\x02\", \"\\x02\\x02\\x02?\\x03\\x02\\x02\\x02\\x02A\\x03\\x02\\x02\", \"\\x02\\x02C\\x03\\x02\\x02\\x02\\x02E\\x03\\x02\\x02\\x02\", \"\\x02G\\x03\\x02\\x02\\x02\\x02I\\x03\\x02\\x02\\x02\\x02\", \"K\\x03\\x02\\x02\\x02\\x02M\\x03\\x02\\x02\\x02\\x02O\\x03\", \"\\x02\\x02\\x02\\x02Q\\x03\\x02\\x02\\x02\\x02S\\x03\\x02\", \"\\x02\\x02\\x02U\\x03\\x02\\x02\\x02\\x02W\\x03\\x02\\x02\", \"\\x02\\x02k\\x03\\x02\\x02\\x02\\x02m\\x03\\x02\\x02\\x02\", \"\\x02o\\x03\\x02\\x02\\x02\\x02q\\x03\\x02\\x02\\x02\\x02\", \"s\\x03\\x02\\x02\\x02\\x02u\\x03\\x02\\x02\\x02\\x02w\\x03\", \"\\x02\\x02\\x02\\x02y\\x03\\x02\\x02\\x02\\x02{\\x03\\x02\", \"\\x02\\x02\\x02}\\x03\\x02\\x02\\x02\\x02\\x7F\\x03\\x02\", \"\\x02\\x02\\x02\\x81\\x03\\x02\\x02\\x02\\x02\\x83\\x03\\x02\", \"\\x02\\x02\\x02\\x85\\x03\\x02\\x02\\x02\\x02\\x87\\x03\\x02\", \"\\x02\\x02\\x02\\x89\\x03\\x02\\x02\\x02\\x02\\x8B\\x03\\x02\", \"\\x02\\x02\\x02\\x8D\\x03\\x02\\x02\\x02\\x02\\x8F\\x03\\x02\", \"\\x02\\x02\\x02\\x91\\x03\\x02\\x02\\x02\\x02\\x93\\x03\\x02\", \"\\x02\\x02\\x02\\x95\\x03\\x02\\x02\\x02\\x02\\x97\\x03\\x02\", \"\\x02\\x02\\x02\\x99\\x03\\x02\\x02\\x02\\x02\\x9B\\x03\\x02\", \"\\x02\\x02\\x02\\x9D\\x03\\x02\\x02\\x02\\x02\\x9F\\x03\\x02\", \"\\x02\\x02\\x02\\xA1\\x03\\x02\\x02\\x02\\x02\\xA3\\x03\\x02\", \"\\x02\\x02\\x02\\xA5\\x03\\x02\\x02\\x02\\x02\\xA7\\x03\\x02\", \"\\x02\\x02\\x02\\xA9\\x03\\x02\\x02\\x02\\x02\\xAB\\x03\\x02\", \"\\x02\\x02\\x02\\xAD\\x03\\x02\\x02\\x02\\x02\\xAF\\x03\\x02\", \"\\x02\\x02\\x02\\xB1\\x03\\x02\\x02\\x02\\x02\\xB3\\x03\\x02\", \"\\x02\\x02\\x02\\xB5\\x03\\x02\\x02\\x02\\x02\\xB7\\x03\\x02\", \"\\x02\\x02\\x02\\xB9\\x03\\x02\\x02\\x02\\x02\\xBB\\x03\\x02\", \"\\x02\\x02\\x02\\xBD\\x03\\x02\\x02\\x02\\x02\\xBF\\x03\\x02\", \"\\x02\\x02\\x02\\xC1\\x03\\x02\\x02\\x02\\x02\\xC3\\x03\\x02\", \"\\x02\\x02\\x02\\xC5\\x03\\x02\\x02\\x02\\x02\\xC7\\x03\\x02\", \"\\x02\\x02\\x02\\xC9\\x03\\x02\\x02\\x02\\x02\\xCB\\x03\\x02\", \"\\x02\\x02\\x02\\xCD\\x03\\x02\\x02\\x02\\x02\\xCF\\x03\\x02\", \"\\x02\\x02\\x02\\xD1\\x03\\x02\\x02\\x02\\x02\\xD3\\x03\\x02\", \"\\x02\\x02\\x02\\xD5\\x03\\x02\\x02\\x02\\x02\\xD7\\x03\\x02\", \"\\x02\\x02\\x02\\xD9\\x03\\x02\\x02\\x02\\x03\\xDB\\x03\\x02\", \"\\x02\\x02\\x05\\xE0\\x03\\x02\\x02\\x02\\x07\\xE2\\x03\\x02\", \"\\x02\\x02\\t\\xE5\\x03\\x02\\x02\\x02\\x0B\\xEA\\x03\\x02\", \"\\x02\\x02\\r\\xEF\\x03\\x02\\x02\\x02\\x0F\\xF4\\x03\\x02\", \"\\x02\\x02\\x11\\xF9\\x03\\x02\\x02\\x02\\x13\\xFE\\x03\\x02\", \"\\x02\\x02\\x15\\u0103\\x03\\x02\\x02\\x02\\x17\\u0105\\x03\\x02\", \"\\x02\\x02\\x19\\u0107\\x03\\x02\\x02\\x02\\x1B\\u0109\\x03\\x02\", \"\\x02\\x02\\x1D\\u010B\\x03\\x02\\x02\\x02\\x1F\\u010D\\x03\\x02\", \"\\x02\\x02!\\u0113\\x03\\x02\\x02\\x02#\\u0119\\x03\\x02\\x02\", \"\\x02%\\u011C\\x03\\x02\\x02\\x02'\\u011F\\x03\\x02\\x02\\x02\", \")\\u0121\\x03\\x02\\x02\\x02+\\u0123\\x03\\x02\\x02\\x02-\\u012B\", \"\\x03\\x02\\x02\\x02/\\u0134\\x03\\x02\\x02\\x021\\u013D\\x03\", \"\\x02\\x02\\x023\\u0145\\x03\\x02\\x02\\x025\\u014E\\x03\\x02\", \"\\x02\\x027\\u0157\\x03\\x02\\x02\\x029\\u0162\\x03\\x02\\x02\", \"\\x02;\\u016E\\x03\\x02\\x02\\x02=\\u0174\\x03\\x02\\x02\\x02\", \"?\\u017C\\x03\\x02\\x02\\x02A\\u0185\\x03\\x02\\x02\\x02C\\u0192\", \"\\x03\\x02\\x02\\x02E\\u019A\\x03\\x02\\x02\\x02G\\u01A2\\x03\", \"\\x02\\x02\\x02I\\u01AF\\x03\\x02\\x02\\x02K\\u01BB\\x03\\x02\", \"\\x02\\x02M\\u01C8\\x03\\x02\\x02\\x02O\\u01D1\\x03\\x02\\x02\", \"\\x02Q\\u01D7\\x03\\x02\\x02\\x02S\\u01DD\\x03\\x02\\x02\\x02\", \"U\\u01E3\\x03\\x02\\x02\\x02W\\u01E9\\x03\\x02\\x02\\x02Y\\u01F2\", \"\\x03\\x02\\x02\\x02[\\u01F7\\x03\\x02\\x02\\x02]\\u01F9\\x03\", \"\\x02\\x02\\x02_\\u01FB\\x03\\x02\\x02\\x02a\\u01FD\\x03\\x02\", \"\\x02\\x02c\\u01FF\\x03\\x02\\x02\\x02e\\u0201\\x03\\x02\\x02\", \"\\x02g\\u0203\\x03\\x02\\x02\\x02i\\u0209\\x03\\x02\\x02\\x02\", \"k\\u020B\\x03\\x02\\x02\\x02m\\u020D\\x03\\x02\\x02\\x02o\\u020F\", \"\\x03\\x02\\x02\\x02q\\u0213\\x03\\x02\\x02\\x02s\\u0216\\x03\", \"\\x02\\x02\\x02u\\u0219\\x03\\x02\\x02\\x02w\\u021D\\x03\\x02\", \"\\x02\\x02y\\u0220\\x03\\x02\\x02\\x02{\\u0223\\x03\\x02\\x02\", \"\\x02}\\u0225\\x03\\x02\\x02\\x02\\x7F\\u0228\\x03\\x02\\x02\", \"\\x02\\x81\\u022B\\x03\\x02\\x02\\x02\\x83\\u022E\\x03\\x02\\x02\", \"\\x02\\x85\\u0230\\x03\\x02\\x02\\x02\\x87\\u0232\\x03\\x02\\x02\", \"\\x02\\x89\\u0235\\x03\\x02\\x02\\x02\\x8B\\u0238\\x03\\x02\\x02\", \"\\x02\\x8D\\u023A\\x03\\x02\\x02\\x02\\x8F\\u023C\\x03\\x02\\x02\", \"\\x02\\x91\\u0240\\x03\\x02\\x02\\x02\\x93\\u0243\\x03\\x02\\x02\", \"\\x02\\x95\\u0247\\x03\\x02\\x02\\x02\\x97\\u024A\\x03\\x02\\x02\", \"\\x02\\x99\\u024D\\x03\\x02\\x02\\x02\\x9B\\u024F\\x03\\x02\\x02\", \"\\x02\\x9D\\u0252\\x03\\x02\\x02\\x02\\x9F\\u0254\\x03\\x02\\x02\", \"\\x02\\xA1\\u0256\\x03\\x02\\x02\\x02\\xA3\\u0258\\x03\\x02\\x02\", \"\\x02\\xA5\\u025B\\x03\\x02\\x02\\x02\\xA7\\u0261\\x03\\x02\\x02\", \"\\x02\\xA9\\u0263\\x03\\x02\\x02\\x02\\xAB\\u0268\\x03\\x02\\x02\", \"\\x02\\xAD\\u026C\\x03\\x02\\x02\\x02\\xAF\\u026E\\x03\\x02\\x02\", \"\\x02\\xB1\\u0271\\x03\\x02\\x02\\x02\\xB3\\u0277\\x03\\x02\\x02\", \"\\x02\\xB5\\u0279\\x03\\x02\\x02\\x02\\xB7\\u027C\\x03\\x02\\x02\", \"\\x02\\xB9\\u0280\\x03\\x02\\x02\\x02\\xBB\\u0282\\x03\\x02\\x02\", \"\\x02\\xBD\\u028B\\x03\\x02\\x02\\x02\\xBF\\u0290\\x03\\x02\\x02\", \"\\x02\\xC1\\u0293\\x03\\x02\\x02\\x02\\xC3\\u029D\\x03\\x02\\x02\", \"\\x02\\xC5\\u029F\\x03\\x02\\x02\\x02\\xC7\\u02A2\\x03\\x02\\x02\", \"\\x02\\xC9\\u02A9\\x03\\x02\\x02\\x02\\xCB\\u02AC\\x03\\x02\\x02\", \"\\x02\\xCD\\u02B1\\x03\\x02\\x02\\x02\\xCF\\u02B8\\x03\\x02\\x02\", \"\\x02\\xD1\\u02BF\\x03\\x02\\x02\\x02\\xD3\\u02C7\\x03\\x02\\x02\", \"\\x02\\xD5\\u02D0\\x03\\x02\\x02\\x02\\xD7\\u02D6\\x03\\x02\\x02\", \"\\x02\\xD9\\u02DF\\x03\\x02\\x02\\x02\\xDB\\xDC\\x07v\\x02\", \"\\x02\\xDC\\xDD\\x07r\\x02\\x02\\xDD\\xDE\\x07k\\x02\\x02\", \"\\xDE\\xDF\\x07*\\x02\\x02\\xDF\\x04\\x03\\x02\\x02\\x02\", \"\\xE0\\xE1\\x07.\\x02\\x02\\xE1\\x06\\x03\\x02\\x02\\x02\", \"\\xE2\\xE3\\x07+\\x02\\x02\\xE3\\xE4\\x070\\x02\\x02\\xE4\", \"\\b\\x03\\x02\\x02\\x02\\xE5\\xE6\\x07v\\x02\\x02\\xE6\\xE7\", \"\\x07j\\x02\\x02\\xE7\\xE8\\x07h\\x02\\x02\\xE8\\xE9\\x07\", \"*\\x02\\x02\\xE9\\n\\x03\\x02\\x02\\x02\\xEA\\xEB\\x07v\\x02\", \"\\x02\\xEB\\xEC\\x07h\\x02\\x02\\xEC\\xED\\x07z\\x02\\x02\", \"\\xED\\xEE\\x07*\\x02\\x02\\xEE\\f\\x03\\x02\\x02\\x02\\xEF\", \"\\xF0\\x07v\\x02\\x02\\xF0\\xF1\\x07h\\x02\\x02\\xF1\\xF2\", \"\\x07h\\x02\\x02\\xF2\\xF3\\x07*\\x02\\x02\\xF3\\x0E\\x03\", \"\\x02\\x02\\x02\\xF4\\xF5\\x07v\\x02\\x02\\xF5\\xF6\\x07\", \"e\\x02\\x02\\xF6\\xF7\\x07h\\x02\\x02\\xF7\\xF8\\x07*\\x02\", \"\\x02\\xF8\\x10\\x03\\x02\\x02\\x02\\xF9\\xFA\\x07h\\x02\", \"\\x02\\xFA\\xFB\\x07q\\x02\\x02\\xFB\\xFC\\x07h\\x02\\x02\", \"\\xFC\\xFD\\x07*\\x02\\x02\\xFD\\x12\\x03\\x02\\x02\\x02\", \"\\xFE\\xFF\\x07e\\x02\\x02\\xFF\\u0100\\x07p\\x02\\x02\\u0100\", \"\\u0101\\x07h\\x02\\x02\\u0101\\u0102\\x07*\\x02\\x02\\u0102\\x14\", \"\\x03\\x02\\x02\\x02\\u0103\\u0104\\x07*\\x02\\x02\\u0104\\x16\", \"\\x03\\x02\\x02\\x02\\u0105\\u0106\\x07+\\x02\\x02\\u0106\\x18\", \"\\x03\\x02\\x02\\x02\\u0107\\u0108\\x07]\\x02\\x02\\u0108\\x1A\", \"\\x03\\x02\\x02\\x02\\u0109\\u010A\\x07_\\x02\\x02\\u010A\\x1C\", \"\\x03\\x02\\x02\\x02\\u010B\\u010C\\x07<\\x02\\x02\\u010C\\x1E\", \"\\x03\\x02\\x02\\x02\\u010D\\u010E\\x07&\\x02\\x02\\u010E\\u010F\", \"\\x07k\\x02\\x02\\u010F\\u0110\\x07v\\x02\\x02\\u0110\\u0111\\x07\", \"g\\x02\\x02\\u0111\\u0112\\x07*\\x02\\x02\\u0112 \\x03\\x02\\x02\", \"\\x02\\u0113\\u0114\\x07&\\x02\\x02\\u0114\\u0115\\x07n\\x02\\x02\", \"\\u0115\\u0116\\x07g\\x02\\x02\\u0116\\u0117\\x07v\\x02\\x02\\u0117\", \"\\u0118\\x07*\\x02\\x02\\u0118\\\"\\x03\\x02\\x02\\x02\\u0119\\u011A\", \"\\x07]\\x02\\x02\\u011A\\u011B\\x07_\\x02\\x02\\u011B$\\x03\\x02\", \"\\x02\\x02\\u011C\\u011D\\x07}\\x02\\x02\\u011D\\u011E\\x07\\x7F\", \"\\x02\\x02\\u011E&\\x03\\x02\\x02\\x02\\u011F\\u0120\\x07}\\x02\", \"\\x02\\u0120(\\x03\\x02\\x02\\x02\\u0121\\u0122\\x07\\x7F\\x02\", \"\\x02\\u0122*\\x03\\x02\\x02\\x02\\u0123\\u0124\\x07&\\x02\\x02\", \"\\u0124\\u0125\\x07k\\x02\\x02\\u0125\\u0126\\x07v\\x02\\x02\\u0126\", \"\\u0127\\x07g\\x02\\x02\\u0127\\u0128\\x07a\\x02\\x02\\u0128\\u0129\", \"\\x07h\\x02\\x02\\u0129\\u012A\\x07*\\x02\\x02\\u012A,\\x03\\x02\", \"\\x02\\x02\\u012B\\u012C\\x07&\\x02\\x02\\u012C\\u012D\\x07n\\x02\", \"\\x02\\u012D\\u012E\\x07g\\x02\\x02\\u012E\\u012F\\x07v\\x02\\x02\", \"\\u012F\\u0130\\x07a\\x02\\x02\\u0130\\u0131\\x07v\\x02\\x02\\u0131\", \"\\u0132\\x07h\\x02\\x02\\u0132\\u0133\\x07*\\x02\\x02\\u0133.\\x03\", \"\\x02\\x02\\x02\\u0134\\u0135\\x07&\\x02\\x02\\u0135\\u0136\\x07\", \"n\\x02\\x02\\u0136\\u0137\\x07g\\x02\\x02\\u0137\\u0138\\x07v\\x02\", \"\\x02\\u0138\\u0139\\x07a\\x02\\x02\\u0139\\u013A\\x07h\\x02\\x02\", \"\\u013A\\u013B\\x07h\\x02\\x02\\u013B\\u013C\\x07*\\x02\\x02\\u013C\", \"0\\x03\\x02\\x02\\x02\\u013D\\u013E\\x07&\\x02\\x02\\u013E\\u013F\", \"\\x07k\\x02\\x02\\u013F\\u0140\\x07v\\x02\\x02\\u0140\\u0141\\x07\", \"g\\x02\\x02\\u0141\\u0142\\x07a\\x02\\x02\\u0142\\u0143\\x07v\\x02\", \"\\x02\\u0143\\u0144\\x07*\\x02\\x02\\u01442\\x03\\x02\\x02\\x02\", \"\\u0145\\u0146\\x07&\\x02\\x02\\u0146\\u0147\\x07n\\x02\\x02\\u0147\", \"\\u0148\\x07g\\x02\\x02\\u0148\\u0149\\x07v\\x02\\x02\\u0149\\u014A\", \"\\x07a\\x02\\x02\\u014A\\u014B\\x07h\\x02\\x02\\u014B\\u014C\\x07\", \"v\\x02\\x02\\u014C\\u014D\\x07*\\x02\\x02\\u014D4\\x03\\x02\\x02\", \"\\x02\\u014E\\u014F\\x07&\\x02\\x02\\u014F\\u0150\\x07n\\x02\\x02\", \"\\u0150\\u0151\\x07g\\x02\\x02\\u0151\\u0152\\x07v\\x02\\x02\\u0152\", \"\\u0153\\x07a\\x02\\x02\\u0153\\u0154\\x07v\\x02\\x02\\u0154\\u0155\", \"\\x07v\\x02\\x02\\u0155\\u0156\\x07*\\x02\\x02\\u01566\\x03\\x02\", \"\\x02\\x02\\u0157\\u0158\\x07k\\x02\\x02\\u0158\\u0159\\x07p\\x02\", \"\\x02\\u0159\\u015A\\x07h\\x02\\x02\\u015A\\u015B\\x07g\\x02\\x02\", \"\\u015B\\u015C\\x07t\\x02\\x02\\u015C\\u015D\\x07g\\x02\\x02\\u015D\", \"\\u015E\\x07p\\x02\\x02\\u015E\\u015F\\x07e\\x02\\x02\\u015F\\u0160\", \"\\x07g\\x02\\x02\\u0160\\u0161\\x07*\\x02\\x02\\u01618\\x03\\x02\", \"\\x02\\x02\\u0162\\u0163\\x07k\\x02\\x02\\u0163\\u0164\\x07p\\x02\", \"\\x02\\u0164\\u0165\\x07v\\x02\\x02\\u0165\\u0166\\x07t\\x02\\x02\", \"\\u0166\\u0167\\x07q\\x02\\x02\\u0167\\u0168\\x07f\\x02\\x02\\u0168\", \"\\u0169\\x07w\\x02\\x02\\u0169\\u016A\\x07e\\x02\\x02\\u016A\\u016B\", \"\\x07g\\x02\\x02\\u016B\\u016C\\x07f\\x02\\x02\\u016C\\u016D\\x07\", \"*\\x02\\x02\\u016D:\\x03\\x02\\x02\\x02\\u016E\\u016F\\x07h\\x02\", \"\\x02\\u016F\\u0170\\x07k\\x02\\x02\\u0170\\u0171\\x07n\\x02\\x02\", \"\\u0171\\u0172\\x07g\\x02\\x02\\u0172\\u0173\\x07*\\x02\\x02\\u0173\", \"<\\x03\\x02\\x02\\x02\\u0174\\u0175\\x07v\\x02\\x02\\u0175\\u0176\", \"\\x07j\\x02\\x02\\u0176\\u0177\\x07g\\x02\\x02\\u0177\\u0178\\x07\", \"q\\x02\\x02\\u0178\\u0179\\x07t\\x02\\x02\\u0179\\u017A\\x07{\\x02\", \"\\x02\\u017A\\u017B\\x07*\\x02\\x02\\u017B>\\x03\\x02\\x02\\x02\", \"\\u017C\\u017D\\x07e\\x02\\x02\\u017D\\u017E\\x07t\\x02\\x02\\u017E\", \"\\u017F\\x07g\\x02\\x02\\u017F\\u0180\\x07c\\x02\\x02\\u0180\\u0181\", \"\\x07v\\x02\\x02\\u0181\\u0182\\x07q\\x02\\x02\\u0182\\u0183\\x07\", \"t\\x02\\x02\\u0183\\u0184\\x07*\\x02\\x02\\u0184@\\x03\\x02\\x02\", \"\\x02\\u0185\\u0186\\x07f\\x02\\x02\\u0186\\u0187\\x07g\\x02\\x02\", \"\\u0187\\u0188\\x07u\\x02\\x02\\u0188\\u0189\\x07e\\x02\\x02\\u0189\", \"\\u018A\\x07t\\x02\\x02\\u018A\\u018B\\x07k\\x02\\x02\\u018B\\u018C\", \"\\x07r\\x02\\x02\\u018C\\u018D\\x07v\\x02\\x02\\u018D\\u018E\\x07\", \"k\\x02\\x02\\u018E\\u018F\\x07q\\x02\\x02\\u018F\\u0190\\x07p\\x02\", \"\\x02\\u0190\\u0191\\x07*\\x02\\x02\\u0191B\\x03\\x02\\x02\\x02\", \"\\u0192\\u0193\\x07k\\x02\\x02\\u0193\\u0194\\x07s\\x02\\x02\\u0194\", \"\\u0195\\x07w\\x02\\x02\\u0195\\u0196\\x07q\\x02\\x02\\u0196\\u0197\", \"\\x07v\\x02\\x02\\u0197\\u0198\\x07g\\x02\\x02\\u0198\\u0199\\x07\", \"*\\x02\\x02\\u0199D\\x03\\x02\\x02\\x02\\u019A\\u019B\\x07u\\x02\", \"\\x02\\u019B\\u019C\\x07v\\x02\\x02\\u019C\\u019D\\x07c\\x02\\x02\", \"\\u019D\\u019E\\x07v\\x02\\x02\\u019E\\u019F\\x07w\\x02\\x02\\u019F\", \"\\u01A0\\x07u\\x02\\x02\\u01A0\\u01A1\\x07*\\x02\\x02\\u01A1F\\x03\", \"\\x02\\x02\\x02\\u01A2\\u01A3\\x07c\\x02\\x02\\u01A3\\u01A4\\x07\", \"u\\x02\\x02\\u01A4\\u01A5\\x07u\\x02\\x02\\u01A5\\u01A6\\x07w\\x02\", \"\\x02\\u01A6\\u01A7\\x07o\\x02\\x02\\u01A7\\u01A8\\x07r\\x02\\x02\", \"\\u01A8\\u01A9\\x07v\\x02\\x02\\u01A9\\u01AA\\x07k\\x02\\x02\\u01AA\", \"\\u01AB\\x07q\\x02\\x02\\u01AB\\u01AC\\x07p\\x02\\x02\\u01AC\\u01AD\", \"\\x07u\\x02\\x02\\u01AD\\u01AE\\x07*\\x02\\x02\\u01AEH\\x03\\x02\", \"\\x02\\x02\\u01AF\\u01B0\\x07t\\x02\\x02\\u01B0\\u01B1\\x07g\\x02\", \"\\x02\\u01B1\\u01B2\\x07h\\x02\\x02\\u01B2\\u01B3\\x07w\\x02\\x02\", \"\\u01B3\\u01B4\\x07v\\x02\\x02\\u01B4\\u01B5\\x07c\\x02\\x02\\u01B5\", \"\\u01B6\\x07v\\x02\\x02\\u01B6\\u01B7\\x07k\\x02\\x02\\u01B7\\u01B8\", \"\\x07q\\x02\\x02\\u01B8\\u01B9\\x07p\\x02\\x02\\u01B9\\u01BA\\x07\", \"*\\x02\\x02\\u01BAJ\\x03\\x02\\x02\\x02\\u01BB\\u01BC\\x07p\\x02\", \"\\x02\\u01BC\\u01BD\\x07g\\x02\\x02\\u01BD\\u01BE\\x07y\\x02\\x02\", \"\\u01BE\\u01BF\\x07a\\x02\\x02\\u01BF\\u01C0\\x07u\\x02\\x02\\u01C0\", \"\\u01C1\\x07{\\x02\\x02\\u01C1\\u01C2\\x07o\\x02\\x02\\u01C2\\u01C3\", \"\\x07d\\x02\\x02\\u01C3\\u01C4\\x07q\\x02\\x02\\u01C4\\u01C5\\x07\", \"n\\x02\\x02\\u01C5\\u01C6\\x07u\\x02\\x02\\u01C6\\u01C7\\x07*\\x02\", \"\\x02\\u01C7L\\x03\\x02\\x02\\x02\\u01C8\\u01C9\\x07k\\x02\\x02\", \"\\u01C9\\u01CA\\x07p\\x02\\x02\\u01CA\\u01CB\\x07e\\x02\\x02\\u01CB\", \"\\u01CC\\x07n\\x02\\x02\\u01CC\\u01CD\\x07w\\x02\\x02\\u01CD\\u01CE\", \"\\x07f\\x02\\x02\\u01CE\\u01CF\\x07g\\x02\\x02\\u01CF\\u01D0\\x07\", \"*\\x02\\x02\\u01D0N\\x03\\x02\\x02\\x02\\u01D1\\u01D2\\x07&\\x02\", \"\\x02\\u01D2\\u01D3\\x07v\\x02\\x02\\u01D3\\u01D4\\x07j\\x02\\x02\", \"\\u01D4\\u01D5\\x07h\\x02\\x02\\u01D5\\u01D6\\x07*\\x02\\x02\\u01D6\", \"P\\x03\\x02\\x02\\x02\\u01D7\\u01D8\\x07&\\x02\\x02\\u01D8\\u01D9\", \"\\x07v\\x02\\x02\\u01D9\\u01DA\\x07h\\x02\\x02\\u01DA\\u01DB\\x07\", \"h\\x02\\x02\\u01DB\\u01DC\\x07*\\x02\\x02\\u01DCR\\x03\\x02\\x02\", \"\\x02\\u01DD\\u01DE\\x07&\\x02\\x02\\u01DE\\u01DF\\x07h\\x02\\x02\", \"\\u01DF\\u01E0\\x07q\\x02\\x02\\u01E0\\u01E1\\x07h\\x02\\x02\\u01E1\", \"\\u01E2\\x07*\\x02\\x02\\u01E2T\\x03\\x02\\x02\\x02\\u01E3\\u01E4\", \"\\x07&\\x02\\x02\\u01E4\\u01E5\\x07e\\x02\\x02\\u01E5\\u01E6\\x07\", \"p\\x02\\x02\\u01E6\\u01E7\\x07h\\x02\\x02\\u01E7\\u01E8\\x07*\\x02\", \"\\x02\\u01E8V\\x03\\x02\\x02\\x02\\u01E9\\u01EA\\x07&\\x02\\x02\", \"\\u01EA\\u01EB\\x07h\\x02\\x02\\u01EB\\u01EC\\x07q\\x02\\x02\\u01EC\", \"\\u01ED\\x07v\\x02\\x02\\u01ED\\u01EE\\x07*\\x02\\x02\\u01EEX\\x03\", \"\\x02\\x02\\x02\\u01EF\\u01F3\\t\\x02\\x02\\x02\\u01F0\\u01F1\\x07\", \"^\\x02\\x02\\u01F1\\u01F3\\t\\x03\\x02\\x02\\u01F2\\u01EF\\x03\\x02\", \"\\x02\\x02\\u01F2\\u01F0\\x03\\x02\\x02\\x02\\u01F3Z\\x03\\x02\", \"\\x02\\x02\\u01F4\\u01F8\\t\\x04\\x02\\x02\\u01F5\\u01F6\\x07^\\x02\", \"\\x02\\u01F6\\u01F8\\t\\x05\\x02\\x02\\u01F7\\u01F4\\x03\\x02\\x02\", \"\\x02\\u01F7\\u01F5\\x03\\x02\\x02\\x02\\u01F8\\\\\\x03\\x02\\x02\", \"\\x02\\u01F9\\u01FA\\t\\x06\\x02\\x02\\u01FA^\\x03\\x02\\x02\\x02\", \"\\u01FB\\u01FC\\t\\x07\\x02\\x02\\u01FC`\\x03\\x02\\x02\\x02\\u01FD\", \"\\u01FE\\t\\b\\x02\\x02\\u01FEb\\x03\\x02\\x02\\x02\\u01FF\\u0200\\t\", \"\\t\\x02\\x02\\u0200d\\x03\\x02\\x02\\x02\\u0201\\u0202\\t\\n\\x02\", \"\\x02\\u0202f\\x03\\x02\\x02\\x02\\u0203\\u0204\\t\\x0B\\x02\\x02\", \"\\u0204h\\x03\\x02\\x02\\x02\\u0205\\u020A\\x05e3\\x02\\u0206\\u020A\", \"\\x05g4\\x02\\u0207\\u020A\\x05c2\\x02\\u0208\\u020A\\x07a\\x02\\x02\", \"\\u0209\\u0205\\x03\\x02\\x02\\x02\\u0209\\u0206\\x03\\x02\\x02\\x02\", \"\\u0209\\u0207\\x03\\x02\\x02\\x02\\u0209\\u0208\\x03\\x02\\x02\\x02\", \"\\u020Aj\\x03\\x02\\x02\\x02\\u020B\\u020C\\x07~\\x02\\x02\\u020C\", \"l\\x03\\x02\\x02\\x02\\u020D\\u020E\\x07(\\x02\\x02\\u020En\\x03\", \"\\x02\\x02\\x02\\u020F\\u0210\\x07>\\x02\\x02\\u0210\\u0211\\x07\", \"?\\x02\\x02\\u0211\\u0212\\x07@\\x02\\x02\\u0212p\\x03\\x02\\x02\", \"\\x02\\u0213\\u0214\\x07?\\x02\\x02\\u0214\\u0215\\x07@\\x02\\x02\", \"\\u0215r\\x03\\x02\\x02\\x02\\u0216\\u0217\\x07>\\x02\\x02\\u0217\", \"\\u0218\\x07?\\x02\\x02\\u0218t\\x03\\x02\\x02\\x02\\u0219\\u021A\", \"\\x07>\\x02\\x02\\u021A\\u021B\\x07\\x80\\x02\\x02\\u021B\\u021C\", \"\\x07@\\x02\\x02\\u021Cv\\x03\\x02\\x02\\x02\\u021D\\u021E\\x07\", \"\\x80\\x02\\x02\\u021E\\u021F\\x07~\\x02\\x02\\u021Fx\\x03\\x02\", \"\\x02\\x02\\u0220\\u0221\\x07\\x80\\x02\\x02\\u0221\\u0222\\x07(\", \"\\x02\\x02\\u0222z\\x03\\x02\\x02\\x02\\u0223\\u0224\\x07\\x80\", \"\\x02\\x02\\u0224|\\x03\\x02\\x02\\x02\\u0225\\u0226\\x07#\\x02\", \"\\x02\\u0226\\u0227\\x07#\\x02\\x02\\u0227~\\x03\\x02\\x02\\x02\", \"\\u0228\\u0229\\x07#\\x02\\x02\\u0229\\u022A\\x07@\\x02\\x02\\u022A\", \"\\x80\\x03\\x02\\x02\\x02\\u022B\\u022C\\x07#\\x02\\x02\\u022C\", \"\\u022D\\x07?\\x02\\x02\\u022D\\x82\\x03\\x02\\x02\\x02\\u022E\", \"\\u022F\\x07?\\x02\\x02\\u022F\\x84\\x03\\x02\\x02\\x02\\u0230\", \"\\u0231\\x07#\\x02\\x02\\u0231\\x86\\x03\\x02\\x02\\x02\\u0232\", \"\\u0233\\x07A\\x02\\x02\\u0233\\u0234\\x07A\\x02\\x02\\u0234\\x88\", \"\\x03\\x02\\x02\\x02\\u0235\\u0236\\x07A\\x02\\x02\\u0236\\u0237\", \"\\x07,\\x02\\x02\\u0237\\x8A\\x03\\x02\\x02\\x02\\u0238\\u0239\", \"\\x07A\\x02\\x02\\u0239\\x8C\\x03\\x02\\x02\\x02\\u023A\\u023B\", \"\\x07`\\x02\\x02\\u023B\\x8E\\x03\\x02\\x02\\x02\\u023C\\u023D\", \"\\x07B\\x02\\x02\\u023D\\u023E\\x07B\\x02\\x02\\u023E\\u023F\\x07\", \"-\\x02\\x02\\u023F\\x90\\x03\\x02\\x02\\x02\\u0240\\u0241\\x07\", \"B\\x02\\x02\\u0241\\u0242\\x07-\\x02\\x02\\u0242\\x92\\x03\\x02\", \"\\x02\\x02\\u0243\\u0244\\x07B\\x02\\x02\\u0244\\u0245\\x07B\\x02\", \"\\x02\\u0245\\u0246\\x07/\\x02\\x02\\u0246\\x94\\x03\\x02\\x02\", \"\\x02\\u0247\\u0248\\x07B\\x02\\x02\\u0248\\u0249\\x07/\\x02\\x02\", \"\\u0249\\x96\\x03\\x02\\x02\\x02\\u024A\\u024B\\x07B\\x02\\x02\", \"\\u024B\\u024C\\x07?\\x02\\x02\\u024C\\x98\\x03\\x02\\x02\\x02\", \"\\u024D\\u024E\\x07B\\x02\\x02\\u024E\\x9A\\x03\\x02\\x02\\x02\", \"\\u024F\\u0250\\x07<\\x02\\x02\\u0250\\u0251\\x07?\\x02\\x02\\u0251\", \"\\x9C\\x03\\x02\\x02\\x02\\u0252\\u0253\\x07@\\x02\\x02\\u0253\", \"\\x9E\\x03\\x02\\x02\\x02\\u0254\\u0255\\x07,\\x02\\x02\\u0255\", \"\\xA0\\x03\\x02\\x02\\x02\\u0256\\u0257\\x07-\\x02\\x02\\u0257\", \"\\xA2\\x03\\x02\\x02\\x02\\u0258\\u0259\\x07>\\x02\\x02\\u0259\", \"\\u025A\\x07>\\x02\\x02\\u025A\\xA4\\x03\\x02\\x02\\x02\\u025B\", \"\\u025C\\x07/\\x02\\x02\\u025C\\u025D\\x07/\\x02\\x02\\u025D\\u025E\", \"\\x07@\\x02\\x02\\u025E\\xA6\\x03\\x02\\x02\\x02\\u025F\\u0262\", \"\\x05\\xA9U\\x02\\u0260\\u0262\\x05\\xABV\\x02\\u0261\\u025F\\x03\", \"\\x02\\x02\\x02\\u0261\\u0260\\x03\\x02\\x02\\x02\\u0262\\xA8\\x03\", \"\\x02\\x02\\x02\\u0263\\u0264\\x05]/\\x02\\u0264\\u0265\\x05\\xAB\", \"V\\x02\\u0265\\xAA\\x03\\x02\\x02\\x02\\u0266\\u0269\\x05\\xBF\", \"`\\x02\\u0267\\u0269\\x05\\xBD_\\x02\\u0268\\u0266\\x03\\x02\\x02\", \"\\x02\\u0268\\u0267\\x03\\x02\\x02\\x02\\u0269\\xAC\\x03\\x02\\x02\", \"\\x02\\u026A\\u026D\\x05\\xAFX\\x02\\u026B\\u026D\\x05\\xB1Y\\x02\", \"\\u026C\\u026A\\x03\\x02\\x02\\x02\\u026C\\u026B\\x03\\x02\\x02\\x02\", \"\\u026D\\xAE\\x03\\x02\\x02\\x02\\u026E\\u026F\\x05]/\\x02\\u026F\", \"\\u0270\\x05\\xB1Y\\x02\\u0270\\xB0\\x03\\x02\\x02\\x02\\u0271\", \"\\u0272\\x05\\xB9]\\x02\\u0272\\u0273\\x071\\x02\\x02\\u0273\\u0274\", \"\\x05\\xBB^\\x02\\u0274\\xB2\\x03\\x02\\x02\\x02\\u0275\\u0278\", \"\\x05\\xB5[\\x02\\u0276\\u0278\\x05\\xB7\\\\\\x02\\u0277\\u0275\\x03\", \"\\x02\\x02\\x02\\u0277\\u0276\\x03\\x02\\x02\\x02\\u0278\\xB4\\x03\", \"\\x02\\x02\\x02\\u0279\\u027A\\x05]/\\x02\\u027A\\u027B\\x05\\xB7\", \"\\\\\\x02\\u027B\\xB6\\x03\\x02\\x02\\x02\\u027C\\u027D\\x05\\xB9\", \"]\\x02\\u027D\\xB8\\x03\\x02\\x02\\x02\\u027E\\u0281\\x072\\x02\", \"\\x02\\u027F\\u0281\\x05\\xBB^\\x02\\u0280\\u027E\\x03\\x02\\x02\", \"\\x02\\u0280\\u027F\\x03\\x02\\x02\\x02\\u0281\\xBA\\x03\\x02\\x02\", \"\\x02\\u0282\\u0286\\x05a1\\x02\\u0283\\u0285\\x05c2\\x02\\u0284\\u0283\", \"\\x03\\x02\\x02\\x02\\u0285\\u0288\\x03\\x02\\x02\\x02\\u0286\\u0284\", \"\\x03\\x02\\x02\\x02\\u0286\\u0287\\x03\\x02\\x02\\x02\\u0287\\xBC\", \"\\x03\\x02\\x02\\x02\\u0288\\u0286\\x03\\x02\\x02\\x02\\u0289\\u028C\", \"\\x05\\xB9]\\x02\\u028A\\u028C\\x05\\xBF`\\x02\\u028B\\u0289\\x03\", \"\\x02\\x02\\x02\\u028B\\u028A\\x03\\x02\\x02\\x02\\u028C\\u028D\\x03\", \"\\x02\\x02\\x02\\u028D\\u028E\\x05_0\\x02\\u028E\\u028F\\x05\\xC3\", \"b\\x02\\u028F\\xBE\\x03\\x02\\x02\\x02\\u0290\\u0291\\x05\\xB9\", \"]\\x02\\u0291\\u0292\\x05\\xC1a\\x02\\u0292\\xC0\\x03\\x02\\x02\", \"\\x02\\u0293\\u0294\\x070\\x02\\x02\\u0294\\u0298\\x05c2\\x02\\u0295\", \"\\u0297\\x05c2\\x02\\u0296\\u0295\\x03\\x02\\x02\\x02\\u0297\\u029A\", \"\\x03\\x02\\x02\\x02\\u0298\\u0296\\x03\\x02\\x02\\x02\\u0298\\u0299\", \"\\x03\\x02\\x02\\x02\\u0299\\xC2\\x03\\x02\\x02\\x02\\u029A\\u0298\", \"\\x03\\x02\\x02\\x02\\u029B\\u029E\\x05\\xC5c\\x02\\u029C\\u029E\", \"\\x05\\xC7d\\x02\\u029D\\u029B\\x03\\x02\\x02\\x02\\u029D\\u029C\", \"\\x03\\x02\\x02\\x02\\u029E\\xC4\\x03\\x02\\x02\\x02\\u029F\\u02A0\", \"\\x05]/\\x02\\u02A0\\u02A1\\x05\\xC7d\\x02\\u02A1\\xC6\\x03\\x02\", \"\\x02\\x02\\u02A2\\u02A6\\x05c2\\x02\\u02A3\\u02A5\\x05c2\\x02\\u02A4\", \"\\u02A3\\x03\\x02\\x02\\x02\\u02A5\\u02A8\\x03\\x02\\x02\\x02\\u02A6\", \"\\u02A4\\x03\\x02\\x02\\x02\\u02A6\\u02A7\\x03\\x02\\x02\\x02\\u02A7\", \"\\xC8\\x03\\x02\\x02\\x02\\u02A8\\u02A6\\x03\\x02\\x02\\x02\\u02A9\", \"\\u02AA\\x07&\\x02\\x02\\u02AA\\u02AB\\x05\\xCFh\\x02\\u02AB\\xCA\", \"\\x03\\x02\\x02\\x02\\u02AC\\u02AD\\x07&\\x02\\x02\\u02AD\\u02AE\", \"\\x07&\\x02\\x02\\u02AE\\u02AF\\x03\\x02\\x02\\x02\\u02AF\\u02B0\", \"\\x05\\xCFh\\x02\\u02B0\\xCC\\x03\\x02\\x02\\x02\\u02B1\\u02B5\", \"\\x05g4\\x02\\u02B2\\u02B4\\x05i5\\x02\\u02B3\\u02B2\\x03\\x02\\x02\", \"\\x02\\u02B4\\u02B7\\x03\\x02\\x02\\x02\\u02B5\\u02B3\\x03\\x02\\x02\", \"\\x02\\u02B5\\u02B6\\x03\\x02\\x02\\x02\\u02B6\\xCE\\x03\\x02\\x02\", \"\\x02\\u02B7\\u02B5\\x03\\x02\\x02\\x02\\u02B8\\u02BC\\x05e3\\x02\", \"\\u02B9\\u02BB\\x05i5\\x02\\u02BA\\u02B9\\x03\\x02\\x02\\x02\\u02BB\", \"\\u02BE\\x03\\x02\\x02\\x02\\u02BC\\u02BA\\x03\\x02\\x02\\x02\\u02BC\", \"\\u02BD\\x03\\x02\\x02\\x02\\u02BD\\xD0\\x03\\x02\\x02\\x02\\u02BE\", \"\\u02BC\\x03\\x02\\x02\\x02\\u02BF\\u02C1\\x07)\\x02\\x02\\u02C0\", \"\\u02C2\\x05[.\\x02\\u02C1\\u02C0\\x03\\x02\\x02\\x02\\u02C2\\u02C3\", \"\\x03\\x02\\x02\\x02\\u02C3\\u02C1\\x03\\x02\\x02\\x02\\u02C3\\u02C4\", \"\\x03\\x02\\x02\\x02\\u02C4\\u02C5\\x03\\x02\\x02\\x02\\u02C5\\u02C6\", \"\\x07)\\x02\\x02\\u02C6\\xD2\\x03\\x02\\x02\\x02\\u02C7\\u02C9\", \"\\x07$\\x02\\x02\\u02C8\\u02CA\\x05Y-\\x02\\u02C9\\u02C8\\x03\\x02\", \"\\x02\\x02\\u02CA\\u02CB\\x03\\x02\\x02\\x02\\u02CB\\u02C9\\x03\\x02\", \"\\x02\\x02\\u02CB\\u02CC\\x03\\x02\\x02\\x02\\u02CC\\u02CD\\x03\\x02\", \"\\x02\\x02\\u02CD\\u02CE\\x07$\\x02\\x02\\u02CE\\xD4\\x03\\x02\", \"\\x02\\x02\\u02CF\\u02D1\\t\\f\\x02\\x02\\u02D0\\u02CF\\x03\\x02\\x02\", \"\\x02\\u02D1\\u02D2\\x03\\x02\\x02\\x02\\u02D2\\u02D0\\x03\\x02\\x02\", \"\\x02\\u02D2\\u02D3\\x03\\x02\\x02\\x02\\u02D3\\u02D4\\x03\\x02\\x02\", \"\\x02\\u02D4\\u02D5\\bk\\x02\\x02\\u02D5\\xD6\\x03\\x02\\x02\\x02\", \"\\u02D6\\u02DA\\x07'\\x02\\x02\\u02D7\\u02D9\\n\\r\\x02\\x02\\u02D8\\u02D7\", \"\\x03\\x02\\x02\\x02\\u02D9\\u02DC\\x03\\x02\\x02\\x02\\u02DA\\u02D8\", \"\\x03\\x02\\x02\\x02\\u02DA\\u02DB\\x03\\x02\\x02\\x02\\u02DB\\u02DD\", \"\\x03\\x02\\x02\\x02\\u02DC\\u02DA\\x03\\x02\\x02\\x02\\u02DD\\u02DE\", \"\\bl\\x02\\x02\\u02DE\\xD8\\x03\\x02\\x02\\x02\\u02DF\\u02E0\\x07\", \"1\\x02\\x02\\u02E0\\u02E1\\x07,\\x02\\x02\\u02E1\\u02E5\\x03\\x02\", \"\\x02\\x02\\u02E2\\u02E4\\x0B\\x02\\x02\\x02\\u02E3\\u02E2\\x03\\x02\", \"\\x02\\x02\\u02E4\\u02E7\\x03\\x02\\x02\\x02\\u02E5\\u02E6\\x03\\x02\", \"\\x02\\x02\\u02E5\\u02E3\\x03\\x02\\x02\\x02\\u02E6\\u02E8\\x03\\x02\", \"\\x02\\x02\\u02E7\\u02E5\\x03\\x02\\x02\\x02\\u02E8\\u02E9\\x07,\", \"\\x02\\x02\\u02E9\\u02EA\\x071\\x02\\x02\\u02EA\\u02EB\\x03\\x02\", \"\\x02\\x02\\u02EB\\u02EC\\bm\\x02\\x02\\u02EC\\xDA\\x03\\x02\\x02\", \"\\x02\\x17\\x02\\u01F2\\u01F7\\u0209\\u0261\\u0268\\u026C\\u0277\\u0280\\u0286\", \"\\u028B\\u0298\\u029D\\u02A6\\u02B5\\u02BC\\u02C3\\u02CB\\u02D2\\u02DA\\u02E5\\x03\", \"\\b\\x02\\x02\"].join(\"\");\nvar atn = new _antlr[\"default\"].atn.ATNDeserializer().deserialize(serializedATN);\nvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n  return new _antlr[\"default\"].dfa.DFA(ds, index);\n});\n\nvar tptp_v7_0_0_0Lexer = /*#__PURE__*/function (_antlr4$Lexer) {\n  _inherits(tptp_v7_0_0_0Lexer, _antlr4$Lexer);\n\n  var _super = _createSuper(tptp_v7_0_0_0Lexer);\n\n  function tptp_v7_0_0_0Lexer(input) {\n    var _this;\n\n    _classCallCheck(this, tptp_v7_0_0_0Lexer);\n\n    _this = _super.call(this, input);\n    _this._interp = new _antlr[\"default\"].atn.LexerATNSimulator(_assertThisInitialized(_this), atn, decisionsToDFA, new _antlr[\"default\"].PredictionContextCache());\n    return _this;\n  }\n\n  _createClass(tptp_v7_0_0_0Lexer, [{\n    key: \"atn\",\n    get: function get() {\n      return atn;\n    }\n  }]);\n\n  return tptp_v7_0_0_0Lexer;\n}(_antlr[\"default\"].Lexer);\n\nexports[\"default\"] = tptp_v7_0_0_0Lexer;\n\n_defineProperty(tptp_v7_0_0_0Lexer, \"grammarFileName\", \"tptp_v7_0_0_0.g4\");\n\n_defineProperty(tptp_v7_0_0_0Lexer, \"channelNames\", [\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"]);\n\n_defineProperty(tptp_v7_0_0_0Lexer, \"modeNames\", [\"DEFAULT_MODE\"]);\n\n_defineProperty(tptp_v7_0_0_0Lexer, \"literalNames\", [null, \"'tpi('\", \"','\", \"').'\", \"'thf('\", \"'tfx('\", \"'tff('\", \"'tcf('\", \"'fof('\", \"'cnf('\", \"'('\", \"')'\", \"'['\", \"']'\", \"':'\", \"'$ite('\", \"'$let('\", \"'[]'\", \"'{}'\", \"'{'\", \"'}'\", \"'$ite_f('\", \"'$let_tf('\", \"'$let_ff('\", \"'$ite_t('\", \"'$let_ft('\", \"'$let_tt('\", \"'inference('\", \"'introduced('\", \"'file('\", \"'theory('\", \"'creator('\", \"'description('\", \"'iquote('\", \"'status('\", \"'assumptions('\", \"'refutation('\", \"'new_symbols('\", \"'include('\", \"'$thf('\", \"'$tff('\", \"'$fof('\", \"'$cnf('\", \"'$fot('\", \"'|'\", \"'&'\", \"'<=>'\", \"'=>'\", \"'<='\", \"'<~>'\", \"'~|'\", \"'~&'\", \"'~'\", \"'!!'\", \"'!>'\", \"'!='\", \"'='\", \"'!'\", \"'??'\", \"'?*'\", \"'?'\", \"'^'\", \"'@@+'\", \"'@+'\", \"'@@-'\", \"'@-'\", \"'@='\", \"'@'\", \"':='\", \"'>'\", \"'*'\", \"'+'\", \"'<<'\", \"'-->'\"]);\n\n_defineProperty(tptp_v7_0_0_0Lexer, \"symbolicNames\", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, \"Or\", \"And\", \"Iff\", \"Impl\", \"If\", \"Niff\", \"Nor\", \"Nand\", \"Not\", \"ForallComb\", \"TyForall\", \"Infix_inequality\", \"Infix_equality\", \"Forall\", \"ExistsComb\", \"TyExists\", \"Exists\", \"Lambda\", \"ChoiceComb\", \"Choice\", \"DescriptionComb\", \"Description\", \"EqComb\", \"App\", \"Assignment\", \"Arrow\", \"Star\", \"Plus\", \"Subtype_sign\", \"Gentzen_arrow\", \"Real\", \"Signed_real\", \"Unsigned_real\", \"Rational\", \"Signed_rational\", \"Unsigned_rational\", \"Integer\", \"Signed_integer\", \"Unsigned_integer\", \"Decimal\", \"Positive_decimal\", \"Decimal_exponent\", \"Decimal_fraction\", \"Dot_decimal\", \"Exp_integer\", \"Signed_exp_integer\", \"Unsigned_exp_integer\", \"Dollar_word\", \"Dollar_dollar_word\", \"Upper_word\", \"Lower_word\", \"Single_quoted\", \"Distinct_object\", \"WS\", \"Line_comment\", \"Block_comment\"]);\n\n_defineProperty(tptp_v7_0_0_0Lexer, \"ruleNames\", [\"T__0\", \"T__1\", \"T__2\", \"T__3\", \"T__4\", \"T__5\", \"T__6\", \"T__7\", \"T__8\", \"T__9\", \"T__10\", \"T__11\", \"T__12\", \"T__13\", \"T__14\", \"T__15\", \"T__16\", \"T__17\", \"T__18\", \"T__19\", \"T__20\", \"T__21\", \"T__22\", \"T__23\", \"T__24\", \"T__25\", \"T__26\", \"T__27\", \"T__28\", \"T__29\", \"T__30\", \"T__31\", \"T__32\", \"T__33\", \"T__34\", \"T__35\", \"T__36\", \"T__37\", \"T__38\", \"T__39\", \"T__40\", \"T__41\", \"T__42\", \"Do_char\", \"Sq_char\", \"Sign\", \"Exponent\", \"Non_zero_numeric\", \"Numeric\", \"Lower_alpha\", \"Upper_alpha\", \"Alpha_numeric\", \"Or\", \"And\", \"Iff\", \"Impl\", \"If\", \"Niff\", \"Nor\", \"Nand\", \"Not\", \"ForallComb\", \"TyForall\", \"Infix_inequality\", \"Infix_equality\", \"Forall\", \"ExistsComb\", \"TyExists\", \"Exists\", \"Lambda\", \"ChoiceComb\", \"Choice\", \"DescriptionComb\", \"Description\", \"EqComb\", \"App\", \"Assignment\", \"Arrow\", \"Star\", \"Plus\", \"Subtype_sign\", \"Gentzen_arrow\", \"Real\", \"Signed_real\", \"Unsigned_real\", \"Rational\", \"Signed_rational\", \"Unsigned_rational\", \"Integer\", \"Signed_integer\", \"Unsigned_integer\", \"Decimal\", \"Positive_decimal\", \"Decimal_exponent\", \"Decimal_fraction\", \"Dot_decimal\", \"Exp_integer\", \"Signed_exp_integer\", \"Unsigned_exp_integer\", \"Dollar_word\", \"Dollar_dollar_word\", \"Upper_word\", \"Lower_word\", \"Single_quoted\", \"Distinct_object\", \"WS\", \"Line_comment\", \"Block_comment\"]);\n\ntptp_v7_0_0_0Lexer.EOF = _antlr[\"default\"].Token.EOF;\ntptp_v7_0_0_0Lexer.T__0 = 1;\ntptp_v7_0_0_0Lexer.T__1 = 2;\ntptp_v7_0_0_0Lexer.T__2 = 3;\ntptp_v7_0_0_0Lexer.T__3 = 4;\ntptp_v7_0_0_0Lexer.T__4 = 5;\ntptp_v7_0_0_0Lexer.T__5 = 6;\ntptp_v7_0_0_0Lexer.T__6 = 7;\ntptp_v7_0_0_0Lexer.T__7 = 8;\ntptp_v7_0_0_0Lexer.T__8 = 9;\ntptp_v7_0_0_0Lexer.T__9 = 10;\ntptp_v7_0_0_0Lexer.T__10 = 11;\ntptp_v7_0_0_0Lexer.T__11 = 12;\ntptp_v7_0_0_0Lexer.T__12 = 13;\ntptp_v7_0_0_0Lexer.T__13 = 14;\ntptp_v7_0_0_0Lexer.T__14 = 15;\ntptp_v7_0_0_0Lexer.T__15 = 16;\ntptp_v7_0_0_0Lexer.T__16 = 17;\ntptp_v7_0_0_0Lexer.T__17 = 18;\ntptp_v7_0_0_0Lexer.T__18 = 19;\ntptp_v7_0_0_0Lexer.T__19 = 20;\ntptp_v7_0_0_0Lexer.T__20 = 21;\ntptp_v7_0_0_0Lexer.T__21 = 22;\ntptp_v7_0_0_0Lexer.T__22 = 23;\ntptp_v7_0_0_0Lexer.T__23 = 24;\ntptp_v7_0_0_0Lexer.T__24 = 25;\ntptp_v7_0_0_0Lexer.T__25 = 26;\ntptp_v7_0_0_0Lexer.T__26 = 27;\ntptp_v7_0_0_0Lexer.T__27 = 28;\ntptp_v7_0_0_0Lexer.T__28 = 29;\ntptp_v7_0_0_0Lexer.T__29 = 30;\ntptp_v7_0_0_0Lexer.T__30 = 31;\ntptp_v7_0_0_0Lexer.T__31 = 32;\ntptp_v7_0_0_0Lexer.T__32 = 33;\ntptp_v7_0_0_0Lexer.T__33 = 34;\ntptp_v7_0_0_0Lexer.T__34 = 35;\ntptp_v7_0_0_0Lexer.T__35 = 36;\ntptp_v7_0_0_0Lexer.T__36 = 37;\ntptp_v7_0_0_0Lexer.T__37 = 38;\ntptp_v7_0_0_0Lexer.T__38 = 39;\ntptp_v7_0_0_0Lexer.T__39 = 40;\ntptp_v7_0_0_0Lexer.T__40 = 41;\ntptp_v7_0_0_0Lexer.T__41 = 42;\ntptp_v7_0_0_0Lexer.T__42 = 43;\ntptp_v7_0_0_0Lexer.Or = 44;\ntptp_v7_0_0_0Lexer.And = 45;\ntptp_v7_0_0_0Lexer.Iff = 46;\ntptp_v7_0_0_0Lexer.Impl = 47;\ntptp_v7_0_0_0Lexer.If = 48;\ntptp_v7_0_0_0Lexer.Niff = 49;\ntptp_v7_0_0_0Lexer.Nor = 50;\ntptp_v7_0_0_0Lexer.Nand = 51;\ntptp_v7_0_0_0Lexer.Not = 52;\ntptp_v7_0_0_0Lexer.ForallComb = 53;\ntptp_v7_0_0_0Lexer.TyForall = 54;\ntptp_v7_0_0_0Lexer.Infix_inequality = 55;\ntptp_v7_0_0_0Lexer.Infix_equality = 56;\ntptp_v7_0_0_0Lexer.Forall = 57;\ntptp_v7_0_0_0Lexer.ExistsComb = 58;\ntptp_v7_0_0_0Lexer.TyExists = 59;\ntptp_v7_0_0_0Lexer.Exists = 60;\ntptp_v7_0_0_0Lexer.Lambda = 61;\ntptp_v7_0_0_0Lexer.ChoiceComb = 62;\ntptp_v7_0_0_0Lexer.Choice = 63;\ntptp_v7_0_0_0Lexer.DescriptionComb = 64;\ntptp_v7_0_0_0Lexer.Description = 65;\ntptp_v7_0_0_0Lexer.EqComb = 66;\ntptp_v7_0_0_0Lexer.App = 67;\ntptp_v7_0_0_0Lexer.Assignment = 68;\ntptp_v7_0_0_0Lexer.Arrow = 69;\ntptp_v7_0_0_0Lexer.Star = 70;\ntptp_v7_0_0_0Lexer.Plus = 71;\ntptp_v7_0_0_0Lexer.Subtype_sign = 72;\ntptp_v7_0_0_0Lexer.Gentzen_arrow = 73;\ntptp_v7_0_0_0Lexer.Real = 74;\ntptp_v7_0_0_0Lexer.Signed_real = 75;\ntptp_v7_0_0_0Lexer.Unsigned_real = 76;\ntptp_v7_0_0_0Lexer.Rational = 77;\ntptp_v7_0_0_0Lexer.Signed_rational = 78;\ntptp_v7_0_0_0Lexer.Unsigned_rational = 79;\ntptp_v7_0_0_0Lexer.Integer = 80;\ntptp_v7_0_0_0Lexer.Signed_integer = 81;\ntptp_v7_0_0_0Lexer.Unsigned_integer = 82;\ntptp_v7_0_0_0Lexer.Decimal = 83;\ntptp_v7_0_0_0Lexer.Positive_decimal = 84;\ntptp_v7_0_0_0Lexer.Decimal_exponent = 85;\ntptp_v7_0_0_0Lexer.Decimal_fraction = 86;\ntptp_v7_0_0_0Lexer.Dot_decimal = 87;\ntptp_v7_0_0_0Lexer.Exp_integer = 88;\ntptp_v7_0_0_0Lexer.Signed_exp_integer = 89;\ntptp_v7_0_0_0Lexer.Unsigned_exp_integer = 90;\ntptp_v7_0_0_0Lexer.Dollar_word = 91;\ntptp_v7_0_0_0Lexer.Dollar_dollar_word = 92;\ntptp_v7_0_0_0Lexer.Upper_word = 93;\ntptp_v7_0_0_0Lexer.Lower_word = 94;\ntptp_v7_0_0_0Lexer.Single_quoted = 95;\ntptp_v7_0_0_0Lexer.Distinct_object = 96;\ntptp_v7_0_0_0Lexer.WS = 97;\ntptp_v7_0_0_0Lexer.Line_comment = 98;\ntptp_v7_0_0_0Lexer.Block_comment = 99;\n\n//# sourceURL=webpack:///./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Lexer.js?");

/***/ }),

/***/ "./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Listener.js":
/*!******************************************************!*\
  !*** ./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Listener.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _antlr = _interopRequireDefault(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// This class defines a complete listener for a parse tree produced by tptp_v7_0_0_0Parser.\nvar tptp_v7_0_0_0Listener = /*#__PURE__*/function (_antlr4$tree$ParseTre) {\n  _inherits(tptp_v7_0_0_0Listener, _antlr4$tree$ParseTre);\n\n  var _super = _createSuper(tptp_v7_0_0_0Listener);\n\n  function tptp_v7_0_0_0Listener() {\n    _classCallCheck(this, tptp_v7_0_0_0Listener);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(tptp_v7_0_0_0Listener, [{\n    key: \"enterTptp_file\",\n    value: // Enter a parse tree produced by tptp_v7_0_0_0Parser#tptp_file.\n    function enterTptp_file(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tptp_file.\n\n  }, {\n    key: \"exitTptp_file\",\n    value: function exitTptp_file(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tptp_input.\n\n  }, {\n    key: \"enterTptp_input\",\n    value: function enterTptp_input(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tptp_input.\n\n  }, {\n    key: \"exitTptp_input\",\n    value: function exitTptp_input(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#annotated_formula.\n\n  }, {\n    key: \"enterAnnotated_formula\",\n    value: function enterAnnotated_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#annotated_formula.\n\n  }, {\n    key: \"exitAnnotated_formula\",\n    value: function exitAnnotated_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tpi_annotated.\n\n  }, {\n    key: \"enterTpi_annotated\",\n    value: function enterTpi_annotated(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tpi_annotated.\n\n  }, {\n    key: \"exitTpi_annotated\",\n    value: function exitTpi_annotated(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tpi_formula.\n\n  }, {\n    key: \"enterTpi_formula\",\n    value: function enterTpi_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tpi_formula.\n\n  }, {\n    key: \"exitTpi_formula\",\n    value: function exitTpi_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_annotated.\n\n  }, {\n    key: \"enterThf_annotated\",\n    value: function enterThf_annotated(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_annotated.\n\n  }, {\n    key: \"exitThf_annotated\",\n    value: function exitThf_annotated(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tfx_annotated.\n\n  }, {\n    key: \"enterTfx_annotated\",\n    value: function enterTfx_annotated(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tfx_annotated.\n\n  }, {\n    key: \"exitTfx_annotated\",\n    value: function exitTfx_annotated(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_annotated.\n\n  }, {\n    key: \"enterTff_annotated\",\n    value: function enterTff_annotated(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_annotated.\n\n  }, {\n    key: \"exitTff_annotated\",\n    value: function exitTff_annotated(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tcf_annotated.\n\n  }, {\n    key: \"enterTcf_annotated\",\n    value: function enterTcf_annotated(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tcf_annotated.\n\n  }, {\n    key: \"exitTcf_annotated\",\n    value: function exitTcf_annotated(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_annotated.\n\n  }, {\n    key: \"enterFof_annotated\",\n    value: function enterFof_annotated(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_annotated.\n\n  }, {\n    key: \"exitFof_annotated\",\n    value: function exitFof_annotated(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#cnf_annotated.\n\n  }, {\n    key: \"enterCnf_annotated\",\n    value: function enterCnf_annotated(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#cnf_annotated.\n\n  }, {\n    key: \"exitCnf_annotated\",\n    value: function exitCnf_annotated(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#annotations.\n\n  }, {\n    key: \"enterAnnotations\",\n    value: function enterAnnotations(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#annotations.\n\n  }, {\n    key: \"exitAnnotations\",\n    value: function exitAnnotations(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#formula_role.\n\n  }, {\n    key: \"enterFormula_role\",\n    value: function enterFormula_role(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#formula_role.\n\n  }, {\n    key: \"exitFormula_role\",\n    value: function exitFormula_role(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_formula.\n\n  }, {\n    key: \"enterThf_formula\",\n    value: function enterThf_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_formula.\n\n  }, {\n    key: \"exitThf_formula\",\n    value: function exitThf_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_logic_formula.\n\n  }, {\n    key: \"enterThf_logic_formula\",\n    value: function enterThf_logic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_logic_formula.\n\n  }, {\n    key: \"exitThf_logic_formula\",\n    value: function exitThf_logic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_formula.\n\n  }, {\n    key: \"enterThf_binary_formula\",\n    value: function enterThf_binary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_formula.\n\n  }, {\n    key: \"exitThf_binary_formula\",\n    value: function exitThf_binary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_pair.\n\n  }, {\n    key: \"enterThf_binary_pair\",\n    value: function enterThf_binary_pair(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_pair.\n\n  }, {\n    key: \"exitThf_binary_pair\",\n    value: function exitThf_binary_pair(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_tuple.\n\n  }, {\n    key: \"enterThf_binary_tuple\",\n    value: function enterThf_binary_tuple(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_tuple.\n\n  }, {\n    key: \"exitThf_binary_tuple\",\n    value: function exitThf_binary_tuple(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_or_formula.\n\n  }, {\n    key: \"enterThf_or_formula\",\n    value: function enterThf_or_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_or_formula.\n\n  }, {\n    key: \"exitThf_or_formula\",\n    value: function exitThf_or_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_and_formula.\n\n  }, {\n    key: \"enterThf_and_formula\",\n    value: function enterThf_and_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_and_formula.\n\n  }, {\n    key: \"exitThf_and_formula\",\n    value: function exitThf_and_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_apply_formula.\n\n  }, {\n    key: \"enterThf_apply_formula\",\n    value: function enterThf_apply_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_apply_formula.\n\n  }, {\n    key: \"exitThf_apply_formula\",\n    value: function exitThf_apply_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_unitary_formula.\n\n  }, {\n    key: \"enterThf_unitary_formula\",\n    value: function enterThf_unitary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_unitary_formula.\n\n  }, {\n    key: \"exitThf_unitary_formula\",\n    value: function exitThf_unitary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_quantified_formula.\n\n  }, {\n    key: \"enterThf_quantified_formula\",\n    value: function enterThf_quantified_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_quantified_formula.\n\n  }, {\n    key: \"exitThf_quantified_formula\",\n    value: function exitThf_quantified_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_quantification.\n\n  }, {\n    key: \"enterThf_quantification\",\n    value: function enterThf_quantification(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_quantification.\n\n  }, {\n    key: \"exitThf_quantification\",\n    value: function exitThf_quantification(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_variable_list.\n\n  }, {\n    key: \"enterThf_variable_list\",\n    value: function enterThf_variable_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_variable_list.\n\n  }, {\n    key: \"exitThf_variable_list\",\n    value: function exitThf_variable_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_variable.\n\n  }, {\n    key: \"enterThf_variable\",\n    value: function enterThf_variable(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_variable.\n\n  }, {\n    key: \"exitThf_variable\",\n    value: function exitThf_variable(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_typed_variable.\n\n  }, {\n    key: \"enterThf_typed_variable\",\n    value: function enterThf_typed_variable(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_typed_variable.\n\n  }, {\n    key: \"exitThf_typed_variable\",\n    value: function exitThf_typed_variable(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_unary_formula.\n\n  }, {\n    key: \"enterThf_unary_formula\",\n    value: function enterThf_unary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_unary_formula.\n\n  }, {\n    key: \"exitThf_unary_formula\",\n    value: function exitThf_unary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_atom.\n\n  }, {\n    key: \"enterThf_atom\",\n    value: function enterThf_atom(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_atom.\n\n  }, {\n    key: \"exitThf_atom\",\n    value: function exitThf_atom(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_function.\n\n  }, {\n    key: \"enterThf_function\",\n    value: function enterThf_function(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_function.\n\n  }, {\n    key: \"exitThf_function\",\n    value: function exitThf_function(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_conn_term.\n\n  }, {\n    key: \"enterThf_conn_term\",\n    value: function enterThf_conn_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_conn_term.\n\n  }, {\n    key: \"exitThf_conn_term\",\n    value: function exitThf_conn_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_conditional.\n\n  }, {\n    key: \"enterThf_conditional\",\n    value: function enterThf_conditional(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_conditional.\n\n  }, {\n    key: \"exitThf_conditional\",\n    value: function exitThf_conditional(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_let.\n\n  }, {\n    key: \"enterThf_let\",\n    value: function enterThf_let(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_let.\n\n  }, {\n    key: \"exitThf_let\",\n    value: function exitThf_let(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_arguments.\n\n  }, {\n    key: \"enterThf_arguments\",\n    value: function enterThf_arguments(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_arguments.\n\n  }, {\n    key: \"exitThf_arguments\",\n    value: function exitThf_arguments(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_type_formula.\n\n  }, {\n    key: \"enterThf_type_formula\",\n    value: function enterThf_type_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_type_formula.\n\n  }, {\n    key: \"exitThf_type_formula\",\n    value: function exitThf_type_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_typeable_formula.\n\n  }, {\n    key: \"enterThf_typeable_formula\",\n    value: function enterThf_typeable_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_typeable_formula.\n\n  }, {\n    key: \"exitThf_typeable_formula\",\n    value: function exitThf_typeable_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_subtype.\n\n  }, {\n    key: \"enterThf_subtype\",\n    value: function enterThf_subtype(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_subtype.\n\n  }, {\n    key: \"exitThf_subtype\",\n    value: function exitThf_subtype(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_top_level_type.\n\n  }, {\n    key: \"enterThf_top_level_type\",\n    value: function enterThf_top_level_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_top_level_type.\n\n  }, {\n    key: \"exitThf_top_level_type\",\n    value: function exitThf_top_level_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_unitary_type.\n\n  }, {\n    key: \"enterThf_unitary_type\",\n    value: function enterThf_unitary_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_unitary_type.\n\n  }, {\n    key: \"exitThf_unitary_type\",\n    value: function exitThf_unitary_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_apply_type.\n\n  }, {\n    key: \"enterThf_apply_type\",\n    value: function enterThf_apply_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_apply_type.\n\n  }, {\n    key: \"exitThf_apply_type\",\n    value: function exitThf_apply_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_type.\n\n  }, {\n    key: \"enterThf_binary_type\",\n    value: function enterThf_binary_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_binary_type.\n\n  }, {\n    key: \"exitThf_binary_type\",\n    value: function exitThf_binary_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_mapping_type.\n\n  }, {\n    key: \"enterThf_mapping_type\",\n    value: function enterThf_mapping_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_mapping_type.\n\n  }, {\n    key: \"exitThf_mapping_type\",\n    value: function exitThf_mapping_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_xprod_type.\n\n  }, {\n    key: \"enterThf_xprod_type\",\n    value: function enterThf_xprod_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_xprod_type.\n\n  }, {\n    key: \"exitThf_xprod_type\",\n    value: function exitThf_xprod_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_union_type.\n\n  }, {\n    key: \"enterThf_union_type\",\n    value: function enterThf_union_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_union_type.\n\n  }, {\n    key: \"exitThf_union_type\",\n    value: function exitThf_union_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_sequent.\n\n  }, {\n    key: \"enterThf_sequent\",\n    value: function enterThf_sequent(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_sequent.\n\n  }, {\n    key: \"exitThf_sequent\",\n    value: function exitThf_sequent(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_tuple.\n\n  }, {\n    key: \"enterThf_tuple\",\n    value: function enterThf_tuple(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_tuple.\n\n  }, {\n    key: \"exitThf_tuple\",\n    value: function exitThf_tuple(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_formula_list.\n\n  }, {\n    key: \"enterThf_formula_list\",\n    value: function enterThf_formula_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_formula_list.\n\n  }, {\n    key: \"exitThf_formula_list\",\n    value: function exitThf_formula_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tfx_formula.\n\n  }, {\n    key: \"enterTfx_formula\",\n    value: function enterTfx_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tfx_formula.\n\n  }, {\n    key: \"exitTfx_formula\",\n    value: function exitTfx_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tfx_logic_formula.\n\n  }, {\n    key: \"enterTfx_logic_formula\",\n    value: function enterTfx_logic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tfx_logic_formula.\n\n  }, {\n    key: \"exitTfx_logic_formula\",\n    value: function exitTfx_logic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_formula.\n\n  }, {\n    key: \"enterTff_formula\",\n    value: function enterTff_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_formula.\n\n  }, {\n    key: \"exitTff_formula\",\n    value: function exitTff_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_logic_formula.\n\n  }, {\n    key: \"enterTff_logic_formula\",\n    value: function enterTff_logic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_logic_formula.\n\n  }, {\n    key: \"exitTff_logic_formula\",\n    value: function exitTff_logic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_binary_formula.\n\n  }, {\n    key: \"enterTff_binary_formula\",\n    value: function enterTff_binary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_binary_formula.\n\n  }, {\n    key: \"exitTff_binary_formula\",\n    value: function exitTff_binary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_binary_nonassoc.\n\n  }, {\n    key: \"enterTff_binary_nonassoc\",\n    value: function enterTff_binary_nonassoc(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_binary_nonassoc.\n\n  }, {\n    key: \"exitTff_binary_nonassoc\",\n    value: function exitTff_binary_nonassoc(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_binary_assoc.\n\n  }, {\n    key: \"enterTff_binary_assoc\",\n    value: function enterTff_binary_assoc(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_binary_assoc.\n\n  }, {\n    key: \"exitTff_binary_assoc\",\n    value: function exitTff_binary_assoc(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_or_formula.\n\n  }, {\n    key: \"enterTff_or_formula\",\n    value: function enterTff_or_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_or_formula.\n\n  }, {\n    key: \"exitTff_or_formula\",\n    value: function exitTff_or_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_and_formula.\n\n  }, {\n    key: \"enterTff_and_formula\",\n    value: function enterTff_and_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_and_formula.\n\n  }, {\n    key: \"exitTff_and_formula\",\n    value: function exitTff_and_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_unitary_formula.\n\n  }, {\n    key: \"enterTff_unitary_formula\",\n    value: function enterTff_unitary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_unitary_formula.\n\n  }, {\n    key: \"exitTff_unitary_formula\",\n    value: function exitTff_unitary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_quantified_formula.\n\n  }, {\n    key: \"enterTff_quantified_formula\",\n    value: function enterTff_quantified_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_quantified_formula.\n\n  }, {\n    key: \"exitTff_quantified_formula\",\n    value: function exitTff_quantified_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_variable_list.\n\n  }, {\n    key: \"enterTff_variable_list\",\n    value: function enterTff_variable_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_variable_list.\n\n  }, {\n    key: \"exitTff_variable_list\",\n    value: function exitTff_variable_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_variable.\n\n  }, {\n    key: \"enterTff_variable\",\n    value: function enterTff_variable(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_variable.\n\n  }, {\n    key: \"exitTff_variable\",\n    value: function exitTff_variable(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_typed_variable.\n\n  }, {\n    key: \"enterTff_typed_variable\",\n    value: function enterTff_typed_variable(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_typed_variable.\n\n  }, {\n    key: \"exitTff_typed_variable\",\n    value: function exitTff_typed_variable(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_unary_formula.\n\n  }, {\n    key: \"enterTff_unary_formula\",\n    value: function enterTff_unary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_unary_formula.\n\n  }, {\n    key: \"exitTff_unary_formula\",\n    value: function exitTff_unary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_atomic_formula.\n\n  }, {\n    key: \"enterTff_atomic_formula\",\n    value: function enterTff_atomic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_atomic_formula.\n\n  }, {\n    key: \"exitTff_atomic_formula\",\n    value: function exitTff_atomic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_conditional.\n\n  }, {\n    key: \"enterTff_conditional\",\n    value: function enterTff_conditional(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_conditional.\n\n  }, {\n    key: \"exitTff_conditional\",\n    value: function exitTff_conditional(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let.\n\n  }, {\n    key: \"enterTff_let\",\n    value: function enterTff_let(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let.\n\n  }, {\n    key: \"exitTff_let\",\n    value: function exitTff_let(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_defns.\n\n  }, {\n    key: \"enterTff_let_term_defns\",\n    value: function enterTff_let_term_defns(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_defns.\n\n  }, {\n    key: \"exitTff_let_term_defns\",\n    value: function exitTff_let_term_defns(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_list.\n\n  }, {\n    key: \"enterTff_let_term_list\",\n    value: function enterTff_let_term_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_list.\n\n  }, {\n    key: \"exitTff_let_term_list\",\n    value: function exitTff_let_term_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_defn.\n\n  }, {\n    key: \"enterTff_let_term_defn\",\n    value: function enterTff_let_term_defn(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_defn.\n\n  }, {\n    key: \"exitTff_let_term_defn\",\n    value: function exitTff_let_term_defn(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_binding.\n\n  }, {\n    key: \"enterTff_let_term_binding\",\n    value: function enterTff_let_term_binding(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term_binding.\n\n  }, {\n    key: \"exitTff_let_term_binding\",\n    value: function exitTff_let_term_binding(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_defns.\n\n  }, {\n    key: \"enterTff_let_formula_defns\",\n    value: function enterTff_let_formula_defns(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_defns.\n\n  }, {\n    key: \"exitTff_let_formula_defns\",\n    value: function exitTff_let_formula_defns(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_list.\n\n  }, {\n    key: \"enterTff_let_formula_list\",\n    value: function enterTff_let_formula_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_list.\n\n  }, {\n    key: \"exitTff_let_formula_list\",\n    value: function exitTff_let_formula_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_defn.\n\n  }, {\n    key: \"enterTff_let_formula_defn\",\n    value: function enterTff_let_formula_defn(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_defn.\n\n  }, {\n    key: \"exitTff_let_formula_defn\",\n    value: function exitTff_let_formula_defn(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_binding.\n\n  }, {\n    key: \"enterTff_let_formula_binding\",\n    value: function enterTff_let_formula_binding(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_formula_binding.\n\n  }, {\n    key: \"exitTff_let_formula_binding\",\n    value: function exitTff_let_formula_binding(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_sequent.\n\n  }, {\n    key: \"enterTff_sequent\",\n    value: function enterTff_sequent(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_sequent.\n\n  }, {\n    key: \"exitTff_sequent\",\n    value: function exitTff_sequent(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_formula_tuple.\n\n  }, {\n    key: \"enterTff_formula_tuple\",\n    value: function enterTff_formula_tuple(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_formula_tuple.\n\n  }, {\n    key: \"exitTff_formula_tuple\",\n    value: function exitTff_formula_tuple(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_formula_tuple_list.\n\n  }, {\n    key: \"enterTff_formula_tuple_list\",\n    value: function enterTff_formula_tuple_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_formula_tuple_list.\n\n  }, {\n    key: \"exitTff_formula_tuple_list\",\n    value: function exitTff_formula_tuple_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_typed_atom.\n\n  }, {\n    key: \"enterTff_typed_atom\",\n    value: function enterTff_typed_atom(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_typed_atom.\n\n  }, {\n    key: \"exitTff_typed_atom\",\n    value: function exitTff_typed_atom(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_subtype.\n\n  }, {\n    key: \"enterTff_subtype\",\n    value: function enterTff_subtype(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_subtype.\n\n  }, {\n    key: \"exitTff_subtype\",\n    value: function exitTff_subtype(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_top_level_type.\n\n  }, {\n    key: \"enterTff_top_level_type\",\n    value: function enterTff_top_level_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_top_level_type.\n\n  }, {\n    key: \"exitTff_top_level_type\",\n    value: function exitTff_top_level_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tf1_quantified_type.\n\n  }, {\n    key: \"enterTf1_quantified_type\",\n    value: function enterTf1_quantified_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tf1_quantified_type.\n\n  }, {\n    key: \"exitTf1_quantified_type\",\n    value: function exitTf1_quantified_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_monotype.\n\n  }, {\n    key: \"enterTff_monotype\",\n    value: function enterTff_monotype(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_monotype.\n\n  }, {\n    key: \"exitTff_monotype\",\n    value: function exitTff_monotype(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_unitary_type.\n\n  }, {\n    key: \"enterTff_unitary_type\",\n    value: function enterTff_unitary_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_unitary_type.\n\n  }, {\n    key: \"exitTff_unitary_type\",\n    value: function exitTff_unitary_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_atomic_type.\n\n  }, {\n    key: \"enterTff_atomic_type\",\n    value: function enterTff_atomic_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_atomic_type.\n\n  }, {\n    key: \"exitTff_atomic_type\",\n    value: function exitTff_atomic_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_type_arguments.\n\n  }, {\n    key: \"enterTff_type_arguments\",\n    value: function enterTff_type_arguments(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_type_arguments.\n\n  }, {\n    key: \"exitTff_type_arguments\",\n    value: function exitTff_type_arguments(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_mapping_type.\n\n  }, {\n    key: \"enterTff_mapping_type\",\n    value: function enterTff_mapping_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_mapping_type.\n\n  }, {\n    key: \"exitTff_mapping_type\",\n    value: function exitTff_mapping_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_xprod_type.\n\n  }, {\n    key: \"enterTff_xprod_type\",\n    value: function enterTff_xprod_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_xprod_type.\n\n  }, {\n    key: \"exitTff_xprod_type\",\n    value: function exitTff_xprod_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tcf_formula.\n\n  }, {\n    key: \"enterTcf_formula\",\n    value: function enterTcf_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tcf_formula.\n\n  }, {\n    key: \"exitTcf_formula\",\n    value: function exitTcf_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tcf_logic_formula.\n\n  }, {\n    key: \"enterTcf_logic_formula\",\n    value: function enterTcf_logic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tcf_logic_formula.\n\n  }, {\n    key: \"exitTcf_logic_formula\",\n    value: function exitTcf_logic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tcf_quantified_formula.\n\n  }, {\n    key: \"enterTcf_quantified_formula\",\n    value: function enterTcf_quantified_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tcf_quantified_formula.\n\n  }, {\n    key: \"exitTcf_quantified_formula\",\n    value: function exitTcf_quantified_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_formula.\n\n  }, {\n    key: \"enterFof_formula\",\n    value: function enterFof_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_formula.\n\n  }, {\n    key: \"exitFof_formula\",\n    value: function exitFof_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_logic_formula.\n\n  }, {\n    key: \"enterFof_logic_formula\",\n    value: function enterFof_logic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_logic_formula.\n\n  }, {\n    key: \"exitFof_logic_formula\",\n    value: function exitFof_logic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_binary_formula.\n\n  }, {\n    key: \"enterFof_binary_formula\",\n    value: function enterFof_binary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_binary_formula.\n\n  }, {\n    key: \"exitFof_binary_formula\",\n    value: function exitFof_binary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_binary_nonassoc.\n\n  }, {\n    key: \"enterFof_binary_nonassoc\",\n    value: function enterFof_binary_nonassoc(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_binary_nonassoc.\n\n  }, {\n    key: \"exitFof_binary_nonassoc\",\n    value: function exitFof_binary_nonassoc(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_binary_assoc.\n\n  }, {\n    key: \"enterFof_binary_assoc\",\n    value: function enterFof_binary_assoc(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_binary_assoc.\n\n  }, {\n    key: \"exitFof_binary_assoc\",\n    value: function exitFof_binary_assoc(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_or_formula.\n\n  }, {\n    key: \"enterFof_or_formula\",\n    value: function enterFof_or_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_or_formula.\n\n  }, {\n    key: \"exitFof_or_formula\",\n    value: function exitFof_or_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_and_formula.\n\n  }, {\n    key: \"enterFof_and_formula\",\n    value: function enterFof_and_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_and_formula.\n\n  }, {\n    key: \"exitFof_and_formula\",\n    value: function exitFof_and_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_unitary_formula.\n\n  }, {\n    key: \"enterFof_unitary_formula\",\n    value: function enterFof_unitary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_unitary_formula.\n\n  }, {\n    key: \"exitFof_unitary_formula\",\n    value: function exitFof_unitary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_quantified_formula.\n\n  }, {\n    key: \"enterFof_quantified_formula\",\n    value: function enterFof_quantified_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_quantified_formula.\n\n  }, {\n    key: \"exitFof_quantified_formula\",\n    value: function exitFof_quantified_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_variable_list.\n\n  }, {\n    key: \"enterFof_variable_list\",\n    value: function enterFof_variable_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_variable_list.\n\n  }, {\n    key: \"exitFof_variable_list\",\n    value: function exitFof_variable_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_unary_formula.\n\n  }, {\n    key: \"enterFof_unary_formula\",\n    value: function enterFof_unary_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_unary_formula.\n\n  }, {\n    key: \"exitFof_unary_formula\",\n    value: function exitFof_unary_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_infix_unary.\n\n  }, {\n    key: \"enterFof_infix_unary\",\n    value: function enterFof_infix_unary(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_infix_unary.\n\n  }, {\n    key: \"exitFof_infix_unary\",\n    value: function exitFof_infix_unary(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_atomic_formula.\n\n  }, {\n    key: \"enterFof_atomic_formula\",\n    value: function enterFof_atomic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_atomic_formula.\n\n  }, {\n    key: \"exitFof_atomic_formula\",\n    value: function exitFof_atomic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_plain_atomic_formula.\n\n  }, {\n    key: \"enterFof_plain_atomic_formula\",\n    value: function enterFof_plain_atomic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_plain_atomic_formula.\n\n  }, {\n    key: \"exitFof_plain_atomic_formula\",\n    value: function exitFof_plain_atomic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_atomic_formula.\n\n  }, {\n    key: \"enterFof_defined_atomic_formula\",\n    value: function enterFof_defined_atomic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_atomic_formula.\n\n  }, {\n    key: \"exitFof_defined_atomic_formula\",\n    value: function exitFof_defined_atomic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_plain_formula.\n\n  }, {\n    key: \"enterFof_defined_plain_formula\",\n    value: function enterFof_defined_plain_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_plain_formula.\n\n  }, {\n    key: \"exitFof_defined_plain_formula\",\n    value: function exitFof_defined_plain_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_infix_formula.\n\n  }, {\n    key: \"enterFof_defined_infix_formula\",\n    value: function enterFof_defined_infix_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_infix_formula.\n\n  }, {\n    key: \"exitFof_defined_infix_formula\",\n    value: function exitFof_defined_infix_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_system_atomic_formula.\n\n  }, {\n    key: \"enterFof_system_atomic_formula\",\n    value: function enterFof_system_atomic_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_system_atomic_formula.\n\n  }, {\n    key: \"exitFof_system_atomic_formula\",\n    value: function exitFof_system_atomic_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_plain_term.\n\n  }, {\n    key: \"enterFof_plain_term\",\n    value: function enterFof_plain_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_plain_term.\n\n  }, {\n    key: \"exitFof_plain_term\",\n    value: function exitFof_plain_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_term.\n\n  }, {\n    key: \"enterFof_defined_term\",\n    value: function enterFof_defined_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_term.\n\n  }, {\n    key: \"exitFof_defined_term\",\n    value: function exitFof_defined_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_atomic_term.\n\n  }, {\n    key: \"enterFof_defined_atomic_term\",\n    value: function enterFof_defined_atomic_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_atomic_term.\n\n  }, {\n    key: \"exitFof_defined_atomic_term\",\n    value: function exitFof_defined_atomic_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_plain_term.\n\n  }, {\n    key: \"enterFof_defined_plain_term\",\n    value: function enterFof_defined_plain_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_defined_plain_term.\n\n  }, {\n    key: \"exitFof_defined_plain_term\",\n    value: function exitFof_defined_plain_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_system_term.\n\n  }, {\n    key: \"enterFof_system_term\",\n    value: function enterFof_system_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_system_term.\n\n  }, {\n    key: \"exitFof_system_term\",\n    value: function exitFof_system_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_arguments.\n\n  }, {\n    key: \"enterFof_arguments\",\n    value: function enterFof_arguments(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_arguments.\n\n  }, {\n    key: \"exitFof_arguments\",\n    value: function exitFof_arguments(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_term.\n\n  }, {\n    key: \"enterFof_term\",\n    value: function enterFof_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_term.\n\n  }, {\n    key: \"exitFof_term\",\n    value: function exitFof_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_function_term.\n\n  }, {\n    key: \"enterFof_function_term\",\n    value: function enterFof_function_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_function_term.\n\n  }, {\n    key: \"exitFof_function_term\",\n    value: function exitFof_function_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_conditional_term.\n\n  }, {\n    key: \"enterTff_conditional_term\",\n    value: function enterTff_conditional_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_conditional_term.\n\n  }, {\n    key: \"exitTff_conditional_term\",\n    value: function exitTff_conditional_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term.\n\n  }, {\n    key: \"enterTff_let_term\",\n    value: function enterTff_let_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_let_term.\n\n  }, {\n    key: \"exitTff_let_term\",\n    value: function exitTff_let_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_tuple_term.\n\n  }, {\n    key: \"enterTff_tuple_term\",\n    value: function enterTff_tuple_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_tuple_term.\n\n  }, {\n    key: \"exitTff_tuple_term\",\n    value: function exitTff_tuple_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_sequent.\n\n  }, {\n    key: \"enterFof_sequent\",\n    value: function enterFof_sequent(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_sequent.\n\n  }, {\n    key: \"exitFof_sequent\",\n    value: function exitFof_sequent(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_formula_tuple.\n\n  }, {\n    key: \"enterFof_formula_tuple\",\n    value: function enterFof_formula_tuple(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_formula_tuple.\n\n  }, {\n    key: \"exitFof_formula_tuple\",\n    value: function exitFof_formula_tuple(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_formula_tuple_list.\n\n  }, {\n    key: \"enterFof_formula_tuple_list\",\n    value: function enterFof_formula_tuple_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_formula_tuple_list.\n\n  }, {\n    key: \"exitFof_formula_tuple_list\",\n    value: function exitFof_formula_tuple_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#cnf_formula.\n\n  }, {\n    key: \"enterCnf_formula\",\n    value: function enterCnf_formula(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#cnf_formula.\n\n  }, {\n    key: \"exitCnf_formula\",\n    value: function exitCnf_formula(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#cnf_disjunction.\n\n  }, {\n    key: \"enterCnf_disjunction\",\n    value: function enterCnf_disjunction(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#cnf_disjunction.\n\n  }, {\n    key: \"exitCnf_disjunction\",\n    value: function exitCnf_disjunction(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#cnf_literal.\n\n  }, {\n    key: \"enterCnf_literal\",\n    value: function enterCnf_literal(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#cnf_literal.\n\n  }, {\n    key: \"exitCnf_literal\",\n    value: function exitCnf_literal(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_quantifier.\n\n  }, {\n    key: \"enterThf_quantifier\",\n    value: function enterThf_quantifier(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_quantifier.\n\n  }, {\n    key: \"exitThf_quantifier\",\n    value: function exitThf_quantifier(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#th0_quantifier.\n\n  }, {\n    key: \"enterTh0_quantifier\",\n    value: function enterTh0_quantifier(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#th0_quantifier.\n\n  }, {\n    key: \"exitTh0_quantifier\",\n    value: function exitTh0_quantifier(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#th1_quantifier.\n\n  }, {\n    key: \"enterTh1_quantifier\",\n    value: function enterTh1_quantifier(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#th1_quantifier.\n\n  }, {\n    key: \"exitTh1_quantifier\",\n    value: function exitTh1_quantifier(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_pair_connective.\n\n  }, {\n    key: \"enterThf_pair_connective\",\n    value: function enterThf_pair_connective(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_pair_connective.\n\n  }, {\n    key: \"exitThf_pair_connective\",\n    value: function exitThf_pair_connective(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#thf_unary_connective.\n\n  }, {\n    key: \"enterThf_unary_connective\",\n    value: function enterThf_unary_connective(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#thf_unary_connective.\n\n  }, {\n    key: \"exitThf_unary_connective\",\n    value: function exitThf_unary_connective(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#th1_unary_connective.\n\n  }, {\n    key: \"enterTh1_unary_connective\",\n    value: function enterTh1_unary_connective(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#th1_unary_connective.\n\n  }, {\n    key: \"exitTh1_unary_connective\",\n    value: function exitTh1_unary_connective(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#tff_pair_connective.\n\n  }, {\n    key: \"enterTff_pair_connective\",\n    value: function enterTff_pair_connective(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#tff_pair_connective.\n\n  }, {\n    key: \"exitTff_pair_connective\",\n    value: function exitTff_pair_connective(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#fof_quantifier.\n\n  }, {\n    key: \"enterFof_quantifier\",\n    value: function enterFof_quantifier(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#fof_quantifier.\n\n  }, {\n    key: \"exitFof_quantifier\",\n    value: function exitFof_quantifier(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#binary_connective.\n\n  }, {\n    key: \"enterBinary_connective\",\n    value: function enterBinary_connective(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#binary_connective.\n\n  }, {\n    key: \"exitBinary_connective\",\n    value: function exitBinary_connective(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#assoc_connective.\n\n  }, {\n    key: \"enterAssoc_connective\",\n    value: function enterAssoc_connective(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#assoc_connective.\n\n  }, {\n    key: \"exitAssoc_connective\",\n    value: function exitAssoc_connective(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#unary_connective.\n\n  }, {\n    key: \"enterUnary_connective\",\n    value: function enterUnary_connective(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#unary_connective.\n\n  }, {\n    key: \"exitUnary_connective\",\n    value: function exitUnary_connective(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#type_constant.\n\n  }, {\n    key: \"enterType_constant\",\n    value: function enterType_constant(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#type_constant.\n\n  }, {\n    key: \"exitType_constant\",\n    value: function exitType_constant(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#type_functor.\n\n  }, {\n    key: \"enterType_functor\",\n    value: function enterType_functor(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#type_functor.\n\n  }, {\n    key: \"exitType_functor\",\n    value: function exitType_functor(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#defined_type.\n\n  }, {\n    key: \"enterDefined_type\",\n    value: function enterDefined_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#defined_type.\n\n  }, {\n    key: \"exitDefined_type\",\n    value: function exitDefined_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#system_type.\n\n  }, {\n    key: \"enterSystem_type\",\n    value: function enterSystem_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#system_type.\n\n  }, {\n    key: \"exitSystem_type\",\n    value: function exitSystem_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#atom.\n\n  }, {\n    key: \"enterAtom\",\n    value: function enterAtom(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#atom.\n\n  }, {\n    key: \"exitAtom\",\n    value: function exitAtom(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#untyped_atom.\n\n  }, {\n    key: \"enterUntyped_atom\",\n    value: function enterUntyped_atom(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#untyped_atom.\n\n  }, {\n    key: \"exitUntyped_atom\",\n    value: function exitUntyped_atom(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#defined_proposition.\n\n  }, {\n    key: \"enterDefined_proposition\",\n    value: function enterDefined_proposition(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#defined_proposition.\n\n  }, {\n    key: \"exitDefined_proposition\",\n    value: function exitDefined_proposition(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#defined_predicate.\n\n  }, {\n    key: \"enterDefined_predicate\",\n    value: function enterDefined_predicate(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#defined_predicate.\n\n  }, {\n    key: \"exitDefined_predicate\",\n    value: function exitDefined_predicate(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#defined_infix_pred.\n\n  }, {\n    key: \"enterDefined_infix_pred\",\n    value: function enterDefined_infix_pred(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#defined_infix_pred.\n\n  }, {\n    key: \"exitDefined_infix_pred\",\n    value: function exitDefined_infix_pred(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#constant.\n\n  }, {\n    key: \"enterConstant\",\n    value: function enterConstant(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#constant.\n\n  }, {\n    key: \"exitConstant\",\n    value: function exitConstant(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#functor.\n\n  }, {\n    key: \"enterFunctor\",\n    value: function enterFunctor(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#functor.\n\n  }, {\n    key: \"exitFunctor\",\n    value: function exitFunctor(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#system_constant.\n\n  }, {\n    key: \"enterSystem_constant\",\n    value: function enterSystem_constant(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#system_constant.\n\n  }, {\n    key: \"exitSystem_constant\",\n    value: function exitSystem_constant(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#system_functor.\n\n  }, {\n    key: \"enterSystem_functor\",\n    value: function enterSystem_functor(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#system_functor.\n\n  }, {\n    key: \"exitSystem_functor\",\n    value: function exitSystem_functor(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#defined_constant.\n\n  }, {\n    key: \"enterDefined_constant\",\n    value: function enterDefined_constant(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#defined_constant.\n\n  }, {\n    key: \"exitDefined_constant\",\n    value: function exitDefined_constant(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#defined_functor.\n\n  }, {\n    key: \"enterDefined_functor\",\n    value: function enterDefined_functor(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#defined_functor.\n\n  }, {\n    key: \"exitDefined_functor\",\n    value: function exitDefined_functor(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#defined_term.\n\n  }, {\n    key: \"enterDefined_term\",\n    value: function enterDefined_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#defined_term.\n\n  }, {\n    key: \"exitDefined_term\",\n    value: function exitDefined_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#variable.\n\n  }, {\n    key: \"enterVariable\",\n    value: function enterVariable(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#variable.\n\n  }, {\n    key: \"exitVariable\",\n    value: function exitVariable(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#source.\n\n  }, {\n    key: \"enterSource\",\n    value: function enterSource(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#source.\n\n  }, {\n    key: \"exitSource\",\n    value: function exitSource(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#sources.\n\n  }, {\n    key: \"enterSources\",\n    value: function enterSources(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#sources.\n\n  }, {\n    key: \"exitSources\",\n    value: function exitSources(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#dag_source.\n\n  }, {\n    key: \"enterDag_source\",\n    value: function enterDag_source(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#dag_source.\n\n  }, {\n    key: \"exitDag_source\",\n    value: function exitDag_source(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#inference_record.\n\n  }, {\n    key: \"enterInference_record\",\n    value: function enterInference_record(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#inference_record.\n\n  }, {\n    key: \"exitInference_record\",\n    value: function exitInference_record(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#inference_rule.\n\n  }, {\n    key: \"enterInference_rule\",\n    value: function enterInference_rule(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#inference_rule.\n\n  }, {\n    key: \"exitInference_rule\",\n    value: function exitInference_rule(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#inference_parents.\n\n  }, {\n    key: \"enterInference_parents\",\n    value: function enterInference_parents(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#inference_parents.\n\n  }, {\n    key: \"exitInference_parents\",\n    value: function exitInference_parents(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#parent_list.\n\n  }, {\n    key: \"enterParent_list\",\n    value: function enterParent_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#parent_list.\n\n  }, {\n    key: \"exitParent_list\",\n    value: function exitParent_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#parent_info.\n\n  }, {\n    key: \"enterParent_info\",\n    value: function enterParent_info(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#parent_info.\n\n  }, {\n    key: \"exitParent_info\",\n    value: function exitParent_info(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#parent_details.\n\n  }, {\n    key: \"enterParent_details\",\n    value: function enterParent_details(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#parent_details.\n\n  }, {\n    key: \"exitParent_details\",\n    value: function exitParent_details(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#internal_source.\n\n  }, {\n    key: \"enterInternal_source\",\n    value: function enterInternal_source(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#internal_source.\n\n  }, {\n    key: \"exitInternal_source\",\n    value: function exitInternal_source(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#intro_type.\n\n  }, {\n    key: \"enterIntro_type\",\n    value: function enterIntro_type(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#intro_type.\n\n  }, {\n    key: \"exitIntro_type\",\n    value: function exitIntro_type(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#external_source.\n\n  }, {\n    key: \"enterExternal_source\",\n    value: function enterExternal_source(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#external_source.\n\n  }, {\n    key: \"exitExternal_source\",\n    value: function exitExternal_source(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#file_source.\n\n  }, {\n    key: \"enterFile_source\",\n    value: function enterFile_source(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#file_source.\n\n  }, {\n    key: \"exitFile_source\",\n    value: function exitFile_source(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#file_info.\n\n  }, {\n    key: \"enterFile_info\",\n    value: function enterFile_info(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#file_info.\n\n  }, {\n    key: \"exitFile_info\",\n    value: function exitFile_info(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#theory.\n\n  }, {\n    key: \"enterTheory\",\n    value: function enterTheory(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#theory.\n\n  }, {\n    key: \"exitTheory\",\n    value: function exitTheory(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#theory_name.\n\n  }, {\n    key: \"enterTheory_name\",\n    value: function enterTheory_name(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#theory_name.\n\n  }, {\n    key: \"exitTheory_name\",\n    value: function exitTheory_name(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#creator_source.\n\n  }, {\n    key: \"enterCreator_source\",\n    value: function enterCreator_source(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#creator_source.\n\n  }, {\n    key: \"exitCreator_source\",\n    value: function exitCreator_source(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#creator_name.\n\n  }, {\n    key: \"enterCreator_name\",\n    value: function enterCreator_name(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#creator_name.\n\n  }, {\n    key: \"exitCreator_name\",\n    value: function exitCreator_name(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#optional_info.\n\n  }, {\n    key: \"enterOptional_info\",\n    value: function enterOptional_info(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#optional_info.\n\n  }, {\n    key: \"exitOptional_info\",\n    value: function exitOptional_info(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#useful_info.\n\n  }, {\n    key: \"enterUseful_info\",\n    value: function enterUseful_info(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#useful_info.\n\n  }, {\n    key: \"exitUseful_info\",\n    value: function exitUseful_info(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#info_items.\n\n  }, {\n    key: \"enterInfo_items\",\n    value: function enterInfo_items(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#info_items.\n\n  }, {\n    key: \"exitInfo_items\",\n    value: function exitInfo_items(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#info_item.\n\n  }, {\n    key: \"enterInfo_item\",\n    value: function enterInfo_item(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#info_item.\n\n  }, {\n    key: \"exitInfo_item\",\n    value: function exitInfo_item(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#formula_item.\n\n  }, {\n    key: \"enterFormula_item\",\n    value: function enterFormula_item(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#formula_item.\n\n  }, {\n    key: \"exitFormula_item\",\n    value: function exitFormula_item(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#description_item.\n\n  }, {\n    key: \"enterDescription_item\",\n    value: function enterDescription_item(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#description_item.\n\n  }, {\n    key: \"exitDescription_item\",\n    value: function exitDescription_item(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#iquote_item.\n\n  }, {\n    key: \"enterIquote_item\",\n    value: function enterIquote_item(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#iquote_item.\n\n  }, {\n    key: \"exitIquote_item\",\n    value: function exitIquote_item(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#inference_item.\n\n  }, {\n    key: \"enterInference_item\",\n    value: function enterInference_item(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#inference_item.\n\n  }, {\n    key: \"exitInference_item\",\n    value: function exitInference_item(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#inference_status.\n\n  }, {\n    key: \"enterInference_status\",\n    value: function enterInference_status(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#inference_status.\n\n  }, {\n    key: \"exitInference_status\",\n    value: function exitInference_status(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#status_value.\n\n  }, {\n    key: \"enterStatus_value\",\n    value: function enterStatus_value(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#status_value.\n\n  }, {\n    key: \"exitStatus_value\",\n    value: function exitStatus_value(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#inference_info.\n\n  }, {\n    key: \"enterInference_info\",\n    value: function enterInference_info(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#inference_info.\n\n  }, {\n    key: \"exitInference_info\",\n    value: function exitInference_info(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#assumptions_record.\n\n  }, {\n    key: \"enterAssumptions_record\",\n    value: function enterAssumptions_record(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#assumptions_record.\n\n  }, {\n    key: \"exitAssumptions_record\",\n    value: function exitAssumptions_record(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#refutation.\n\n  }, {\n    key: \"enterRefutation\",\n    value: function enterRefutation(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#refutation.\n\n  }, {\n    key: \"exitRefutation\",\n    value: function exitRefutation(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#new_symbol_record.\n\n  }, {\n    key: \"enterNew_symbol_record\",\n    value: function enterNew_symbol_record(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#new_symbol_record.\n\n  }, {\n    key: \"exitNew_symbol_record\",\n    value: function exitNew_symbol_record(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#new_symbol_list.\n\n  }, {\n    key: \"enterNew_symbol_list\",\n    value: function enterNew_symbol_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#new_symbol_list.\n\n  }, {\n    key: \"exitNew_symbol_list\",\n    value: function exitNew_symbol_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#principal_symbol.\n\n  }, {\n    key: \"enterPrincipal_symbol\",\n    value: function enterPrincipal_symbol(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#principal_symbol.\n\n  }, {\n    key: \"exitPrincipal_symbol\",\n    value: function exitPrincipal_symbol(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#include.\n\n  }, {\n    key: \"enterInclude\",\n    value: function enterInclude(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#include.\n\n  }, {\n    key: \"exitInclude\",\n    value: function exitInclude(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#formula_selection.\n\n  }, {\n    key: \"enterFormula_selection\",\n    value: function enterFormula_selection(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#formula_selection.\n\n  }, {\n    key: \"exitFormula_selection\",\n    value: function exitFormula_selection(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#name_list.\n\n  }, {\n    key: \"enterName_list\",\n    value: function enterName_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#name_list.\n\n  }, {\n    key: \"exitName_list\",\n    value: function exitName_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#general_term.\n\n  }, {\n    key: \"enterGeneral_term\",\n    value: function enterGeneral_term(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#general_term.\n\n  }, {\n    key: \"exitGeneral_term\",\n    value: function exitGeneral_term(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#general_data.\n\n  }, {\n    key: \"enterGeneral_data\",\n    value: function enterGeneral_data(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#general_data.\n\n  }, {\n    key: \"exitGeneral_data\",\n    value: function exitGeneral_data(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#general_function.\n\n  }, {\n    key: \"enterGeneral_function\",\n    value: function enterGeneral_function(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#general_function.\n\n  }, {\n    key: \"exitGeneral_function\",\n    value: function exitGeneral_function(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#formula_data.\n\n  }, {\n    key: \"enterFormula_data\",\n    value: function enterFormula_data(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#formula_data.\n\n  }, {\n    key: \"exitFormula_data\",\n    value: function exitFormula_data(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#general_list.\n\n  }, {\n    key: \"enterGeneral_list\",\n    value: function enterGeneral_list(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#general_list.\n\n  }, {\n    key: \"exitGeneral_list\",\n    value: function exitGeneral_list(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#general_terms.\n\n  }, {\n    key: \"enterGeneral_terms\",\n    value: function enterGeneral_terms(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#general_terms.\n\n  }, {\n    key: \"exitGeneral_terms\",\n    value: function exitGeneral_terms(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#name.\n\n  }, {\n    key: \"enterName\",\n    value: function enterName(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#name.\n\n  }, {\n    key: \"exitName\",\n    value: function exitName(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#atomic_word.\n\n  }, {\n    key: \"enterAtomic_word\",\n    value: function enterAtomic_word(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#atomic_word.\n\n  }, {\n    key: \"exitAtomic_word\",\n    value: function exitAtomic_word(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#atomic_defined_word.\n\n  }, {\n    key: \"enterAtomic_defined_word\",\n    value: function enterAtomic_defined_word(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#atomic_defined_word.\n\n  }, {\n    key: \"exitAtomic_defined_word\",\n    value: function exitAtomic_defined_word(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#atomic_system_word.\n\n  }, {\n    key: \"enterAtomic_system_word\",\n    value: function enterAtomic_system_word(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#atomic_system_word.\n\n  }, {\n    key: \"exitAtomic_system_word\",\n    value: function exitAtomic_system_word(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#number.\n\n  }, {\n    key: \"enterNumber\",\n    value: function enterNumber(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#number.\n\n  }, {\n    key: \"exitNumber\",\n    value: function exitNumber(ctx) {} // Enter a parse tree produced by tptp_v7_0_0_0Parser#file_name.\n\n  }, {\n    key: \"enterFile_name\",\n    value: function enterFile_name(ctx) {} // Exit a parse tree produced by tptp_v7_0_0_0Parser#file_name.\n\n  }, {\n    key: \"exitFile_name\",\n    value: function exitFile_name(ctx) {}\n  }]);\n\n  return tptp_v7_0_0_0Listener;\n}(_antlr[\"default\"].tree.ParseTreeListener);\n\nexports[\"default\"] = tptp_v7_0_0_0Listener;\n\n//# sourceURL=webpack:///./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Listener.js?");

/***/ }),

/***/ "./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Parser.js":
/*!****************************************************!*\
  !*** ./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Parser.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("function _typeof(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}Object.defineProperty(exports,\"__esModule\",{value:true});exports[\"default\"]=void 0;var _antlr=_interopRequireDefault(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));var _tptp_v7_0_0_0Listener=_interopRequireDefault(__webpack_require__(/*! ./tptp_v7_0_0_0Listener.js */ \"./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Listener.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var serializedATN=[\"\\x03\\u608B\\uA72A\\u8133\\uB9ED\\u417C\\u3BE7\\u7786\",\"\\u5964\\x03e\\u0668\\x04\\x02\\t\\x02\\x04\\x03\\t\\x03\\x04\\x04\",\"\\t\\x04\\x04\\x05\\t\\x05\\x04\\x06\\t\\x06\\x04\\x07\\t\\x07\",\"\\x04\\b\\t\\b\\x04\\t\\t\\t\\x04\\n\\t\\n\\x04\\x0B\\t\\x0B\\x04\\f\\t\\f\",\"\\x04\\r\\t\\r\\x04\\x0E\\t\\x0E\\x04\\x0F\\t\\x0F\\x04\\x10\\t\\x10\",\"\\x04\\x11\\t\\x11\\x04\\x12\\t\\x12\\x04\\x13\\t\\x13\\x04\\x14\",\"\\t\\x14\\x04\\x15\\t\\x15\\x04\\x16\\t\\x16\\x04\\x17\\t\\x17\",\"\\x04\\x18\\t\\x18\\x04\\x19\\t\\x19\\x04\\x1A\\t\\x1A\\x04\\x1B\",\"\\t\\x1B\\x04\\x1C\\t\\x1C\\x04\\x1D\\t\\x1D\\x04\\x1E\\t\\x1E\",\"\\x04\\x1F\\t\\x1F\\x04 \\t \\x04!\\t!\\x04\\\"\\t\\\"\\x04#\\t#\\x04\",\"$\\t$\\x04%\\t%\\x04&\\t&\\x04'\\t'\\x04(\\t(\\x04)\\t)\\x04*\\t*\\x04\",\"+\\t+\\x04,\\t,\\x04-\\t-\\x04.\\t.\\x04/\\t/\\x040\\t0\\x041\\t1\\x04\",\"2\\t2\\x043\\t3\\x044\\t4\\x045\\t5\\x046\\t6\\x047\\t7\\x048\\t8\\x04\",\"9\\t9\\x04:\\t:\\x04;\\t;\\x04<\\t<\\x04=\\t=\\x04>\\t>\\x04?\\t?\\x04\",\"@\\t@\\x04A\\tA\\x04B\\tB\\x04C\\tC\\x04D\\tD\\x04E\\tE\\x04F\\tF\\x04\",\"G\\tG\\x04H\\tH\\x04I\\tI\\x04J\\tJ\\x04K\\tK\\x04L\\tL\\x04M\\tM\\x04\",\"N\\tN\\x04O\\tO\\x04P\\tP\\x04Q\\tQ\\x04R\\tR\\x04S\\tS\\x04T\\tT\\x04\",\"U\\tU\\x04V\\tV\\x04W\\tW\\x04X\\tX\\x04Y\\tY\\x04Z\\tZ\\x04[\\t[\\x04\",\"\\\\\\t\\\\\\x04]\\t]\\x04^\\t^\\x04_\\t_\\x04`\\t`\\x04a\\ta\\x04b\\tb\\x04\",\"c\\tc\\x04d\\td\\x04e\\te\\x04f\\tf\\x04g\\tg\\x04h\\th\\x04i\\ti\\x04\",\"j\\tj\\x04k\\tk\\x04l\\tl\\x04m\\tm\\x04n\\tn\\x04o\\to\\x04p\\tp\\x04\",\"q\\tq\\x04r\\tr\\x04s\\ts\\x04t\\tt\\x04u\\tu\\x04v\\tv\\x04w\\tw\\x04\",\"x\\tx\\x04y\\ty\\x04z\\tz\\x04{\\t{\\x04|\\t|\\x04}\\t}\\x04~\\t~\\x04\",\"\\x7F\\t\\x7F\\x04\\x80\\t\\x80\\x04\\x81\\t\\x81\\x04\\x82\\t\",\"\\x82\\x04\\x83\\t\\x83\\x04\\x84\\t\\x84\\x04\\x85\\t\\x85\\x04\",\"\\x86\\t\\x86\\x04\\x87\\t\\x87\\x04\\x88\\t\\x88\\x04\\x89\\t\",\"\\x89\\x04\\x8A\\t\\x8A\\x04\\x8B\\t\\x8B\\x04\\x8C\\t\\x8C\\x04\",\"\\x8D\\t\\x8D\\x04\\x8E\\t\\x8E\\x04\\x8F\\t\\x8F\\x04\\x90\\t\",\"\\x90\\x04\\x91\\t\\x91\\x04\\x92\\t\\x92\\x04\\x93\\t\\x93\\x04\",\"\\x94\\t\\x94\\x04\\x95\\t\\x95\\x04\\x96\\t\\x96\\x04\\x97\\t\",\"\\x97\\x04\\x98\\t\\x98\\x04\\x99\\t\\x99\\x04\\x9A\\t\\x9A\\x04\",\"\\x9B\\t\\x9B\\x04\\x9C\\t\\x9C\\x04\\x9D\\t\\x9D\\x04\\x9E\\t\",\"\\x9E\\x04\\x9F\\t\\x9F\\x04\\xA0\\t\\xA0\\x04\\xA1\\t\\xA1\\x04\",\"\\xA2\\t\\xA2\\x04\\xA3\\t\\xA3\\x04\\xA4\\t\\xA4\\x04\\xA5\\t\",\"\\xA5\\x04\\xA6\\t\\xA6\\x04\\xA7\\t\\xA7\\x04\\xA8\\t\\xA8\\x04\",\"\\xA9\\t\\xA9\\x04\\xAA\\t\\xAA\\x04\\xAB\\t\\xAB\\x04\\xAC\\t\",\"\\xAC\\x04\\xAD\\t\\xAD\\x04\\xAE\\t\\xAE\\x04\\xAF\\t\\xAF\\x04\",\"\\xB0\\t\\xB0\\x04\\xB1\\t\\xB1\\x04\\xB2\\t\\xB2\\x04\\xB3\\t\",\"\\xB3\\x04\\xB4\\t\\xB4\\x04\\xB5\\t\\xB5\\x04\\xB6\\t\\xB6\\x04\",\"\\xB7\\t\\xB7\\x04\\xB8\\t\\xB8\\x04\\xB9\\t\\xB9\\x04\\xBA\\t\",\"\\xBA\\x04\\xBB\\t\\xBB\\x04\\xBC\\t\\xBC\\x04\\xBD\\t\\xBD\\x04\",\"\\xBE\\t\\xBE\\x04\\xBF\\t\\xBF\\x04\\xC0\\t\\xC0\\x04\\xC1\\t\",\"\\xC1\\x04\\xC2\\t\\xC2\\x04\\xC3\\t\\xC3\\x04\\xC4\\t\\xC4\\x04\",\"\\xC5\\t\\xC5\\x04\\xC6\\t\\xC6\\x04\\xC7\\t\\xC7\\x04\\xC8\\t\",\"\\xC8\\x04\\xC9\\t\\xC9\\x04\\xCA\\t\\xCA\\x03\\x02\\x07\\x02\",\"\\u0196\\n\\x02\\f\\x02\\x0E\\x02\\u0199\\x0B\\x02\\x03\\x02\\x03\",\"\\x02\\x03\\x03\\x03\\x03\\x05\\x03\\u019F\\n\\x03\\x03\\x04\",\"\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\\x03\\x04\",\"\\x05\\x04\\u01A8\\n\\x04\\x03\\x05\\x03\\x05\\x03\\x05\\x03\",\"\\x05\\x03\\x05\\x03\\x05\\x03\\x05\\x05\\x05\\u01B1\\n\\x05\",\"\\x03\\x05\\x03\\x05\\x03\\x06\\x03\\x06\\x03\\x07\\x03\\x07\",\"\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x03\\x07\\x05\\x07\",\"\\u01BE\\n\\x07\\x03\\x07\\x03\\x07\\x03\\b\\x03\\b\\x03\\b\\x03\",\"\\b\\x03\\b\\x03\\b\\x03\\b\\x05\\b\\u01C9\\n\\b\\x03\\b\\x03\\b\\x03\\t\",\"\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x03\\t\\x05\\t\\u01D4\\n\\t\\x03\",\"\\t\\x03\\t\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x03\\n\\x05\",\"\\n\\u01DF\\n\\n\\x03\\n\\x03\\n\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x03\",\"\\x0B\\x03\\x0B\\x03\\x0B\\x03\\x0B\\x05\\x0B\\u01EA\\n\\x0B\",\"\\x03\\x0B\\x03\\x0B\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\\f\\x03\",\"\\f\\x03\\f\\x05\\f\\u01F5\\n\\f\\x03\\f\\x03\\f\\x03\\r\\x03\\r\\x03\\r\",\"\\x05\\r\\u01FC\\n\\r\\x03\\x0E\\x03\\x0E\\x03\\x0F\\x03\\x0F\\x05\",\"\\x0F\\u0202\\n\\x0F\\x03\\x10\\x03\\x10\\x03\\x10\\x03\\x10\",\"\\x05\\x10\\u0208\\n\\x10\\x03\\x11\\x03\\x11\\x03\\x11\\x05\",\"\\x11\\u020D\\n\\x11\\x03\\x12\\x03\\x12\\x03\\x12\\x03\\x12\",\"\\x03\\x13\\x03\\x13\\x03\\x13\\x05\\x13\\u0216\\n\\x13\\x03\",\"\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\\x14\\x03\",\"\\x14\\x03\\x14\\x07\\x14\\u0220\\n\\x14\\f\\x14\\x0E\\x14\\u0223\",\"\\x0B\\x14\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\\x03\\x15\",\"\\x03\\x15\\x03\\x15\\x03\\x15\\x07\\x15\\u022D\\n\\x15\\f\\x15\",\"\\x0E\\x15\\u0230\\x0B\\x15\\x03\\x16\\x03\\x16\\x03\\x16\\x03\",\"\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x03\\x16\\x07\\x16\\u023A\",\"\\n\\x16\\f\\x16\\x0E\\x16\\u023D\\x0B\\x16\\x03\\x17\\x03\\x17\",\"\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\\x03\\x17\",\"\\x03\\x17\\x03\\x17\\x05\\x17\\u0249\\n\\x17\\x03\\x18\\x03\",\"\\x18\\x03\\x18\\x03\\x19\\x03\\x19\\x03\\x19\\x03\\x19\\x03\",\"\\x19\\x03\\x19\\x03\\x1A\\x03\\x1A\\x03\\x1A\\x07\\x1A\\u0257\",\"\\n\\x1A\\f\\x1A\\x0E\\x1A\\u025A\\x0B\\x1A\\x03\\x1B\\x03\\x1B\",\"\\x05\\x1B\\u025E\\n\\x1B\\x03\\x1C\\x03\\x1C\\x03\\x1C\\x03\",\"\\x1C\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\\x1D\\x03\",\"\\x1E\\x03\\x1E\\x03\\x1E\\x03\\x1E\\x05\\x1E\\u026D\\n\\x1E\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\",\"\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x03\\x1F\\x05\\x1F\\u027F\\n\",\"\\x1F\\x03 \\x03 \\x03 \\x05 \\u0284\\n \\x03!\\x03!\\x03!\\x03\",\"!\\x03!\\x03!\\x03!\\x03!\\x03\\\"\\x03\\\"\\x03\\\"\\x03\\\"\\x03\",\"\\\"\\x03\\\"\\x03#\\x03#\\x03$\\x03$\\x03$\\x03$\\x03%\\x03%\\x03\",\"%\\x03%\\x03%\\x05%\\u029F\\n%\\x03&\\x03&\\x03&\\x03&\\x03'\",\"\\x03'\\x03'\\x05'\\u02A8\\n'\\x03(\\x03(\\x03)\\x03)\\x03\",\"*\\x03*\\x03*\\x05*\\u02B1\\n*\\x03+\\x03+\\x03+\\x03+\\x03+\\x03\",\"+\\x03+\\x03+\\x05+\\u02BB\\n+\\x03,\\x03,\\x03,\\x03,\\x03,\\x03\",\",\\x03,\\x03,\\x07,\\u02C5\\n,\\f,\\x0E,\\u02C8\\x0B,\\x03-\\x03\",\"-\\x03-\\x03-\\x03-\\x03-\\x03-\\x03-\\x07-\\u02D2\\n-\\f-\\x0E\",\"-\\u02D5\\x0B-\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03.\\x03\",\".\\x05.\\u02DF\\n.\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03/\\x03\",\"/\\x03/\\x03/\\x05/\\u02EB\\n/\\x030\\x030\\x030\\x070\\u02F0\\n\",\"0\\f0\\x0E0\\u02F3\\x0B0\\x031\\x031\\x051\\u02F7\\n1\\x032\\x03\",\"2\\x033\\x033\\x033\\x053\\u02FE\\n3\\x034\\x034\\x034\\x054\\u0303\",\"\\n4\\x035\\x035\\x055\\u0307\\n5\\x036\\x036\\x036\\x036\\x03\",\"7\\x037\\x057\\u030F\\n7\\x038\\x038\\x038\\x038\\x038\\x038\\x03\",\"8\\x038\\x078\\u0319\\n8\\f8\\x0E8\\u031C\\x0B8\\x039\\x039\\x03\",\"9\\x039\\x039\\x039\\x039\\x039\\x079\\u0326\\n9\\f9\\x0E9\\u0329\",\"\\x0B9\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03:\\x03\",\":\\x05:\\u0334\\n:\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03;\\x03\",\"<\\x03<\\x03<\\x07<\\u0340\\n<\\f<\\x0E<\\u0343\\x0B<\\x03=\\x03\",\"=\\x05=\\u0347\\n=\\x03>\\x03>\\x03>\\x03>\\x03?\\x03?\\x03?\\x03\",\"?\\x05?\\u0351\\n?\\x03@\\x03@\\x03A\\x03A\\x03A\\x03A\\x03A\\x03\",\"A\\x03A\\x03A\\x03B\\x03B\\x03B\\x03B\\x03B\\x03B\\x03B\\x03\",\"B\\x03B\\x03B\\x03B\\x03B\\x05B\\u0369\\nB\\x03C\\x03C\\x03C\\x03\",\"C\\x03C\\x05C\\u0370\\nC\\x03D\\x03D\\x03D\\x07D\\u0375\\nD\\fD\\x0E\",\"D\\u0378\\x0BD\\x03E\\x03E\\x03E\\x03E\\x03E\\x03E\\x03E\\x03\",\"E\\x05E\\u0382\\nE\\x03F\\x03F\\x03F\\x03F\\x03F\\x03F\\x03F\\x03\",\"F\\x05F\\u038C\\nF\\x03G\\x03G\\x03G\\x03G\\x03G\\x05G\\u0393\\n\",\"G\\x03H\\x03H\\x03H\\x07H\\u0398\\nH\\fH\\x0EH\\u039B\\x0BH\\x03\",\"I\\x03I\\x03I\\x03I\\x03I\\x03I\\x03I\\x03I\\x05I\\u03A5\\nI\\x03\",\"J\\x03J\\x03J\\x03J\\x03J\\x03J\\x03J\\x03J\\x05J\\u03AF\\nJ\\x03\",\"K\\x03K\\x03K\\x03K\\x03K\\x03K\\x03K\\x03K\\x05K\\u03B9\\nK\\x03\",\"L\\x03L\\x03L\\x03L\\x03L\\x05L\\u03C0\\nL\\x03M\\x03M\\x03M\\x07\",\"M\\u03C5\\nM\\fM\\x0EM\\u03C8\\x0BM\\x03N\\x03N\\x03N\\x03N\\x03\",\"N\\x03N\\x03N\\x03N\\x05N\\u03D2\\nN\\x03O\\x03O\\x03O\\x03O\\x03\",\"P\\x03P\\x03P\\x03P\\x03P\\x03P\\x03P\\x05P\\u03DF\\nP\\x03Q\\x03\",\"Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03Q\\x03R\\x03R\\x03R\\x03R\\x03\",\"R\\x05R\\u03ED\\nR\\x03S\\x03S\\x03S\\x03S\\x03S\\x05S\\u03F4\\n\",\"S\\x03T\\x03T\\x03T\\x03T\\x03T\\x03T\\x03T\\x03T\\x05T\\u03FE\",\"\\nT\\x03U\\x03U\\x03U\\x07U\\u0403\\nU\\fU\\x0EU\\u0406\\x0BU\\x03\",\"V\\x03V\\x03V\\x03V\\x03W\\x03W\\x03W\\x03W\\x03W\\x03W\\x03\",\"W\\x03W\\x07W\\u0414\\nW\\fW\\x0EW\\u0417\\x0BW\\x03X\\x03X\\x05\",\"X\\u041B\\nX\\x03Y\\x03Y\\x05Y\\u041F\\nY\\x03Z\\x03Z\\x03Z\\x03\",\"Z\\x03Z\\x03Z\\x03Z\\x03[\\x03[\\x05[\\u042A\\n[\\x03\\\\\\x03\\\\\",\"\\x05\\\\\\u042E\\n\\\\\\x03]\\x03]\\x05]\\u0432\\n]\\x03^\\x03^\\x03\",\"^\\x03^\\x03_\\x03_\\x05_\\u043A\\n_\\x03`\\x03`\\x03`\\x03`\\x03\",\"`\\x03`\\x03`\\x03`\\x07`\\u0444\\n`\\f`\\x0E`\\u0447\\x0B`\\x03\",\"a\\x03a\\x03a\\x03a\\x03a\\x03a\\x03a\\x03a\\x07a\\u0451\\na\\f\",\"a\\x0Ea\\u0454\\x0Ba\\x03b\\x03b\\x03b\\x03b\\x03b\\x03b\\x03\",\"b\\x05b\\u045D\\nb\\x03c\\x03c\\x03c\\x03c\\x03c\\x03c\\x03c\\x03\",\"d\\x03d\\x03d\\x07d\\u0469\\nd\\fd\\x0Ed\\u046C\\x0Bd\\x03e\\x03\",\"e\\x03e\\x03e\\x05e\\u0472\\ne\\x03f\\x03f\\x03f\\x03f\\x03g\\x03\",\"g\\x03g\\x05g\\u047B\\ng\\x03h\\x03h\\x03i\\x03i\\x05i\\u0481\\n\",\"i\\x03j\\x03j\\x03k\\x03k\\x03k\\x03k\\x03l\\x03l\\x03m\\x03\",\"m\\x03m\\x03m\\x03m\\x03m\\x05m\\u0491\\nm\\x03n\\x03n\\x05n\\u0495\",\"\\nn\\x03o\\x03o\\x03p\\x03p\\x03p\\x03p\\x03p\\x03p\\x05p\\u049F\",\"\\np\\x03q\\x03q\\x03q\\x03q\\x03q\\x03q\\x05q\\u04A7\\nq\\x03\",\"r\\x03r\\x03r\\x07r\\u04AC\\nr\\fr\\x0Er\\u04AF\\x0Br\\x03s\\x03\",\"s\\x03s\\x03s\\x03s\\x05s\\u04B6\\ns\\x03t\\x03t\\x03t\\x05t\\u04BB\",\"\\nt\\x03u\\x03u\\x03u\\x03u\\x03u\\x03u\\x03u\\x03u\\x03v\\x03\",\"v\\x03v\\x03v\\x03v\\x03v\\x03v\\x03v\\x03v\\x03v\\x03v\\x03\",\"v\\x05v\\u04D1\\nv\\x03w\\x03w\\x03w\\x03w\\x03w\\x05w\\u04D8\\n\",\"w\\x03x\\x03x\\x03x\\x03x\\x03x\\x03x\\x03x\\x03x\\x05x\\u04E2\",\"\\nx\\x03y\\x03y\\x03y\\x03y\\x03y\\x05y\\u04E9\\ny\\x03z\\x03\",\"z\\x03z\\x07z\\u04EE\\nz\\fz\\x0Ez\\u04F1\\x0Bz\\x03{\\x03{\\x03\",\"{\\x03{\\x03{\\x05{\\u04F8\\n{\\x03|\\x03|\\x03|\\x03|\\x03|\\x03\",\"|\\x07|\\u0500\\n|\\f|\\x0E|\\u0503\\x0B|\\x03}\\x03}\\x03}\\x03\",\"}\\x05}\\u0509\\n}\\x03~\\x03~\\x03~\\x05~\\u050E\\n~\\x03\\x7F\\x03\",\"\\x7F\\x03\\x80\\x03\\x80\\x03\\x81\\x03\\x81\\x03\\x81\\x03\",\"\\x81\\x05\\x81\\u0518\\n\\x81\\x03\\x82\\x03\\x82\\x05\\x82\",\"\\u051C\\n\\x82\\x03\\x83\\x03\\x83\\x03\\x84\\x03\\x84\\x05\",\"\\x84\\u0522\\n\\x84\\x03\\x85\\x03\\x85\\x03\\x86\\x03\\x86\",\"\\x03\\x87\\x03\\x87\\x03\\x88\\x03\\x88\\x03\\x89\\x03\\x89\",\"\\x03\\x8A\\x03\\x8A\\x03\\x8B\\x03\\x8B\\x03\\x8C\\x03\\x8C\",\"\\x03\\x8D\\x03\\x8D\\x05\\x8D\\u0536\\n\\x8D\\x03\\x8E\\x03\",\"\\x8E\\x05\\x8E\\u053A\\n\\x8E\\x03\\x8F\\x03\\x8F\\x03\\x90\",\"\\x03\\x90\\x03\\x91\\x03\\x91\\x03\\x92\\x03\\x92\\x03\\x93\",\"\\x03\\x93\\x03\\x94\\x03\\x94\\x03\\x95\\x03\\x95\\x03\\x96\",\"\\x03\\x96\\x03\\x97\\x03\\x97\\x03\\x98\\x03\\x98\\x05\\x98\",\"\\u0550\\n\\x98\\x03\\x99\\x03\\x99\\x03\\x9A\\x03\\x9A\\x03\",\"\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x03\\x9A\\x05\",\"\\x9A\\u055C\\n\\x9A\\x03\\x9B\\x03\\x9B\\x03\\x9B\\x07\\x9B\",\"\\u0561\\n\\x9B\\f\\x9B\\x0E\\x9B\\u0564\\x0B\\x9B\\x03\\x9C\\x03\",\"\\x9C\\x05\\x9C\\u0568\\n\\x9C\\x03\\x9D\\x03\\x9D\\x03\\x9D\",\"\\x03\\x9D\\x03\\x9D\\x03\\x9D\\x03\\x9D\\x03\\x9D\\x03\\x9E\",\"\\x03\\x9E\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\\x03\\x9F\",\"\\x05\\x9F\\u0579\\n\\x9F\\x03\\xA0\\x03\\xA0\\x03\\xA0\\x07\",\"\\xA0\\u057E\\n\\xA0\\f\\xA0\\x0E\\xA0\\u0581\\x0B\\xA0\\x03\\xA1\",\"\\x03\\xA1\\x05\\xA1\\u0585\\n\\xA1\\x03\\xA2\\x03\\xA2\\x03\",\"\\xA2\\x03\\xA3\\x03\\xA3\\x03\\xA3\\x05\\xA3\\u058D\\n\\xA3\",\"\\x03\\xA3\\x03\\xA3\\x03\\xA4\\x03\\xA4\\x03\\xA5\\x03\\xA5\",\"\\x03\\xA5\\x05\\xA5\\u0596\\n\\xA5\\x03\\xA6\\x03\\xA6\\x03\",\"\\xA6\\x05\\xA6\\u059B\\n\\xA6\\x03\\xA6\\x03\\xA6\\x03\\xA7\",\"\\x03\\xA7\\x03\\xA7\\x03\\xA8\\x03\\xA8\\x03\\xA8\\x05\\xA8\",\"\\u05A5\\n\\xA8\\x03\\xA8\\x03\\xA8\\x03\\xA9\\x03\\xA9\\x03\",\"\\xAA\\x03\\xAA\\x03\\xAA\\x05\\xAA\\u05AE\\n\\xAA\\x03\\xAA\",\"\\x03\\xAA\\x03\\xAB\\x03\\xAB\\x03\\xAC\\x03\\xAC\\x03\\xAC\",\"\\x03\\xAD\\x03\\xAD\\x03\\xAD\\x03\\xAD\\x03\\xAD\\x03\\xAD\",\"\\x05\\xAD\\u05BD\\n\\xAD\\x03\\xAE\\x03\\xAE\\x03\\xAE\\x07\",\"\\xAE\\u05C2\\n\\xAE\\f\\xAE\\x0E\\xAE\\u05C5\\x0B\\xAE\\x03\\xAF\",\"\\x03\\xAF\\x03\\xAF\\x05\\xAF\\u05CA\\n\\xAF\\x03\\xB0\\x03\",\"\\xB0\\x05\\xB0\\u05CE\\n\\xB0\\x03\\xB1\\x03\\xB1\\x03\\xB1\",\"\\x03\\xB1\\x03\\xB2\\x03\\xB2\\x03\\xB2\\x03\\xB2\\x03\\xB3\",\"\\x03\\xB3\\x03\\xB3\\x03\\xB3\\x05\\xB3\\u05DC\\n\\xB3\\x03\",\"\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x03\\xB4\\x05\\xB4\\u05E3\",\"\\n\\xB4\\x03\\xB5\\x03\\xB5\\x03\\xB6\\x03\\xB6\\x03\\xB6\",\"\\x03\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB6\\x03\\xB7\\x03\\xB7\",\"\\x03\\xB7\\x03\\xB7\\x03\\xB7\\x03\\xB7\\x03\\xB8\\x03\\xB8\",\"\\x03\\xB8\\x03\\xB8\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xB9\",\"\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xB9\\x03\\xBA\\x03\\xBA\",\"\\x03\\xBA\\x07\\xBA\\u0603\\n\\xBA\\f\\xBA\\x0E\\xBA\\u0606\\x0B\",\"\\xBA\\x03\\xBB\\x03\\xBB\\x05\\xBB\\u060A\\n\\xBB\\x03\\xBC\",\"\\x03\\xBC\\x03\\xBC\\x05\\xBC\\u060F\\n\\xBC\\x03\\xBC\\x03\",\"\\xBC\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\\xBD\\x03\",\"\\xBE\\x03\\xBE\\x03\\xBE\\x07\\xBE\\u061B\\n\\xBE\\f\\xBE\\x0E\",\"\\xBE\\u061E\\x0B\\xBE\\x03\\xBF\\x03\\xBF\\x03\\xBF\\x03\\xBF\",\"\\x03\\xBF\\x03\\xBF\\x05\\xBF\\u0626\\n\\xBF\\x03\\xC0\\x03\",\"\\xC0\\x03\\xC0\\x03\\xC0\\x03\\xC0\\x03\\xC0\\x05\\xC0\\u062E\",\"\\n\\xC0\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x03\\xC1\\x03\\xC1\",\"\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\",\"\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\",\"\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\\x03\\xC2\",\"\\x03\\xC2\\x03\\xC2\\x05\\xC2\\u0649\\n\\xC2\\x03\\xC3\\x03\",\"\\xC3\\x03\\xC3\\x03\\xC3\\x03\\xC3\\x05\\xC3\\u0650\\n\\xC3\",\"\\x03\\xC4\\x03\\xC4\\x03\\xC4\\x07\\xC4\\u0655\\n\\xC4\\f\\xC4\",\"\\x0E\\xC4\\u0658\\x0B\\xC4\\x03\\xC5\\x03\\xC5\\x05\\xC5\\u065C\",\"\\n\\xC5\\x03\\xC6\\x03\\xC6\\x03\\xC7\\x03\\xC7\\x03\\xC8\",\"\\x03\\xC8\\x03\\xC9\\x03\\xC9\\x03\\xCA\\x03\\xCA\\x03\\xCA\",\"\\x02\\r&(*VXnp\\xAC\\xBE\\xC0\\xF6\\xCB\\x02\\x04\\x06\\b\\n\",\"\\f\\x0E\\x10\\x12\\x14\\x16\\x18\\x1A\\x1C\\x1E \\\"$&(*,.02\",\"468:<>@BDFHJLNPRTVXZ\\\\^`bdfhjlnprtvxz|~\\x80\\x82\\x84\\x86\\x88\",\"\\x8A\\x8C\\x8E\\x90\\x92\\x94\\x96\\x98\\x9A\\x9C\\x9E\\xA0\",\"\\xA2\\xA4\\xA6\\xA8\\xAA\\xAC\\xAE\\xB0\\xB2\\xB4\\xB6\\xB8\",\"\\xBA\\xBC\\xBE\\xC0\\xC2\\xC4\\xC6\\xC8\\xCA\\xCC\\xCE\\xD0\",\"\\xD2\\xD4\\xD6\\xD8\\xDA\\xDC\\xDE\\xE0\\xE2\\xE4\\xE6\\xE8\",\"\\xEA\\xEC\\xEE\\xF0\\xF2\\xF4\\xF6\\xF8\\xFA\\xFC\\xFE\\u0100\",\"\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\",\"\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\",\"\\u0132\\u0134\\u0136\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148\",\"\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\",\"\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178\",\"\\u017A\\u017C\\u017E\\u0180\\u0182\\u0184\\u0186\\u0188\\u018A\\u018C\\u018E\\u0190\",\"\\u0192\\x02\\x0B\\x05\\x02??AACC\\x04\\x0288==\\x07\\x0277<\",\"<@@BBDD\\x04\\x02;;>>\\x03\\x0205\\x03\\x02./\\x04\\x02::FF\",\"\\x03\\x02`a\\x05\\x02LLOORR\\x02\\u0657\\x02\\u0197\\x03\\x02\",\"\\x02\\x02\\x04\\u019E\\x03\\x02\\x02\\x02\\x06\\u01A7\\x03\\x02\",\"\\x02\\x02\\b\\u01A9\\x03\\x02\\x02\\x02\\n\\u01B4\\x03\\x02\\x02\",\"\\x02\\f\\u01B6\\x03\\x02\\x02\\x02\\x0E\\u01C1\\x03\\x02\\x02\",\"\\x02\\x10\\u01CC\\x03\\x02\\x02\\x02\\x12\\u01D7\\x03\\x02\\x02\",\"\\x02\\x14\\u01E2\\x03\\x02\\x02\\x02\\x16\\u01ED\\x03\\x02\\x02\",\"\\x02\\x18\\u01F8\\x03\\x02\\x02\\x02\\x1A\\u01FD\\x03\\x02\\x02\",\"\\x02\\x1C\\u0201\\x03\\x02\\x02\\x02\\x1E\\u0207\\x03\\x02\\x02\",\"\\x02 \\u020C\\x03\\x02\\x02\\x02\\\"\\u020E\\x03\\x02\\x02\\x02\",\"$\\u0215\\x03\\x02\\x02\\x02&\\u0217\\x03\\x02\\x02\\x02(\\u0224\",\"\\x03\\x02\\x02\\x02*\\u0231\\x03\\x02\\x02\\x02,\\u0248\\x03\",\"\\x02\\x02\\x02.\\u024A\\x03\\x02\\x02\\x020\\u024D\\x03\\x02\",\"\\x02\\x022\\u0253\\x03\\x02\\x02\\x024\\u025D\\x03\\x02\\x02\",\"\\x026\\u025F\\x03\\x02\\x02\\x028\\u0263\\x03\\x02\\x02\\x02\",\":\\u026C\\x03\\x02\\x02\\x02<\\u027E\\x03\\x02\\x02\\x02>\\u0283\",\"\\x03\\x02\\x02\\x02@\\u0285\\x03\\x02\\x02\\x02B\\u028D\\x03\",\"\\x02\\x02\\x02D\\u0293\\x03\\x02\\x02\\x02F\\u0295\\x03\\x02\",\"\\x02\\x02H\\u029E\\x03\\x02\\x02\\x02J\\u02A0\\x03\\x02\\x02\",\"\\x02L\\u02A7\\x03\\x02\\x02\\x02N\\u02A9\\x03\\x02\\x02\\x02\",\"P\\u02AB\\x03\\x02\\x02\\x02R\\u02B0\\x03\\x02\\x02\\x02T\\u02BA\",\"\\x03\\x02\\x02\\x02V\\u02BC\\x03\\x02\\x02\\x02X\\u02C9\\x03\",\"\\x02\\x02\\x02Z\\u02DE\\x03\\x02\\x02\\x02\\\\\\u02EA\\x03\\x02\",\"\\x02\\x02^\\u02EC\\x03\\x02\\x02\\x02`\\u02F6\\x03\\x02\\x02\",\"\\x02b\\u02F8\\x03\\x02\\x02\\x02d\\u02FD\\x03\\x02\\x02\\x02\",\"f\\u0302\\x03\\x02\\x02\\x02h\\u0306\\x03\\x02\\x02\\x02j\\u0308\",\"\\x03\\x02\\x02\\x02l\\u030E\\x03\\x02\\x02\\x02n\\u0310\\x03\",\"\\x02\\x02\\x02p\\u031D\\x03\\x02\\x02\\x02r\\u0333\\x03\\x02\",\"\\x02\\x02t\\u0335\\x03\\x02\\x02\\x02v\\u033C\\x03\\x02\\x02\",\"\\x02x\\u0346\\x03\\x02\\x02\\x02z\\u0348\\x03\\x02\\x02\\x02\",\"|\\u0350\\x03\\x02\\x02\\x02~\\u0352\\x03\\x02\\x02\\x02\\x80\",\"\\u0354\\x03\\x02\\x02\\x02\\x82\\u0368\\x03\\x02\\x02\\x02\\x84\",\"\\u036F\\x03\\x02\\x02\\x02\\x86\\u0371\\x03\\x02\\x02\\x02\\x88\",\"\\u0381\\x03\\x02\\x02\\x02\\x8A\\u038B\\x03\\x02\\x02\\x02\\x8C\",\"\\u0392\\x03\\x02\\x02\\x02\\x8E\\u0394\\x03\\x02\\x02\\x02\\x90\",\"\\u03A4\\x03\\x02\\x02\\x02\\x92\\u03AE\\x03\\x02\\x02\\x02\\x94\",\"\\u03B8\\x03\\x02\\x02\\x02\\x96\\u03BF\\x03\\x02\\x02\\x02\\x98\",\"\\u03C1\\x03\\x02\\x02\\x02\\x9A\\u03D1\\x03\\x02\\x02\\x02\\x9C\",\"\\u03D3\\x03\\x02\\x02\\x02\\x9E\\u03DE\\x03\\x02\\x02\\x02\\xA0\",\"\\u03E0\\x03\\x02\\x02\\x02\\xA2\\u03EC\\x03\\x02\\x02\\x02\\xA4\",\"\\u03F3\\x03\\x02\\x02\\x02\\xA6\\u03FD\\x03\\x02\\x02\\x02\\xA8\",\"\\u03FF\\x03\\x02\\x02\\x02\\xAA\\u0407\\x03\\x02\\x02\\x02\\xAC\",\"\\u040B\\x03\\x02\\x02\\x02\\xAE\\u041A\\x03\\x02\\x02\\x02\\xB0\",\"\\u041E\\x03\\x02\\x02\\x02\\xB2\\u0420\\x03\\x02\\x02\\x02\\xB4\",\"\\u0429\\x03\\x02\\x02\\x02\\xB6\\u042D\\x03\\x02\\x02\\x02\\xB8\",\"\\u0431\\x03\\x02\\x02\\x02\\xBA\\u0433\\x03\\x02\\x02\\x02\\xBC\",\"\\u0439\\x03\\x02\\x02\\x02\\xBE\\u043B\\x03\\x02\\x02\\x02\\xC0\",\"\\u0448\\x03\\x02\\x02\\x02\\xC2\\u045C\\x03\\x02\\x02\\x02\\xC4\",\"\\u045E\\x03\\x02\\x02\\x02\\xC6\\u0465\\x03\\x02\\x02\\x02\\xC8\",\"\\u0471\\x03\\x02\\x02\\x02\\xCA\\u0473\\x03\\x02\\x02\\x02\\xCC\",\"\\u047A\\x03\\x02\\x02\\x02\\xCE\\u047C\\x03\\x02\\x02\\x02\\xD0\",\"\\u0480\\x03\\x02\\x02\\x02\\xD2\\u0482\\x03\\x02\\x02\\x02\\xD4\",\"\\u0484\\x03\\x02\\x02\\x02\\xD6\\u0488\\x03\\x02\\x02\\x02\\xD8\",\"\\u0490\\x03\\x02\\x02\\x02\\xDA\\u0494\\x03\\x02\\x02\\x02\\xDC\",\"\\u0496\\x03\\x02\\x02\\x02\\xDE\\u049E\\x03\\x02\\x02\\x02\\xE0\",\"\\u04A6\\x03\\x02\\x02\\x02\\xE2\\u04A8\\x03\\x02\\x02\\x02\\xE4\",\"\\u04B5\\x03\\x02\\x02\\x02\\xE6\\u04BA\\x03\\x02\\x02\\x02\\xE8\",\"\\u04BC\\x03\\x02\\x02\\x02\\xEA\\u04D0\\x03\\x02\\x02\\x02\\xEC\",\"\\u04D7\\x03\\x02\\x02\\x02\\xEE\\u04E1\\x03\\x02\\x02\\x02\\xF0\",\"\\u04E8\\x03\\x02\\x02\\x02\\xF2\\u04EA\\x03\\x02\\x02\\x02\\xF4\",\"\\u04F7\\x03\\x02\\x02\\x02\\xF6\\u04F9\\x03\\x02\\x02\\x02\\xF8\",\"\\u0508\\x03\\x02\\x02\\x02\\xFA\\u050D\\x03\\x02\\x02\\x02\\xFC\",\"\\u050F\\x03\\x02\\x02\\x02\\xFE\\u0511\\x03\\x02\\x02\\x02\\u0100\",\"\\u0517\\x03\\x02\\x02\\x02\\u0102\\u051B\\x03\\x02\\x02\\x02\\u0104\",\"\\u051D\\x03\\x02\\x02\\x02\\u0106\\u0521\\x03\\x02\\x02\\x02\\u0108\",\"\\u0523\\x03\\x02\\x02\\x02\\u010A\\u0525\\x03\\x02\\x02\\x02\\u010C\",\"\\u0527\\x03\\x02\\x02\\x02\\u010E\\u0529\\x03\\x02\\x02\\x02\\u0110\",\"\\u052B\\x03\\x02\\x02\\x02\\u0112\\u052D\\x03\\x02\\x02\\x02\\u0114\",\"\\u052F\\x03\\x02\\x02\\x02\\u0116\\u0531\\x03\\x02\\x02\\x02\\u0118\",\"\\u0535\\x03\\x02\\x02\\x02\\u011A\\u0539\\x03\\x02\\x02\\x02\\u011C\",\"\\u053B\\x03\\x02\\x02\\x02\\u011E\\u053D\\x03\\x02\\x02\\x02\\u0120\",\"\\u053F\\x03\\x02\\x02\\x02\\u0122\\u0541\\x03\\x02\\x02\\x02\\u0124\",\"\\u0543\\x03\\x02\\x02\\x02\\u0126\\u0545\\x03\\x02\\x02\\x02\\u0128\",\"\\u0547\\x03\\x02\\x02\\x02\\u012A\\u0549\\x03\\x02\\x02\\x02\\u012C\",\"\\u054B\\x03\\x02\\x02\\x02\\u012E\\u054F\\x03\\x02\\x02\\x02\\u0130\",\"\\u0551\\x03\\x02\\x02\\x02\\u0132\\u055B\\x03\\x02\\x02\\x02\\u0134\",\"\\u055D\\x03\\x02\\x02\\x02\\u0136\\u0567\\x03\\x02\\x02\\x02\\u0138\",\"\\u0569\\x03\\x02\\x02\\x02\\u013A\\u0571\\x03\\x02\\x02\\x02\\u013C\",\"\\u0578\\x03\\x02\\x02\\x02\\u013E\\u057A\\x03\\x02\\x02\\x02\\u0140\",\"\\u0582\\x03\\x02\\x02\\x02\\u0142\\u0586\\x03\\x02\\x02\\x02\\u0144\",\"\\u0589\\x03\\x02\\x02\\x02\\u0146\\u0590\\x03\\x02\\x02\\x02\\u0148\",\"\\u0595\\x03\\x02\\x02\\x02\\u014A\\u0597\\x03\\x02\\x02\\x02\\u014C\",\"\\u059E\\x03\\x02\\x02\\x02\\u014E\\u05A1\\x03\\x02\\x02\\x02\\u0150\",\"\\u05A8\\x03\\x02\\x02\\x02\\u0152\\u05AA\\x03\\x02\\x02\\x02\\u0154\",\"\\u05B1\\x03\\x02\\x02\\x02\\u0156\\u05B3\\x03\\x02\\x02\\x02\\u0158\",\"\\u05BC\\x03\\x02\\x02\\x02\\u015A\\u05BE\\x03\\x02\\x02\\x02\\u015C\",\"\\u05C9\\x03\\x02\\x02\\x02\\u015E\\u05CD\\x03\\x02\\x02\\x02\\u0160\",\"\\u05CF\\x03\\x02\\x02\\x02\\u0162\\u05D3\\x03\\x02\\x02\\x02\\u0164\",\"\\u05DB\\x03\\x02\\x02\\x02\\u0166\\u05E2\\x03\\x02\\x02\\x02\\u0168\",\"\\u05E4\\x03\\x02\\x02\\x02\\u016A\\u05E6\\x03\\x02\\x02\\x02\\u016C\",\"\\u05ED\\x03\\x02\\x02\\x02\\u016E\\u05F3\\x03\\x02\\x02\\x02\\u0170\",\"\\u05F7\\x03\\x02\\x02\\x02\\u0172\\u05FF\\x03\\x02\\x02\\x02\\u0174\",\"\\u0609\\x03\\x02\\x02\\x02\\u0176\\u060B\\x03\\x02\\x02\\x02\\u0178\",\"\\u0612\\x03\\x02\\x02\\x02\\u017A\\u0617\\x03\\x02\\x02\\x02\\u017C\",\"\\u0625\\x03\\x02\\x02\\x02\\u017E\\u062D\\x03\\x02\\x02\\x02\\u0180\",\"\\u062F\\x03\\x02\\x02\\x02\\u0182\\u0648\\x03\\x02\\x02\\x02\\u0184\",\"\\u064F\\x03\\x02\\x02\\x02\\u0186\\u0651\\x03\\x02\\x02\\x02\\u0188\",\"\\u065B\\x03\\x02\\x02\\x02\\u018A\\u065D\\x03\\x02\\x02\\x02\\u018C\",\"\\u065F\\x03\\x02\\x02\\x02\\u018E\\u0661\\x03\\x02\\x02\\x02\\u0190\",\"\\u0663\\x03\\x02\\x02\\x02\\u0192\\u0665\\x03\\x02\\x02\\x02\\u0194\",\"\\u0196\\x05\\x04\\x03\\x02\\u0195\\u0194\\x03\\x02\\x02\\x02\\u0196\",\"\\u0199\\x03\\x02\\x02\\x02\\u0197\\u0195\\x03\\x02\\x02\\x02\\u0197\",\"\\u0198\\x03\\x02\\x02\\x02\\u0198\\u019A\\x03\\x02\\x02\\x02\\u0199\",\"\\u0197\\x03\\x02\\x02\\x02\\u019A\\u019B\\x07\\x02\\x02\\x03\\u019B\",\"\\x03\\x03\\x02\\x02\\x02\\u019C\\u019F\\x05\\x06\\x04\\x02\\u019D\",\"\\u019F\\x05\\u0176\\xBC\\x02\\u019E\\u019C\\x03\\x02\\x02\\x02\\u019E\",\"\\u019D\\x03\\x02\\x02\\x02\\u019F\\x05\\x03\\x02\\x02\\x02\\u01A0\",\"\\u01A8\\x05\\f\\x07\\x02\\u01A1\\u01A8\\x05\\x0E\\b\\x02\\u01A2\\u01A8\",\"\\x05\\x10\\t\\x02\\u01A3\\u01A8\\x05\\x12\\n\\x02\\u01A4\\u01A8\\x05\",\"\\x14\\x0B\\x02\\u01A5\\u01A8\\x05\\x16\\f\\x02\\u01A6\\u01A8\\x05\",\"\\b\\x05\\x02\\u01A7\\u01A0\\x03\\x02\\x02\\x02\\u01A7\\u01A1\\x03\",\"\\x02\\x02\\x02\\u01A7\\u01A2\\x03\\x02\\x02\\x02\\u01A7\\u01A3\\x03\",\"\\x02\\x02\\x02\\u01A7\\u01A4\\x03\\x02\\x02\\x02\\u01A7\\u01A5\\x03\",\"\\x02\\x02\\x02\\u01A7\\u01A6\\x03\\x02\\x02\\x02\\u01A8\\x07\\x03\",\"\\x02\\x02\\x02\\u01A9\\u01AA\\x07\\x03\\x02\\x02\\u01AA\\u01AB\\x05\",\"\\u0188\\xC5\\x02\\u01AB\\u01AC\\x07\\x04\\x02\\x02\\u01AC\\u01AD\\x05\",\"\\x1A\\x0E\\x02\\u01AD\\u01AE\\x07\\x04\\x02\\x02\\u01AE\\u01B0\\x05\",\"\\n\\x06\\x02\\u01AF\\u01B1\\x05\\x18\\r\\x02\\u01B0\\u01AF\\x03\\x02\",\"\\x02\\x02\\u01B0\\u01B1\\x03\\x02\\x02\\x02\\u01B1\\u01B2\\x03\\x02\",\"\\x02\\x02\\u01B2\\u01B3\\x07\\x05\\x02\\x02\\u01B3\\t\\x03\\x02\",\"\\x02\\x02\\u01B4\\u01B5\\x05\\xB4[\\x02\\u01B5\\x0B\\x03\\x02\",\"\\x02\\x02\\u01B6\\u01B7\\x07\\x06\\x02\\x02\\u01B7\\u01B8\\x05\\u0188\",\"\\xC5\\x02\\u01B8\\u01B9\\x07\\x04\\x02\\x02\\u01B9\\u01BA\\x05\\x1A\",\"\\x0E\\x02\\u01BA\\u01BB\\x07\\x04\\x02\\x02\\u01BB\\u01BD\\x05\\x1C\",\"\\x0F\\x02\\u01BC\\u01BE\\x05\\x18\\r\\x02\\u01BD\\u01BC\\x03\\x02\",\"\\x02\\x02\\u01BD\\u01BE\\x03\\x02\\x02\\x02\\u01BE\\u01BF\\x03\\x02\",\"\\x02\\x02\\u01BF\\u01C0\\x07\\x05\\x02\\x02\\u01C0\\r\\x03\\x02\",\"\\x02\\x02\\u01C1\\u01C2\\x07\\x07\\x02\\x02\\u01C2\\u01C3\\x05\\u0188\",\"\\xC5\\x02\\u01C3\\u01C4\\x07\\x04\\x02\\x02\\u01C4\\u01C5\\x05\\x1A\",\"\\x0E\\x02\\u01C5\\u01C6\\x07\\x04\\x02\\x02\\u01C6\\u01C8\\x05`\",\"1\\x02\\u01C7\\u01C9\\x05\\x18\\r\\x02\\u01C8\\u01C7\\x03\\x02\\x02\",\"\\x02\\u01C8\\u01C9\\x03\\x02\\x02\\x02\\u01C9\\u01CA\\x03\\x02\\x02\",\"\\x02\\u01CA\\u01CB\\x07\\x05\\x02\\x02\\u01CB\\x0F\\x03\\x02\\x02\",\"\\x02\\u01CC\\u01CD\\x07\\b\\x02\\x02\\u01CD\\u01CE\\x05\\u0188\\xC5\",\"\\x02\\u01CE\\u01CF\\x07\\x04\\x02\\x02\\u01CF\\u01D0\\x05\\x1A\\x0E\",\"\\x02\\u01D0\\u01D1\\x07\\x04\\x02\\x02\\u01D1\\u01D3\\x05d3\\x02\",\"\\u01D2\\u01D4\\x05\\x18\\r\\x02\\u01D3\\u01D2\\x03\\x02\\x02\\x02\",\"\\u01D3\\u01D4\\x03\\x02\\x02\\x02\\u01D4\\u01D5\\x03\\x02\\x02\\x02\",\"\\u01D5\\u01D6\\x07\\x05\\x02\\x02\\u01D6\\x11\\x03\\x02\\x02\\x02\",\"\\u01D7\\u01D8\\x07\\t\\x02\\x02\\u01D8\\u01D9\\x05\\u0188\\xC5\\x02\",\"\\u01D9\\u01DA\\x07\\x04\\x02\\x02\\u01DA\\u01DB\\x05\\x1A\\x0E\\x02\",\"\\u01DB\\u01DC\\x07\\x04\\x02\\x02\\u01DC\\u01DE\\x05\\xAEX\\x02\",\"\\u01DD\\u01DF\\x05\\x18\\r\\x02\\u01DE\\u01DD\\x03\\x02\\x02\\x02\",\"\\u01DE\\u01DF\\x03\\x02\\x02\\x02\\u01DF\\u01E0\\x03\\x02\\x02\\x02\",\"\\u01E0\\u01E1\\x07\\x05\\x02\\x02\\u01E1\\x13\\x03\\x02\\x02\\x02\",\"\\u01E2\\u01E3\\x07\\n\\x02\\x02\\u01E3\\u01E4\\x05\\u0188\\xC5\\x02\",\"\\u01E4\\u01E5\\x07\\x04\\x02\\x02\\u01E5\\u01E6\\x05\\x1A\\x0E\\x02\",\"\\u01E6\\u01E7\\x07\\x04\\x02\\x02\\u01E7\\u01E9\\x05\\xB4[\\x02\",\"\\u01E8\\u01EA\\x05\\x18\\r\\x02\\u01E9\\u01E8\\x03\\x02\\x02\\x02\",\"\\u01E9\\u01EA\\x03\\x02\\x02\\x02\\u01EA\\u01EB\\x03\\x02\\x02\\x02\",\"\\u01EB\\u01EC\\x07\\x05\\x02\\x02\\u01EC\\x15\\x03\\x02\\x02\\x02\",\"\\u01ED\\u01EE\\x07\\x0B\\x02\\x02\\u01EE\\u01EF\\x05\\u0188\\xC5\\x02\",\"\\u01EF\\u01F0\\x07\\x04\\x02\\x02\\u01F0\\u01F1\\x05\\x1A\\x0E\\x02\",\"\\u01F1\\u01F2\\x07\\x04\\x02\\x02\\u01F2\\u01F4\\x05\\xF4{\\x02\",\"\\u01F3\\u01F5\\x05\\x18\\r\\x02\\u01F4\\u01F3\\x03\\x02\\x02\\x02\",\"\\u01F4\\u01F5\\x03\\x02\\x02\\x02\\u01F5\\u01F6\\x03\\x02\\x02\\x02\",\"\\u01F6\\u01F7\\x07\\x05\\x02\\x02\\u01F7\\x17\\x03\\x02\\x02\\x02\",\"\\u01F8\\u01F9\\x07\\x04\\x02\\x02\\u01F9\\u01FB\\x05\\u0132\\x9A\\x02\",\"\\u01FA\\u01FC\\x05\\u0156\\xAC\\x02\\u01FB\\u01FA\\x03\\x02\\x02\\x02\",\"\\u01FB\\u01FC\\x03\\x02\\x02\\x02\\u01FC\\x19\\x03\\x02\\x02\\x02\",\"\\u01FD\\u01FE\\x07`\\x02\\x02\\u01FE\\x1B\\x03\\x02\\x02\\x02\",\"\\u01FF\\u0202\\x05\\x1E\\x10\\x02\\u0200\\u0202\\x05Z.\\x02\\u0201\",\"\\u01FF\\x03\\x02\\x02\\x02\\u0201\\u0200\\x03\\x02\\x02\\x02\\u0202\",\"\\x1D\\x03\\x02\\x02\\x02\\u0203\\u0208\\x05 \\x11\\x02\\u0204\",\"\\u0208\\x05,\\x17\\x02\\u0205\\u0208\\x05F$\\x02\\u0206\\u0208\\x05\",\"J&\\x02\\u0207\\u0203\\x03\\x02\\x02\\x02\\u0207\\u0204\\x03\\x02\",\"\\x02\\x02\\u0207\\u0205\\x03\\x02\\x02\\x02\\u0207\\u0206\\x03\\x02\",\"\\x02\\x02\\u0208\\x1F\\x03\\x02\\x02\\x02\\u0209\\u020D\\x05\\\"\",\"\\x12\\x02\\u020A\\u020D\\x05$\\x13\\x02\\u020B\\u020D\\x05R*\\x02\",\"\\u020C\\u0209\\x03\\x02\\x02\\x02\\u020C\\u020A\\x03\\x02\\x02\\x02\",\"\\u020C\\u020B\\x03\\x02\\x02\\x02\\u020D!\\x03\\x02\\x02\\x02\",\"\\u020E\\u020F\\x05,\\x17\\x02\\u020F\\u0210\\x05\\u0100\\x81\\x02\",\"\\u0210\\u0211\\x05,\\x17\\x02\\u0211#\\x03\\x02\\x02\\x02\\u0212\",\"\\u0216\\x05&\\x14\\x02\\u0213\\u0216\\x05(\\x15\\x02\\u0214\\u0216\",\"\\x05*\\x16\\x02\\u0215\\u0212\\x03\\x02\\x02\\x02\\u0215\\u0213\",\"\\x03\\x02\\x02\\x02\\u0215\\u0214\\x03\\x02\\x02\\x02\\u0216%\",\"\\x03\\x02\\x02\\x02\\u0217\\u0218\\b\\x14\\x01\\x02\\u0218\\u0219\",\"\\x05,\\x17\\x02\\u0219\\u021A\\x07.\\x02\\x02\\u021A\\u021B\\x05\",\",\\x17\\x02\\u021B\\u0221\\x03\\x02\\x02\\x02\\u021C\\u021D\\f\\x03\",\"\\x02\\x02\\u021D\\u021E\\x07.\\x02\\x02\\u021E\\u0220\\x05,\\x17\",\"\\x02\\u021F\\u021C\\x03\\x02\\x02\\x02\\u0220\\u0223\\x03\\x02\\x02\",\"\\x02\\u0221\\u021F\\x03\\x02\\x02\\x02\\u0221\\u0222\\x03\\x02\\x02\",\"\\x02\\u0222'\\x03\\x02\\x02\\x02\\u0223\\u0221\\x03\\x02\\x02\",\"\\x02\\u0224\\u0225\\b\\x15\\x01\\x02\\u0225\\u0226\\x05,\\x17\\x02\",\"\\u0226\\u0227\\x07/\\x02\\x02\\u0227\\u0228\\x05,\\x17\\x02\\u0228\",\"\\u022E\\x03\\x02\\x02\\x02\\u0229\\u022A\\f\\x03\\x02\\x02\\u022A\",\"\\u022B\\x07/\\x02\\x02\\u022B\\u022D\\x05,\\x17\\x02\\u022C\\u0229\",\"\\x03\\x02\\x02\\x02\\u022D\\u0230\\x03\\x02\\x02\\x02\\u022E\\u022C\",\"\\x03\\x02\\x02\\x02\\u022E\\u022F\\x03\\x02\\x02\\x02\\u022F)\",\"\\x03\\x02\\x02\\x02\\u0230\\u022E\\x03\\x02\\x02\\x02\\u0231\\u0232\",\"\\b\\x16\\x01\\x02\\u0232\\u0233\\x05,\\x17\\x02\\u0233\\u0234\\x07\",\"E\\x02\\x02\\u0234\\u0235\\x05,\\x17\\x02\\u0235\\u023B\\x03\\x02\",\"\\x02\\x02\\u0236\\u0237\\f\\x03\\x02\\x02\\u0237\\u0238\\x07E\\x02\",\"\\x02\\u0238\\u023A\\x05,\\x17\\x02\\u0239\\u0236\\x03\\x02\\x02\",\"\\x02\\u023A\\u023D\\x03\\x02\\x02\\x02\\u023B\\u0239\\x03\\x02\\x02\",\"\\x02\\u023B\\u023C\\x03\\x02\\x02\\x02\\u023C+\\x03\\x02\\x02\",\"\\x02\\u023D\\u023B\\x03\\x02\\x02\\x02\\u023E\\u0249\\x05.\\x18\",\"\\x02\\u023F\\u0249\\x058\\x1D\\x02\\u0240\\u0249\\x05:\\x1E\\x02\",\"\\u0241\\u0249\\x05@!\\x02\\u0242\\u0249\\x05B\\\"\\x02\\u0243\\u0249\\x05\",\"\\\\/\\x02\\u0244\\u0245\\x07\\f\\x02\\x02\\u0245\\u0246\\x05\\x1E\\x10\",\"\\x02\\u0246\\u0247\\x07\\r\\x02\\x02\\u0247\\u0249\\x03\\x02\\x02\",\"\\x02\\u0248\\u023E\\x03\\x02\\x02\\x02\\u0248\\u023F\\x03\\x02\\x02\",\"\\x02\\u0248\\u0240\\x03\\x02\\x02\\x02\\u0248\\u0241\\x03\\x02\\x02\",\"\\x02\\u0248\\u0242\\x03\\x02\\x02\\x02\\u0248\\u0243\\x03\\x02\\x02\",\"\\x02\\u0248\\u0244\\x03\\x02\\x02\\x02\\u0249-\\x03\\x02\\x02\",\"\\x02\\u024A\\u024B\\x050\\x19\\x02\\u024B\\u024C\\x05,\\x17\\x02\",\"\\u024C/\\x03\\x02\\x02\\x02\\u024D\\u024E\\x05\\xFA~\\x02\\u024E\",\"\\u024F\\x07\\x0E\\x02\\x02\\u024F\\u0250\\x052\\x1A\\x02\\u0250\",\"\\u0251\\x07\\x0F\\x02\\x02\\u0251\\u0252\\x07\\x10\\x02\\x02\\u0252\",\"1\\x03\\x02\\x02\\x02\\u0253\\u0258\\x054\\x1B\\x02\\u0254\\u0255\",\"\\x07\\x04\\x02\\x02\\u0255\\u0257\\x054\\x1B\\x02\\u0256\\u0254\",\"\\x03\\x02\\x02\\x02\\u0257\\u025A\\x03\\x02\\x02\\x02\\u0258\\u0256\",\"\\x03\\x02\\x02\\x02\\u0258\\u0259\\x03\\x02\\x02\\x02\\u02593\",\"\\x03\\x02\\x02\\x02\\u025A\\u0258\\x03\\x02\\x02\\x02\\u025B\\u025E\",\"\\x056\\x1C\\x02\\u025C\\u025E\\x05\\u0130\\x99\\x02\\u025D\\u025B\",\"\\x03\\x02\\x02\\x02\\u025D\\u025C\\x03\\x02\\x02\\x02\\u025E5\",\"\\x03\\x02\\x02\\x02\\u025F\\u0260\\x05\\u0130\\x99\\x02\\u0260\\u0261\",\"\\x07\\x10\\x02\\x02\\u0261\\u0262\\x05L'\\x02\\u02627\\x03\\x02\",\"\\x02\\x02\\u0263\\u0264\\x05\\u0102\\x82\\x02\\u0264\\u0265\\x07\\f\",\"\\x02\\x02\\u0265\\u0266\\x05\\x1E\\x10\\x02\\u0266\\u0267\\x07\\r\",\"\\x02\\x02\\u02679\\x03\\x02\\x02\\x02\\u0268\\u026D\\x05<\\x1F\",\"\\x02\\u0269\\u026D\\x05\\u0130\\x99\\x02\\u026A\\u026D\\x05\\u012E\\x98\",\"\\x02\\u026B\\u026D\\x05> \\x02\\u026C\\u0268\\x03\\x02\\x02\\x02\",\"\\u026C\\u0269\\x03\\x02\\x02\\x02\\u026C\\u026A\\x03\\x02\\x02\\x02\",\"\\u026C\\u026B\\x03\\x02\\x02\\x02\\u026D;\\x03\\x02\\x02\\x02\",\"\\u026E\\u027F\\x05\\u0118\\x8D\\x02\\u026F\\u0270\\x05\\u0124\\x93\\x02\",\"\\u0270\\u0271\\x07\\f\\x02\\x02\\u0271\\u0272\\x05D#\\x02\\u0272\\u0273\",\"\\x07\\r\\x02\\x02\\u0273\\u027F\\x03\\x02\\x02\\x02\\u0274\\u0275\",\"\\x05\\u012C\\x97\\x02\\u0275\\u0276\\x07\\f\\x02\\x02\\u0276\\u0277\",\"\\x05D#\\x02\\u0277\\u0278\\x07\\r\\x02\\x02\\u0278\\u027F\\x03\\x02\",\"\\x02\\x02\\u0279\\u027A\\x05\\u0128\\x95\\x02\\u027A\\u027B\\x07\\f\",\"\\x02\\x02\\u027B\\u027C\\x05D#\\x02\\u027C\\u027D\\x07\\r\\x02\\x02\",\"\\u027D\\u027F\\x03\\x02\\x02\\x02\\u027E\\u026E\\x03\\x02\\x02\\x02\",\"\\u027E\\u026F\\x03\\x02\\x02\\x02\\u027E\\u0274\\x03\\x02\\x02\\x02\",\"\\u027E\\u0279\\x03\\x02\\x02\\x02\\u027F=\\x03\\x02\\x02\\x02\",\"\\u0280\\u0284\\x05\\u0100\\x81\\x02\\u0281\\u0284\\x05\\u010C\\x87\\x02\",\"\\u0282\\u0284\\x05\\u0102\\x82\\x02\\u0283\\u0280\\x03\\x02\\x02\\x02\",\"\\u0283\\u0281\\x03\\x02\\x02\\x02\\u0283\\u0282\\x03\\x02\\x02\\x02\",\"\\u0284?\\x03\\x02\\x02\\x02\\u0285\\u0286\\x07\\x11\\x02\\x02\",\"\\u0286\\u0287\\x05\\x1E\\x10\\x02\\u0287\\u0288\\x07\\x04\\x02\\x02\",\"\\u0288\\u0289\\x05\\x1E\\x10\\x02\\u0289\\u028A\\x07\\x04\\x02\\x02\",\"\\u028A\\u028B\\x05\\x1E\\x10\\x02\\u028B\\u028C\\x07\\r\\x02\\x02\",\"\\u028CA\\x03\\x02\\x02\\x02\\u028D\\u028E\\x07\\x12\\x02\\x02\",\"\\u028E\\u028F\\x05,\\x17\\x02\\u028F\\u0290\\x07\\x04\\x02\\x02\",\"\\u0290\\u0291\\x05\\x1C\\x0F\\x02\\u0291\\u0292\\x07\\r\\x02\\x02\",\"\\u0292C\\x03\\x02\\x02\\x02\\u0293\\u0294\\x05^0\\x02\\u0294E\\x03\",\"\\x02\\x02\\x02\\u0295\\u0296\\x05H%\\x02\\u0296\\u0297\\x07\\x10\",\"\\x02\\x02\\u0297\\u0298\\x05L'\\x02\\u0298G\\x03\\x02\\x02\\x02\",\"\\u0299\\u029F\\x05:\\x1E\\x02\\u029A\\u029B\\x07\\f\\x02\\x02\\u029B\",\"\\u029C\\x05\\x1E\\x10\\x02\\u029C\\u029D\\x07\\r\\x02\\x02\\u029D\",\"\\u029F\\x03\\x02\\x02\\x02\\u029E\\u0299\\x03\\x02\\x02\\x02\\u029E\",\"\\u029A\\x03\\x02\\x02\\x02\\u029FI\\x03\\x02\\x02\\x02\\u02A0\",\"\\u02A1\\x05:\\x1E\\x02\\u02A1\\u02A2\\x07J\\x02\\x02\\u02A2\\u02A3\",\"\\x05:\\x1E\\x02\\u02A3K\\x03\\x02\\x02\\x02\\u02A4\\u02A8\\x05\",\"N(\\x02\\u02A5\\u02A8\\x05T+\\x02\\u02A6\\u02A8\\x05P)\\x02\\u02A7\\u02A4\",\"\\x03\\x02\\x02\\x02\\u02A7\\u02A5\\x03\\x02\\x02\\x02\\u02A7\\u02A6\",\"\\x03\\x02\\x02\\x02\\u02A8M\\x03\\x02\\x02\\x02\\u02A9\\u02AA\",\"\\x05,\\x17\\x02\\u02AAO\\x03\\x02\\x02\\x02\\u02AB\\u02AC\\x05\",\"*\\x16\\x02\\u02ACQ\\x03\\x02\\x02\\x02\\u02AD\\u02B1\\x05T+\\x02\",\"\\u02AE\\u02B1\\x05V,\\x02\\u02AF\\u02B1\\x05X-\\x02\\u02B0\\u02AD\\x03\",\"\\x02\\x02\\x02\\u02B0\\u02AE\\x03\\x02\\x02\\x02\\u02B0\\u02AF\\x03\",\"\\x02\\x02\\x02\\u02B1S\\x03\\x02\\x02\\x02\\u02B2\\u02B3\\x05\",\"N(\\x02\\u02B3\\u02B4\\x07G\\x02\\x02\\u02B4\\u02B5\\x05N(\\x02\\u02B5\",\"\\u02BB\\x03\\x02\\x02\\x02\\u02B6\\u02B7\\x05N(\\x02\\u02B7\\u02B8\",\"\\x07G\\x02\\x02\\u02B8\\u02B9\\x05T+\\x02\\u02B9\\u02BB\\x03\\x02\",\"\\x02\\x02\\u02BA\\u02B2\\x03\\x02\\x02\\x02\\u02BA\\u02B6\\x03\\x02\",\"\\x02\\x02\\u02BBU\\x03\\x02\\x02\\x02\\u02BC\\u02BD\\b,\\x01\\x02\",\"\\u02BD\\u02BE\\x05N(\\x02\\u02BE\\u02BF\\x07H\\x02\\x02\\u02BF\\u02C0\",\"\\x05N(\\x02\\u02C0\\u02C6\\x03\\x02\\x02\\x02\\u02C1\\u02C2\\f\\x03\",\"\\x02\\x02\\u02C2\\u02C3\\x07H\\x02\\x02\\u02C3\\u02C5\\x05N(\\x02\",\"\\u02C4\\u02C1\\x03\\x02\\x02\\x02\\u02C5\\u02C8\\x03\\x02\\x02\\x02\",\"\\u02C6\\u02C4\\x03\\x02\\x02\\x02\\u02C6\\u02C7\\x03\\x02\\x02\\x02\",\"\\u02C7W\\x03\\x02\\x02\\x02\\u02C8\\u02C6\\x03\\x02\\x02\\x02\",\"\\u02C9\\u02CA\\b-\\x01\\x02\\u02CA\\u02CB\\x05N(\\x02\\u02CB\\u02CC\\x07\",\"I\\x02\\x02\\u02CC\\u02CD\\x05N(\\x02\\u02CD\\u02D3\\x03\\x02\\x02\",\"\\x02\\u02CE\\u02CF\\f\\x03\\x02\\x02\\u02CF\\u02D0\\x07I\\x02\\x02\",\"\\u02D0\\u02D2\\x05N(\\x02\\u02D1\\u02CE\\x03\\x02\\x02\\x02\\u02D2\",\"\\u02D5\\x03\\x02\\x02\\x02\\u02D3\\u02D1\\x03\\x02\\x02\\x02\\u02D3\",\"\\u02D4\\x03\\x02\\x02\\x02\\u02D4Y\\x03\\x02\\x02\\x02\\u02D5\",\"\\u02D3\\x03\\x02\\x02\\x02\\u02D6\\u02D7\\x05\\\\/\\x02\\u02D7\\u02D8\",\"\\x07K\\x02\\x02\\u02D8\\u02D9\\x05\\\\/\\x02\\u02D9\\u02DF\\x03\\x02\",\"\\x02\\x02\\u02DA\\u02DB\\x07\\f\\x02\\x02\\u02DB\\u02DC\\x05Z.\\x02\",\"\\u02DC\\u02DD\\x07\\r\\x02\\x02\\u02DD\\u02DF\\x03\\x02\\x02\\x02\",\"\\u02DE\\u02D6\\x03\\x02\\x02\\x02\\u02DE\\u02DA\\x03\\x02\\x02\\x02\",\"\\u02DF[\\x03\\x02\\x02\\x02\\u02E0\\u02EB\\x07\\x13\\x02\\x02\",\"\\u02E1\\u02E2\\x07\\x0E\\x02\\x02\\u02E2\\u02E3\\x05^0\\x02\\u02E3\",\"\\u02E4\\x07\\x0F\\x02\\x02\\u02E4\\u02EB\\x03\\x02\\x02\\x02\\u02E5\",\"\\u02EB\\x07\\x14\\x02\\x02\\u02E6\\u02E7\\x07\\x15\\x02\\x02\\u02E7\",\"\\u02E8\\x05^0\\x02\\u02E8\\u02E9\\x07\\x16\\x02\\x02\\u02E9\\u02EB\",\"\\x03\\x02\\x02\\x02\\u02EA\\u02E0\\x03\\x02\\x02\\x02\\u02EA\\u02E1\",\"\\x03\\x02\\x02\\x02\\u02EA\\u02E5\\x03\\x02\\x02\\x02\\u02EA\\u02E6\",\"\\x03\\x02\\x02\\x02\\u02EB]\\x03\\x02\\x02\\x02\\u02EC\\u02F1\",\"\\x05\\x1E\\x10\\x02\\u02ED\\u02EE\\x07\\x04\\x02\\x02\\u02EE\\u02F0\",\"\\x05\\x1E\\x10\\x02\\u02EF\\u02ED\\x03\\x02\\x02\\x02\\u02F0\\u02F3\",\"\\x03\\x02\\x02\\x02\\u02F1\\u02EF\\x03\\x02\\x02\\x02\\u02F1\\u02F2\",\"\\x03\\x02\\x02\\x02\\u02F2_\\x03\\x02\\x02\\x02\\u02F3\\u02F1\",\"\\x03\\x02\\x02\\x02\\u02F4\\u02F7\\x05b2\\x02\\u02F5\\u02F7\\x05\",\"Z.\\x02\\u02F6\\u02F4\\x03\\x02\\x02\\x02\\u02F6\\u02F5\\x03\\x02\",\"\\x02\\x02\\u02F7a\\x03\\x02\\x02\\x02\\u02F8\\u02F9\\x05\\x1E\",\"\\x10\\x02\\u02F9c\\x03\\x02\\x02\\x02\\u02FA\\u02FE\\x05f4\\x02\",\"\\u02FB\\u02FE\\x05\\x9AN\\x02\\u02FC\\u02FE\\x05\\x94K\\x02\\u02FD\",\"\\u02FA\\x03\\x02\\x02\\x02\\u02FD\\u02FB\\x03\\x02\\x02\\x02\\u02FD\",\"\\u02FC\\x03\\x02\\x02\\x02\\u02FEe\\x03\\x02\\x02\\x02\\u02FF\",\"\\u0303\\x05h5\\x02\\u0300\\u0303\\x05r:\\x02\\u0301\\u0303\\x05\\x9C\",\"O\\x02\\u0302\\u02FF\\x03\\x02\\x02\\x02\\u0302\\u0300\\x03\\x02\",\"\\x02\\x02\\u0302\\u0301\\x03\\x02\\x02\\x02\\u0303g\\x03\\x02\",\"\\x02\\x02\\u0304\\u0307\\x05j6\\x02\\u0305\\u0307\\x05l7\\x02\\u0306\",\"\\u0304\\x03\\x02\\x02\\x02\\u0306\\u0305\\x03\\x02\\x02\\x02\\u0307\",\"i\\x03\\x02\\x02\\x02\\u0308\\u0309\\x05r:\\x02\\u0309\\u030A\\x05\",\"\\u010A\\x86\\x02\\u030A\\u030B\\x05r:\\x02\\u030Bk\\x03\\x02\\x02\",\"\\x02\\u030C\\u030F\\x05n8\\x02\\u030D\\u030F\\x05p9\\x02\\u030E\\u030C\",\"\\x03\\x02\\x02\\x02\\u030E\\u030D\\x03\\x02\\x02\\x02\\u030Fm\",\"\\x03\\x02\\x02\\x02\\u0310\\u0311\\b8\\x01\\x02\\u0311\\u0312\\x05\",\"r:\\x02\\u0312\\u0313\\x07.\\x02\\x02\\u0313\\u0314\\x05r:\\x02\\u0314\",\"\\u031A\\x03\\x02\\x02\\x02\\u0315\\u0316\\f\\x03\\x02\\x02\\u0316\",\"\\u0317\\x07.\\x02\\x02\\u0317\\u0319\\x05r:\\x02\\u0318\\u0315\\x03\",\"\\x02\\x02\\x02\\u0319\\u031C\\x03\\x02\\x02\\x02\\u031A\\u0318\\x03\",\"\\x02\\x02\\x02\\u031A\\u031B\\x03\\x02\\x02\\x02\\u031Bo\\x03\",\"\\x02\\x02\\x02\\u031C\\u031A\\x03\\x02\\x02\\x02\\u031D\\u031E\\b\",\"9\\x01\\x02\\u031E\\u031F\\x05r:\\x02\\u031F\\u0320\\x07/\\x02\\x02\",\"\\u0320\\u0321\\x05r:\\x02\\u0321\\u0327\\x03\\x02\\x02\\x02\\u0322\",\"\\u0323\\f\\x03\\x02\\x02\\u0323\\u0324\\x07/\\x02\\x02\\u0324\\u0326\",\"\\x05r:\\x02\\u0325\\u0322\\x03\\x02\\x02\\x02\\u0326\\u0329\\x03\",\"\\x02\\x02\\x02\\u0327\\u0325\\x03\\x02\\x02\\x02\\u0327\\u0328\\x03\",\"\\x02\\x02\\x02\\u0328q\\x03\\x02\\x02\\x02\\u0329\\u0327\\x03\",\"\\x02\\x02\\x02\\u032A\\u0334\\x05t;\\x02\\u032B\\u0334\\x05|?\\x02\",\"\\u032C\\u0334\\x05~@\\x02\\u032D\\u0334\\x05\\x80A\\x02\\u032E\\u0334\",\"\\x05\\x82B\\x02\\u032F\\u0330\\x07\\f\\x02\\x02\\u0330\\u0331\\x05\",\"f4\\x02\\u0331\\u0332\\x07\\r\\x02\\x02\\u0332\\u0334\\x03\\x02\\x02\",\"\\x02\\u0333\\u032A\\x03\\x02\\x02\\x02\\u0333\\u032B\\x03\\x02\\x02\",\"\\x02\\u0333\\u032C\\x03\\x02\\x02\\x02\\u0333\\u032D\\x03\\x02\\x02\",\"\\x02\\u0333\\u032E\\x03\\x02\\x02\\x02\\u0333\\u032F\\x03\\x02\\x02\",\"\\x02\\u0334s\\x03\\x02\\x02\\x02\\u0335\\u0336\\x05\\u0108\\x85\",\"\\x02\\u0336\\u0337\\x07\\x0E\\x02\\x02\\u0337\\u0338\\x05v<\\x02\",\"\\u0338\\u0339\\x07\\x0F\\x02\\x02\\u0339\\u033A\\x07\\x10\\x02\\x02\",\"\\u033A\\u033B\\x05r:\\x02\\u033Bu\\x03\\x02\\x02\\x02\\u033C\\u0341\",\"\\x05x=\\x02\\u033D\\u033E\\x07\\x04\\x02\\x02\\u033E\\u0340\\x05\",\"x=\\x02\\u033F\\u033D\\x03\\x02\\x02\\x02\\u0340\\u0343\\x03\\x02\",\"\\x02\\x02\\u0341\\u033F\\x03\\x02\\x02\\x02\\u0341\\u0342\\x03\\x02\",\"\\x02\\x02\\u0342w\\x03\\x02\\x02\\x02\\u0343\\u0341\\x03\\x02\",\"\\x02\\x02\\u0344\\u0347\\x05z>\\x02\\u0345\\u0347\\x05\\u0130\\x99\",\"\\x02\\u0346\\u0344\\x03\\x02\\x02\\x02\\u0346\\u0345\\x03\\x02\\x02\",\"\\x02\\u0347y\\x03\\x02\\x02\\x02\\u0348\\u0349\\x05\\u0130\\x99\",\"\\x02\\u0349\\u034A\\x07\\x10\\x02\\x02\\u034A\\u034B\\x05\\xA6T\",\"\\x02\\u034B{\\x03\\x02\\x02\\x02\\u034C\\u034D\\x05\\u010E\\x88\",\"\\x02\\u034D\\u034E\\x05r:\\x02\\u034E\\u0351\\x03\\x02\\x02\\x02\",\"\\u034F\\u0351\\x05\\xCAf\\x02\\u0350\\u034C\\x03\\x02\\x02\\x02\",\"\\u0350\\u034F\\x03\\x02\\x02\\x02\\u0351}\\x03\\x02\\x02\\x02\",\"\\u0352\\u0353\\x05\\xCCg\\x02\\u0353\\x7F\\x03\\x02\\x02\\x02\",\"\\u0354\\u0355\\x07\\x17\\x02\\x02\\u0355\\u0356\\x05f4\\x02\\u0356\",\"\\u0357\\x07\\x04\\x02\\x02\\u0357\\u0358\\x05f4\\x02\\u0358\\u0359\",\"\\x07\\x04\\x02\\x02\\u0359\\u035A\\x05f4\\x02\\u035A\\u035B\\x07\",\"\\r\\x02\\x02\\u035B\\x81\\x03\\x02\\x02\\x02\\u035C\\u035D\\x07\",\"\\x18\\x02\\x02\\u035D\\u035E\\x05\\x84C\\x02\\u035E\\u035F\\x07\",\"\\x04\\x02\\x02\\u035F\\u0360\\x05d3\\x02\\u0360\\u0361\\x07\\r\\x02\",\"\\x02\\u0361\\u0369\\x03\\x02\\x02\\x02\\u0362\\u0363\\x07\\x19\\x02\",\"\\x02\\u0363\\u0364\\x05\\x8CG\\x02\\u0364\\u0365\\x07\\x04\\x02\",\"\\x02\\u0365\\u0366\\x05d3\\x02\\u0366\\u0367\\x07\\r\\x02\\x02\\u0367\",\"\\u0369\\x03\\x02\\x02\\x02\\u0368\\u035C\\x03\\x02\\x02\\x02\\u0368\",\"\\u0362\\x03\\x02\\x02\\x02\\u0369\\x83\\x03\\x02\\x02\\x02\\u036A\",\"\\u0370\\x05\\x88E\\x02\\u036B\\u036C\\x07\\x0E\\x02\\x02\\u036C\",\"\\u036D\\x05\\x86D\\x02\\u036D\\u036E\\x07\\x0F\\x02\\x02\\u036E\",\"\\u0370\\x03\\x02\\x02\\x02\\u036F\\u036A\\x03\\x02\\x02\\x02\\u036F\",\"\\u036B\\x03\\x02\\x02\\x02\\u0370\\x85\\x03\\x02\\x02\\x02\\u0371\",\"\\u0376\\x05\\x88E\\x02\\u0372\\u0373\\x07\\x04\\x02\\x02\\u0373\",\"\\u0375\\x05\\x88E\\x02\\u0374\\u0372\\x03\\x02\\x02\\x02\\u0375\",\"\\u0378\\x03\\x02\\x02\\x02\\u0376\\u0374\\x03\\x02\\x02\\x02\\u0376\",\"\\u0377\\x03\\x02\\x02\\x02\\u0377\\x87\\x03\\x02\\x02\\x02\\u0378\",\"\\u0376\\x03\\x02\\x02\\x02\\u0379\\u037A\\x07;\\x02\\x02\\u037A\",\"\\u037B\\x07\\x0E\\x02\\x02\\u037B\\u037C\\x05v<\\x02\\u037C\\u037D\",\"\\x07\\x0F\\x02\\x02\\u037D\\u037E\\x07\\x10\\x02\\x02\\u037E\\u037F\",\"\\x05\\x88E\\x02\\u037F\\u0382\\x03\\x02\\x02\\x02\\u0380\\u0382\",\"\\x05\\x8AF\\x02\\u0381\\u0379\\x03\\x02\\x02\\x02\\u0381\\u0380\",\"\\x03\\x02\\x02\\x02\\u0382\\x89\\x03\\x02\\x02\\x02\\u0383\\u0384\",\"\\x05\\xD8m\\x02\\u0384\\u0385\\x07:\\x02\\x02\\u0385\\u0386\\x05\",\"\\xE4s\\x02\\u0386\\u038C\\x03\\x02\\x02\\x02\\u0387\\u0388\\x07\",\"\\f\\x02\\x02\\u0388\\u0389\\x05\\x8AF\\x02\\u0389\\u038A\\x07\\r\\x02\",\"\\x02\\u038A\\u038C\\x03\\x02\\x02\\x02\\u038B\\u0383\\x03\\x02\\x02\",\"\\x02\\u038B\\u0387\\x03\\x02\\x02\\x02\\u038C\\x8B\\x03\\x02\\x02\",\"\\x02\\u038D\\u0393\\x05\\x90I\\x02\\u038E\\u038F\\x07\\x0E\\x02\",\"\\x02\\u038F\\u0390\\x05\\x8EH\\x02\\u0390\\u0391\\x07\\x0F\\x02\",\"\\x02\\u0391\\u0393\\x03\\x02\\x02\\x02\\u0392\\u038D\\x03\\x02\\x02\",\"\\x02\\u0392\\u038E\\x03\\x02\\x02\\x02\\u0393\\x8D\\x03\\x02\\x02\",\"\\x02\\u0394\\u0399\\x05\\x90I\\x02\\u0395\\u0396\\x07\\x04\\x02\",\"\\x02\\u0396\\u0398\\x05\\x90I\\x02\\u0397\\u0395\\x03\\x02\\x02\",\"\\x02\\u0398\\u039B\\x03\\x02\\x02\\x02\\u0399\\u0397\\x03\\x02\\x02\",\"\\x02\\u0399\\u039A\\x03\\x02\\x02\\x02\\u039A\\x8F\\x03\\x02\\x02\",\"\\x02\\u039B\\u0399\\x03\\x02\\x02\\x02\\u039C\\u039D\\x07;\\x02\",\"\\x02\\u039D\\u039E\\x07\\x0E\\x02\\x02\\u039E\\u039F\\x05v<\\x02\",\"\\u039F\\u03A0\\x07\\x0F\\x02\\x02\\u03A0\\u03A1\\x07\\x10\\x02\\x02\",\"\\u03A1\\u03A2\\x05\\x90I\\x02\\u03A2\\u03A5\\x03\\x02\\x02\\x02\",\"\\u03A3\\u03A5\\x05\\x92J\\x02\\u03A4\\u039C\\x03\\x02\\x02\\x02\",\"\\u03A4\\u03A3\\x03\\x02\\x02\\x02\\u03A5\\x91\\x03\\x02\\x02\\x02\",\"\\u03A6\\u03A7\\x05\\xCEh\\x02\\u03A7\\u03A8\\x070\\x02\\x02\\u03A8\",\"\\u03A9\\x05r:\\x02\\u03A9\\u03AF\\x03\\x02\\x02\\x02\\u03AA\\u03AB\",\"\\x07\\f\\x02\\x02\\u03AB\\u03AC\\x05\\x92J\\x02\\u03AC\\u03AD\\x07\",\"\\r\\x02\\x02\\u03AD\\u03AF\\x03\\x02\\x02\\x02\\u03AE\\u03A6\\x03\",\"\\x02\\x02\\x02\\u03AE\\u03AA\\x03\\x02\\x02\\x02\\u03AF\\x93\\x03\",\"\\x02\\x02\\x02\\u03B0\\u03B1\\x05\\x96L\\x02\\u03B1\\u03B2\\x07\",\"K\\x02\\x02\\u03B2\\u03B3\\x05\\x96L\\x02\\u03B3\\u03B9\\x03\\x02\",\"\\x02\\x02\\u03B4\\u03B5\\x07\\f\\x02\\x02\\u03B5\\u03B6\\x05\\x94\",\"K\\x02\\u03B6\\u03B7\\x07\\r\\x02\\x02\\u03B7\\u03B9\\x03\\x02\\x02\",\"\\x02\\u03B8\\u03B0\\x03\\x02\\x02\\x02\\u03B8\\u03B4\\x03\\x02\\x02\",\"\\x02\\u03B9\\x95\\x03\\x02\\x02\\x02\\u03BA\\u03C0\\x07\\x13\\x02\",\"\\x02\\u03BB\\u03BC\\x07\\x0E\\x02\\x02\\u03BC\\u03BD\\x05\\x98M\",\"\\x02\\u03BD\\u03BE\\x07\\x0F\\x02\\x02\\u03BE\\u03C0\\x03\\x02\\x02\",\"\\x02\\u03BF\\u03BA\\x03\\x02\\x02\\x02\\u03BF\\u03BB\\x03\\x02\\x02\",\"\\x02\\u03C0\\x97\\x03\\x02\\x02\\x02\\u03C1\\u03C6\\x05f4\\x02\",\"\\u03C2\\u03C3\\x07\\x04\\x02\\x02\\u03C3\\u03C5\\x05f4\\x02\\u03C4\",\"\\u03C2\\x03\\x02\\x02\\x02\\u03C5\\u03C8\\x03\\x02\\x02\\x02\\u03C6\",\"\\u03C4\\x03\\x02\\x02\\x02\\u03C6\\u03C7\\x03\\x02\\x02\\x02\\u03C7\",\"\\x99\\x03\\x02\\x02\\x02\\u03C8\\u03C6\\x03\\x02\\x02\\x02\\u03C9\",\"\\u03CA\\x05\\u011A\\x8E\\x02\\u03CA\\u03CB\\x07\\x10\\x02\\x02\\u03CB\",\"\\u03CC\\x05\\x9EP\\x02\\u03CC\\u03D2\\x03\\x02\\x02\\x02\\u03CD\",\"\\u03CE\\x07\\f\\x02\\x02\\u03CE\\u03CF\\x05\\x9AN\\x02\\u03CF\\u03D0\",\"\\x07\\r\\x02\\x02\\u03D0\\u03D2\\x03\\x02\\x02\\x02\\u03D1\\u03C9\",\"\\x03\\x02\\x02\\x02\\u03D1\\u03CD\\x03\\x02\\x02\\x02\\u03D2\\x9B\",\"\\x03\\x02\\x02\\x02\\u03D3\\u03D4\\x05\\u011A\\x8E\\x02\\u03D4\\u03D5\",\"\\x07J\\x02\\x02\\u03D5\\u03D6\\x05\\u0118\\x8D\\x02\\u03D6\\x9D\",\"\\x03\\x02\\x02\\x02\\u03D7\\u03DF\\x05\\xA6T\\x02\\u03D8\\u03DF\",\"\\x05\\xAAV\\x02\\u03D9\\u03DF\\x05\\xA0Q\\x02\\u03DA\\u03DB\\x07\",\"\\f\\x02\\x02\\u03DB\\u03DC\\x05\\x9EP\\x02\\u03DC\\u03DD\\x07\\r\\x02\",\"\\x02\\u03DD\\u03DF\\x03\\x02\\x02\\x02\\u03DE\\u03D7\\x03\\x02\\x02\",\"\\x02\\u03DE\\u03D8\\x03\\x02\\x02\\x02\\u03DE\\u03D9\\x03\\x02\\x02\",\"\\x02\\u03DE\\u03DA\\x03\\x02\\x02\\x02\\u03DF\\x9F\\x03\\x02\\x02\",\"\\x02\\u03E0\\u03E1\\x078\\x02\\x02\\u03E1\\u03E2\\x07\\x0E\\x02\",\"\\x02\\u03E2\\u03E3\\x05v<\\x02\\u03E3\\u03E4\\x07\\x0F\\x02\\x02\",\"\\u03E4\\u03E5\\x07\\x10\\x02\\x02\\u03E5\\u03E6\\x05\\xA2R\\x02\",\"\\u03E6\\xA1\\x03\\x02\\x02\\x02\\u03E7\\u03ED\\x05\\xA6T\\x02\",\"\\u03E8\\u03E9\\x07\\f\\x02\\x02\\u03E9\\u03EA\\x05\\xAAV\\x02\\u03EA\",\"\\u03EB\\x07\\r\\x02\\x02\\u03EB\\u03ED\\x03\\x02\\x02\\x02\\u03EC\",\"\\u03E7\\x03\\x02\\x02\\x02\\u03EC\\u03E8\\x03\\x02\\x02\\x02\\u03ED\",\"\\xA3\\x03\\x02\\x02\\x02\\u03EE\\u03F4\\x05\\xA6T\\x02\\u03EF\",\"\\u03F0\\x07\\f\\x02\\x02\\u03F0\\u03F1\\x05\\xACW\\x02\\u03F1\\u03F2\",\"\\x07\\r\\x02\\x02\\u03F2\\u03F4\\x03\\x02\\x02\\x02\\u03F3\\u03EE\",\"\\x03\\x02\\x02\\x02\\u03F3\\u03EF\\x03\\x02\\x02\\x02\\u03F4\\xA5\",\"\\x03\\x02\\x02\\x02\\u03F5\\u03FE\\x05\\u0110\\x89\\x02\\u03F6\\u03FE\",\"\\x05\\u0114\\x8B\\x02\\u03F7\\u03F8\\x05\\u0112\\x8A\\x02\\u03F8\\u03F9\",\"\\x07\\f\\x02\\x02\\u03F9\\u03FA\\x05\\xA8U\\x02\\u03FA\\u03FB\\x07\",\"\\r\\x02\\x02\\u03FB\\u03FE\\x03\\x02\\x02\\x02\\u03FC\\u03FE\\x05\",\"\\u0130\\x99\\x02\\u03FD\\u03F5\\x03\\x02\\x02\\x02\\u03FD\\u03F6\\x03\",\"\\x02\\x02\\x02\\u03FD\\u03F7\\x03\\x02\\x02\\x02\\u03FD\\u03FC\\x03\",\"\\x02\\x02\\x02\\u03FE\\xA7\\x03\\x02\\x02\\x02\\u03FF\\u0404\\x05\",\"\\xA6T\\x02\\u0400\\u0401\\x07\\x04\\x02\\x02\\u0401\\u0403\\x05\",\"\\xA6T\\x02\\u0402\\u0400\\x03\\x02\\x02\\x02\\u0403\\u0406\\x03\",\"\\x02\\x02\\x02\\u0404\\u0402\\x03\\x02\\x02\\x02\\u0404\\u0405\\x03\",\"\\x02\\x02\\x02\\u0405\\xA9\\x03\\x02\\x02\\x02\\u0406\\u0404\\x03\",\"\\x02\\x02\\x02\\u0407\\u0408\\x05\\xA4S\\x02\\u0408\\u0409\\x07\",\"G\\x02\\x02\\u0409\\u040A\\x05\\xA6T\\x02\\u040A\\xAB\\x03\\x02\",\"\\x02\\x02\\u040B\\u040C\\bW\\x01\\x02\\u040C\\u040D\\x05\\xA4S\\x02\",\"\\u040D\\u040E\\x07H\\x02\\x02\\u040E\\u040F\\x05\\xA6T\\x02\\u040F\",\"\\u0415\\x03\\x02\\x02\\x02\\u0410\\u0411\\f\\x03\\x02\\x02\\u0411\",\"\\u0412\\x07H\\x02\\x02\\u0412\\u0414\\x05\\xA6T\\x02\\u0413\\u0410\",\"\\x03\\x02\\x02\\x02\\u0414\\u0417\\x03\\x02\\x02\\x02\\u0415\\u0413\",\"\\x03\\x02\\x02\\x02\\u0415\\u0416\\x03\\x02\\x02\\x02\\u0416\\xAD\",\"\\x03\\x02\\x02\\x02\\u0417\\u0415\\x03\\x02\\x02\\x02\\u0418\\u041B\",\"\\x05\\xB0Y\\x02\\u0419\\u041B\\x05\\x9AN\\x02\\u041A\\u0418\\x03\",\"\\x02\\x02\\x02\\u041A\\u0419\\x03\\x02\\x02\\x02\\u041B\\xAF\\x03\",\"\\x02\\x02\\x02\\u041C\\u041F\\x05\\xB2Z\\x02\\u041D\\u041F\\x05\",\"\\xF4{\\x02\\u041E\\u041C\\x03\\x02\\x02\\x02\\u041E\\u041D\\x03\",\"\\x02\\x02\\x02\\u041F\\xB1\\x03\\x02\\x02\\x02\\u0420\\u0421\\x07\",\";\\x02\\x02\\u0421\\u0422\\x07\\x0E\\x02\\x02\\u0422\\u0423\\x05\",\"v<\\x02\\u0423\\u0424\\x07\\x0F\\x02\\x02\\u0424\\u0425\\x07\\x10\",\"\\x02\\x02\\u0425\\u0426\\x05\\xF4{\\x02\\u0426\\xB3\\x03\\x02\",\"\\x02\\x02\\u0427\\u042A\\x05\\xB6\\\\\\x02\\u0428\\u042A\\x05\\xEE\",\"x\\x02\\u0429\\u0427\\x03\\x02\\x02\\x02\\u0429\\u0428\\x03\\x02\",\"\\x02\\x02\\u042A\\xB5\\x03\\x02\\x02\\x02\\u042B\\u042E\\x05\\xB8\",\"]\\x02\\u042C\\u042E\\x05\\xC2b\\x02\\u042D\\u042B\\x03\\x02\\x02\",\"\\x02\\u042D\\u042C\\x03\\x02\\x02\\x02\\u042E\\xB7\\x03\\x02\\x02\",\"\\x02\\u042F\\u0432\\x05\\xBA^\\x02\\u0430\\u0432\\x05\\xBC_\\x02\",\"\\u0431\\u042F\\x03\\x02\\x02\\x02\\u0431\\u0430\\x03\\x02\\x02\\x02\",\"\\u0432\\xB9\\x03\\x02\\x02\\x02\\u0433\\u0434\\x05\\xC2b\\x02\",\"\\u0434\\u0435\\x05\\u010A\\x86\\x02\\u0435\\u0436\\x05\\xC2b\\x02\",\"\\u0436\\xBB\\x03\\x02\\x02\\x02\\u0437\\u043A\\x05\\xBE`\\x02\",\"\\u0438\\u043A\\x05\\xC0a\\x02\\u0439\\u0437\\x03\\x02\\x02\\x02\",\"\\u0439\\u0438\\x03\\x02\\x02\\x02\\u043A\\xBD\\x03\\x02\\x02\\x02\",\"\\u043B\\u043C\\b`\\x01\\x02\\u043C\\u043D\\x05\\xC2b\\x02\\u043D\\u043E\",\"\\x07.\\x02\\x02\\u043E\\u043F\\x05\\xC2b\\x02\\u043F\\u0445\\x03\",\"\\x02\\x02\\x02\\u0440\\u0441\\f\\x03\\x02\\x02\\u0441\\u0442\\x07\",\".\\x02\\x02\\u0442\\u0444\\x05\\xC2b\\x02\\u0443\\u0440\\x03\\x02\",\"\\x02\\x02\\u0444\\u0447\\x03\\x02\\x02\\x02\\u0445\\u0443\\x03\\x02\",\"\\x02\\x02\\u0445\\u0446\\x03\\x02\\x02\\x02\\u0446\\xBF\\x03\\x02\",\"\\x02\\x02\\u0447\\u0445\\x03\\x02\\x02\\x02\\u0448\\u0449\\ba\\x01\",\"\\x02\\u0449\\u044A\\x05\\xC2b\\x02\\u044A\\u044B\\x07/\\x02\\x02\",\"\\u044B\\u044C\\x05\\xC2b\\x02\\u044C\\u0452\\x03\\x02\\x02\\x02\",\"\\u044D\\u044E\\f\\x03\\x02\\x02\\u044E\\u044F\\x07/\\x02\\x02\\u044F\",\"\\u0451\\x05\\xC2b\\x02\\u0450\\u044D\\x03\\x02\\x02\\x02\\u0451\",\"\\u0454\\x03\\x02\\x02\\x02\\u0452\\u0450\\x03\\x02\\x02\\x02\\u0452\",\"\\u0453\\x03\\x02\\x02\\x02\\u0453\\xC1\\x03\\x02\\x02\\x02\\u0454\",\"\\u0452\\x03\\x02\\x02\\x02\\u0455\\u045D\\x05\\xC4c\\x02\\u0456\",\"\\u045D\\x05\\xC8e\\x02\\u0457\\u045D\\x05\\xCCg\\x02\\u0458\\u0459\",\"\\x07\\f\\x02\\x02\\u0459\\u045A\\x05\\xB6\\\\\\x02\\u045A\\u045B\\x07\",\"\\r\\x02\\x02\\u045B\\u045D\\x03\\x02\\x02\\x02\\u045C\\u0455\\x03\",\"\\x02\\x02\\x02\\u045C\\u0456\\x03\\x02\\x02\\x02\\u045C\\u0457\\x03\",\"\\x02\\x02\\x02\\u045C\\u0458\\x03\\x02\\x02\\x02\\u045D\\xC3\\x03\",\"\\x02\\x02\\x02\\u045E\\u045F\\x05\\u0108\\x85\\x02\\u045F\\u0460\\x07\",\"\\x0E\\x02\\x02\\u0460\\u0461\\x05\\xC6d\\x02\\u0461\\u0462\\x07\",\"\\x0F\\x02\\x02\\u0462\\u0463\\x07\\x10\\x02\\x02\\u0463\\u0464\\x05\",\"\\xC2b\\x02\\u0464\\xC5\\x03\\x02\\x02\\x02\\u0465\\u046A\\x05\",\"\\u0130\\x99\\x02\\u0466\\u0467\\x07\\x04\\x02\\x02\\u0467\\u0469\\x05\",\"\\u0130\\x99\\x02\\u0468\\u0466\\x03\\x02\\x02\\x02\\u0469\\u046C\\x03\",\"\\x02\\x02\\x02\\u046A\\u0468\\x03\\x02\\x02\\x02\\u046A\\u046B\\x03\",\"\\x02\\x02\\x02\\u046B\\xC7\\x03\\x02\\x02\\x02\\u046C\\u046A\\x03\",\"\\x02\\x02\\x02\\u046D\\u046E\\x05\\u010E\\x88\\x02\\u046E\\u046F\\x05\",\"\\xC2b\\x02\\u046F\\u0472\\x03\\x02\\x02\\x02\\u0470\\u0472\\x05\",\"\\xCAf\\x02\\u0471\\u046D\\x03\\x02\\x02\\x02\\u0471\\u0470\\x03\",\"\\x02\\x02\\x02\\u0472\\xC9\\x03\\x02\\x02\\x02\\u0473\\u0474\\x05\",\"\\xE4s\\x02\\u0474\\u0475\\x079\\x02\\x02\\u0475\\u0476\\x05\\xE4\",\"s\\x02\\u0476\\xCB\\x03\\x02\\x02\\x02\\u0477\\u047B\\x05\\xCE\",\"h\\x02\\u0478\\u047B\\x05\\xD0i\\x02\\u0479\\u047B\\x05\\xD6l\\x02\",\"\\u047A\\u0477\\x03\\x02\\x02\\x02\\u047A\\u0478\\x03\\x02\\x02\\x02\",\"\\u047A\\u0479\\x03\\x02\\x02\\x02\\u047B\\xCD\\x03\\x02\\x02\\x02\",\"\\u047C\\u047D\\x05\\xD8m\\x02\\u047D\\xCF\\x03\\x02\\x02\\x02\",\"\\u047E\\u0481\\x05\\xD2j\\x02\\u047F\\u0481\\x05\\xD4k\\x02\\u0480\",\"\\u047E\\x03\\x02\\x02\\x02\\u0480\\u047F\\x03\\x02\\x02\\x02\\u0481\",\"\\xD1\\x03\\x02\\x02\\x02\\u0482\\u0483\\x05\\xDAn\\x02\\u0483\",\"\\xD3\\x03\\x02\\x02\\x02\\u0484\\u0485\\x05\\xE4s\\x02\\u0485\",\"\\u0486\\x05\\u0120\\x91\\x02\\u0486\\u0487\\x05\\xE4s\\x02\\u0487\",\"\\xD5\\x03\\x02\\x02\\x02\\u0488\\u0489\\x05\\xE0q\\x02\\u0489\",\"\\xD7\\x03\\x02\\x02\\x02\\u048A\\u0491\\x05\\u0122\\x92\\x02\\u048B\",\"\\u048C\\x05\\u0124\\x93\\x02\\u048C\\u048D\\x07\\f\\x02\\x02\\u048D\",\"\\u048E\\x05\\xE2r\\x02\\u048E\\u048F\\x07\\r\\x02\\x02\\u048F\\u0491\",\"\\x03\\x02\\x02\\x02\\u0490\\u048A\\x03\\x02\\x02\\x02\\u0490\\u048B\",\"\\x03\\x02\\x02\\x02\\u0491\\xD9\\x03\\x02\\x02\\x02\\u0492\\u0495\",\"\\x05\\u012E\\x98\\x02\\u0493\\u0495\\x05\\xDCo\\x02\\u0494\\u0492\",\"\\x03\\x02\\x02\\x02\\u0494\\u0493\\x03\\x02\\x02\\x02\\u0495\\xDB\",\"\\x03\\x02\\x02\\x02\\u0496\\u0497\\x05\\xDEp\\x02\\u0497\\xDD\",\"\\x03\\x02\\x02\\x02\\u0498\\u049F\\x05\\u012A\\x96\\x02\\u0499\\u049A\",\"\\x05\\u012C\\x97\\x02\\u049A\\u049B\\x07\\f\\x02\\x02\\u049B\\u049C\",\"\\x05\\xE2r\\x02\\u049C\\u049D\\x07\\r\\x02\\x02\\u049D\\u049F\\x03\",\"\\x02\\x02\\x02\\u049E\\u0498\\x03\\x02\\x02\\x02\\u049E\\u0499\\x03\",\"\\x02\\x02\\x02\\u049F\\xDF\\x03\\x02\\x02\\x02\\u04A0\\u04A7\\x05\",\"\\u0126\\x94\\x02\\u04A1\\u04A2\\x05\\u0128\\x95\\x02\\u04A2\\u04A3\\x07\",\"\\f\\x02\\x02\\u04A3\\u04A4\\x05\\xE2r\\x02\\u04A4\\u04A5\\x07\\r\\x02\",\"\\x02\\u04A5\\u04A7\\x03\\x02\\x02\\x02\\u04A6\\u04A0\\x03\\x02\\x02\",\"\\x02\\u04A6\\u04A1\\x03\\x02\\x02\\x02\\u04A7\\xE1\\x03\\x02\\x02\",\"\\x02\\u04A8\\u04AD\\x05\\xE4s\\x02\\u04A9\\u04AA\\x07\\x04\\x02\",\"\\x02\\u04AA\\u04AC\\x05\\xE4s\\x02\\u04AB\\u04A9\\x03\\x02\\x02\",\"\\x02\\u04AC\\u04AF\\x03\\x02\\x02\\x02\\u04AD\\u04AB\\x03\\x02\\x02\",\"\\x02\\u04AD\\u04AE\\x03\\x02\\x02\\x02\\u04AE\\xE3\\x03\\x02\\x02\",\"\\x02\\u04AF\\u04AD\\x03\\x02\\x02\\x02\\u04B0\\u04B6\\x05\\xE6t\",\"\\x02\\u04B1\\u04B6\\x05\\u0130\\x99\\x02\\u04B2\\u04B6\\x05\\xE8u\",\"\\x02\\u04B3\\u04B6\\x05\\xEAv\\x02\\u04B4\\u04B6\\x05\\xECw\\x02\",\"\\u04B5\\u04B0\\x03\\x02\\x02\\x02\\u04B5\\u04B1\\x03\\x02\\x02\\x02\",\"\\u04B5\\u04B2\\x03\\x02\\x02\\x02\\u04B5\\u04B3\\x03\\x02\\x02\\x02\",\"\\u04B5\\u04B4\\x03\\x02\\x02\\x02\\u04B6\\xE5\\x03\\x02\\x02\\x02\",\"\\u04B7\\u04BB\\x05\\xD8m\\x02\\u04B8\\u04BB\\x05\\xDAn\\x02\\u04B9\",\"\\u04BB\\x05\\xE0q\\x02\\u04BA\\u04B7\\x03\\x02\\x02\\x02\\u04BA\",\"\\u04B8\\x03\\x02\\x02\\x02\\u04BA\\u04B9\\x03\\x02\\x02\\x02\\u04BB\",\"\\xE7\\x03\\x02\\x02\\x02\\u04BC\\u04BD\\x07\\x1A\\x02\\x02\\u04BD\",\"\\u04BE\\x05f4\\x02\\u04BE\\u04BF\\x07\\x04\\x02\\x02\\u04BF\\u04C0\",\"\\x05\\xE4s\\x02\\u04C0\\u04C1\\x07\\x04\\x02\\x02\\u04C1\\u04C2\",\"\\x05\\xE4s\\x02\\u04C2\\u04C3\\x07\\r\\x02\\x02\\u04C3\\xE9\\x03\",\"\\x02\\x02\\x02\\u04C4\\u04C5\\x07\\x1B\\x02\\x02\\u04C5\\u04C6\\x05\",\"\\x8CG\\x02\\u04C6\\u04C7\\x07\\x04\\x02\\x02\\u04C7\\u04C8\\x05\",\"\\xE4s\\x02\\u04C8\\u04C9\\x07\\r\\x02\\x02\\u04C9\\u04D1\\x03\\x02\",\"\\x02\\x02\\u04CA\\u04CB\\x07\\x1C\\x02\\x02\\u04CB\\u04CC\\x05\\x84\",\"C\\x02\\u04CC\\u04CD\\x07\\x04\\x02\\x02\\u04CD\\u04CE\\x05\\xE4\",\"s\\x02\\u04CE\\u04CF\\x07\\r\\x02\\x02\\u04CF\\u04D1\\x03\\x02\\x02\",\"\\x02\\u04D0\\u04C4\\x03\\x02\\x02\\x02\\u04D0\\u04CA\\x03\\x02\\x02\",\"\\x02\\u04D1\\xEB\\x03\\x02\\x02\\x02\\u04D2\\u04D8\\x07\\x14\\x02\",\"\\x02\\u04D3\\u04D4\\x07\\x15\\x02\\x02\\u04D4\\u04D5\\x05\\xE2r\",\"\\x02\\u04D5\\u04D6\\x07\\x16\\x02\\x02\\u04D6\\u04D8\\x03\\x02\\x02\",\"\\x02\\u04D7\\u04D2\\x03\\x02\\x02\\x02\\u04D7\\u04D3\\x03\\x02\\x02\",\"\\x02\\u04D8\\xED\\x03\\x02\\x02\\x02\\u04D9\\u04DA\\x05\\xF0y\",\"\\x02\\u04DA\\u04DB\\x07K\\x02\\x02\\u04DB\\u04DC\\x05\\xF0y\\x02\",\"\\u04DC\\u04E2\\x03\\x02\\x02\\x02\\u04DD\\u04DE\\x07\\f\\x02\\x02\",\"\\u04DE\\u04DF\\x05\\xEEx\\x02\\u04DF\\u04E0\\x07\\r\\x02\\x02\\u04E0\",\"\\u04E2\\x03\\x02\\x02\\x02\\u04E1\\u04D9\\x03\\x02\\x02\\x02\\u04E1\",\"\\u04DD\\x03\\x02\\x02\\x02\\u04E2\\xEF\\x03\\x02\\x02\\x02\\u04E3\",\"\\u04E9\\x07\\x13\\x02\\x02\\u04E4\\u04E5\\x07\\x0E\\x02\\x02\\u04E5\",\"\\u04E6\\x05\\xF2z\\x02\\u04E6\\u04E7\\x07\\x0F\\x02\\x02\\u04E7\",\"\\u04E9\\x03\\x02\\x02\\x02\\u04E8\\u04E3\\x03\\x02\\x02\\x02\\u04E8\",\"\\u04E4\\x03\\x02\\x02\\x02\\u04E9\\xF1\\x03\\x02\\x02\\x02\\u04EA\",\"\\u04EF\\x05\\xB6\\\\\\x02\\u04EB\\u04EC\\x07\\x04\\x02\\x02\\u04EC\",\"\\u04EE\\x05\\xB6\\\\\\x02\\u04ED\\u04EB\\x03\\x02\\x02\\x02\\u04EE\",\"\\u04F1\\x03\\x02\\x02\\x02\\u04EF\\u04ED\\x03\\x02\\x02\\x02\\u04EF\",\"\\u04F0\\x03\\x02\\x02\\x02\\u04F0\\xF3\\x03\\x02\\x02\\x02\\u04F1\",\"\\u04EF\\x03\\x02\\x02\\x02\\u04F2\\u04F8\\x05\\xF6|\\x02\\u04F3\",\"\\u04F4\\x07\\f\\x02\\x02\\u04F4\\u04F5\\x05\\xF6|\\x02\\u04F5\\u04F6\",\"\\x07\\r\\x02\\x02\\u04F6\\u04F8\\x03\\x02\\x02\\x02\\u04F7\\u04F2\",\"\\x03\\x02\\x02\\x02\\u04F7\\u04F3\\x03\\x02\\x02\\x02\\u04F8\\xF5\",\"\\x03\\x02\\x02\\x02\\u04F9\\u04FA\\b|\\x01\\x02\\u04FA\\u04FB\\x05\",\"\\xF8}\\x02\\u04FB\\u0501\\x03\\x02\\x02\\x02\\u04FC\\u04FD\\f\\x03\",\"\\x02\\x02\\u04FD\\u04FE\\x07.\\x02\\x02\\u04FE\\u0500\\x05\\xF8\",\"}\\x02\\u04FF\\u04FC\\x03\\x02\\x02\\x02\\u0500\\u0503\\x03\\x02\",\"\\x02\\x02\\u0501\\u04FF\\x03\\x02\\x02\\x02\\u0501\\u0502\\x03\\x02\",\"\\x02\\x02\\u0502\\xF7\\x03\\x02\\x02\\x02\\u0503\\u0501\\x03\\x02\",\"\\x02\\x02\\u0504\\u0509\\x05\\xCCg\\x02\\u0505\\u0506\\x076\\x02\",\"\\x02\\u0506\\u0509\\x05\\xCCg\\x02\\u0507\\u0509\\x05\\xCAf\\x02\",\"\\u0508\\u0504\\x03\\x02\\x02\\x02\\u0508\\u0505\\x03\\x02\\x02\\x02\",\"\\u0508\\u0507\\x03\\x02\\x02\\x02\\u0509\\xF9\\x03\\x02\\x02\\x02\",\"\\u050A\\u050E\\x05\\u0108\\x85\\x02\\u050B\\u050E\\x05\\xFC\\x7F\\x02\",\"\\u050C\\u050E\\x05\\xFE\\x80\\x02\\u050D\\u050A\\x03\\x02\\x02\\x02\",\"\\u050D\\u050B\\x03\\x02\\x02\\x02\\u050D\\u050C\\x03\\x02\\x02\\x02\",\"\\u050E\\xFB\\x03\\x02\\x02\\x02\\u050F\\u0510\\t\\x02\\x02\\x02\",\"\\u0510\\xFD\\x03\\x02\\x02\\x02\\u0511\\u0512\\t\\x03\\x02\\x02\",\"\\u0512\\xFF\\x03\\x02\\x02\\x02\\u0513\\u0518\\x07:\\x02\\x02\",\"\\u0514\\u0518\\x079\\x02\\x02\\u0515\\u0518\\x05\\u010A\\x86\\x02\",\"\\u0516\\u0518\\x07F\\x02\\x02\\u0517\\u0513\\x03\\x02\\x02\\x02\",\"\\u0517\\u0514\\x03\\x02\\x02\\x02\\u0517\\u0515\\x03\\x02\\x02\\x02\",\"\\u0517\\u0516\\x03\\x02\\x02\\x02\\u0518\\u0101\\x03\\x02\\x02\\x02\",\"\\u0519\\u051C\\x05\\u010E\\x88\\x02\\u051A\\u051C\\x05\\u0104\\x83\\x02\",\"\\u051B\\u0519\\x03\\x02\\x02\\x02\\u051B\\u051A\\x03\\x02\\x02\\x02\",\"\\u051C\\u0103\\x03\\x02\\x02\\x02\\u051D\\u051E\\t\\x04\\x02\\x02\",\"\\u051E\\u0105\\x03\\x02\\x02\\x02\\u051F\\u0522\\x05\\u010A\\x86\\x02\",\"\\u0520\\u0522\\x07F\\x02\\x02\\u0521\\u051F\\x03\\x02\\x02\\x02\",\"\\u0521\\u0520\\x03\\x02\\x02\\x02\\u0522\\u0107\\x03\\x02\\x02\\x02\",\"\\u0523\\u0524\\t\\x05\\x02\\x02\\u0524\\u0109\\x03\\x02\\x02\\x02\",\"\\u0525\\u0526\\t\\x06\\x02\\x02\\u0526\\u010B\\x03\\x02\\x02\\x02\",\"\\u0527\\u0528\\t\\x07\\x02\\x02\\u0528\\u010D\\x03\\x02\\x02\\x02\",\"\\u0529\\u052A\\x076\\x02\\x02\\u052A\\u010F\\x03\\x02\\x02\\x02\",\"\\u052B\\u052C\\x05\\u0112\\x8A\\x02\\u052C\\u0111\\x03\\x02\\x02\\x02\",\"\\u052D\\u052E\\x05\\u018A\\xC6\\x02\\u052E\\u0113\\x03\\x02\\x02\\x02\",\"\\u052F\\u0530\\x07]\\x02\\x02\\u0530\\u0115\\x03\\x02\\x02\\x02\",\"\\u0531\\u0532\\x05\\u018E\\xC8\\x02\\u0532\\u0117\\x03\\x02\\x02\\x02\",\"\\u0533\\u0536\\x05\\u011A\\x8E\\x02\\u0534\\u0536\\x05\\u012A\\x96\\x02\",\"\\u0535\\u0533\\x03\\x02\\x02\\x02\\u0535\\u0534\\x03\\x02\\x02\\x02\",\"\\u0536\\u0119\\x03\\x02\\x02\\x02\\u0537\\u053A\\x05\\u0122\\x92\\x02\",\"\\u0538\\u053A\\x05\\u0126\\x94\\x02\\u0539\\u0537\\x03\\x02\\x02\\x02\",\"\\u0539\\u0538\\x03\\x02\\x02\\x02\\u053A\\u011B\\x03\\x02\\x02\\x02\",\"\\u053B\\u053C\\x07]\\x02\\x02\\u053C\\u011D\\x03\\x02\\x02\\x02\",\"\\u053D\\u053E\\x07]\\x02\\x02\\u053E\\u011F\\x03\\x02\\x02\\x02\",\"\\u053F\\u0540\\t\\b\\x02\\x02\\u0540\\u0121\\x03\\x02\\x02\\x02\\u0541\",\"\\u0542\\x05\\u0124\\x93\\x02\\u0542\\u0123\\x03\\x02\\x02\\x02\\u0543\",\"\\u0544\\x05\\u018A\\xC6\\x02\\u0544\\u0125\\x03\\x02\\x02\\x02\\u0545\",\"\\u0546\\x05\\u0128\\x95\\x02\\u0546\\u0127\\x03\\x02\\x02\\x02\\u0547\",\"\\u0548\\x05\\u018E\\xC8\\x02\\u0548\\u0129\\x03\\x02\\x02\\x02\\u0549\",\"\\u054A\\x05\\u012C\\x97\\x02\\u054A\\u012B\\x03\\x02\\x02\\x02\\u054B\",\"\\u054C\\x05\\u018C\\xC7\\x02\\u054C\\u012D\\x03\\x02\\x02\\x02\\u054D\",\"\\u0550\\x05\\u0190\\xC9\\x02\\u054E\\u0550\\x07b\\x02\\x02\\u054F\",\"\\u054D\\x03\\x02\\x02\\x02\\u054F\\u054E\\x03\\x02\\x02\\x02\\u0550\",\"\\u012F\\x03\\x02\\x02\\x02\\u0551\\u0552\\x07_\\x02\\x02\\u0552\",\"\\u0131\\x03\\x02\\x02\\x02\\u0553\\u055C\\x05\\u0136\\x9C\\x02\\u0554\",\"\\u055C\\x05\\u0144\\xA3\\x02\\u0555\\u055C\\x05\\u0148\\xA5\\x02\\u0556\",\"\\u055C\\x07`\\x02\\x02\\u0557\\u0558\\x07\\x0E\\x02\\x02\\u0558\",\"\\u0559\\x05\\u0134\\x9B\\x02\\u0559\\u055A\\x07\\x0F\\x02\\x02\\u055A\",\"\\u055C\\x03\\x02\\x02\\x02\\u055B\\u0553\\x03\\x02\\x02\\x02\\u055B\",\"\\u0554\\x03\\x02\\x02\\x02\\u055B\\u0555\\x03\\x02\\x02\\x02\\u055B\",\"\\u0556\\x03\\x02\\x02\\x02\\u055B\\u0557\\x03\\x02\\x02\\x02\\u055C\",\"\\u0133\\x03\\x02\\x02\\x02\\u055D\\u0562\\x05\\u0132\\x9A\\x02\\u055E\",\"\\u055F\\x07\\x04\\x02\\x02\\u055F\\u0561\\x05\\u0132\\x9A\\x02\\u0560\",\"\\u055E\\x03\\x02\\x02\\x02\\u0561\\u0564\\x03\\x02\\x02\\x02\\u0562\",\"\\u0560\\x03\\x02\\x02\\x02\\u0562\\u0563\\x03\\x02\\x02\\x02\\u0563\",\"\\u0135\\x03\\x02\\x02\\x02\\u0564\\u0562\\x03\\x02\\x02\\x02\\u0565\",\"\\u0568\\x05\\u0188\\xC5\\x02\\u0566\\u0568\\x05\\u0138\\x9D\\x02\\u0567\",\"\\u0565\\x03\\x02\\x02\\x02\\u0567\\u0566\\x03\\x02\\x02\\x02\\u0568\",\"\\u0137\\x03\\x02\\x02\\x02\\u0569\\u056A\\x07\\x1D\\x02\\x02\\u056A\",\"\\u056B\\x05\\u013A\\x9E\\x02\\u056B\\u056C\\x07\\x04\\x02\\x02\\u056C\",\"\\u056D\\x05\\u0158\\xAD\\x02\\u056D\\u056E\\x07\\x04\\x02\\x02\\u056E\",\"\\u056F\\x05\\u013C\\x9F\\x02\\u056F\\u0570\\x07\\r\\x02\\x02\\u0570\",\"\\u0139\\x03\\x02\\x02\\x02\\u0571\\u0572\\x05\\u018A\\xC6\\x02\\u0572\",\"\\u013B\\x03\\x02\\x02\\x02\\u0573\\u0579\\x07\\x13\\x02\\x02\\u0574\",\"\\u0575\\x07\\x0E\\x02\\x02\\u0575\\u0576\\x05\\u013E\\xA0\\x02\\u0576\",\"\\u0577\\x07\\x0F\\x02\\x02\\u0577\\u0579\\x03\\x02\\x02\\x02\\u0578\",\"\\u0573\\x03\\x02\\x02\\x02\\u0578\\u0574\\x03\\x02\\x02\\x02\\u0579\",\"\\u013D\\x03\\x02\\x02\\x02\\u057A\\u057F\\x05\\u0140\\xA1\\x02\\u057B\",\"\\u057C\\x07\\x04\\x02\\x02\\u057C\\u057E\\x05\\u0140\\xA1\\x02\\u057D\",\"\\u057B\\x03\\x02\\x02\\x02\\u057E\\u0581\\x03\\x02\\x02\\x02\\u057F\",\"\\u057D\\x03\\x02\\x02\\x02\\u057F\\u0580\\x03\\x02\\x02\\x02\\u0580\",\"\\u013F\\x03\\x02\\x02\\x02\\u0581\\u057F\\x03\\x02\\x02\\x02\\u0582\",\"\\u0584\\x05\\u0132\\x9A\\x02\\u0583\\u0585\\x05\\u0142\\xA2\\x02\\u0584\",\"\\u0583\\x03\\x02\\x02\\x02\\u0584\\u0585\\x03\\x02\\x02\\x02\\u0585\",\"\\u0141\\x03\\x02\\x02\\x02\\u0586\\u0587\\x07\\x10\\x02\\x02\\u0587\",\"\\u0588\\x05\\u0184\\xC3\\x02\\u0588\\u0143\\x03\\x02\\x02\\x02\\u0589\",\"\\u058A\\x07\\x1E\\x02\\x02\\u058A\\u058C\\x05\\u0146\\xA4\\x02\\u058B\",\"\\u058D\\x05\\u0156\\xAC\\x02\\u058C\\u058B\\x03\\x02\\x02\\x02\\u058C\",\"\\u058D\\x03\\x02\\x02\\x02\\u058D\\u058E\\x03\\x02\\x02\\x02\\u058E\",\"\\u058F\\x07\\r\\x02\\x02\\u058F\\u0145\\x03\\x02\\x02\\x02\\u0590\",\"\\u0591\\x07`\\x02\\x02\\u0591\\u0147\\x03\\x02\\x02\\x02\\u0592\",\"\\u0596\\x05\\u014A\\xA6\\x02\\u0593\\u0596\\x05\\u014E\\xA8\\x02\\u0594\",\"\\u0596\\x05\\u0152\\xAA\\x02\\u0595\\u0592\\x03\\x02\\x02\\x02\\u0595\",\"\\u0593\\x03\\x02\\x02\\x02\\u0595\\u0594\\x03\\x02\\x02\\x02\\u0596\",\"\\u0149\\x03\\x02\\x02\\x02\\u0597\\u0598\\x07\\x1F\\x02\\x02\\u0598\",\"\\u059A\\x05\\u0192\\xCA\\x02\\u0599\\u059B\\x05\\u014C\\xA7\\x02\\u059A\",\"\\u0599\\x03\\x02\\x02\\x02\\u059A\\u059B\\x03\\x02\\x02\\x02\\u059B\",\"\\u059C\\x03\\x02\\x02\\x02\\u059C\\u059D\\x07\\r\\x02\\x02\\u059D\",\"\\u014B\\x03\\x02\\x02\\x02\\u059E\\u059F\\x07\\x04\\x02\\x02\\u059F\",\"\\u05A0\\x05\\u0188\\xC5\\x02\\u05A0\\u014D\\x03\\x02\\x02\\x02\\u05A1\",\"\\u05A2\\x07 \\x02\\x02\\u05A2\\u05A4\\x05\\u0150\\xA9\\x02\\u05A3\",\"\\u05A5\\x05\\u0156\\xAC\\x02\\u05A4\\u05A3\\x03\\x02\\x02\\x02\\u05A4\",\"\\u05A5\\x03\\x02\\x02\\x02\\u05A5\\u05A6\\x03\\x02\\x02\\x02\\u05A6\",\"\\u05A7\\x07\\r\\x02\\x02\\u05A7\\u014F\\x03\\x02\\x02\\x02\\u05A8\",\"\\u05A9\\x07`\\x02\\x02\\u05A9\\u0151\\x03\\x02\\x02\\x02\\u05AA\",\"\\u05AB\\x07!\\x02\\x02\\u05AB\\u05AD\\x05\\u0154\\xAB\\x02\\u05AC\",\"\\u05AE\\x05\\u0156\\xAC\\x02\\u05AD\\u05AC\\x03\\x02\\x02\\x02\\u05AD\",\"\\u05AE\\x03\\x02\\x02\\x02\\u05AE\\u05AF\\x03\\x02\\x02\\x02\\u05AF\",\"\\u05B0\\x07\\r\\x02\\x02\\u05B0\\u0153\\x03\\x02\\x02\\x02\\u05B1\",\"\\u05B2\\x05\\u018A\\xC6\\x02\\u05B2\\u0155\\x03\\x02\\x02\\x02\\u05B3\",\"\\u05B4\\x07\\x04\\x02\\x02\\u05B4\\u05B5\\x05\\u0158\\xAD\\x02\\u05B5\",\"\\u0157\\x03\\x02\\x02\\x02\\u05B6\\u05BD\\x07\\x13\\x02\\x02\\u05B7\",\"\\u05B8\\x07\\x0E\\x02\\x02\\u05B8\\u05B9\\x05\\u015A\\xAE\\x02\\u05B9\",\"\\u05BA\\x07\\x0F\\x02\\x02\\u05BA\\u05BD\\x03\\x02\\x02\\x02\\u05BB\",\"\\u05BD\\x05\\u0184\\xC3\\x02\\u05BC\\u05B6\\x03\\x02\\x02\\x02\\u05BC\",\"\\u05B7\\x03\\x02\\x02\\x02\\u05BC\\u05BB\\x03\\x02\\x02\\x02\\u05BD\",\"\\u0159\\x03\\x02\\x02\\x02\\u05BE\\u05C3\\x05\\u015C\\xAF\\x02\\u05BF\",\"\\u05C0\\x07\\x04\\x02\\x02\\u05C0\\u05C2\\x05\\u015C\\xAF\\x02\\u05C1\",\"\\u05BF\\x03\\x02\\x02\\x02\\u05C2\\u05C5\\x03\\x02\\x02\\x02\\u05C3\",\"\\u05C1\\x03\\x02\\x02\\x02\\u05C3\\u05C4\\x03\\x02\\x02\\x02\\u05C4\",\"\\u015B\\x03\\x02\\x02\\x02\\u05C5\\u05C3\\x03\\x02\\x02\\x02\\u05C6\",\"\\u05CA\\x05\\u015E\\xB0\\x02\\u05C7\\u05CA\\x05\\u0164\\xB3\\x02\\u05C8\",\"\\u05CA\\x05\\u0180\\xC1\\x02\\u05C9\\u05C6\\x03\\x02\\x02\\x02\\u05C9\",\"\\u05C7\\x03\\x02\\x02\\x02\\u05C9\\u05C8\\x03\\x02\\x02\\x02\\u05CA\",\"\\u015D\\x03\\x02\\x02\\x02\\u05CB\\u05CE\\x05\\u0160\\xB1\\x02\\u05CC\",\"\\u05CE\\x05\\u0162\\xB2\\x02\\u05CD\\u05CB\\x03\\x02\\x02\\x02\\u05CD\",\"\\u05CC\\x03\\x02\\x02\\x02\\u05CE\\u015F\\x03\\x02\\x02\\x02\\u05CF\",\"\\u05D0\\x07\\\"\\x02\\x02\\u05D0\\u05D1\\x05\\u018A\\xC6\\x02\\u05D1\",\"\\u05D2\\x07\\r\\x02\\x02\\u05D2\\u0161\\x03\\x02\\x02\\x02\\u05D3\",\"\\u05D4\\x07#\\x02\\x02\\u05D4\\u05D5\\x05\\u018A\\xC6\\x02\\u05D5\",\"\\u05D6\\x07\\r\\x02\\x02\\u05D6\\u0163\\x03\\x02\\x02\\x02\\u05D7\",\"\\u05DC\\x05\\u0166\\xB4\\x02\\u05D8\\u05DC\\x05\\u016C\\xB7\\x02\\u05D9\",\"\\u05DC\\x05\\u0170\\xB9\\x02\\u05DA\\u05DC\\x05\\u016E\\xB8\\x02\\u05DB\",\"\\u05D7\\x03\\x02\\x02\\x02\\u05DB\\u05D8\\x03\\x02\\x02\\x02\\u05DB\",\"\\u05D9\\x03\\x02\\x02\\x02\\u05DB\\u05DA\\x03\\x02\\x02\\x02\\u05DC\",\"\\u0165\\x03\\x02\\x02\\x02\\u05DD\\u05DE\\x07$\\x02\\x02\\u05DE\",\"\\u05DF\\x05\\u0168\\xB5\\x02\\u05DF\\u05E0\\x07\\r\\x02\\x02\\u05E0\",\"\\u05E3\\x03\\x02\\x02\\x02\\u05E1\\u05E3\\x05\\u016A\\xB6\\x02\\u05E2\",\"\\u05DD\\x03\\x02\\x02\\x02\\u05E2\\u05E1\\x03\\x02\\x02\\x02\\u05E3\",\"\\u0167\\x03\\x02\\x02\\x02\\u05E4\\u05E5\\x07`\\x02\\x02\\u05E5\",\"\\u0169\\x03\\x02\\x02\\x02\\u05E6\\u05E7\\x05\\u013A\\x9E\\x02\\u05E7\",\"\\u05E8\\x07\\f\\x02\\x02\\u05E8\\u05E9\\x05\\u018A\\xC6\\x02\\u05E9\",\"\\u05EA\\x07\\x04\\x02\\x02\\u05EA\\u05EB\\x05\\u0184\\xC3\\x02\\u05EB\",\"\\u05EC\\x07\\r\\x02\\x02\\u05EC\\u016B\\x03\\x02\\x02\\x02\\u05ED\",\"\\u05EE\\x07%\\x02\\x02\\u05EE\\u05EF\\x07\\x0E\\x02\\x02\\u05EF\",\"\\u05F0\\x05\\u017A\\xBE\\x02\\u05F0\\u05F1\\x07\\x0F\\x02\\x02\\u05F1\",\"\\u05F2\\x07\\r\\x02\\x02\\u05F2\\u016D\\x03\\x02\\x02\\x02\\u05F3\",\"\\u05F4\\x07&\\x02\\x02\\u05F4\\u05F5\\x05\\u014A\\xA6\\x02\\u05F5\",\"\\u05F6\\x07\\r\\x02\\x02\\u05F6\\u016F\\x03\\x02\\x02\\x02\\u05F7\",\"\\u05F8\\x07'\\x02\\x02\\u05F8\\u05F9\\x05\\u018A\\xC6\\x02\\u05F9\",\"\\u05FA\\x07\\x04\\x02\\x02\\u05FA\\u05FB\\x07\\x0E\\x02\\x02\\u05FB\",\"\\u05FC\\x05\\u0172\\xBA\\x02\\u05FC\\u05FD\\x07\\x0F\\x02\\x02\\u05FD\",\"\\u05FE\\x07\\r\\x02\\x02\\u05FE\\u0171\\x03\\x02\\x02\\x02\\u05FF\",\"\\u0604\\x05\\u0174\\xBB\\x02\\u0600\\u0601\\x07\\x04\\x02\\x02\\u0601\",\"\\u0603\\x05\\u0174\\xBB\\x02\\u0602\\u0600\\x03\\x02\\x02\\x02\\u0603\",\"\\u0606\\x03\\x02\\x02\\x02\\u0604\\u0602\\x03\\x02\\x02\\x02\\u0604\",\"\\u0605\\x03\\x02\\x02\\x02\\u0605\\u0173\\x03\\x02\\x02\\x02\\u0606\",\"\\u0604\\x03\\x02\\x02\\x02\\u0607\\u060A\\x05\\u0124\\x93\\x02\\u0608\",\"\\u060A\\x05\\u0130\\x99\\x02\\u0609\\u0607\\x03\\x02\\x02\\x02\\u0609\",\"\\u0608\\x03\\x02\\x02\\x02\\u060A\\u0175\\x03\\x02\\x02\\x02\\u060B\",\"\\u060C\\x07(\\x02\\x02\\u060C\\u060E\\x05\\u0192\\xCA\\x02\\u060D\",\"\\u060F\\x05\\u0178\\xBD\\x02\\u060E\\u060D\\x03\\x02\\x02\\x02\\u060E\",\"\\u060F\\x03\\x02\\x02\\x02\\u060F\\u0610\\x03\\x02\\x02\\x02\\u0610\",\"\\u0611\\x07\\x05\\x02\\x02\\u0611\\u0177\\x03\\x02\\x02\\x02\\u0612\",\"\\u0613\\x07\\x04\\x02\\x02\\u0613\\u0614\\x07\\x0E\\x02\\x02\\u0614\",\"\\u0615\\x05\\u017A\\xBE\\x02\\u0615\\u0616\\x07\\x0F\\x02\\x02\\u0616\",\"\\u0179\\x03\\x02\\x02\\x02\\u0617\\u061C\\x05\\u0188\\xC5\\x02\\u0618\",\"\\u0619\\x07\\x04\\x02\\x02\\u0619\\u061B\\x05\\u0188\\xC5\\x02\\u061A\",\"\\u0618\\x03\\x02\\x02\\x02\\u061B\\u061E\\x03\\x02\\x02\\x02\\u061C\",\"\\u061A\\x03\\x02\\x02\\x02\\u061C\\u061D\\x03\\x02\\x02\\x02\\u061D\",\"\\u017B\\x03\\x02\\x02\\x02\\u061E\\u061C\\x03\\x02\\x02\\x02\\u061F\",\"\\u0626\\x05\\u017E\\xC0\\x02\\u0620\\u0621\\x05\\u017E\\xC0\\x02\\u0621\",\"\\u0622\\x07\\x10\\x02\\x02\\u0622\\u0623\\x05\\u017C\\xBF\\x02\\u0623\",\"\\u0626\\x03\\x02\\x02\\x02\\u0624\\u0626\\x05\\u0184\\xC3\\x02\\u0625\",\"\\u061F\\x03\\x02\\x02\\x02\\u0625\\u0620\\x03\\x02\\x02\\x02\\u0625\",\"\\u0624\\x03\\x02\\x02\\x02\\u0626\\u017D\\x03\\x02\\x02\\x02\\u0627\",\"\\u062E\\x05\\u018A\\xC6\\x02\\u0628\\u062E\\x05\\u0180\\xC1\\x02\\u0629\",\"\\u062E\\x05\\u0130\\x99\\x02\\u062A\\u062E\\x05\\u0190\\xC9\\x02\\u062B\",\"\\u062E\\x07b\\x02\\x02\\u062C\\u062E\\x05\\u0182\\xC2\\x02\\u062D\",\"\\u0627\\x03\\x02\\x02\\x02\\u062D\\u0628\\x03\\x02\\x02\\x02\\u062D\",\"\\u0629\\x03\\x02\\x02\\x02\\u062D\\u062A\\x03\\x02\\x02\\x02\\u062D\",\"\\u062B\\x03\\x02\\x02\\x02\\u062D\\u062C\\x03\\x02\\x02\\x02\\u062E\",\"\\u017F\\x03\\x02\\x02\\x02\\u062F\\u0630\\x05\\u018A\\xC6\\x02\\u0630\",\"\\u0631\\x07\\f\\x02\\x02\\u0631\\u0632\\x05\\u0186\\xC4\\x02\\u0632\",\"\\u0633\\x07\\r\\x02\\x02\\u0633\\u0181\\x03\\x02\\x02\\x02\\u0634\",\"\\u0635\\x07)\\x02\\x02\\u0635\\u0636\\x05\\x1C\\x0F\\x02\\u0636\",\"\\u0637\\x07\\r\\x02\\x02\\u0637\\u0649\\x03\\x02\\x02\\x02\\u0638\",\"\\u0639\\x07*\\x02\\x02\\u0639\\u063A\\x05d3\\x02\\u063A\\u063B\\x07\",\"\\r\\x02\\x02\\u063B\\u0649\\x03\\x02\\x02\\x02\\u063C\\u063D\\x07\",\"+\\x02\\x02\\u063D\\u063E\\x05\\xB4[\\x02\\u063E\\u063F\\x07\\r\\x02\",\"\\x02\\u063F\\u0649\\x03\\x02\\x02\\x02\\u0640\\u0641\\x07,\\x02\",\"\\x02\\u0641\\u0642\\x05\\xF4{\\x02\\u0642\\u0643\\x07\\r\\x02\\x02\",\"\\u0643\\u0649\\x03\\x02\\x02\\x02\\u0644\\u0645\\x07-\\x02\\x02\",\"\\u0645\\u0646\\x05\\xE4s\\x02\\u0646\\u0647\\x07\\r\\x02\\x02\\u0647\",\"\\u0649\\x03\\x02\\x02\\x02\\u0648\\u0634\\x03\\x02\\x02\\x02\\u0648\",\"\\u0638\\x03\\x02\\x02\\x02\\u0648\\u063C\\x03\\x02\\x02\\x02\\u0648\",\"\\u0640\\x03\\x02\\x02\\x02\\u0648\\u0644\\x03\\x02\\x02\\x02\\u0649\",\"\\u0183\\x03\\x02\\x02\\x02\\u064A\\u0650\\x07\\x13\\x02\\x02\\u064B\",\"\\u064C\\x07\\x0E\\x02\\x02\\u064C\\u064D\\x05\\u0186\\xC4\\x02\\u064D\",\"\\u064E\\x07\\x0F\\x02\\x02\\u064E\\u0650\\x03\\x02\\x02\\x02\\u064F\",\"\\u064A\\x03\\x02\\x02\\x02\\u064F\\u064B\\x03\\x02\\x02\\x02\\u0650\",\"\\u0185\\x03\\x02\\x02\\x02\\u0651\\u0656\\x05\\u017C\\xBF\\x02\\u0652\",\"\\u0653\\x07\\x04\\x02\\x02\\u0653\\u0655\\x05\\u017C\\xBF\\x02\\u0654\",\"\\u0652\\x03\\x02\\x02\\x02\\u0655\\u0658\\x03\\x02\\x02\\x02\\u0656\",\"\\u0654\\x03\\x02\\x02\\x02\\u0656\\u0657\\x03\\x02\\x02\\x02\\u0657\",\"\\u0187\\x03\\x02\\x02\\x02\\u0658\\u0656\\x03\\x02\\x02\\x02\\u0659\",\"\\u065C\\x05\\u018A\\xC6\\x02\\u065A\\u065C\\x07R\\x02\\x02\\u065B\",\"\\u0659\\x03\\x02\\x02\\x02\\u065B\\u065A\\x03\\x02\\x02\\x02\\u065C\",\"\\u0189\\x03\\x02\\x02\\x02\\u065D\\u065E\\t\\t\\x02\\x02\\u065E\\u018B\",\"\\x03\\x02\\x02\\x02\\u065F\\u0660\\x07]\\x02\\x02\\u0660\\u018D\",\"\\x03\\x02\\x02\\x02\\u0661\\u0662\\x07^\\x02\\x02\\u0662\\u018F\",\"\\x03\\x02\\x02\\x02\\u0663\\u0664\\t\\n\\x02\\x02\\u0664\\u0191\\x03\",\"\\x02\\x02\\x02\\u0665\\u0666\\x07a\\x02\\x02\\u0666\\u0193\\x03\",\"\\x02\\x02\\x02\\x7F\\u0197\\u019E\\u01A7\\u01B0\\u01BD\\u01C8\\u01D3\\u01DE\",\"\\u01E9\\u01F4\\u01FB\\u0201\\u0207\\u020C\\u0215\\u0221\\u022E\\u023B\\u0248\\u0258\",\"\\u025D\\u026C\\u027E\\u0283\\u029E\\u02A7\\u02B0\\u02BA\\u02C6\\u02D3\\u02DE\\u02EA\",\"\\u02F1\\u02F6\\u02FD\\u0302\\u0306\\u030E\\u031A\\u0327\\u0333\\u0341\\u0346\\u0350\",\"\\u0368\\u036F\\u0376\\u0381\\u038B\\u0392\\u0399\\u03A4\\u03AE\\u03B8\\u03BF\\u03C6\",\"\\u03D1\\u03DE\\u03EC\\u03F3\\u03FD\\u0404\\u0415\\u041A\\u041E\\u0429\\u042D\\u0431\",\"\\u0439\\u0445\\u0452\\u045C\\u046A\\u0471\\u047A\\u0480\\u0490\\u0494\\u049E\\u04A6\",\"\\u04AD\\u04B5\\u04BA\\u04D0\\u04D7\\u04E1\\u04E8\\u04EF\\u04F7\\u0501\\u0508\\u050D\",\"\\u0517\\u051B\\u0521\\u0535\\u0539\\u054F\\u055B\\u0562\\u0567\\u0578\\u057F\\u0584\",\"\\u058C\\u0595\\u059A\\u05A4\\u05AD\\u05BC\\u05C3\\u05C9\\u05CD\\u05DB\\u05E2\\u0604\",\"\\u0609\\u060E\\u061C\\u0625\\u062D\\u0648\\u064F\\u0656\\u065B\"].join(\"\");var atn=new _antlr[\"default\"].atn.ATNDeserializer().deserialize(serializedATN);var decisionsToDFA=atn.decisionToState.map(function(ds,index){return new _antlr[\"default\"].dfa.DFA(ds,index);});var sharedContextCache=new _antlr[\"default\"].PredictionContextCache();var tptp_v7_0_0_0Parser=/*#__PURE__*/function(_antlr4$Parser){_inherits(tptp_v7_0_0_0Parser,_antlr4$Parser);var _super=_createSuper(tptp_v7_0_0_0Parser);function tptp_v7_0_0_0Parser(input){var _this;_classCallCheck(this,tptp_v7_0_0_0Parser);_this=_super.call(this,input);_this._interp=new _antlr[\"default\"].atn.ParserATNSimulator(_assertThisInitialized(_this),atn,decisionsToDFA,sharedContextCache);_this.ruleNames=tptp_v7_0_0_0Parser.ruleNames;_this.literalNames=tptp_v7_0_0_0Parser.literalNames;_this.symbolicNames=tptp_v7_0_0_0Parser.symbolicNames;return _this;}_createClass(tptp_v7_0_0_0Parser,[{key:\"atn\",get:function get(){return atn;}},{key:\"sempred\",value:function sempred(localctx,ruleIndex,predIndex){switch(ruleIndex){case 18:return this.thf_or_formula_sempred(localctx,predIndex);case 19:return this.thf_and_formula_sempred(localctx,predIndex);case 20:return this.thf_apply_formula_sempred(localctx,predIndex);case 42:return this.thf_xprod_type_sempred(localctx,predIndex);case 43:return this.thf_union_type_sempred(localctx,predIndex);case 54:return this.tff_or_formula_sempred(localctx,predIndex);case 55:return this.tff_and_formula_sempred(localctx,predIndex);case 85:return this.tff_xprod_type_sempred(localctx,predIndex);case 94:return this.fof_or_formula_sempred(localctx,predIndex);case 95:return this.fof_and_formula_sempred(localctx,predIndex);case 122:return this.cnf_disjunction_sempred(localctx,predIndex);default:throw\"No predicate with index:\"+ruleIndex;}}},{key:\"thf_or_formula_sempred\",value:function thf_or_formula_sempred(localctx,predIndex){switch(predIndex){case 0:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_and_formula_sempred\",value:function thf_and_formula_sempred(localctx,predIndex){switch(predIndex){case 1:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_apply_formula_sempred\",value:function thf_apply_formula_sempred(localctx,predIndex){switch(predIndex){case 2:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_xprod_type_sempred\",value:function thf_xprod_type_sempred(localctx,predIndex){switch(predIndex){case 3:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_union_type_sempred\",value:function thf_union_type_sempred(localctx,predIndex){switch(predIndex){case 4:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tff_or_formula_sempred\",value:function tff_or_formula_sempred(localctx,predIndex){switch(predIndex){case 5:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tff_and_formula_sempred\",value:function tff_and_formula_sempred(localctx,predIndex){switch(predIndex){case 6:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tff_xprod_type_sempred\",value:function tff_xprod_type_sempred(localctx,predIndex){switch(predIndex){case 7:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"fof_or_formula_sempred\",value:function fof_or_formula_sempred(localctx,predIndex){switch(predIndex){case 8:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"fof_and_formula_sempred\",value:function fof_and_formula_sempred(localctx,predIndex){switch(predIndex){case 9:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"cnf_disjunction_sempred\",value:function cnf_disjunction_sempred(localctx,predIndex){switch(predIndex){case 10:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tptp_file\",value:function tptp_file(){var localctx=new Tptp_fileContext(this,this._ctx,this.state);this.enterRule(localctx,0,tptp_v7_0_0_0Parser.RULE_tptp_file);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=405;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<tptp_v7_0_0_0Parser.T__0|1<<tptp_v7_0_0_0Parser.T__3|1<<tptp_v7_0_0_0Parser.T__4|1<<tptp_v7_0_0_0Parser.T__5|1<<tptp_v7_0_0_0Parser.T__6|1<<tptp_v7_0_0_0Parser.T__7|1<<tptp_v7_0_0_0Parser.T__8))!==0||_la===tptp_v7_0_0_0Parser.T__37){this.state=402;this.tptp_input();this.state=407;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=408;this.match(tptp_v7_0_0_0Parser.EOF);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tptp_input\",value:function tptp_input(){var localctx=new Tptp_inputContext(this,this._ctx,this.state);this.enterRule(localctx,2,tptp_v7_0_0_0Parser.RULE_tptp_input);try{this.state=412;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__0:case tptp_v7_0_0_0Parser.T__3:case tptp_v7_0_0_0Parser.T__4:case tptp_v7_0_0_0Parser.T__5:case tptp_v7_0_0_0Parser.T__6:case tptp_v7_0_0_0Parser.T__7:case tptp_v7_0_0_0Parser.T__8:this.enterOuterAlt(localctx,1);this.state=410;this.annotated_formula();break;case tptp_v7_0_0_0Parser.T__37:this.enterOuterAlt(localctx,2);this.state=411;this.include();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"annotated_formula\",value:function annotated_formula(){var localctx=new Annotated_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,4,tptp_v7_0_0_0Parser.RULE_annotated_formula);try{this.state=421;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__3:this.enterOuterAlt(localctx,1);this.state=414;this.thf_annotated();break;case tptp_v7_0_0_0Parser.T__4:this.enterOuterAlt(localctx,2);this.state=415;this.tfx_annotated();break;case tptp_v7_0_0_0Parser.T__5:this.enterOuterAlt(localctx,3);this.state=416;this.tff_annotated();break;case tptp_v7_0_0_0Parser.T__6:this.enterOuterAlt(localctx,4);this.state=417;this.tcf_annotated();break;case tptp_v7_0_0_0Parser.T__7:this.enterOuterAlt(localctx,5);this.state=418;this.fof_annotated();break;case tptp_v7_0_0_0Parser.T__8:this.enterOuterAlt(localctx,6);this.state=419;this.cnf_annotated();break;case tptp_v7_0_0_0Parser.T__0:this.enterOuterAlt(localctx,7);this.state=420;this.tpi_annotated();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tpi_annotated\",value:function tpi_annotated(){var localctx=new Tpi_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,6,tptp_v7_0_0_0Parser.RULE_tpi_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=423;this.match(tptp_v7_0_0_0Parser.T__0);this.state=424;this.name();this.state=425;this.match(tptp_v7_0_0_0Parser.T__1);this.state=426;this.formula_role();this.state=427;this.match(tptp_v7_0_0_0Parser.T__1);this.state=428;this.tpi_formula();this.state=430;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=429;this.annotations();}this.state=432;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tpi_formula\",value:function tpi_formula(){var localctx=new Tpi_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,8,tptp_v7_0_0_0Parser.RULE_tpi_formula);try{this.enterOuterAlt(localctx,1);this.state=434;this.fof_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_annotated\",value:function thf_annotated(){var localctx=new Thf_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,10,tptp_v7_0_0_0Parser.RULE_thf_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=436;this.match(tptp_v7_0_0_0Parser.T__3);this.state=437;this.name();this.state=438;this.match(tptp_v7_0_0_0Parser.T__1);this.state=439;this.formula_role();this.state=440;this.match(tptp_v7_0_0_0Parser.T__1);this.state=441;this.thf_formula();this.state=443;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=442;this.annotations();}this.state=445;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tfx_annotated\",value:function tfx_annotated(){var localctx=new Tfx_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,12,tptp_v7_0_0_0Parser.RULE_tfx_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=447;this.match(tptp_v7_0_0_0Parser.T__4);this.state=448;this.name();this.state=449;this.match(tptp_v7_0_0_0Parser.T__1);this.state=450;this.formula_role();this.state=451;this.match(tptp_v7_0_0_0Parser.T__1);this.state=452;this.tfx_formula();this.state=454;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=453;this.annotations();}this.state=456;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_annotated\",value:function tff_annotated(){var localctx=new Tff_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,14,tptp_v7_0_0_0Parser.RULE_tff_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=458;this.match(tptp_v7_0_0_0Parser.T__5);this.state=459;this.name();this.state=460;this.match(tptp_v7_0_0_0Parser.T__1);this.state=461;this.formula_role();this.state=462;this.match(tptp_v7_0_0_0Parser.T__1);this.state=463;this.tff_formula();this.state=465;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=464;this.annotations();}this.state=467;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tcf_annotated\",value:function tcf_annotated(){var localctx=new Tcf_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,16,tptp_v7_0_0_0Parser.RULE_tcf_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=469;this.match(tptp_v7_0_0_0Parser.T__6);this.state=470;this.name();this.state=471;this.match(tptp_v7_0_0_0Parser.T__1);this.state=472;this.formula_role();this.state=473;this.match(tptp_v7_0_0_0Parser.T__1);this.state=474;this.tcf_formula();this.state=476;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=475;this.annotations();}this.state=478;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_annotated\",value:function fof_annotated(){var localctx=new Fof_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,18,tptp_v7_0_0_0Parser.RULE_fof_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=480;this.match(tptp_v7_0_0_0Parser.T__7);this.state=481;this.name();this.state=482;this.match(tptp_v7_0_0_0Parser.T__1);this.state=483;this.formula_role();this.state=484;this.match(tptp_v7_0_0_0Parser.T__1);this.state=485;this.fof_formula();this.state=487;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=486;this.annotations();}this.state=489;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"cnf_annotated\",value:function cnf_annotated(){var localctx=new Cnf_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,20,tptp_v7_0_0_0Parser.RULE_cnf_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=491;this.match(tptp_v7_0_0_0Parser.T__8);this.state=492;this.name();this.state=493;this.match(tptp_v7_0_0_0Parser.T__1);this.state=494;this.formula_role();this.state=495;this.match(tptp_v7_0_0_0Parser.T__1);this.state=496;this.cnf_formula();this.state=498;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=497;this.annotations();}this.state=500;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"annotations\",value:function annotations(){var localctx=new AnnotationsContext(this,this._ctx,this.state);this.enterRule(localctx,22,tptp_v7_0_0_0Parser.RULE_annotations);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=502;this.match(tptp_v7_0_0_0Parser.T__1);this.state=503;this.source();this.state=505;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=504;this.optional_info();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_role\",value:function formula_role(){var localctx=new Formula_roleContext(this,this._ctx,this.state);this.enterRule(localctx,24,tptp_v7_0_0_0Parser.RULE_formula_role);try{this.enterOuterAlt(localctx,1);this.state=507;this.match(tptp_v7_0_0_0Parser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_formula\",value:function thf_formula(){var localctx=new Thf_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,26,tptp_v7_0_0_0Parser.RULE_thf_formula);try{this.state=511;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,11,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=509;this.thf_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=510;this.thf_sequent();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){var localctx=new Thf_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,28,tptp_v7_0_0_0Parser.RULE_thf_logic_formula);try{this.state=517;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,12,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=513;this.thf_binary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=514;this.thf_unitary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=515;this.thf_type_formula();break;case 4:this.enterOuterAlt(localctx,4);this.state=516;this.thf_subtype();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_formula\",value:function thf_binary_formula(){var localctx=new Thf_binary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,30,tptp_v7_0_0_0Parser.RULE_thf_binary_formula);try{this.state=522;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,13,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=519;this.thf_binary_pair();break;case 2:this.enterOuterAlt(localctx,2);this.state=520;this.thf_binary_tuple();break;case 3:this.enterOuterAlt(localctx,3);this.state=521;this.thf_binary_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_pair\",value:function thf_binary_pair(){var localctx=new Thf_binary_pairContext(this,this._ctx,this.state);this.enterRule(localctx,32,tptp_v7_0_0_0Parser.RULE_thf_binary_pair);try{this.enterOuterAlt(localctx,1);this.state=524;this.thf_unitary_formula();this.state=525;this.thf_pair_connective();this.state=526;this.thf_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_tuple\",value:function thf_binary_tuple(){var localctx=new Thf_binary_tupleContext(this,this._ctx,this.state);this.enterRule(localctx,34,tptp_v7_0_0_0Parser.RULE_thf_binary_tuple);try{this.state=531;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,14,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=528;this.thf_or_formula(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=529;this.thf_and_formula(0);break;case 3:this.enterOuterAlt(localctx,3);this.state=530;this.thf_apply_formula(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_or_formula\",value:function thf_or_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_or_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=36;this.enterRecursionRule(localctx,36,tptp_v7_0_0_0Parser.RULE_thf_or_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=534;this.thf_unitary_formula();this.state=535;this.match(tptp_v7_0_0_0Parser.Or);this.state=536;this.thf_unitary_formula();this._ctx.stop=this._input.LT(-1);this.state=543;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,15,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_or_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_thf_or_formula);this.state=538;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=539;this.match(tptp_v7_0_0_0Parser.Or);this.state=540;this.thf_unitary_formula();}this.state=545;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,15,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_and_formula\",value:function thf_and_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_and_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=38;this.enterRecursionRule(localctx,38,tptp_v7_0_0_0Parser.RULE_thf_and_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=547;this.thf_unitary_formula();this.state=548;this.match(tptp_v7_0_0_0Parser.And);this.state=549;this.thf_unitary_formula();this._ctx.stop=this._input.LT(-1);this.state=556;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,16,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_and_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_thf_and_formula);this.state=551;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=552;this.match(tptp_v7_0_0_0Parser.And);this.state=553;this.thf_unitary_formula();}this.state=558;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,16,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_apply_formula\",value:function thf_apply_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_apply_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=40;this.enterRecursionRule(localctx,40,tptp_v7_0_0_0Parser.RULE_thf_apply_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=560;this.thf_unitary_formula();this.state=561;this.match(tptp_v7_0_0_0Parser.App);this.state=562;this.thf_unitary_formula();this._ctx.stop=this._input.LT(-1);this.state=569;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,17,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_apply_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_thf_apply_formula);this.state=564;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=565;this.match(tptp_v7_0_0_0Parser.App);this.state=566;this.thf_unitary_formula();}this.state=571;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,17,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){var localctx=new Thf_unitary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,42,tptp_v7_0_0_0Parser.RULE_thf_unitary_formula);try{this.state=582;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,18,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=572;this.thf_quantified_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=573;this.thf_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=574;this.thf_atom();break;case 4:this.enterOuterAlt(localctx,4);this.state=575;this.thf_conditional();break;case 5:this.enterOuterAlt(localctx,5);this.state=576;this.thf_let();break;case 6:this.enterOuterAlt(localctx,6);this.state=577;this.thf_tuple();break;case 7:this.enterOuterAlt(localctx,7);this.state=578;this.match(tptp_v7_0_0_0Parser.T__9);this.state=579;this.thf_logic_formula();this.state=580;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_quantified_formula\",value:function thf_quantified_formula(){var localctx=new Thf_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,44,tptp_v7_0_0_0Parser.RULE_thf_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=584;this.thf_quantification();this.state=585;this.thf_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_quantification\",value:function thf_quantification(){var localctx=new Thf_quantificationContext(this,this._ctx,this.state);this.enterRule(localctx,46,tptp_v7_0_0_0Parser.RULE_thf_quantification);try{this.enterOuterAlt(localctx,1);this.state=587;this.thf_quantifier();this.state=588;this.match(tptp_v7_0_0_0Parser.T__11);this.state=589;this.thf_variable_list();this.state=590;this.match(tptp_v7_0_0_0Parser.T__12);this.state=591;this.match(tptp_v7_0_0_0Parser.T__13);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_variable_list\",value:function thf_variable_list(){var localctx=new Thf_variable_listContext(this,this._ctx,this.state);this.enterRule(localctx,48,tptp_v7_0_0_0Parser.RULE_thf_variable_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=593;this.thf_variable();this.state=598;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=594;this.match(tptp_v7_0_0_0Parser.T__1);this.state=595;this.thf_variable();this.state=600;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_variable\",value:function thf_variable(){var localctx=new Thf_variableContext(this,this._ctx,this.state);this.enterRule(localctx,50,tptp_v7_0_0_0Parser.RULE_thf_variable);try{this.state=603;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,20,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=601;this.thf_typed_variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=602;this.variable();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_typed_variable\",value:function thf_typed_variable(){var localctx=new Thf_typed_variableContext(this,this._ctx,this.state);this.enterRule(localctx,52,tptp_v7_0_0_0Parser.RULE_thf_typed_variable);try{this.enterOuterAlt(localctx,1);this.state=605;this.variable();this.state=606;this.match(tptp_v7_0_0_0Parser.T__13);this.state=607;this.thf_top_level_type();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_unary_formula\",value:function thf_unary_formula(){var localctx=new Thf_unary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,54,tptp_v7_0_0_0Parser.RULE_thf_unary_formula);try{this.enterOuterAlt(localctx,1);this.state=609;this.thf_unary_connective();this.state=610;this.match(tptp_v7_0_0_0Parser.T__9);this.state=611;this.thf_logic_formula();this.state=612;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_atom\",value:function thf_atom(){var localctx=new Thf_atomContext(this,this._ctx,this.state);this.enterRule(localctx,56,tptp_v7_0_0_0Parser.RULE_thf_atom);try{this.state=618;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=614;this.thf_function();break;case tptp_v7_0_0_0Parser.Upper_word:this.enterOuterAlt(localctx,2);this.state=615;this.variable();break;case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,3);this.state=616;this.defined_term();break;case tptp_v7_0_0_0Parser.Or:case tptp_v7_0_0_0Parser.And:case tptp_v7_0_0_0Parser.Iff:case tptp_v7_0_0_0Parser.Impl:case tptp_v7_0_0_0Parser.If:case tptp_v7_0_0_0Parser.Niff:case tptp_v7_0_0_0Parser.Nor:case tptp_v7_0_0_0Parser.Nand:case tptp_v7_0_0_0Parser.Not:case tptp_v7_0_0_0Parser.ForallComb:case tptp_v7_0_0_0Parser.Infix_inequality:case tptp_v7_0_0_0Parser.Infix_equality:case tptp_v7_0_0_0Parser.ExistsComb:case tptp_v7_0_0_0Parser.ChoiceComb:case tptp_v7_0_0_0Parser.DescriptionComb:case tptp_v7_0_0_0Parser.EqComb:case tptp_v7_0_0_0Parser.Assignment:this.enterOuterAlt(localctx,4);this.state=617;this.thf_conn_term();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_function\",value:function thf_function(){var localctx=new Thf_functionContext(this,this._ctx,this.state);this.enterRule(localctx,58,tptp_v7_0_0_0Parser.RULE_thf_function);try{this.state=636;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,22,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=620;this.atom();break;case 2:this.enterOuterAlt(localctx,2);this.state=621;this.functor();this.state=622;this.match(tptp_v7_0_0_0Parser.T__9);this.state=623;this.thf_arguments();this.state=624;this.match(tptp_v7_0_0_0Parser.T__10);break;case 3:this.enterOuterAlt(localctx,3);this.state=626;this.defined_functor();this.state=627;this.match(tptp_v7_0_0_0Parser.T__9);this.state=628;this.thf_arguments();this.state=629;this.match(tptp_v7_0_0_0Parser.T__10);break;case 4:this.enterOuterAlt(localctx,4);this.state=631;this.system_functor();this.state=632;this.match(tptp_v7_0_0_0Parser.T__9);this.state=633;this.thf_arguments();this.state=634;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_conn_term\",value:function thf_conn_term(){var localctx=new Thf_conn_termContext(this,this._ctx,this.state);this.enterRule(localctx,60,tptp_v7_0_0_0Parser.RULE_thf_conn_term);try{this.state=641;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Iff:case tptp_v7_0_0_0Parser.Impl:case tptp_v7_0_0_0Parser.If:case tptp_v7_0_0_0Parser.Niff:case tptp_v7_0_0_0Parser.Nor:case tptp_v7_0_0_0Parser.Nand:case tptp_v7_0_0_0Parser.Infix_inequality:case tptp_v7_0_0_0Parser.Infix_equality:case tptp_v7_0_0_0Parser.Assignment:this.enterOuterAlt(localctx,1);this.state=638;this.thf_pair_connective();break;case tptp_v7_0_0_0Parser.Or:case tptp_v7_0_0_0Parser.And:this.enterOuterAlt(localctx,2);this.state=639;this.assoc_connective();break;case tptp_v7_0_0_0Parser.Not:case tptp_v7_0_0_0Parser.ForallComb:case tptp_v7_0_0_0Parser.ExistsComb:case tptp_v7_0_0_0Parser.ChoiceComb:case tptp_v7_0_0_0Parser.DescriptionComb:case tptp_v7_0_0_0Parser.EqComb:this.enterOuterAlt(localctx,3);this.state=640;this.thf_unary_connective();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_conditional\",value:function thf_conditional(){var localctx=new Thf_conditionalContext(this,this._ctx,this.state);this.enterRule(localctx,62,tptp_v7_0_0_0Parser.RULE_thf_conditional);try{this.enterOuterAlt(localctx,1);this.state=643;this.match(tptp_v7_0_0_0Parser.T__14);this.state=644;this.thf_logic_formula();this.state=645;this.match(tptp_v7_0_0_0Parser.T__1);this.state=646;this.thf_logic_formula();this.state=647;this.match(tptp_v7_0_0_0Parser.T__1);this.state=648;this.thf_logic_formula();this.state=649;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_let\",value:function thf_let(){var localctx=new Thf_letContext(this,this._ctx,this.state);this.enterRule(localctx,64,tptp_v7_0_0_0Parser.RULE_thf_let);try{this.enterOuterAlt(localctx,1);this.state=651;this.match(tptp_v7_0_0_0Parser.T__15);this.state=652;this.thf_unitary_formula();this.state=653;this.match(tptp_v7_0_0_0Parser.T__1);this.state=654;this.thf_formula();this.state=655;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_arguments\",value:function thf_arguments(){var localctx=new Thf_argumentsContext(this,this._ctx,this.state);this.enterRule(localctx,66,tptp_v7_0_0_0Parser.RULE_thf_arguments);try{this.enterOuterAlt(localctx,1);this.state=657;this.thf_formula_list();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_type_formula\",value:function thf_type_formula(){var localctx=new Thf_type_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,68,tptp_v7_0_0_0Parser.RULE_thf_type_formula);try{this.enterOuterAlt(localctx,1);this.state=659;this.thf_typeable_formula();this.state=660;this.match(tptp_v7_0_0_0Parser.T__13);this.state=661;this.thf_top_level_type();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_typeable_formula\",value:function thf_typeable_formula(){var localctx=new Thf_typeable_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,70,tptp_v7_0_0_0Parser.RULE_thf_typeable_formula);try{this.state=668;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Or:case tptp_v7_0_0_0Parser.And:case tptp_v7_0_0_0Parser.Iff:case tptp_v7_0_0_0Parser.Impl:case tptp_v7_0_0_0Parser.If:case tptp_v7_0_0_0Parser.Niff:case tptp_v7_0_0_0Parser.Nor:case tptp_v7_0_0_0Parser.Nand:case tptp_v7_0_0_0Parser.Not:case tptp_v7_0_0_0Parser.ForallComb:case tptp_v7_0_0_0Parser.Infix_inequality:case tptp_v7_0_0_0Parser.Infix_equality:case tptp_v7_0_0_0Parser.ExistsComb:case tptp_v7_0_0_0Parser.ChoiceComb:case tptp_v7_0_0_0Parser.DescriptionComb:case tptp_v7_0_0_0Parser.EqComb:case tptp_v7_0_0_0Parser.Assignment:case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Upper_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=663;this.thf_atom();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=664;this.match(tptp_v7_0_0_0Parser.T__9);this.state=665;this.thf_logic_formula();this.state=666;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_subtype\",value:function thf_subtype(){var localctx=new Thf_subtypeContext(this,this._ctx,this.state);this.enterRule(localctx,72,tptp_v7_0_0_0Parser.RULE_thf_subtype);try{this.enterOuterAlt(localctx,1);this.state=670;this.thf_atom();this.state=671;this.match(tptp_v7_0_0_0Parser.Subtype_sign);this.state=672;this.thf_atom();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_top_level_type\",value:function thf_top_level_type(){var localctx=new Thf_top_level_typeContext(this,this._ctx,this.state);this.enterRule(localctx,74,tptp_v7_0_0_0Parser.RULE_thf_top_level_type);try{this.state=677;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,25,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=674;this.thf_unitary_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=675;this.thf_mapping_type();break;case 3:this.enterOuterAlt(localctx,3);this.state=676;this.thf_apply_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_unitary_type\",value:function thf_unitary_type(){var localctx=new Thf_unitary_typeContext(this,this._ctx,this.state);this.enterRule(localctx,76,tptp_v7_0_0_0Parser.RULE_thf_unitary_type);try{this.enterOuterAlt(localctx,1);this.state=679;this.thf_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_apply_type\",value:function thf_apply_type(){var localctx=new Thf_apply_typeContext(this,this._ctx,this.state);this.enterRule(localctx,78,tptp_v7_0_0_0Parser.RULE_thf_apply_type);try{this.enterOuterAlt(localctx,1);this.state=681;this.thf_apply_formula(0);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_type\",value:function thf_binary_type(){var localctx=new Thf_binary_typeContext(this,this._ctx,this.state);this.enterRule(localctx,80,tptp_v7_0_0_0Parser.RULE_thf_binary_type);try{this.state=686;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,26,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=683;this.thf_mapping_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=684;this.thf_xprod_type(0);break;case 3:this.enterOuterAlt(localctx,3);this.state=685;this.thf_union_type(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_mapping_type\",value:function thf_mapping_type(){var localctx=new Thf_mapping_typeContext(this,this._ctx,this.state);this.enterRule(localctx,82,tptp_v7_0_0_0Parser.RULE_thf_mapping_type);try{this.state=696;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,27,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=688;this.thf_unitary_type();this.state=689;this.match(tptp_v7_0_0_0Parser.Arrow);this.state=690;this.thf_unitary_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=692;this.thf_unitary_type();this.state=693;this.match(tptp_v7_0_0_0Parser.Arrow);this.state=694;this.thf_mapping_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_xprod_type\",value:function thf_xprod_type(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_xprod_typeContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=84;this.enterRecursionRule(localctx,84,tptp_v7_0_0_0Parser.RULE_thf_xprod_type,_p);try{this.enterOuterAlt(localctx,1);this.state=699;this.thf_unitary_type();this.state=700;this.match(tptp_v7_0_0_0Parser.Star);this.state=701;this.thf_unitary_type();this._ctx.stop=this._input.LT(-1);this.state=708;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,28,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_xprod_typeContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_thf_xprod_type);this.state=703;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=704;this.match(tptp_v7_0_0_0Parser.Star);this.state=705;this.thf_unitary_type();}this.state=710;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,28,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_union_type\",value:function thf_union_type(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_union_typeContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=86;this.enterRecursionRule(localctx,86,tptp_v7_0_0_0Parser.RULE_thf_union_type,_p);try{this.enterOuterAlt(localctx,1);this.state=712;this.thf_unitary_type();this.state=713;this.match(tptp_v7_0_0_0Parser.Plus);this.state=714;this.thf_unitary_type();this._ctx.stop=this._input.LT(-1);this.state=721;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,29,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_union_typeContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_thf_union_type);this.state=716;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=717;this.match(tptp_v7_0_0_0Parser.Plus);this.state=718;this.thf_unitary_type();}this.state=723;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,29,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_sequent\",value:function thf_sequent(){var localctx=new Thf_sequentContext(this,this._ctx,this.state);this.enterRule(localctx,88,tptp_v7_0_0_0Parser.RULE_thf_sequent);try{this.state=732;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__11:case tptp_v7_0_0_0Parser.T__16:case tptp_v7_0_0_0Parser.T__17:case tptp_v7_0_0_0Parser.T__18:this.enterOuterAlt(localctx,1);this.state=724;this.thf_tuple();this.state=725;this.match(tptp_v7_0_0_0Parser.Gentzen_arrow);this.state=726;this.thf_tuple();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=728;this.match(tptp_v7_0_0_0Parser.T__9);this.state=729;this.thf_sequent();this.state=730;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_tuple\",value:function thf_tuple(){var localctx=new Thf_tupleContext(this,this._ctx,this.state);this.enterRule(localctx,90,tptp_v7_0_0_0Parser.RULE_thf_tuple);try{this.state=744;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__16:this.enterOuterAlt(localctx,1);this.state=734;this.match(tptp_v7_0_0_0Parser.T__16);break;case tptp_v7_0_0_0Parser.T__11:this.enterOuterAlt(localctx,2);this.state=735;this.match(tptp_v7_0_0_0Parser.T__11);this.state=736;this.thf_formula_list();this.state=737;this.match(tptp_v7_0_0_0Parser.T__12);break;case tptp_v7_0_0_0Parser.T__17:this.enterOuterAlt(localctx,3);this.state=739;this.match(tptp_v7_0_0_0Parser.T__17);break;case tptp_v7_0_0_0Parser.T__18:this.enterOuterAlt(localctx,4);this.state=740;this.match(tptp_v7_0_0_0Parser.T__18);this.state=741;this.thf_formula_list();this.state=742;this.match(tptp_v7_0_0_0Parser.T__19);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_formula_list\",value:function thf_formula_list(){var localctx=new Thf_formula_listContext(this,this._ctx,this.state);this.enterRule(localctx,92,tptp_v7_0_0_0Parser.RULE_thf_formula_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=746;this.thf_logic_formula();this.state=751;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=747;this.match(tptp_v7_0_0_0Parser.T__1);this.state=748;this.thf_logic_formula();this.state=753;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tfx_formula\",value:function tfx_formula(){var localctx=new Tfx_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,94,tptp_v7_0_0_0Parser.RULE_tfx_formula);try{this.state=756;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,33,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=754;this.tfx_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=755;this.thf_sequent();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tfx_logic_formula\",value:function tfx_logic_formula(){var localctx=new Tfx_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,96,tptp_v7_0_0_0Parser.RULE_tfx_logic_formula);try{this.enterOuterAlt(localctx,1);this.state=758;this.thf_logic_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_formula\",value:function tff_formula(){var localctx=new Tff_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,98,tptp_v7_0_0_0Parser.RULE_tff_formula);try{this.state=763;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,34,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=760;this.tff_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=761;this.tff_typed_atom();break;case 3:this.enterOuterAlt(localctx,3);this.state=762;this.tff_sequent();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_logic_formula\",value:function tff_logic_formula(){var localctx=new Tff_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,100,tptp_v7_0_0_0Parser.RULE_tff_logic_formula);try{this.state=768;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,35,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=765;this.tff_binary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=766;this.tff_unitary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=767;this.tff_subtype();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_binary_formula\",value:function tff_binary_formula(){var localctx=new Tff_binary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,102,tptp_v7_0_0_0Parser.RULE_tff_binary_formula);try{this.state=772;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,36,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=770;this.tff_binary_nonassoc();break;case 2:this.enterOuterAlt(localctx,2);this.state=771;this.tff_binary_assoc();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_binary_nonassoc\",value:function tff_binary_nonassoc(){var localctx=new Tff_binary_nonassocContext(this,this._ctx,this.state);this.enterRule(localctx,104,tptp_v7_0_0_0Parser.RULE_tff_binary_nonassoc);try{this.enterOuterAlt(localctx,1);this.state=774;this.tff_unitary_formula();this.state=775;this.binary_connective();this.state=776;this.tff_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_binary_assoc\",value:function tff_binary_assoc(){var localctx=new Tff_binary_assocContext(this,this._ctx,this.state);this.enterRule(localctx,106,tptp_v7_0_0_0Parser.RULE_tff_binary_assoc);try{this.state=780;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,37,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=778;this.tff_or_formula(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=779;this.tff_and_formula(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_or_formula\",value:function tff_or_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Tff_or_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=108;this.enterRecursionRule(localctx,108,tptp_v7_0_0_0Parser.RULE_tff_or_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=783;this.tff_unitary_formula();this.state=784;this.match(tptp_v7_0_0_0Parser.Or);this.state=785;this.tff_unitary_formula();this._ctx.stop=this._input.LT(-1);this.state=792;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,38,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Tff_or_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_tff_or_formula);this.state=787;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=788;this.match(tptp_v7_0_0_0Parser.Or);this.state=789;this.tff_unitary_formula();}this.state=794;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,38,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"tff_and_formula\",value:function tff_and_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Tff_and_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=110;this.enterRecursionRule(localctx,110,tptp_v7_0_0_0Parser.RULE_tff_and_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=796;this.tff_unitary_formula();this.state=797;this.match(tptp_v7_0_0_0Parser.And);this.state=798;this.tff_unitary_formula();this._ctx.stop=this._input.LT(-1);this.state=805;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,39,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Tff_and_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_tff_and_formula);this.state=800;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=801;this.match(tptp_v7_0_0_0Parser.And);this.state=802;this.tff_unitary_formula();}this.state=807;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,39,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){var localctx=new Tff_unitary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,112,tptp_v7_0_0_0Parser.RULE_tff_unitary_formula);try{this.state=817;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,40,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=808;this.tff_quantified_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=809;this.tff_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=810;this.tff_atomic_formula();break;case 4:this.enterOuterAlt(localctx,4);this.state=811;this.tff_conditional();break;case 5:this.enterOuterAlt(localctx,5);this.state=812;this.tff_let();break;case 6:this.enterOuterAlt(localctx,6);this.state=813;this.match(tptp_v7_0_0_0Parser.T__9);this.state=814;this.tff_logic_formula();this.state=815;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_quantified_formula\",value:function tff_quantified_formula(){var localctx=new Tff_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,114,tptp_v7_0_0_0Parser.RULE_tff_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=819;this.fof_quantifier();this.state=820;this.match(tptp_v7_0_0_0Parser.T__11);this.state=821;this.tff_variable_list();this.state=822;this.match(tptp_v7_0_0_0Parser.T__12);this.state=823;this.match(tptp_v7_0_0_0Parser.T__13);this.state=824;this.tff_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_variable_list\",value:function tff_variable_list(){var localctx=new Tff_variable_listContext(this,this._ctx,this.state);this.enterRule(localctx,116,tptp_v7_0_0_0Parser.RULE_tff_variable_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=826;this.tff_variable();this.state=831;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=827;this.match(tptp_v7_0_0_0Parser.T__1);this.state=828;this.tff_variable();this.state=833;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_variable\",value:function tff_variable(){var localctx=new Tff_variableContext(this,this._ctx,this.state);this.enterRule(localctx,118,tptp_v7_0_0_0Parser.RULE_tff_variable);try{this.state=836;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,42,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=834;this.tff_typed_variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=835;this.variable();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_typed_variable\",value:function tff_typed_variable(){var localctx=new Tff_typed_variableContext(this,this._ctx,this.state);this.enterRule(localctx,120,tptp_v7_0_0_0Parser.RULE_tff_typed_variable);try{this.enterOuterAlt(localctx,1);this.state=838;this.variable();this.state=839;this.match(tptp_v7_0_0_0Parser.T__13);this.state=840;this.tff_atomic_type();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_unary_formula\",value:function tff_unary_formula(){var localctx=new Tff_unary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,122,tptp_v7_0_0_0Parser.RULE_tff_unary_formula);try{this.state=846;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Not:this.enterOuterAlt(localctx,1);this.state=842;this.unary_connective();this.state=843;this.tff_unitary_formula();break;case tptp_v7_0_0_0Parser.T__17:case tptp_v7_0_0_0Parser.T__18:case tptp_v7_0_0_0Parser.T__23:case tptp_v7_0_0_0Parser.T__24:case tptp_v7_0_0_0Parser.T__25:case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Upper_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=845;this.fof_infix_unary();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_atomic_formula\",value:function tff_atomic_formula(){var localctx=new Tff_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,124,tptp_v7_0_0_0Parser.RULE_tff_atomic_formula);try{this.enterOuterAlt(localctx,1);this.state=848;this.fof_atomic_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_conditional\",value:function tff_conditional(){var localctx=new Tff_conditionalContext(this,this._ctx,this.state);this.enterRule(localctx,126,tptp_v7_0_0_0Parser.RULE_tff_conditional);try{this.enterOuterAlt(localctx,1);this.state=850;this.match(tptp_v7_0_0_0Parser.T__20);this.state=851;this.tff_logic_formula();this.state=852;this.match(tptp_v7_0_0_0Parser.T__1);this.state=853;this.tff_logic_formula();this.state=854;this.match(tptp_v7_0_0_0Parser.T__1);this.state=855;this.tff_logic_formula();this.state=856;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let\",value:function tff_let(){var localctx=new Tff_letContext(this,this._ctx,this.state);this.enterRule(localctx,128,tptp_v7_0_0_0Parser.RULE_tff_let);try{this.state=870;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__21:this.enterOuterAlt(localctx,1);this.state=858;this.match(tptp_v7_0_0_0Parser.T__21);this.state=859;this.tff_let_term_defns();this.state=860;this.match(tptp_v7_0_0_0Parser.T__1);this.state=861;this.tff_formula();this.state=862;this.match(tptp_v7_0_0_0Parser.T__10);break;case tptp_v7_0_0_0Parser.T__22:this.enterOuterAlt(localctx,2);this.state=864;this.match(tptp_v7_0_0_0Parser.T__22);this.state=865;this.tff_let_formula_defns();this.state=866;this.match(tptp_v7_0_0_0Parser.T__1);this.state=867;this.tff_formula();this.state=868;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_term_defns\",value:function tff_let_term_defns(){var localctx=new Tff_let_term_defnsContext(this,this._ctx,this.state);this.enterRule(localctx,130,tptp_v7_0_0_0Parser.RULE_tff_let_term_defns);try{this.state=877;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__9:case tptp_v7_0_0_0Parser.Forall:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=872;this.tff_let_term_defn();break;case tptp_v7_0_0_0Parser.T__11:this.enterOuterAlt(localctx,2);this.state=873;this.match(tptp_v7_0_0_0Parser.T__11);this.state=874;this.tff_let_term_list();this.state=875;this.match(tptp_v7_0_0_0Parser.T__12);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_term_list\",value:function tff_let_term_list(){var localctx=new Tff_let_term_listContext(this,this._ctx,this.state);this.enterRule(localctx,132,tptp_v7_0_0_0Parser.RULE_tff_let_term_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=879;this.tff_let_term_defn();this.state=884;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=880;this.match(tptp_v7_0_0_0Parser.T__1);this.state=881;this.tff_let_term_defn();this.state=886;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_term_defn\",value:function tff_let_term_defn(){var localctx=new Tff_let_term_defnContext(this,this._ctx,this.state);this.enterRule(localctx,134,tptp_v7_0_0_0Parser.RULE_tff_let_term_defn);try{this.state=895;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Forall:this.enterOuterAlt(localctx,1);this.state=887;this.match(tptp_v7_0_0_0Parser.Forall);this.state=888;this.match(tptp_v7_0_0_0Parser.T__11);this.state=889;this.tff_variable_list();this.state=890;this.match(tptp_v7_0_0_0Parser.T__12);this.state=891;this.match(tptp_v7_0_0_0Parser.T__13);this.state=892;this.tff_let_term_defn();break;case tptp_v7_0_0_0Parser.T__9:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,2);this.state=894;this.tff_let_term_binding();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_term_binding\",value:function tff_let_term_binding(){var localctx=new Tff_let_term_bindingContext(this,this._ctx,this.state);this.enterRule(localctx,136,tptp_v7_0_0_0Parser.RULE_tff_let_term_binding);try{this.state=905;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=897;this.fof_plain_term();this.state=898;this.match(tptp_v7_0_0_0Parser.Infix_equality);this.state=899;this.fof_term();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=901;this.match(tptp_v7_0_0_0Parser.T__9);this.state=902;this.tff_let_term_binding();this.state=903;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_formula_defns\",value:function tff_let_formula_defns(){var localctx=new Tff_let_formula_defnsContext(this,this._ctx,this.state);this.enterRule(localctx,138,tptp_v7_0_0_0Parser.RULE_tff_let_formula_defns);try{this.state=912;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__9:case tptp_v7_0_0_0Parser.Forall:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=907;this.tff_let_formula_defn();break;case tptp_v7_0_0_0Parser.T__11:this.enterOuterAlt(localctx,2);this.state=908;this.match(tptp_v7_0_0_0Parser.T__11);this.state=909;this.tff_let_formula_list();this.state=910;this.match(tptp_v7_0_0_0Parser.T__12);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_formula_list\",value:function tff_let_formula_list(){var localctx=new Tff_let_formula_listContext(this,this._ctx,this.state);this.enterRule(localctx,140,tptp_v7_0_0_0Parser.RULE_tff_let_formula_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=914;this.tff_let_formula_defn();this.state=919;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=915;this.match(tptp_v7_0_0_0Parser.T__1);this.state=916;this.tff_let_formula_defn();this.state=921;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_formula_defn\",value:function tff_let_formula_defn(){var localctx=new Tff_let_formula_defnContext(this,this._ctx,this.state);this.enterRule(localctx,142,tptp_v7_0_0_0Parser.RULE_tff_let_formula_defn);try{this.state=930;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Forall:this.enterOuterAlt(localctx,1);this.state=922;this.match(tptp_v7_0_0_0Parser.Forall);this.state=923;this.match(tptp_v7_0_0_0Parser.T__11);this.state=924;this.tff_variable_list();this.state=925;this.match(tptp_v7_0_0_0Parser.T__12);this.state=926;this.match(tptp_v7_0_0_0Parser.T__13);this.state=927;this.tff_let_formula_defn();break;case tptp_v7_0_0_0Parser.T__9:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,2);this.state=929;this.tff_let_formula_binding();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_formula_binding\",value:function tff_let_formula_binding(){var localctx=new Tff_let_formula_bindingContext(this,this._ctx,this.state);this.enterRule(localctx,144,tptp_v7_0_0_0Parser.RULE_tff_let_formula_binding);try{this.state=940;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=932;this.fof_plain_atomic_formula();this.state=933;this.match(tptp_v7_0_0_0Parser.Iff);this.state=934;this.tff_unitary_formula();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=936;this.match(tptp_v7_0_0_0Parser.T__9);this.state=937;this.tff_let_formula_binding();this.state=938;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_sequent\",value:function tff_sequent(){var localctx=new Tff_sequentContext(this,this._ctx,this.state);this.enterRule(localctx,146,tptp_v7_0_0_0Parser.RULE_tff_sequent);try{this.state=950;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__11:case tptp_v7_0_0_0Parser.T__16:this.enterOuterAlt(localctx,1);this.state=942;this.tff_formula_tuple();this.state=943;this.match(tptp_v7_0_0_0Parser.Gentzen_arrow);this.state=944;this.tff_formula_tuple();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=946;this.match(tptp_v7_0_0_0Parser.T__9);this.state=947;this.tff_sequent();this.state=948;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_formula_tuple\",value:function tff_formula_tuple(){var localctx=new Tff_formula_tupleContext(this,this._ctx,this.state);this.enterRule(localctx,148,tptp_v7_0_0_0Parser.RULE_tff_formula_tuple);try{this.state=957;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__16:this.enterOuterAlt(localctx,1);this.state=952;this.match(tptp_v7_0_0_0Parser.T__16);break;case tptp_v7_0_0_0Parser.T__11:this.enterOuterAlt(localctx,2);this.state=953;this.match(tptp_v7_0_0_0Parser.T__11);this.state=954;this.tff_formula_tuple_list();this.state=955;this.match(tptp_v7_0_0_0Parser.T__12);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_formula_tuple_list\",value:function tff_formula_tuple_list(){var localctx=new Tff_formula_tuple_listContext(this,this._ctx,this.state);this.enterRule(localctx,150,tptp_v7_0_0_0Parser.RULE_tff_formula_tuple_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=959;this.tff_logic_formula();this.state=964;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=960;this.match(tptp_v7_0_0_0Parser.T__1);this.state=961;this.tff_logic_formula();this.state=966;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_typed_atom\",value:function tff_typed_atom(){var localctx=new Tff_typed_atomContext(this,this._ctx,this.state);this.enterRule(localctx,152,tptp_v7_0_0_0Parser.RULE_tff_typed_atom);try{this.state=975;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=967;this.untyped_atom();this.state=968;this.match(tptp_v7_0_0_0Parser.T__13);this.state=969;this.tff_top_level_type();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=971;this.match(tptp_v7_0_0_0Parser.T__9);this.state=972;this.tff_typed_atom();this.state=973;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_subtype\",value:function tff_subtype(){var localctx=new Tff_subtypeContext(this,this._ctx,this.state);this.enterRule(localctx,154,tptp_v7_0_0_0Parser.RULE_tff_subtype);try{this.enterOuterAlt(localctx,1);this.state=977;this.untyped_atom();this.state=978;this.match(tptp_v7_0_0_0Parser.Subtype_sign);this.state=979;this.atom();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_top_level_type\",value:function tff_top_level_type(){var localctx=new Tff_top_level_typeContext(this,this._ctx,this.state);this.enterRule(localctx,156,tptp_v7_0_0_0Parser.RULE_tff_top_level_type);try{this.state=988;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,57,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=981;this.tff_atomic_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=982;this.tff_mapping_type();break;case 3:this.enterOuterAlt(localctx,3);this.state=983;this.tf1_quantified_type();break;case 4:this.enterOuterAlt(localctx,4);this.state=984;this.match(tptp_v7_0_0_0Parser.T__9);this.state=985;this.tff_top_level_type();this.state=986;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tf1_quantified_type\",value:function tf1_quantified_type(){var localctx=new Tf1_quantified_typeContext(this,this._ctx,this.state);this.enterRule(localctx,158,tptp_v7_0_0_0Parser.RULE_tf1_quantified_type);try{this.enterOuterAlt(localctx,1);this.state=990;this.match(tptp_v7_0_0_0Parser.TyForall);this.state=991;this.match(tptp_v7_0_0_0Parser.T__11);this.state=992;this.tff_variable_list();this.state=993;this.match(tptp_v7_0_0_0Parser.T__12);this.state=994;this.match(tptp_v7_0_0_0Parser.T__13);this.state=995;this.tff_monotype();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_monotype\",value:function tff_monotype(){var localctx=new Tff_monotypeContext(this,this._ctx,this.state);this.enterRule(localctx,160,tptp_v7_0_0_0Parser.RULE_tff_monotype);try{this.state=1002;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Upper_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=997;this.tff_atomic_type();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=998;this.match(tptp_v7_0_0_0Parser.T__9);this.state=999;this.tff_mapping_type();this.state=1000;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_unitary_type\",value:function tff_unitary_type(){var localctx=new Tff_unitary_typeContext(this,this._ctx,this.state);this.enterRule(localctx,162,tptp_v7_0_0_0Parser.RULE_tff_unitary_type);try{this.state=1009;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Upper_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1004;this.tff_atomic_type();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=1005;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1006;this.tff_xprod_type(0);this.state=1007;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){var localctx=new Tff_atomic_typeContext(this,this._ctx,this.state);this.enterRule(localctx,164,tptp_v7_0_0_0Parser.RULE_tff_atomic_type);try{this.state=1019;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,60,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1011;this.type_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1012;this.defined_type();break;case 3:this.enterOuterAlt(localctx,3);this.state=1013;this.type_functor();this.state=1014;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1015;this.tff_type_arguments();this.state=1016;this.match(tptp_v7_0_0_0Parser.T__10);break;case 4:this.enterOuterAlt(localctx,4);this.state=1018;this.variable();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_type_arguments\",value:function tff_type_arguments(){var localctx=new Tff_type_argumentsContext(this,this._ctx,this.state);this.enterRule(localctx,166,tptp_v7_0_0_0Parser.RULE_tff_type_arguments);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1021;this.tff_atomic_type();this.state=1026;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1022;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1023;this.tff_atomic_type();this.state=1028;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_mapping_type\",value:function tff_mapping_type(){var localctx=new Tff_mapping_typeContext(this,this._ctx,this.state);this.enterRule(localctx,168,tptp_v7_0_0_0Parser.RULE_tff_mapping_type);try{this.enterOuterAlt(localctx,1);this.state=1029;this.tff_unitary_type();this.state=1030;this.match(tptp_v7_0_0_0Parser.Arrow);this.state=1031;this.tff_atomic_type();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_xprod_type\",value:function tff_xprod_type(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Tff_xprod_typeContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=170;this.enterRecursionRule(localctx,170,tptp_v7_0_0_0Parser.RULE_tff_xprod_type,_p);try{this.enterOuterAlt(localctx,1);this.state=1034;this.tff_unitary_type();this.state=1035;this.match(tptp_v7_0_0_0Parser.Star);this.state=1036;this.tff_atomic_type();this._ctx.stop=this._input.LT(-1);this.state=1043;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,62,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Tff_xprod_typeContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_tff_xprod_type);this.state=1038;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1039;this.match(tptp_v7_0_0_0Parser.Star);this.state=1040;this.tff_atomic_type();}this.state=1045;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,62,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"tcf_formula\",value:function tcf_formula(){var localctx=new Tcf_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,172,tptp_v7_0_0_0Parser.RULE_tcf_formula);try{this.state=1048;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,63,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1046;this.tcf_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1047;this.tff_typed_atom();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tcf_logic_formula\",value:function tcf_logic_formula(){var localctx=new Tcf_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,174,tptp_v7_0_0_0Parser.RULE_tcf_logic_formula);try{this.state=1052;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Forall:this.enterOuterAlt(localctx,1);this.state=1050;this.tcf_quantified_formula();break;case tptp_v7_0_0_0Parser.T__9:case tptp_v7_0_0_0Parser.T__17:case tptp_v7_0_0_0Parser.T__18:case tptp_v7_0_0_0Parser.T__23:case tptp_v7_0_0_0Parser.T__24:case tptp_v7_0_0_0Parser.T__25:case tptp_v7_0_0_0Parser.Not:case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Upper_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1051;this.cnf_formula();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tcf_quantified_formula\",value:function tcf_quantified_formula(){var localctx=new Tcf_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,176,tptp_v7_0_0_0Parser.RULE_tcf_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=1054;this.match(tptp_v7_0_0_0Parser.Forall);this.state=1055;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1056;this.tff_variable_list();this.state=1057;this.match(tptp_v7_0_0_0Parser.T__12);this.state=1058;this.match(tptp_v7_0_0_0Parser.T__13);this.state=1059;this.cnf_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_formula\",value:function fof_formula(){var localctx=new Fof_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,178,tptp_v7_0_0_0Parser.RULE_fof_formula);try{this.state=1063;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,65,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1061;this.fof_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1062;this.fof_sequent();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_logic_formula\",value:function fof_logic_formula(){var localctx=new Fof_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,180,tptp_v7_0_0_0Parser.RULE_fof_logic_formula);try{this.state=1067;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,66,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1065;this.fof_binary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1066;this.fof_unitary_formula();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_binary_formula\",value:function fof_binary_formula(){var localctx=new Fof_binary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,182,tptp_v7_0_0_0Parser.RULE_fof_binary_formula);try{this.state=1071;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,67,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1069;this.fof_binary_nonassoc();break;case 2:this.enterOuterAlt(localctx,2);this.state=1070;this.fof_binary_assoc();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_binary_nonassoc\",value:function fof_binary_nonassoc(){var localctx=new Fof_binary_nonassocContext(this,this._ctx,this.state);this.enterRule(localctx,184,tptp_v7_0_0_0Parser.RULE_fof_binary_nonassoc);try{this.enterOuterAlt(localctx,1);this.state=1073;this.fof_unitary_formula();this.state=1074;this.binary_connective();this.state=1075;this.fof_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_binary_assoc\",value:function fof_binary_assoc(){var localctx=new Fof_binary_assocContext(this,this._ctx,this.state);this.enterRule(localctx,186,tptp_v7_0_0_0Parser.RULE_fof_binary_assoc);try{this.state=1079;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,68,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1077;this.fof_or_formula(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=1078;this.fof_and_formula(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_or_formula\",value:function fof_or_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Fof_or_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=188;this.enterRecursionRule(localctx,188,tptp_v7_0_0_0Parser.RULE_fof_or_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=1082;this.fof_unitary_formula();this.state=1083;this.match(tptp_v7_0_0_0Parser.Or);this.state=1084;this.fof_unitary_formula();this._ctx.stop=this._input.LT(-1);this.state=1091;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,69,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Fof_or_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_fof_or_formula);this.state=1086;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1087;this.match(tptp_v7_0_0_0Parser.Or);this.state=1088;this.fof_unitary_formula();}this.state=1093;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,69,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"fof_and_formula\",value:function fof_and_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Fof_and_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=190;this.enterRecursionRule(localctx,190,tptp_v7_0_0_0Parser.RULE_fof_and_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=1095;this.fof_unitary_formula();this.state=1096;this.match(tptp_v7_0_0_0Parser.And);this.state=1097;this.fof_unitary_formula();this._ctx.stop=this._input.LT(-1);this.state=1104;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,70,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Fof_and_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_fof_and_formula);this.state=1099;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1100;this.match(tptp_v7_0_0_0Parser.And);this.state=1101;this.fof_unitary_formula();}this.state=1106;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,70,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"fof_unitary_formula\",value:function fof_unitary_formula(){var localctx=new Fof_unitary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,192,tptp_v7_0_0_0Parser.RULE_fof_unitary_formula);try{this.state=1114;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,71,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1107;this.fof_quantified_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1108;this.fof_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=1109;this.fof_atomic_formula();break;case 4:this.enterOuterAlt(localctx,4);this.state=1110;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1111;this.fof_logic_formula();this.state=1112;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_quantified_formula\",value:function fof_quantified_formula(){var localctx=new Fof_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,194,tptp_v7_0_0_0Parser.RULE_fof_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=1116;this.fof_quantifier();this.state=1117;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1118;this.fof_variable_list();this.state=1119;this.match(tptp_v7_0_0_0Parser.T__12);this.state=1120;this.match(tptp_v7_0_0_0Parser.T__13);this.state=1121;this.fof_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_variable_list\",value:function fof_variable_list(){var localctx=new Fof_variable_listContext(this,this._ctx,this.state);this.enterRule(localctx,196,tptp_v7_0_0_0Parser.RULE_fof_variable_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1123;this.variable();this.state=1128;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1124;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1125;this.variable();this.state=1130;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_unary_formula\",value:function fof_unary_formula(){var localctx=new Fof_unary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,198,tptp_v7_0_0_0Parser.RULE_fof_unary_formula);try{this.state=1135;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Not:this.enterOuterAlt(localctx,1);this.state=1131;this.unary_connective();this.state=1132;this.fof_unitary_formula();break;case tptp_v7_0_0_0Parser.T__17:case tptp_v7_0_0_0Parser.T__18:case tptp_v7_0_0_0Parser.T__23:case tptp_v7_0_0_0Parser.T__24:case tptp_v7_0_0_0Parser.T__25:case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Upper_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1134;this.fof_infix_unary();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_infix_unary\",value:function fof_infix_unary(){var localctx=new Fof_infix_unaryContext(this,this._ctx,this.state);this.enterRule(localctx,200,tptp_v7_0_0_0Parser.RULE_fof_infix_unary);try{this.enterOuterAlt(localctx,1);this.state=1137;this.fof_term();this.state=1138;this.match(tptp_v7_0_0_0Parser.Infix_inequality);this.state=1139;this.fof_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_atomic_formula\",value:function fof_atomic_formula(){var localctx=new Fof_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,202,tptp_v7_0_0_0Parser.RULE_fof_atomic_formula);try{this.state=1144;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,74,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1141;this.fof_plain_atomic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1142;this.fof_defined_atomic_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=1143;this.fof_system_atomic_formula();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_plain_atomic_formula\",value:function fof_plain_atomic_formula(){var localctx=new Fof_plain_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,204,tptp_v7_0_0_0Parser.RULE_fof_plain_atomic_formula);try{this.enterOuterAlt(localctx,1);this.state=1146;this.fof_plain_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_atomic_formula\",value:function fof_defined_atomic_formula(){var localctx=new Fof_defined_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,206,tptp_v7_0_0_0Parser.RULE_fof_defined_atomic_formula);try{this.state=1150;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,75,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1148;this.fof_defined_plain_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1149;this.fof_defined_infix_formula();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_plain_formula\",value:function fof_defined_plain_formula(){var localctx=new Fof_defined_plain_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,208,tptp_v7_0_0_0Parser.RULE_fof_defined_plain_formula);try{this.enterOuterAlt(localctx,1);this.state=1152;this.fof_defined_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_infix_formula\",value:function fof_defined_infix_formula(){var localctx=new Fof_defined_infix_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,210,tptp_v7_0_0_0Parser.RULE_fof_defined_infix_formula);try{this.enterOuterAlt(localctx,1);this.state=1154;this.fof_term();this.state=1155;this.defined_infix_pred();this.state=1156;this.fof_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_system_atomic_formula\",value:function fof_system_atomic_formula(){var localctx=new Fof_system_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,212,tptp_v7_0_0_0Parser.RULE_fof_system_atomic_formula);try{this.enterOuterAlt(localctx,1);this.state=1158;this.fof_system_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_plain_term\",value:function fof_plain_term(){var localctx=new Fof_plain_termContext(this,this._ctx,this.state);this.enterRule(localctx,214,tptp_v7_0_0_0Parser.RULE_fof_plain_term);try{this.state=1166;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,76,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1160;this.constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1161;this.functor();this.state=1162;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1163;this.fof_arguments();this.state=1164;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_term\",value:function fof_defined_term(){var localctx=new Fof_defined_termContext(this,this._ctx,this.state);this.enterRule(localctx,216,tptp_v7_0_0_0Parser.RULE_fof_defined_term);try{this.state=1170;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=1168;this.defined_term();break;case tptp_v7_0_0_0Parser.Dollar_word:this.enterOuterAlt(localctx,2);this.state=1169;this.fof_defined_atomic_term();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_atomic_term\",value:function fof_defined_atomic_term(){var localctx=new Fof_defined_atomic_termContext(this,this._ctx,this.state);this.enterRule(localctx,218,tptp_v7_0_0_0Parser.RULE_fof_defined_atomic_term);try{this.enterOuterAlt(localctx,1);this.state=1172;this.fof_defined_plain_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_plain_term\",value:function fof_defined_plain_term(){var localctx=new Fof_defined_plain_termContext(this,this._ctx,this.state);this.enterRule(localctx,220,tptp_v7_0_0_0Parser.RULE_fof_defined_plain_term);try{this.state=1180;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,78,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1174;this.defined_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1175;this.defined_functor();this.state=1176;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1177;this.fof_arguments();this.state=1178;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_system_term\",value:function fof_system_term(){var localctx=new Fof_system_termContext(this,this._ctx,this.state);this.enterRule(localctx,222,tptp_v7_0_0_0Parser.RULE_fof_system_term);try{this.state=1188;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,79,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1182;this.system_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1183;this.system_functor();this.state=1184;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1185;this.fof_arguments();this.state=1186;this.match(tptp_v7_0_0_0Parser.T__10);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_arguments\",value:function fof_arguments(){var localctx=new Fof_argumentsContext(this,this._ctx,this.state);this.enterRule(localctx,224,tptp_v7_0_0_0Parser.RULE_fof_arguments);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1190;this.fof_term();this.state=1195;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1191;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1192;this.fof_term();this.state=1197;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_term\",value:function fof_term(){var localctx=new Fof_termContext(this,this._ctx,this.state);this.enterRule(localctx,226,tptp_v7_0_0_0Parser.RULE_fof_term);try{this.state=1203;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=1198;this.fof_function_term();break;case tptp_v7_0_0_0Parser.Upper_word:this.enterOuterAlt(localctx,2);this.state=1199;this.variable();break;case tptp_v7_0_0_0Parser.T__23:this.enterOuterAlt(localctx,3);this.state=1200;this.tff_conditional_term();break;case tptp_v7_0_0_0Parser.T__24:case tptp_v7_0_0_0Parser.T__25:this.enterOuterAlt(localctx,4);this.state=1201;this.tff_let_term();break;case tptp_v7_0_0_0Parser.T__17:case tptp_v7_0_0_0Parser.T__18:this.enterOuterAlt(localctx,5);this.state=1202;this.tff_tuple_term();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_function_term\",value:function fof_function_term(){var localctx=new Fof_function_termContext(this,this._ctx,this.state);this.enterRule(localctx,228,tptp_v7_0_0_0Parser.RULE_fof_function_term);try{this.state=1208;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1205;this.fof_plain_term();break;case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1206;this.fof_defined_term();break;case tptp_v7_0_0_0Parser.Dollar_dollar_word:this.enterOuterAlt(localctx,3);this.state=1207;this.fof_system_term();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_conditional_term\",value:function tff_conditional_term(){var localctx=new Tff_conditional_termContext(this,this._ctx,this.state);this.enterRule(localctx,230,tptp_v7_0_0_0Parser.RULE_tff_conditional_term);try{this.enterOuterAlt(localctx,1);this.state=1210;this.match(tptp_v7_0_0_0Parser.T__23);this.state=1211;this.tff_logic_formula();this.state=1212;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1213;this.fof_term();this.state=1214;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1215;this.fof_term();this.state=1216;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_let_term\",value:function tff_let_term(){var localctx=new Tff_let_termContext(this,this._ctx,this.state);this.enterRule(localctx,232,tptp_v7_0_0_0Parser.RULE_tff_let_term);try{this.state=1230;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__24:this.enterOuterAlt(localctx,1);this.state=1218;this.match(tptp_v7_0_0_0Parser.T__24);this.state=1219;this.tff_let_formula_defns();this.state=1220;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1221;this.fof_term();this.state=1222;this.match(tptp_v7_0_0_0Parser.T__10);break;case tptp_v7_0_0_0Parser.T__25:this.enterOuterAlt(localctx,2);this.state=1224;this.match(tptp_v7_0_0_0Parser.T__25);this.state=1225;this.tff_let_term_defns();this.state=1226;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1227;this.fof_term();this.state=1228;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_tuple_term\",value:function tff_tuple_term(){var localctx=new Tff_tuple_termContext(this,this._ctx,this.state);this.enterRule(localctx,234,tptp_v7_0_0_0Parser.RULE_tff_tuple_term);try{this.state=1237;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__17:this.enterOuterAlt(localctx,1);this.state=1232;this.match(tptp_v7_0_0_0Parser.T__17);break;case tptp_v7_0_0_0Parser.T__18:this.enterOuterAlt(localctx,2);this.state=1233;this.match(tptp_v7_0_0_0Parser.T__18);this.state=1234;this.fof_arguments();this.state=1235;this.match(tptp_v7_0_0_0Parser.T__19);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_sequent\",value:function fof_sequent(){var localctx=new Fof_sequentContext(this,this._ctx,this.state);this.enterRule(localctx,236,tptp_v7_0_0_0Parser.RULE_fof_sequent);try{this.state=1247;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__11:case tptp_v7_0_0_0Parser.T__16:this.enterOuterAlt(localctx,1);this.state=1239;this.fof_formula_tuple();this.state=1240;this.match(tptp_v7_0_0_0Parser.Gentzen_arrow);this.state=1241;this.fof_formula_tuple();break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=1243;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1244;this.fof_sequent();this.state=1245;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_formula_tuple\",value:function fof_formula_tuple(){var localctx=new Fof_formula_tupleContext(this,this._ctx,this.state);this.enterRule(localctx,238,tptp_v7_0_0_0Parser.RULE_fof_formula_tuple);try{this.state=1254;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__16:this.enterOuterAlt(localctx,1);this.state=1249;this.match(tptp_v7_0_0_0Parser.T__16);break;case tptp_v7_0_0_0Parser.T__11:this.enterOuterAlt(localctx,2);this.state=1250;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1251;this.fof_formula_tuple_list();this.state=1252;this.match(tptp_v7_0_0_0Parser.T__12);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_formula_tuple_list\",value:function fof_formula_tuple_list(){var localctx=new Fof_formula_tuple_listContext(this,this._ctx,this.state);this.enterRule(localctx,240,tptp_v7_0_0_0Parser.RULE_fof_formula_tuple_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1256;this.fof_logic_formula();this.state=1261;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1257;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1258;this.fof_logic_formula();this.state=1263;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"cnf_formula\",value:function cnf_formula(){var localctx=new Cnf_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,242,tptp_v7_0_0_0Parser.RULE_cnf_formula);try{this.state=1269;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__17:case tptp_v7_0_0_0Parser.T__18:case tptp_v7_0_0_0Parser.T__23:case tptp_v7_0_0_0Parser.T__24:case tptp_v7_0_0_0Parser.T__25:case tptp_v7_0_0_0Parser.Not:case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Dollar_word:case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Upper_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=1264;this.cnf_disjunction(0);break;case tptp_v7_0_0_0Parser.T__9:this.enterOuterAlt(localctx,2);this.state=1265;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1266;this.cnf_disjunction(0);this.state=1267;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"cnf_disjunction\",value:function cnf_disjunction(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Cnf_disjunctionContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=244;this.enterRecursionRule(localctx,244,tptp_v7_0_0_0Parser.RULE_cnf_disjunction,_p);try{this.enterOuterAlt(localctx,1);this.state=1272;this.cnf_literal();this._ctx.stop=this._input.LT(-1);this.state=1279;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,89,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Cnf_disjunctionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,tptp_v7_0_0_0Parser.RULE_cnf_disjunction);this.state=1274;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1275;this.match(tptp_v7_0_0_0Parser.Or);this.state=1276;this.cnf_literal();}this.state=1281;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,89,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"cnf_literal\",value:function cnf_literal(){var localctx=new Cnf_literalContext(this,this._ctx,this.state);this.enterRule(localctx,246,tptp_v7_0_0_0Parser.RULE_cnf_literal);try{this.state=1286;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,90,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1282;this.fof_atomic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1283;this.match(tptp_v7_0_0_0Parser.Not);this.state=1284;this.fof_atomic_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=1285;this.fof_infix_unary();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_quantifier\",value:function thf_quantifier(){var localctx=new Thf_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,248,tptp_v7_0_0_0Parser.RULE_thf_quantifier);try{this.state=1291;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Forall:case tptp_v7_0_0_0Parser.Exists:this.enterOuterAlt(localctx,1);this.state=1288;this.fof_quantifier();break;case tptp_v7_0_0_0Parser.Lambda:case tptp_v7_0_0_0Parser.Choice:case tptp_v7_0_0_0Parser.Description:this.enterOuterAlt(localctx,2);this.state=1289;this.th0_quantifier();break;case tptp_v7_0_0_0Parser.TyForall:case tptp_v7_0_0_0Parser.TyExists:this.enterOuterAlt(localctx,3);this.state=1290;this.th1_quantifier();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"th0_quantifier\",value:function th0_quantifier(){var localctx=new Th0_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,250,tptp_v7_0_0_0Parser.RULE_th0_quantifier);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1293;_la=this._input.LA(1);if(!((_la-61&~0x1f)==0&&(1<<_la-61&(1<<tptp_v7_0_0_0Parser.Lambda-61|1<<tptp_v7_0_0_0Parser.Choice-61|1<<tptp_v7_0_0_0Parser.Description-61))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"th1_quantifier\",value:function th1_quantifier(){var localctx=new Th1_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,252,tptp_v7_0_0_0Parser.RULE_th1_quantifier);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1295;_la=this._input.LA(1);if(!(_la===tptp_v7_0_0_0Parser.TyForall||_la===tptp_v7_0_0_0Parser.TyExists)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_pair_connective\",value:function thf_pair_connective(){var localctx=new Thf_pair_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,254,tptp_v7_0_0_0Parser.RULE_thf_pair_connective);try{this.state=1301;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Infix_equality:this.enterOuterAlt(localctx,1);this.state=1297;this.match(tptp_v7_0_0_0Parser.Infix_equality);break;case tptp_v7_0_0_0Parser.Infix_inequality:this.enterOuterAlt(localctx,2);this.state=1298;this.match(tptp_v7_0_0_0Parser.Infix_inequality);break;case tptp_v7_0_0_0Parser.Iff:case tptp_v7_0_0_0Parser.Impl:case tptp_v7_0_0_0Parser.If:case tptp_v7_0_0_0Parser.Niff:case tptp_v7_0_0_0Parser.Nor:case tptp_v7_0_0_0Parser.Nand:this.enterOuterAlt(localctx,3);this.state=1299;this.binary_connective();break;case tptp_v7_0_0_0Parser.Assignment:this.enterOuterAlt(localctx,4);this.state=1300;this.match(tptp_v7_0_0_0Parser.Assignment);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_unary_connective\",value:function thf_unary_connective(){var localctx=new Thf_unary_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,256,tptp_v7_0_0_0Parser.RULE_thf_unary_connective);try{this.state=1305;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Not:this.enterOuterAlt(localctx,1);this.state=1303;this.unary_connective();break;case tptp_v7_0_0_0Parser.ForallComb:case tptp_v7_0_0_0Parser.ExistsComb:case tptp_v7_0_0_0Parser.ChoiceComb:case tptp_v7_0_0_0Parser.DescriptionComb:case tptp_v7_0_0_0Parser.EqComb:this.enterOuterAlt(localctx,2);this.state=1304;this.th1_unary_connective();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"th1_unary_connective\",value:function th1_unary_connective(){var localctx=new Th1_unary_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,258,tptp_v7_0_0_0Parser.RULE_th1_unary_connective);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1307;_la=this._input.LA(1);if(!((_la-53&~0x1f)==0&&(1<<_la-53&(1<<tptp_v7_0_0_0Parser.ForallComb-53|1<<tptp_v7_0_0_0Parser.ExistsComb-53|1<<tptp_v7_0_0_0Parser.ChoiceComb-53|1<<tptp_v7_0_0_0Parser.DescriptionComb-53|1<<tptp_v7_0_0_0Parser.EqComb-53))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_pair_connective\",value:function tff_pair_connective(){var localctx=new Tff_pair_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,260,tptp_v7_0_0_0Parser.RULE_tff_pair_connective);try{this.state=1311;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Iff:case tptp_v7_0_0_0Parser.Impl:case tptp_v7_0_0_0Parser.If:case tptp_v7_0_0_0Parser.Niff:case tptp_v7_0_0_0Parser.Nor:case tptp_v7_0_0_0Parser.Nand:this.enterOuterAlt(localctx,1);this.state=1309;this.binary_connective();break;case tptp_v7_0_0_0Parser.Assignment:this.enterOuterAlt(localctx,2);this.state=1310;this.match(tptp_v7_0_0_0Parser.Assignment);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_quantifier\",value:function fof_quantifier(){var localctx=new Fof_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,262,tptp_v7_0_0_0Parser.RULE_fof_quantifier);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1313;_la=this._input.LA(1);if(!(_la===tptp_v7_0_0_0Parser.Forall||_la===tptp_v7_0_0_0Parser.Exists)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"binary_connective\",value:function binary_connective(){var localctx=new Binary_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,264,tptp_v7_0_0_0Parser.RULE_binary_connective);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1315;_la=this._input.LA(1);if(!((_la-46&~0x1f)==0&&(1<<_la-46&(1<<tptp_v7_0_0_0Parser.Iff-46|1<<tptp_v7_0_0_0Parser.Impl-46|1<<tptp_v7_0_0_0Parser.If-46|1<<tptp_v7_0_0_0Parser.Niff-46|1<<tptp_v7_0_0_0Parser.Nor-46|1<<tptp_v7_0_0_0Parser.Nand-46))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"assoc_connective\",value:function assoc_connective(){var localctx=new Assoc_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,266,tptp_v7_0_0_0Parser.RULE_assoc_connective);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1317;_la=this._input.LA(1);if(!(_la===tptp_v7_0_0_0Parser.Or||_la===tptp_v7_0_0_0Parser.And)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"unary_connective\",value:function unary_connective(){var localctx=new Unary_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,268,tptp_v7_0_0_0Parser.RULE_unary_connective);try{this.enterOuterAlt(localctx,1);this.state=1319;this.match(tptp_v7_0_0_0Parser.Not);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"type_constant\",value:function type_constant(){var localctx=new Type_constantContext(this,this._ctx,this.state);this.enterRule(localctx,270,tptp_v7_0_0_0Parser.RULE_type_constant);try{this.enterOuterAlt(localctx,1);this.state=1321;this.type_functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"type_functor\",value:function type_functor(){var localctx=new Type_functorContext(this,this._ctx,this.state);this.enterRule(localctx,272,tptp_v7_0_0_0Parser.RULE_type_functor);try{this.enterOuterAlt(localctx,1);this.state=1323;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_type\",value:function defined_type(){var localctx=new Defined_typeContext(this,this._ctx,this.state);this.enterRule(localctx,274,tptp_v7_0_0_0Parser.RULE_defined_type);try{this.enterOuterAlt(localctx,1);this.state=1325;this.match(tptp_v7_0_0_0Parser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"system_type\",value:function system_type(){var localctx=new System_typeContext(this,this._ctx,this.state);this.enterRule(localctx,276,tptp_v7_0_0_0Parser.RULE_system_type);try{this.enterOuterAlt(localctx,1);this.state=1327;this.atomic_system_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atom\",value:function atom(){var localctx=new AtomContext(this,this._ctx,this.state);this.enterRule(localctx,278,tptp_v7_0_0_0Parser.RULE_atom);try{this.state=1331;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Dollar_dollar_word:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1329;this.untyped_atom();break;case tptp_v7_0_0_0Parser.Dollar_word:this.enterOuterAlt(localctx,2);this.state=1330;this.defined_constant();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"untyped_atom\",value:function untyped_atom(){var localctx=new Untyped_atomContext(this,this._ctx,this.state);this.enterRule(localctx,280,tptp_v7_0_0_0Parser.RULE_untyped_atom);try{this.state=1335;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1333;this.constant();break;case tptp_v7_0_0_0Parser.Dollar_dollar_word:this.enterOuterAlt(localctx,2);this.state=1334;this.system_constant();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_proposition\",value:function defined_proposition(){var localctx=new Defined_propositionContext(this,this._ctx,this.state);this.enterRule(localctx,282,tptp_v7_0_0_0Parser.RULE_defined_proposition);try{this.enterOuterAlt(localctx,1);this.state=1337;this.match(tptp_v7_0_0_0Parser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_predicate\",value:function defined_predicate(){var localctx=new Defined_predicateContext(this,this._ctx,this.state);this.enterRule(localctx,284,tptp_v7_0_0_0Parser.RULE_defined_predicate);try{this.enterOuterAlt(localctx,1);this.state=1339;this.match(tptp_v7_0_0_0Parser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_infix_pred\",value:function defined_infix_pred(){var localctx=new Defined_infix_predContext(this,this._ctx,this.state);this.enterRule(localctx,286,tptp_v7_0_0_0Parser.RULE_defined_infix_pred);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1341;_la=this._input.LA(1);if(!(_la===tptp_v7_0_0_0Parser.Infix_equality||_la===tptp_v7_0_0_0Parser.Assignment)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"constant\",value:function constant(){var localctx=new ConstantContext(this,this._ctx,this.state);this.enterRule(localctx,288,tptp_v7_0_0_0Parser.RULE_constant);try{this.enterOuterAlt(localctx,1);this.state=1343;this.functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"functor\",value:function functor(){var localctx=new FunctorContext(this,this._ctx,this.state);this.enterRule(localctx,290,tptp_v7_0_0_0Parser.RULE_functor);try{this.enterOuterAlt(localctx,1);this.state=1345;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"system_constant\",value:function system_constant(){var localctx=new System_constantContext(this,this._ctx,this.state);this.enterRule(localctx,292,tptp_v7_0_0_0Parser.RULE_system_constant);try{this.enterOuterAlt(localctx,1);this.state=1347;this.system_functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"system_functor\",value:function system_functor(){var localctx=new System_functorContext(this,this._ctx,this.state);this.enterRule(localctx,294,tptp_v7_0_0_0Parser.RULE_system_functor);try{this.enterOuterAlt(localctx,1);this.state=1349;this.atomic_system_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_constant\",value:function defined_constant(){var localctx=new Defined_constantContext(this,this._ctx,this.state);this.enterRule(localctx,296,tptp_v7_0_0_0Parser.RULE_defined_constant);try{this.enterOuterAlt(localctx,1);this.state=1351;this.defined_functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_functor\",value:function defined_functor(){var localctx=new Defined_functorContext(this,this._ctx,this.state);this.enterRule(localctx,298,tptp_v7_0_0_0Parser.RULE_defined_functor);try{this.enterOuterAlt(localctx,1);this.state=1353;this.atomic_defined_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_term\",value:function defined_term(){var localctx=new Defined_termContext(this,this._ctx,this.state);this.enterRule(localctx,300,tptp_v7_0_0_0Parser.RULE_defined_term);try{this.state=1357;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Real:case tptp_v7_0_0_0Parser.Rational:case tptp_v7_0_0_0Parser.Integer:this.enterOuterAlt(localctx,1);this.state=1355;this.number();break;case tptp_v7_0_0_0Parser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1356;this.match(tptp_v7_0_0_0Parser.Distinct_object);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"variable\",value:function variable(){var localctx=new VariableContext(this,this._ctx,this.state);this.enterRule(localctx,302,tptp_v7_0_0_0Parser.RULE_variable);try{this.enterOuterAlt(localctx,1);this.state=1359;this.match(tptp_v7_0_0_0Parser.Upper_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"source\",value:function source(){var localctx=new SourceContext(this,this._ctx,this.state);this.enterRule(localctx,304,tptp_v7_0_0_0Parser.RULE_source);try{this.state=1369;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,98,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1361;this.dag_source();break;case 2:this.enterOuterAlt(localctx,2);this.state=1362;this.internal_source();break;case 3:this.enterOuterAlt(localctx,3);this.state=1363;this.external_source();break;case 4:this.enterOuterAlt(localctx,4);this.state=1364;this.match(tptp_v7_0_0_0Parser.Lower_word);break;case 5:this.enterOuterAlt(localctx,5);this.state=1365;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1366;this.sources();this.state=1367;this.match(tptp_v7_0_0_0Parser.T__12);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"sources\",value:function sources(){var localctx=new SourcesContext(this,this._ctx,this.state);this.enterRule(localctx,306,tptp_v7_0_0_0Parser.RULE_sources);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1371;this.source();this.state=1376;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1372;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1373;this.source();this.state=1378;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"dag_source\",value:function dag_source(){var localctx=new Dag_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,308,tptp_v7_0_0_0Parser.RULE_dag_source);try{this.state=1381;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Integer:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1379;this.name();break;case tptp_v7_0_0_0Parser.T__26:this.enterOuterAlt(localctx,2);this.state=1380;this.inference_record();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_record\",value:function inference_record(){var localctx=new Inference_recordContext(this,this._ctx,this.state);this.enterRule(localctx,310,tptp_v7_0_0_0Parser.RULE_inference_record);try{this.enterOuterAlt(localctx,1);this.state=1383;this.match(tptp_v7_0_0_0Parser.T__26);this.state=1384;this.inference_rule();this.state=1385;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1386;this.useful_info();this.state=1387;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1388;this.inference_parents();this.state=1389;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_rule\",value:function inference_rule(){var localctx=new Inference_ruleContext(this,this._ctx,this.state);this.enterRule(localctx,312,tptp_v7_0_0_0Parser.RULE_inference_rule);try{this.enterOuterAlt(localctx,1);this.state=1391;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_parents\",value:function inference_parents(){var localctx=new Inference_parentsContext(this,this._ctx,this.state);this.enterRule(localctx,314,tptp_v7_0_0_0Parser.RULE_inference_parents);try{this.state=1398;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__16:this.enterOuterAlt(localctx,1);this.state=1393;this.match(tptp_v7_0_0_0Parser.T__16);break;case tptp_v7_0_0_0Parser.T__11:this.enterOuterAlt(localctx,2);this.state=1394;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1395;this.parent_list();this.state=1396;this.match(tptp_v7_0_0_0Parser.T__12);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"parent_list\",value:function parent_list(){var localctx=new Parent_listContext(this,this._ctx,this.state);this.enterRule(localctx,316,tptp_v7_0_0_0Parser.RULE_parent_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1400;this.parent_info();this.state=1405;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1401;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1402;this.parent_info();this.state=1407;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"parent_info\",value:function parent_info(){var localctx=new Parent_infoContext(this,this._ctx,this.state);this.enterRule(localctx,318,tptp_v7_0_0_0Parser.RULE_parent_info);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1408;this.source();this.state=1410;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__13){this.state=1409;this.parent_details();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"parent_details\",value:function parent_details(){var localctx=new Parent_detailsContext(this,this._ctx,this.state);this.enterRule(localctx,320,tptp_v7_0_0_0Parser.RULE_parent_details);try{this.enterOuterAlt(localctx,1);this.state=1412;this.match(tptp_v7_0_0_0Parser.T__13);this.state=1413;this.general_list();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"internal_source\",value:function internal_source(){var localctx=new Internal_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,322,tptp_v7_0_0_0Parser.RULE_internal_source);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1415;this.match(tptp_v7_0_0_0Parser.T__27);this.state=1416;this.intro_type();this.state=1418;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=1417;this.optional_info();}this.state=1420;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"intro_type\",value:function intro_type(){var localctx=new Intro_typeContext(this,this._ctx,this.state);this.enterRule(localctx,324,tptp_v7_0_0_0Parser.RULE_intro_type);try{this.enterOuterAlt(localctx,1);this.state=1422;this.match(tptp_v7_0_0_0Parser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"external_source\",value:function external_source(){var localctx=new External_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,326,tptp_v7_0_0_0Parser.RULE_external_source);try{this.state=1427;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__28:this.enterOuterAlt(localctx,1);this.state=1424;this.file_source();break;case tptp_v7_0_0_0Parser.T__29:this.enterOuterAlt(localctx,2);this.state=1425;this.theory();break;case tptp_v7_0_0_0Parser.T__30:this.enterOuterAlt(localctx,3);this.state=1426;this.creator_source();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"file_source\",value:function file_source(){var localctx=new File_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,328,tptp_v7_0_0_0Parser.RULE_file_source);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1429;this.match(tptp_v7_0_0_0Parser.T__28);this.state=1430;this.file_name();this.state=1432;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=1431;this.file_info();}this.state=1434;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"file_info\",value:function file_info(){var localctx=new File_infoContext(this,this._ctx,this.state);this.enterRule(localctx,330,tptp_v7_0_0_0Parser.RULE_file_info);try{this.enterOuterAlt(localctx,1);this.state=1436;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1437;this.name();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"theory\",value:function theory(){var localctx=new TheoryContext(this,this._ctx,this.state);this.enterRule(localctx,332,tptp_v7_0_0_0Parser.RULE_theory);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1439;this.match(tptp_v7_0_0_0Parser.T__29);this.state=1440;this.theory_name();this.state=1442;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=1441;this.optional_info();}this.state=1444;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"theory_name\",value:function theory_name(){var localctx=new Theory_nameContext(this,this._ctx,this.state);this.enterRule(localctx,334,tptp_v7_0_0_0Parser.RULE_theory_name);try{this.enterOuterAlt(localctx,1);this.state=1446;this.match(tptp_v7_0_0_0Parser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"creator_source\",value:function creator_source(){var localctx=new Creator_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,336,tptp_v7_0_0_0Parser.RULE_creator_source);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1448;this.match(tptp_v7_0_0_0Parser.T__30);this.state=1449;this.creator_name();this.state=1451;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=1450;this.optional_info();}this.state=1453;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"creator_name\",value:function creator_name(){var localctx=new Creator_nameContext(this,this._ctx,this.state);this.enterRule(localctx,338,tptp_v7_0_0_0Parser.RULE_creator_name);try{this.enterOuterAlt(localctx,1);this.state=1455;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"optional_info\",value:function optional_info(){var localctx=new Optional_infoContext(this,this._ctx,this.state);this.enterRule(localctx,340,tptp_v7_0_0_0Parser.RULE_optional_info);try{this.enterOuterAlt(localctx,1);this.state=1457;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1458;this.useful_info();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"useful_info\",value:function useful_info(){var localctx=new Useful_infoContext(this,this._ctx,this.state);this.enterRule(localctx,342,tptp_v7_0_0_0Parser.RULE_useful_info);try{this.state=1466;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,109,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1460;this.match(tptp_v7_0_0_0Parser.T__16);break;case 2:this.enterOuterAlt(localctx,2);this.state=1461;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1462;this.info_items();this.state=1463;this.match(tptp_v7_0_0_0Parser.T__12);break;case 3:this.enterOuterAlt(localctx,3);this.state=1465;this.general_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"info_items\",value:function info_items(){var localctx=new Info_itemsContext(this,this._ctx,this.state);this.enterRule(localctx,344,tptp_v7_0_0_0Parser.RULE_info_items);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1468;this.info_item();this.state=1473;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1469;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1470;this.info_item();this.state=1475;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"info_item\",value:function info_item(){var localctx=new Info_itemContext(this,this._ctx,this.state);this.enterRule(localctx,346,tptp_v7_0_0_0Parser.RULE_info_item);try{this.state=1479;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,111,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1476;this.formula_item();break;case 2:this.enterOuterAlt(localctx,2);this.state=1477;this.inference_item();break;case 3:this.enterOuterAlt(localctx,3);this.state=1478;this.general_function();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_item\",value:function formula_item(){var localctx=new Formula_itemContext(this,this._ctx,this.state);this.enterRule(localctx,348,tptp_v7_0_0_0Parser.RULE_formula_item);try{this.state=1483;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__31:this.enterOuterAlt(localctx,1);this.state=1481;this.description_item();break;case tptp_v7_0_0_0Parser.T__32:this.enterOuterAlt(localctx,2);this.state=1482;this.iquote_item();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"description_item\",value:function description_item(){var localctx=new Description_itemContext(this,this._ctx,this.state);this.enterRule(localctx,350,tptp_v7_0_0_0Parser.RULE_description_item);try{this.enterOuterAlt(localctx,1);this.state=1485;this.match(tptp_v7_0_0_0Parser.T__31);this.state=1486;this.atomic_word();this.state=1487;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"iquote_item\",value:function iquote_item(){var localctx=new Iquote_itemContext(this,this._ctx,this.state);this.enterRule(localctx,352,tptp_v7_0_0_0Parser.RULE_iquote_item);try{this.enterOuterAlt(localctx,1);this.state=1489;this.match(tptp_v7_0_0_0Parser.T__32);this.state=1490;this.atomic_word();this.state=1491;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_item\",value:function inference_item(){var localctx=new Inference_itemContext(this,this._ctx,this.state);this.enterRule(localctx,354,tptp_v7_0_0_0Parser.RULE_inference_item);try{this.state=1497;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__33:case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1493;this.inference_status();break;case tptp_v7_0_0_0Parser.T__34:this.enterOuterAlt(localctx,2);this.state=1494;this.assumptions_record();break;case tptp_v7_0_0_0Parser.T__36:this.enterOuterAlt(localctx,3);this.state=1495;this.new_symbol_record();break;case tptp_v7_0_0_0Parser.T__35:this.enterOuterAlt(localctx,4);this.state=1496;this.refutation();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_status\",value:function inference_status(){var localctx=new Inference_statusContext(this,this._ctx,this.state);this.enterRule(localctx,356,tptp_v7_0_0_0Parser.RULE_inference_status);try{this.state=1504;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__33:this.enterOuterAlt(localctx,1);this.state=1499;this.match(tptp_v7_0_0_0Parser.T__33);this.state=1500;this.status_value();this.state=1501;this.match(tptp_v7_0_0_0Parser.T__10);break;case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,2);this.state=1503;this.inference_info();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"status_value\",value:function status_value(){var localctx=new Status_valueContext(this,this._ctx,this.state);this.enterRule(localctx,358,tptp_v7_0_0_0Parser.RULE_status_value);try{this.enterOuterAlt(localctx,1);this.state=1506;this.match(tptp_v7_0_0_0Parser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_info\",value:function inference_info(){var localctx=new Inference_infoContext(this,this._ctx,this.state);this.enterRule(localctx,360,tptp_v7_0_0_0Parser.RULE_inference_info);try{this.enterOuterAlt(localctx,1);this.state=1508;this.inference_rule();this.state=1509;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1510;this.atomic_word();this.state=1511;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1512;this.general_list();this.state=1513;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"assumptions_record\",value:function assumptions_record(){var localctx=new Assumptions_recordContext(this,this._ctx,this.state);this.enterRule(localctx,362,tptp_v7_0_0_0Parser.RULE_assumptions_record);try{this.enterOuterAlt(localctx,1);this.state=1515;this.match(tptp_v7_0_0_0Parser.T__34);this.state=1516;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1517;this.name_list();this.state=1518;this.match(tptp_v7_0_0_0Parser.T__12);this.state=1519;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"refutation\",value:function refutation(){var localctx=new RefutationContext(this,this._ctx,this.state);this.enterRule(localctx,364,tptp_v7_0_0_0Parser.RULE_refutation);try{this.enterOuterAlt(localctx,1);this.state=1521;this.match(tptp_v7_0_0_0Parser.T__35);this.state=1522;this.file_source();this.state=1523;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"new_symbol_record\",value:function new_symbol_record(){var localctx=new New_symbol_recordContext(this,this._ctx,this.state);this.enterRule(localctx,366,tptp_v7_0_0_0Parser.RULE_new_symbol_record);try{this.enterOuterAlt(localctx,1);this.state=1525;this.match(tptp_v7_0_0_0Parser.T__36);this.state=1526;this.atomic_word();this.state=1527;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1528;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1529;this.new_symbol_list();this.state=1530;this.match(tptp_v7_0_0_0Parser.T__12);this.state=1531;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"new_symbol_list\",value:function new_symbol_list(){var localctx=new New_symbol_listContext(this,this._ctx,this.state);this.enterRule(localctx,368,tptp_v7_0_0_0Parser.RULE_new_symbol_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1533;this.principal_symbol();this.state=1538;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1534;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1535;this.principal_symbol();this.state=1540;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"principal_symbol\",value:function principal_symbol(){var localctx=new Principal_symbolContext(this,this._ctx,this.state);this.enterRule(localctx,370,tptp_v7_0_0_0Parser.RULE_principal_symbol);try{this.state=1543;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1541;this.functor();break;case tptp_v7_0_0_0Parser.Upper_word:this.enterOuterAlt(localctx,2);this.state=1542;this.variable();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"include\",value:function include(){var localctx=new IncludeContext(this,this._ctx,this.state);this.enterRule(localctx,372,tptp_v7_0_0_0Parser.RULE_include);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1545;this.match(tptp_v7_0_0_0Parser.T__37);this.state=1546;this.file_name();this.state=1548;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===tptp_v7_0_0_0Parser.T__1){this.state=1547;this.formula_selection();}this.state=1550;this.match(tptp_v7_0_0_0Parser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_selection\",value:function formula_selection(){var localctx=new Formula_selectionContext(this,this._ctx,this.state);this.enterRule(localctx,374,tptp_v7_0_0_0Parser.RULE_formula_selection);try{this.enterOuterAlt(localctx,1);this.state=1552;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1553;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1554;this.name_list();this.state=1555;this.match(tptp_v7_0_0_0Parser.T__12);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"name_list\",value:function name_list(){var localctx=new Name_listContext(this,this._ctx,this.state);this.enterRule(localctx,376,tptp_v7_0_0_0Parser.RULE_name_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1557;this.name();this.state=1562;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1558;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1559;this.name();this.state=1564;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_term\",value:function general_term(){var localctx=new General_termContext(this,this._ctx,this.state);this.enterRule(localctx,378,tptp_v7_0_0_0Parser.RULE_general_term);try{this.state=1571;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,119,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1565;this.general_data();break;case 2:this.enterOuterAlt(localctx,2);this.state=1566;this.general_data();this.state=1567;this.match(tptp_v7_0_0_0Parser.T__13);this.state=1568;this.general_term();break;case 3:this.enterOuterAlt(localctx,3);this.state=1570;this.general_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_data\",value:function general_data(){var localctx=new General_dataContext(this,this._ctx,this.state);this.enterRule(localctx,380,tptp_v7_0_0_0Parser.RULE_general_data);try{this.state=1579;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,120,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1573;this.atomic_word();break;case 2:this.enterOuterAlt(localctx,2);this.state=1574;this.general_function();break;case 3:this.enterOuterAlt(localctx,3);this.state=1575;this.variable();break;case 4:this.enterOuterAlt(localctx,4);this.state=1576;this.number();break;case 5:this.enterOuterAlt(localctx,5);this.state=1577;this.match(tptp_v7_0_0_0Parser.Distinct_object);break;case 6:this.enterOuterAlt(localctx,6);this.state=1578;this.formula_data();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_function\",value:function general_function(){var localctx=new General_functionContext(this,this._ctx,this.state);this.enterRule(localctx,382,tptp_v7_0_0_0Parser.RULE_general_function);try{this.enterOuterAlt(localctx,1);this.state=1581;this.atomic_word();this.state=1582;this.match(tptp_v7_0_0_0Parser.T__9);this.state=1583;this.general_terms();this.state=1584;this.match(tptp_v7_0_0_0Parser.T__10);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_data\",value:function formula_data(){var localctx=new Formula_dataContext(this,this._ctx,this.state);this.enterRule(localctx,384,tptp_v7_0_0_0Parser.RULE_formula_data);try{this.state=1606;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__38:this.enterOuterAlt(localctx,1);this.state=1586;this.match(tptp_v7_0_0_0Parser.T__38);this.state=1587;this.thf_formula();this.state=1588;this.match(tptp_v7_0_0_0Parser.T__10);break;case tptp_v7_0_0_0Parser.T__39:this.enterOuterAlt(localctx,2);this.state=1590;this.match(tptp_v7_0_0_0Parser.T__39);this.state=1591;this.tff_formula();this.state=1592;this.match(tptp_v7_0_0_0Parser.T__10);break;case tptp_v7_0_0_0Parser.T__40:this.enterOuterAlt(localctx,3);this.state=1594;this.match(tptp_v7_0_0_0Parser.T__40);this.state=1595;this.fof_formula();this.state=1596;this.match(tptp_v7_0_0_0Parser.T__10);break;case tptp_v7_0_0_0Parser.T__41:this.enterOuterAlt(localctx,4);this.state=1598;this.match(tptp_v7_0_0_0Parser.T__41);this.state=1599;this.cnf_formula();this.state=1600;this.match(tptp_v7_0_0_0Parser.T__10);break;case tptp_v7_0_0_0Parser.T__42:this.enterOuterAlt(localctx,5);this.state=1602;this.match(tptp_v7_0_0_0Parser.T__42);this.state=1603;this.fof_term();this.state=1604;this.match(tptp_v7_0_0_0Parser.T__10);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_list\",value:function general_list(){var localctx=new General_listContext(this,this._ctx,this.state);this.enterRule(localctx,386,tptp_v7_0_0_0Parser.RULE_general_list);try{this.state=1613;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.T__16:this.enterOuterAlt(localctx,1);this.state=1608;this.match(tptp_v7_0_0_0Parser.T__16);break;case tptp_v7_0_0_0Parser.T__11:this.enterOuterAlt(localctx,2);this.state=1609;this.match(tptp_v7_0_0_0Parser.T__11);this.state=1610;this.general_terms();this.state=1611;this.match(tptp_v7_0_0_0Parser.T__12);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_terms\",value:function general_terms(){var localctx=new General_termsContext(this,this._ctx,this.state);this.enterRule(localctx,388,tptp_v7_0_0_0Parser.RULE_general_terms);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1615;this.general_term();this.state=1620;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===tptp_v7_0_0_0Parser.T__1){this.state=1616;this.match(tptp_v7_0_0_0Parser.T__1);this.state=1617;this.general_term();this.state=1622;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"name\",value:function name(){var localctx=new NameContext(this,this._ctx,this.state);this.enterRule(localctx,390,tptp_v7_0_0_0Parser.RULE_name);try{this.state=1625;this._errHandler.sync(this);switch(this._input.LA(1)){case tptp_v7_0_0_0Parser.Lower_word:case tptp_v7_0_0_0Parser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1623;this.atomic_word();break;case tptp_v7_0_0_0Parser.Integer:this.enterOuterAlt(localctx,2);this.state=1624;this.match(tptp_v7_0_0_0Parser.Integer);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atomic_word\",value:function atomic_word(){var localctx=new Atomic_wordContext(this,this._ctx,this.state);this.enterRule(localctx,392,tptp_v7_0_0_0Parser.RULE_atomic_word);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1627;_la=this._input.LA(1);if(!(_la===tptp_v7_0_0_0Parser.Lower_word||_la===tptp_v7_0_0_0Parser.Single_quoted)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atomic_defined_word\",value:function atomic_defined_word(){var localctx=new Atomic_defined_wordContext(this,this._ctx,this.state);this.enterRule(localctx,394,tptp_v7_0_0_0Parser.RULE_atomic_defined_word);try{this.enterOuterAlt(localctx,1);this.state=1629;this.match(tptp_v7_0_0_0Parser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atomic_system_word\",value:function atomic_system_word(){var localctx=new Atomic_system_wordContext(this,this._ctx,this.state);this.enterRule(localctx,396,tptp_v7_0_0_0Parser.RULE_atomic_system_word);try{this.enterOuterAlt(localctx,1);this.state=1631;this.match(tptp_v7_0_0_0Parser.Dollar_dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"number\",value:function number(){var localctx=new NumberContext(this,this._ctx,this.state);this.enterRule(localctx,398,tptp_v7_0_0_0Parser.RULE_number);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1633;_la=this._input.LA(1);if(!((_la-74&~0x1f)==0&&(1<<_la-74&(1<<tptp_v7_0_0_0Parser.Real-74|1<<tptp_v7_0_0_0Parser.Rational-74|1<<tptp_v7_0_0_0Parser.Integer-74))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"file_name\",value:function file_name(){var localctx=new File_nameContext(this,this._ctx,this.state);this.enterRule(localctx,400,tptp_v7_0_0_0Parser.RULE_file_name);try{this.enterOuterAlt(localctx,1);this.state=1635;this.match(tptp_v7_0_0_0Parser.Single_quoted);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}}]);return tptp_v7_0_0_0Parser;}(_antlr[\"default\"].Parser);exports[\"default\"]=tptp_v7_0_0_0Parser;_defineProperty(tptp_v7_0_0_0Parser,\"grammarFileName\",\"tptp_v7_0_0_0.g4\");_defineProperty(tptp_v7_0_0_0Parser,\"literalNames\",[null,\"'tpi('\",\"','\",\"').'\",\"'thf('\",\"'tfx('\",\"'tff('\",\"'tcf('\",\"'fof('\",\"'cnf('\",\"'('\",\"')'\",\"'['\",\"']'\",\"':'\",\"'$ite('\",\"'$let('\",\"'[]'\",\"'{}'\",\"'{'\",\"'}'\",\"'$ite_f('\",\"'$let_tf('\",\"'$let_ff('\",\"'$ite_t('\",\"'$let_ft('\",\"'$let_tt('\",\"'inference('\",\"'introduced('\",\"'file('\",\"'theory('\",\"'creator('\",\"'description('\",\"'iquote('\",\"'status('\",\"'assumptions('\",\"'refutation('\",\"'new_symbols('\",\"'include('\",\"'$thf('\",\"'$tff('\",\"'$fof('\",\"'$cnf('\",\"'$fot('\",\"'|'\",\"'&'\",\"'<=>'\",\"'=>'\",\"'<='\",\"'<~>'\",\"'~|'\",\"'~&'\",\"'~'\",\"'!!'\",\"'!>'\",\"'!='\",\"'='\",\"'!'\",\"'??'\",\"'?*'\",\"'?'\",\"'^'\",\"'@@+'\",\"'@+'\",\"'@@-'\",\"'@-'\",\"'@='\",\"'@'\",\"':='\",\"'>'\",\"'*'\",\"'+'\",\"'<<'\",\"'-->'\"]);_defineProperty(tptp_v7_0_0_0Parser,\"symbolicNames\",[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,\"Or\",\"And\",\"Iff\",\"Impl\",\"If\",\"Niff\",\"Nor\",\"Nand\",\"Not\",\"ForallComb\",\"TyForall\",\"Infix_inequality\",\"Infix_equality\",\"Forall\",\"ExistsComb\",\"TyExists\",\"Exists\",\"Lambda\",\"ChoiceComb\",\"Choice\",\"DescriptionComb\",\"Description\",\"EqComb\",\"App\",\"Assignment\",\"Arrow\",\"Star\",\"Plus\",\"Subtype_sign\",\"Gentzen_arrow\",\"Real\",\"Signed_real\",\"Unsigned_real\",\"Rational\",\"Signed_rational\",\"Unsigned_rational\",\"Integer\",\"Signed_integer\",\"Unsigned_integer\",\"Decimal\",\"Positive_decimal\",\"Decimal_exponent\",\"Decimal_fraction\",\"Dot_decimal\",\"Exp_integer\",\"Signed_exp_integer\",\"Unsigned_exp_integer\",\"Dollar_word\",\"Dollar_dollar_word\",\"Upper_word\",\"Lower_word\",\"Single_quoted\",\"Distinct_object\",\"WS\",\"Line_comment\",\"Block_comment\"]);_defineProperty(tptp_v7_0_0_0Parser,\"ruleNames\",[\"tptp_file\",\"tptp_input\",\"annotated_formula\",\"tpi_annotated\",\"tpi_formula\",\"thf_annotated\",\"tfx_annotated\",\"tff_annotated\",\"tcf_annotated\",\"fof_annotated\",\"cnf_annotated\",\"annotations\",\"formula_role\",\"thf_formula\",\"thf_logic_formula\",\"thf_binary_formula\",\"thf_binary_pair\",\"thf_binary_tuple\",\"thf_or_formula\",\"thf_and_formula\",\"thf_apply_formula\",\"thf_unitary_formula\",\"thf_quantified_formula\",\"thf_quantification\",\"thf_variable_list\",\"thf_variable\",\"thf_typed_variable\",\"thf_unary_formula\",\"thf_atom\",\"thf_function\",\"thf_conn_term\",\"thf_conditional\",\"thf_let\",\"thf_arguments\",\"thf_type_formula\",\"thf_typeable_formula\",\"thf_subtype\",\"thf_top_level_type\",\"thf_unitary_type\",\"thf_apply_type\",\"thf_binary_type\",\"thf_mapping_type\",\"thf_xprod_type\",\"thf_union_type\",\"thf_sequent\",\"thf_tuple\",\"thf_formula_list\",\"tfx_formula\",\"tfx_logic_formula\",\"tff_formula\",\"tff_logic_formula\",\"tff_binary_formula\",\"tff_binary_nonassoc\",\"tff_binary_assoc\",\"tff_or_formula\",\"tff_and_formula\",\"tff_unitary_formula\",\"tff_quantified_formula\",\"tff_variable_list\",\"tff_variable\",\"tff_typed_variable\",\"tff_unary_formula\",\"tff_atomic_formula\",\"tff_conditional\",\"tff_let\",\"tff_let_term_defns\",\"tff_let_term_list\",\"tff_let_term_defn\",\"tff_let_term_binding\",\"tff_let_formula_defns\",\"tff_let_formula_list\",\"tff_let_formula_defn\",\"tff_let_formula_binding\",\"tff_sequent\",\"tff_formula_tuple\",\"tff_formula_tuple_list\",\"tff_typed_atom\",\"tff_subtype\",\"tff_top_level_type\",\"tf1_quantified_type\",\"tff_monotype\",\"tff_unitary_type\",\"tff_atomic_type\",\"tff_type_arguments\",\"tff_mapping_type\",\"tff_xprod_type\",\"tcf_formula\",\"tcf_logic_formula\",\"tcf_quantified_formula\",\"fof_formula\",\"fof_logic_formula\",\"fof_binary_formula\",\"fof_binary_nonassoc\",\"fof_binary_assoc\",\"fof_or_formula\",\"fof_and_formula\",\"fof_unitary_formula\",\"fof_quantified_formula\",\"fof_variable_list\",\"fof_unary_formula\",\"fof_infix_unary\",\"fof_atomic_formula\",\"fof_plain_atomic_formula\",\"fof_defined_atomic_formula\",\"fof_defined_plain_formula\",\"fof_defined_infix_formula\",\"fof_system_atomic_formula\",\"fof_plain_term\",\"fof_defined_term\",\"fof_defined_atomic_term\",\"fof_defined_plain_term\",\"fof_system_term\",\"fof_arguments\",\"fof_term\",\"fof_function_term\",\"tff_conditional_term\",\"tff_let_term\",\"tff_tuple_term\",\"fof_sequent\",\"fof_formula_tuple\",\"fof_formula_tuple_list\",\"cnf_formula\",\"cnf_disjunction\",\"cnf_literal\",\"thf_quantifier\",\"th0_quantifier\",\"th1_quantifier\",\"thf_pair_connective\",\"thf_unary_connective\",\"th1_unary_connective\",\"tff_pair_connective\",\"fof_quantifier\",\"binary_connective\",\"assoc_connective\",\"unary_connective\",\"type_constant\",\"type_functor\",\"defined_type\",\"system_type\",\"atom\",\"untyped_atom\",\"defined_proposition\",\"defined_predicate\",\"defined_infix_pred\",\"constant\",\"functor\",\"system_constant\",\"system_functor\",\"defined_constant\",\"defined_functor\",\"defined_term\",\"variable\",\"source\",\"sources\",\"dag_source\",\"inference_record\",\"inference_rule\",\"inference_parents\",\"parent_list\",\"parent_info\",\"parent_details\",\"internal_source\",\"intro_type\",\"external_source\",\"file_source\",\"file_info\",\"theory\",\"theory_name\",\"creator_source\",\"creator_name\",\"optional_info\",\"useful_info\",\"info_items\",\"info_item\",\"formula_item\",\"description_item\",\"iquote_item\",\"inference_item\",\"inference_status\",\"status_value\",\"inference_info\",\"assumptions_record\",\"refutation\",\"new_symbol_record\",\"new_symbol_list\",\"principal_symbol\",\"include\",\"formula_selection\",\"name_list\",\"general_term\",\"general_data\",\"general_function\",\"formula_data\",\"general_list\",\"general_terms\",\"name\",\"atomic_word\",\"atomic_defined_word\",\"atomic_system_word\",\"number\",\"file_name\"]);tptp_v7_0_0_0Parser.EOF=_antlr[\"default\"].Token.EOF;tptp_v7_0_0_0Parser.T__0=1;tptp_v7_0_0_0Parser.T__1=2;tptp_v7_0_0_0Parser.T__2=3;tptp_v7_0_0_0Parser.T__3=4;tptp_v7_0_0_0Parser.T__4=5;tptp_v7_0_0_0Parser.T__5=6;tptp_v7_0_0_0Parser.T__6=7;tptp_v7_0_0_0Parser.T__7=8;tptp_v7_0_0_0Parser.T__8=9;tptp_v7_0_0_0Parser.T__9=10;tptp_v7_0_0_0Parser.T__10=11;tptp_v7_0_0_0Parser.T__11=12;tptp_v7_0_0_0Parser.T__12=13;tptp_v7_0_0_0Parser.T__13=14;tptp_v7_0_0_0Parser.T__14=15;tptp_v7_0_0_0Parser.T__15=16;tptp_v7_0_0_0Parser.T__16=17;tptp_v7_0_0_0Parser.T__17=18;tptp_v7_0_0_0Parser.T__18=19;tptp_v7_0_0_0Parser.T__19=20;tptp_v7_0_0_0Parser.T__20=21;tptp_v7_0_0_0Parser.T__21=22;tptp_v7_0_0_0Parser.T__22=23;tptp_v7_0_0_0Parser.T__23=24;tptp_v7_0_0_0Parser.T__24=25;tptp_v7_0_0_0Parser.T__25=26;tptp_v7_0_0_0Parser.T__26=27;tptp_v7_0_0_0Parser.T__27=28;tptp_v7_0_0_0Parser.T__28=29;tptp_v7_0_0_0Parser.T__29=30;tptp_v7_0_0_0Parser.T__30=31;tptp_v7_0_0_0Parser.T__31=32;tptp_v7_0_0_0Parser.T__32=33;tptp_v7_0_0_0Parser.T__33=34;tptp_v7_0_0_0Parser.T__34=35;tptp_v7_0_0_0Parser.T__35=36;tptp_v7_0_0_0Parser.T__36=37;tptp_v7_0_0_0Parser.T__37=38;tptp_v7_0_0_0Parser.T__38=39;tptp_v7_0_0_0Parser.T__39=40;tptp_v7_0_0_0Parser.T__40=41;tptp_v7_0_0_0Parser.T__41=42;tptp_v7_0_0_0Parser.T__42=43;tptp_v7_0_0_0Parser.Or=44;tptp_v7_0_0_0Parser.And=45;tptp_v7_0_0_0Parser.Iff=46;tptp_v7_0_0_0Parser.Impl=47;tptp_v7_0_0_0Parser.If=48;tptp_v7_0_0_0Parser.Niff=49;tptp_v7_0_0_0Parser.Nor=50;tptp_v7_0_0_0Parser.Nand=51;tptp_v7_0_0_0Parser.Not=52;tptp_v7_0_0_0Parser.ForallComb=53;tptp_v7_0_0_0Parser.TyForall=54;tptp_v7_0_0_0Parser.Infix_inequality=55;tptp_v7_0_0_0Parser.Infix_equality=56;tptp_v7_0_0_0Parser.Forall=57;tptp_v7_0_0_0Parser.ExistsComb=58;tptp_v7_0_0_0Parser.TyExists=59;tptp_v7_0_0_0Parser.Exists=60;tptp_v7_0_0_0Parser.Lambda=61;tptp_v7_0_0_0Parser.ChoiceComb=62;tptp_v7_0_0_0Parser.Choice=63;tptp_v7_0_0_0Parser.DescriptionComb=64;tptp_v7_0_0_0Parser.Description=65;tptp_v7_0_0_0Parser.EqComb=66;tptp_v7_0_0_0Parser.App=67;tptp_v7_0_0_0Parser.Assignment=68;tptp_v7_0_0_0Parser.Arrow=69;tptp_v7_0_0_0Parser.Star=70;tptp_v7_0_0_0Parser.Plus=71;tptp_v7_0_0_0Parser.Subtype_sign=72;tptp_v7_0_0_0Parser.Gentzen_arrow=73;tptp_v7_0_0_0Parser.Real=74;tptp_v7_0_0_0Parser.Signed_real=75;tptp_v7_0_0_0Parser.Unsigned_real=76;tptp_v7_0_0_0Parser.Rational=77;tptp_v7_0_0_0Parser.Signed_rational=78;tptp_v7_0_0_0Parser.Unsigned_rational=79;tptp_v7_0_0_0Parser.Integer=80;tptp_v7_0_0_0Parser.Signed_integer=81;tptp_v7_0_0_0Parser.Unsigned_integer=82;tptp_v7_0_0_0Parser.Decimal=83;tptp_v7_0_0_0Parser.Positive_decimal=84;tptp_v7_0_0_0Parser.Decimal_exponent=85;tptp_v7_0_0_0Parser.Decimal_fraction=86;tptp_v7_0_0_0Parser.Dot_decimal=87;tptp_v7_0_0_0Parser.Exp_integer=88;tptp_v7_0_0_0Parser.Signed_exp_integer=89;tptp_v7_0_0_0Parser.Unsigned_exp_integer=90;tptp_v7_0_0_0Parser.Dollar_word=91;tptp_v7_0_0_0Parser.Dollar_dollar_word=92;tptp_v7_0_0_0Parser.Upper_word=93;tptp_v7_0_0_0Parser.Lower_word=94;tptp_v7_0_0_0Parser.Single_quoted=95;tptp_v7_0_0_0Parser.Distinct_object=96;tptp_v7_0_0_0Parser.WS=97;tptp_v7_0_0_0Parser.Line_comment=98;tptp_v7_0_0_0Parser.Block_comment=99;tptp_v7_0_0_0Parser.RULE_tptp_file=0;tptp_v7_0_0_0Parser.RULE_tptp_input=1;tptp_v7_0_0_0Parser.RULE_annotated_formula=2;tptp_v7_0_0_0Parser.RULE_tpi_annotated=3;tptp_v7_0_0_0Parser.RULE_tpi_formula=4;tptp_v7_0_0_0Parser.RULE_thf_annotated=5;tptp_v7_0_0_0Parser.RULE_tfx_annotated=6;tptp_v7_0_0_0Parser.RULE_tff_annotated=7;tptp_v7_0_0_0Parser.RULE_tcf_annotated=8;tptp_v7_0_0_0Parser.RULE_fof_annotated=9;tptp_v7_0_0_0Parser.RULE_cnf_annotated=10;tptp_v7_0_0_0Parser.RULE_annotations=11;tptp_v7_0_0_0Parser.RULE_formula_role=12;tptp_v7_0_0_0Parser.RULE_thf_formula=13;tptp_v7_0_0_0Parser.RULE_thf_logic_formula=14;tptp_v7_0_0_0Parser.RULE_thf_binary_formula=15;tptp_v7_0_0_0Parser.RULE_thf_binary_pair=16;tptp_v7_0_0_0Parser.RULE_thf_binary_tuple=17;tptp_v7_0_0_0Parser.RULE_thf_or_formula=18;tptp_v7_0_0_0Parser.RULE_thf_and_formula=19;tptp_v7_0_0_0Parser.RULE_thf_apply_formula=20;tptp_v7_0_0_0Parser.RULE_thf_unitary_formula=21;tptp_v7_0_0_0Parser.RULE_thf_quantified_formula=22;tptp_v7_0_0_0Parser.RULE_thf_quantification=23;tptp_v7_0_0_0Parser.RULE_thf_variable_list=24;tptp_v7_0_0_0Parser.RULE_thf_variable=25;tptp_v7_0_0_0Parser.RULE_thf_typed_variable=26;tptp_v7_0_0_0Parser.RULE_thf_unary_formula=27;tptp_v7_0_0_0Parser.RULE_thf_atom=28;tptp_v7_0_0_0Parser.RULE_thf_function=29;tptp_v7_0_0_0Parser.RULE_thf_conn_term=30;tptp_v7_0_0_0Parser.RULE_thf_conditional=31;tptp_v7_0_0_0Parser.RULE_thf_let=32;tptp_v7_0_0_0Parser.RULE_thf_arguments=33;tptp_v7_0_0_0Parser.RULE_thf_type_formula=34;tptp_v7_0_0_0Parser.RULE_thf_typeable_formula=35;tptp_v7_0_0_0Parser.RULE_thf_subtype=36;tptp_v7_0_0_0Parser.RULE_thf_top_level_type=37;tptp_v7_0_0_0Parser.RULE_thf_unitary_type=38;tptp_v7_0_0_0Parser.RULE_thf_apply_type=39;tptp_v7_0_0_0Parser.RULE_thf_binary_type=40;tptp_v7_0_0_0Parser.RULE_thf_mapping_type=41;tptp_v7_0_0_0Parser.RULE_thf_xprod_type=42;tptp_v7_0_0_0Parser.RULE_thf_union_type=43;tptp_v7_0_0_0Parser.RULE_thf_sequent=44;tptp_v7_0_0_0Parser.RULE_thf_tuple=45;tptp_v7_0_0_0Parser.RULE_thf_formula_list=46;tptp_v7_0_0_0Parser.RULE_tfx_formula=47;tptp_v7_0_0_0Parser.RULE_tfx_logic_formula=48;tptp_v7_0_0_0Parser.RULE_tff_formula=49;tptp_v7_0_0_0Parser.RULE_tff_logic_formula=50;tptp_v7_0_0_0Parser.RULE_tff_binary_formula=51;tptp_v7_0_0_0Parser.RULE_tff_binary_nonassoc=52;tptp_v7_0_0_0Parser.RULE_tff_binary_assoc=53;tptp_v7_0_0_0Parser.RULE_tff_or_formula=54;tptp_v7_0_0_0Parser.RULE_tff_and_formula=55;tptp_v7_0_0_0Parser.RULE_tff_unitary_formula=56;tptp_v7_0_0_0Parser.RULE_tff_quantified_formula=57;tptp_v7_0_0_0Parser.RULE_tff_variable_list=58;tptp_v7_0_0_0Parser.RULE_tff_variable=59;tptp_v7_0_0_0Parser.RULE_tff_typed_variable=60;tptp_v7_0_0_0Parser.RULE_tff_unary_formula=61;tptp_v7_0_0_0Parser.RULE_tff_atomic_formula=62;tptp_v7_0_0_0Parser.RULE_tff_conditional=63;tptp_v7_0_0_0Parser.RULE_tff_let=64;tptp_v7_0_0_0Parser.RULE_tff_let_term_defns=65;tptp_v7_0_0_0Parser.RULE_tff_let_term_list=66;tptp_v7_0_0_0Parser.RULE_tff_let_term_defn=67;tptp_v7_0_0_0Parser.RULE_tff_let_term_binding=68;tptp_v7_0_0_0Parser.RULE_tff_let_formula_defns=69;tptp_v7_0_0_0Parser.RULE_tff_let_formula_list=70;tptp_v7_0_0_0Parser.RULE_tff_let_formula_defn=71;tptp_v7_0_0_0Parser.RULE_tff_let_formula_binding=72;tptp_v7_0_0_0Parser.RULE_tff_sequent=73;tptp_v7_0_0_0Parser.RULE_tff_formula_tuple=74;tptp_v7_0_0_0Parser.RULE_tff_formula_tuple_list=75;tptp_v7_0_0_0Parser.RULE_tff_typed_atom=76;tptp_v7_0_0_0Parser.RULE_tff_subtype=77;tptp_v7_0_0_0Parser.RULE_tff_top_level_type=78;tptp_v7_0_0_0Parser.RULE_tf1_quantified_type=79;tptp_v7_0_0_0Parser.RULE_tff_monotype=80;tptp_v7_0_0_0Parser.RULE_tff_unitary_type=81;tptp_v7_0_0_0Parser.RULE_tff_atomic_type=82;tptp_v7_0_0_0Parser.RULE_tff_type_arguments=83;tptp_v7_0_0_0Parser.RULE_tff_mapping_type=84;tptp_v7_0_0_0Parser.RULE_tff_xprod_type=85;tptp_v7_0_0_0Parser.RULE_tcf_formula=86;tptp_v7_0_0_0Parser.RULE_tcf_logic_formula=87;tptp_v7_0_0_0Parser.RULE_tcf_quantified_formula=88;tptp_v7_0_0_0Parser.RULE_fof_formula=89;tptp_v7_0_0_0Parser.RULE_fof_logic_formula=90;tptp_v7_0_0_0Parser.RULE_fof_binary_formula=91;tptp_v7_0_0_0Parser.RULE_fof_binary_nonassoc=92;tptp_v7_0_0_0Parser.RULE_fof_binary_assoc=93;tptp_v7_0_0_0Parser.RULE_fof_or_formula=94;tptp_v7_0_0_0Parser.RULE_fof_and_formula=95;tptp_v7_0_0_0Parser.RULE_fof_unitary_formula=96;tptp_v7_0_0_0Parser.RULE_fof_quantified_formula=97;tptp_v7_0_0_0Parser.RULE_fof_variable_list=98;tptp_v7_0_0_0Parser.RULE_fof_unary_formula=99;tptp_v7_0_0_0Parser.RULE_fof_infix_unary=100;tptp_v7_0_0_0Parser.RULE_fof_atomic_formula=101;tptp_v7_0_0_0Parser.RULE_fof_plain_atomic_formula=102;tptp_v7_0_0_0Parser.RULE_fof_defined_atomic_formula=103;tptp_v7_0_0_0Parser.RULE_fof_defined_plain_formula=104;tptp_v7_0_0_0Parser.RULE_fof_defined_infix_formula=105;tptp_v7_0_0_0Parser.RULE_fof_system_atomic_formula=106;tptp_v7_0_0_0Parser.RULE_fof_plain_term=107;tptp_v7_0_0_0Parser.RULE_fof_defined_term=108;tptp_v7_0_0_0Parser.RULE_fof_defined_atomic_term=109;tptp_v7_0_0_0Parser.RULE_fof_defined_plain_term=110;tptp_v7_0_0_0Parser.RULE_fof_system_term=111;tptp_v7_0_0_0Parser.RULE_fof_arguments=112;tptp_v7_0_0_0Parser.RULE_fof_term=113;tptp_v7_0_0_0Parser.RULE_fof_function_term=114;tptp_v7_0_0_0Parser.RULE_tff_conditional_term=115;tptp_v7_0_0_0Parser.RULE_tff_let_term=116;tptp_v7_0_0_0Parser.RULE_tff_tuple_term=117;tptp_v7_0_0_0Parser.RULE_fof_sequent=118;tptp_v7_0_0_0Parser.RULE_fof_formula_tuple=119;tptp_v7_0_0_0Parser.RULE_fof_formula_tuple_list=120;tptp_v7_0_0_0Parser.RULE_cnf_formula=121;tptp_v7_0_0_0Parser.RULE_cnf_disjunction=122;tptp_v7_0_0_0Parser.RULE_cnf_literal=123;tptp_v7_0_0_0Parser.RULE_thf_quantifier=124;tptp_v7_0_0_0Parser.RULE_th0_quantifier=125;tptp_v7_0_0_0Parser.RULE_th1_quantifier=126;tptp_v7_0_0_0Parser.RULE_thf_pair_connective=127;tptp_v7_0_0_0Parser.RULE_thf_unary_connective=128;tptp_v7_0_0_0Parser.RULE_th1_unary_connective=129;tptp_v7_0_0_0Parser.RULE_tff_pair_connective=130;tptp_v7_0_0_0Parser.RULE_fof_quantifier=131;tptp_v7_0_0_0Parser.RULE_binary_connective=132;tptp_v7_0_0_0Parser.RULE_assoc_connective=133;tptp_v7_0_0_0Parser.RULE_unary_connective=134;tptp_v7_0_0_0Parser.RULE_type_constant=135;tptp_v7_0_0_0Parser.RULE_type_functor=136;tptp_v7_0_0_0Parser.RULE_defined_type=137;tptp_v7_0_0_0Parser.RULE_system_type=138;tptp_v7_0_0_0Parser.RULE_atom=139;tptp_v7_0_0_0Parser.RULE_untyped_atom=140;tptp_v7_0_0_0Parser.RULE_defined_proposition=141;tptp_v7_0_0_0Parser.RULE_defined_predicate=142;tptp_v7_0_0_0Parser.RULE_defined_infix_pred=143;tptp_v7_0_0_0Parser.RULE_constant=144;tptp_v7_0_0_0Parser.RULE_functor=145;tptp_v7_0_0_0Parser.RULE_system_constant=146;tptp_v7_0_0_0Parser.RULE_system_functor=147;tptp_v7_0_0_0Parser.RULE_defined_constant=148;tptp_v7_0_0_0Parser.RULE_defined_functor=149;tptp_v7_0_0_0Parser.RULE_defined_term=150;tptp_v7_0_0_0Parser.RULE_variable=151;tptp_v7_0_0_0Parser.RULE_source=152;tptp_v7_0_0_0Parser.RULE_sources=153;tptp_v7_0_0_0Parser.RULE_dag_source=154;tptp_v7_0_0_0Parser.RULE_inference_record=155;tptp_v7_0_0_0Parser.RULE_inference_rule=156;tptp_v7_0_0_0Parser.RULE_inference_parents=157;tptp_v7_0_0_0Parser.RULE_parent_list=158;tptp_v7_0_0_0Parser.RULE_parent_info=159;tptp_v7_0_0_0Parser.RULE_parent_details=160;tptp_v7_0_0_0Parser.RULE_internal_source=161;tptp_v7_0_0_0Parser.RULE_intro_type=162;tptp_v7_0_0_0Parser.RULE_external_source=163;tptp_v7_0_0_0Parser.RULE_file_source=164;tptp_v7_0_0_0Parser.RULE_file_info=165;tptp_v7_0_0_0Parser.RULE_theory=166;tptp_v7_0_0_0Parser.RULE_theory_name=167;tptp_v7_0_0_0Parser.RULE_creator_source=168;tptp_v7_0_0_0Parser.RULE_creator_name=169;tptp_v7_0_0_0Parser.RULE_optional_info=170;tptp_v7_0_0_0Parser.RULE_useful_info=171;tptp_v7_0_0_0Parser.RULE_info_items=172;tptp_v7_0_0_0Parser.RULE_info_item=173;tptp_v7_0_0_0Parser.RULE_formula_item=174;tptp_v7_0_0_0Parser.RULE_description_item=175;tptp_v7_0_0_0Parser.RULE_iquote_item=176;tptp_v7_0_0_0Parser.RULE_inference_item=177;tptp_v7_0_0_0Parser.RULE_inference_status=178;tptp_v7_0_0_0Parser.RULE_status_value=179;tptp_v7_0_0_0Parser.RULE_inference_info=180;tptp_v7_0_0_0Parser.RULE_assumptions_record=181;tptp_v7_0_0_0Parser.RULE_refutation=182;tptp_v7_0_0_0Parser.RULE_new_symbol_record=183;tptp_v7_0_0_0Parser.RULE_new_symbol_list=184;tptp_v7_0_0_0Parser.RULE_principal_symbol=185;tptp_v7_0_0_0Parser.RULE_include=186;tptp_v7_0_0_0Parser.RULE_formula_selection=187;tptp_v7_0_0_0Parser.RULE_name_list=188;tptp_v7_0_0_0Parser.RULE_general_term=189;tptp_v7_0_0_0Parser.RULE_general_data=190;tptp_v7_0_0_0Parser.RULE_general_function=191;tptp_v7_0_0_0Parser.RULE_formula_data=192;tptp_v7_0_0_0Parser.RULE_general_list=193;tptp_v7_0_0_0Parser.RULE_general_terms=194;tptp_v7_0_0_0Parser.RULE_name=195;tptp_v7_0_0_0Parser.RULE_atomic_word=196;tptp_v7_0_0_0Parser.RULE_atomic_defined_word=197;tptp_v7_0_0_0Parser.RULE_atomic_system_word=198;tptp_v7_0_0_0Parser.RULE_number=199;tptp_v7_0_0_0Parser.RULE_file_name=200;var Tptp_fileContext=/*#__PURE__*/function(_antlr4$ParserRuleCon){_inherits(Tptp_fileContext,_antlr4$ParserRuleCon);var _super2=_createSuper(Tptp_fileContext);function Tptp_fileContext(parser,parent,invokingState){var _this2;_classCallCheck(this,Tptp_fileContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this2=_super2.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this2),\"tptp_input\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tptp_inputContext);}else{return this.getTypedRuleContext(Tptp_inputContext,i);}});_this2.parser=parser;_this2.ruleIndex=tptp_v7_0_0_0Parser.RULE_tptp_file;return _this2;}_createClass(Tptp_fileContext,[{key:\"EOF\",value:function EOF(){return this.getToken(tptp_v7_0_0_0Parser.EOF,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTptp_file(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTptp_file(this);}}}]);return Tptp_fileContext;}(_antlr[\"default\"].ParserRuleContext);var Tptp_inputContext=/*#__PURE__*/function(_antlr4$ParserRuleCon2){_inherits(Tptp_inputContext,_antlr4$ParserRuleCon2);var _super3=_createSuper(Tptp_inputContext);function Tptp_inputContext(parser,parent,invokingState){var _this3;_classCallCheck(this,Tptp_inputContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this3=_super3.call(this,parent,invokingState);_this3.parser=parser;_this3.ruleIndex=tptp_v7_0_0_0Parser.RULE_tptp_input;return _this3;}_createClass(Tptp_inputContext,[{key:\"annotated_formula\",value:function annotated_formula(){return this.getTypedRuleContext(Annotated_formulaContext,0);}},{key:\"include\",value:function include(){return this.getTypedRuleContext(IncludeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTptp_input(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTptp_input(this);}}}]);return Tptp_inputContext;}(_antlr[\"default\"].ParserRuleContext);var Annotated_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon3){_inherits(Annotated_formulaContext,_antlr4$ParserRuleCon3);var _super4=_createSuper(Annotated_formulaContext);function Annotated_formulaContext(parser,parent,invokingState){var _this4;_classCallCheck(this,Annotated_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this4=_super4.call(this,parent,invokingState);_this4.parser=parser;_this4.ruleIndex=tptp_v7_0_0_0Parser.RULE_annotated_formula;return _this4;}_createClass(Annotated_formulaContext,[{key:\"thf_annotated\",value:function thf_annotated(){return this.getTypedRuleContext(Thf_annotatedContext,0);}},{key:\"tfx_annotated\",value:function tfx_annotated(){return this.getTypedRuleContext(Tfx_annotatedContext,0);}},{key:\"tff_annotated\",value:function tff_annotated(){return this.getTypedRuleContext(Tff_annotatedContext,0);}},{key:\"tcf_annotated\",value:function tcf_annotated(){return this.getTypedRuleContext(Tcf_annotatedContext,0);}},{key:\"fof_annotated\",value:function fof_annotated(){return this.getTypedRuleContext(Fof_annotatedContext,0);}},{key:\"cnf_annotated\",value:function cnf_annotated(){return this.getTypedRuleContext(Cnf_annotatedContext,0);}},{key:\"tpi_annotated\",value:function tpi_annotated(){return this.getTypedRuleContext(Tpi_annotatedContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAnnotated_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAnnotated_formula(this);}}}]);return Annotated_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tpi_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon4){_inherits(Tpi_annotatedContext,_antlr4$ParserRuleCon4);var _super5=_createSuper(Tpi_annotatedContext);function Tpi_annotatedContext(parser,parent,invokingState){var _this5;_classCallCheck(this,Tpi_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this5=_super5.call(this,parent,invokingState);_this5.parser=parser;_this5.ruleIndex=tptp_v7_0_0_0Parser.RULE_tpi_annotated;return _this5;}_createClass(Tpi_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"tpi_formula\",value:function tpi_formula(){return this.getTypedRuleContext(Tpi_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTpi_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTpi_annotated(this);}}}]);return Tpi_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Tpi_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon5){_inherits(Tpi_formulaContext,_antlr4$ParserRuleCon5);var _super6=_createSuper(Tpi_formulaContext);function Tpi_formulaContext(parser,parent,invokingState){var _this6;_classCallCheck(this,Tpi_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this6=_super6.call(this,parent,invokingState);_this6.parser=parser;_this6.ruleIndex=tptp_v7_0_0_0Parser.RULE_tpi_formula;return _this6;}_createClass(Tpi_formulaContext,[{key:\"fof_formula\",value:function fof_formula(){return this.getTypedRuleContext(Fof_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTpi_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTpi_formula(this);}}}]);return Tpi_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon6){_inherits(Thf_annotatedContext,_antlr4$ParserRuleCon6);var _super7=_createSuper(Thf_annotatedContext);function Thf_annotatedContext(parser,parent,invokingState){var _this7;_classCallCheck(this,Thf_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this7=_super7.call(this,parent,invokingState);_this7.parser=parser;_this7.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_annotated;return _this7;}_createClass(Thf_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"thf_formula\",value:function thf_formula(){return this.getTypedRuleContext(Thf_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_annotated(this);}}}]);return Thf_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Tfx_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon7){_inherits(Tfx_annotatedContext,_antlr4$ParserRuleCon7);var _super8=_createSuper(Tfx_annotatedContext);function Tfx_annotatedContext(parser,parent,invokingState){var _this8;_classCallCheck(this,Tfx_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this8=_super8.call(this,parent,invokingState);_this8.parser=parser;_this8.ruleIndex=tptp_v7_0_0_0Parser.RULE_tfx_annotated;return _this8;}_createClass(Tfx_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"tfx_formula\",value:function tfx_formula(){return this.getTypedRuleContext(Tfx_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTfx_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTfx_annotated(this);}}}]);return Tfx_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon8){_inherits(Tff_annotatedContext,_antlr4$ParserRuleCon8);var _super9=_createSuper(Tff_annotatedContext);function Tff_annotatedContext(parser,parent,invokingState){var _this9;_classCallCheck(this,Tff_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this9=_super9.call(this,parent,invokingState);_this9.parser=parser;_this9.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_annotated;return _this9;}_createClass(Tff_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"tff_formula\",value:function tff_formula(){return this.getTypedRuleContext(Tff_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_annotated(this);}}}]);return Tff_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon9){_inherits(Tcf_annotatedContext,_antlr4$ParserRuleCon9);var _super10=_createSuper(Tcf_annotatedContext);function Tcf_annotatedContext(parser,parent,invokingState){var _this10;_classCallCheck(this,Tcf_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this10=_super10.call(this,parent,invokingState);_this10.parser=parser;_this10.ruleIndex=tptp_v7_0_0_0Parser.RULE_tcf_annotated;return _this10;}_createClass(Tcf_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"tcf_formula\",value:function tcf_formula(){return this.getTypedRuleContext(Tcf_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTcf_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTcf_annotated(this);}}}]);return Tcf_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon10){_inherits(Fof_annotatedContext,_antlr4$ParserRuleCon10);var _super11=_createSuper(Fof_annotatedContext);function Fof_annotatedContext(parser,parent,invokingState){var _this11;_classCallCheck(this,Fof_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this11=_super11.call(this,parent,invokingState);_this11.parser=parser;_this11.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_annotated;return _this11;}_createClass(Fof_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"fof_formula\",value:function fof_formula(){return this.getTypedRuleContext(Fof_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_annotated(this);}}}]);return Fof_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon11){_inherits(Cnf_annotatedContext,_antlr4$ParserRuleCon11);var _super12=_createSuper(Cnf_annotatedContext);function Cnf_annotatedContext(parser,parent,invokingState){var _this12;_classCallCheck(this,Cnf_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this12=_super12.call(this,parent,invokingState);_this12.parser=parser;_this12.ruleIndex=tptp_v7_0_0_0Parser.RULE_cnf_annotated;return _this12;}_createClass(Cnf_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"cnf_formula\",value:function cnf_formula(){return this.getTypedRuleContext(Cnf_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterCnf_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitCnf_annotated(this);}}}]);return Cnf_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var AnnotationsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon12){_inherits(AnnotationsContext,_antlr4$ParserRuleCon12);var _super13=_createSuper(AnnotationsContext);function AnnotationsContext(parser,parent,invokingState){var _this13;_classCallCheck(this,AnnotationsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this13=_super13.call(this,parent,invokingState);_this13.parser=parser;_this13.ruleIndex=tptp_v7_0_0_0Parser.RULE_annotations;return _this13;}_createClass(AnnotationsContext,[{key:\"source\",value:function source(){return this.getTypedRuleContext(SourceContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAnnotations(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAnnotations(this);}}}]);return AnnotationsContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_roleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon13){_inherits(Formula_roleContext,_antlr4$ParserRuleCon13);var _super14=_createSuper(Formula_roleContext);function Formula_roleContext(parser,parent,invokingState){var _this14;_classCallCheck(this,Formula_roleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this14=_super14.call(this,parent,invokingState);_this14.parser=parser;_this14.ruleIndex=tptp_v7_0_0_0Parser.RULE_formula_role;return _this14;}_createClass(Formula_roleContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(tptp_v7_0_0_0Parser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFormula_role(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFormula_role(this);}}}]);return Formula_roleContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon14){_inherits(Thf_formulaContext,_antlr4$ParserRuleCon14);var _super15=_createSuper(Thf_formulaContext);function Thf_formulaContext(parser,parent,invokingState){var _this15;_classCallCheck(this,Thf_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this15=_super15.call(this,parent,invokingState);_this15.parser=parser;_this15.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_formula;return _this15;}_createClass(Thf_formulaContext,[{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"thf_sequent\",value:function thf_sequent(){return this.getTypedRuleContext(Thf_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_formula(this);}}}]);return Thf_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon15){_inherits(Thf_logic_formulaContext,_antlr4$ParserRuleCon15);var _super16=_createSuper(Thf_logic_formulaContext);function Thf_logic_formulaContext(parser,parent,invokingState){var _this16;_classCallCheck(this,Thf_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this16=_super16.call(this,parent,invokingState);_this16.parser=parser;_this16.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_logic_formula;return _this16;}_createClass(Thf_logic_formulaContext,[{key:\"thf_binary_formula\",value:function thf_binary_formula(){return this.getTypedRuleContext(Thf_binary_formulaContext,0);}},{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"thf_type_formula\",value:function thf_type_formula(){return this.getTypedRuleContext(Thf_type_formulaContext,0);}},{key:\"thf_subtype\",value:function thf_subtype(){return this.getTypedRuleContext(Thf_subtypeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_logic_formula(this);}}}]);return Thf_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon16){_inherits(Thf_binary_formulaContext,_antlr4$ParserRuleCon16);var _super17=_createSuper(Thf_binary_formulaContext);function Thf_binary_formulaContext(parser,parent,invokingState){var _this17;_classCallCheck(this,Thf_binary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this17=_super17.call(this,parent,invokingState);_this17.parser=parser;_this17.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_binary_formula;return _this17;}_createClass(Thf_binary_formulaContext,[{key:\"thf_binary_pair\",value:function thf_binary_pair(){return this.getTypedRuleContext(Thf_binary_pairContext,0);}},{key:\"thf_binary_tuple\",value:function thf_binary_tuple(){return this.getTypedRuleContext(Thf_binary_tupleContext,0);}},{key:\"thf_binary_type\",value:function thf_binary_type(){return this.getTypedRuleContext(Thf_binary_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_binary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_binary_formula(this);}}}]);return Thf_binary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_pairContext=/*#__PURE__*/function(_antlr4$ParserRuleCon17){_inherits(Thf_binary_pairContext,_antlr4$ParserRuleCon17);var _super18=_createSuper(Thf_binary_pairContext);function Thf_binary_pairContext(parser,parent,invokingState){var _this18;_classCallCheck(this,Thf_binary_pairContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this18=_super18.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this18),\"thf_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_formulaContext);}else{return this.getTypedRuleContext(Thf_unitary_formulaContext,i);}});_this18.parser=parser;_this18.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_binary_pair;return _this18;}_createClass(Thf_binary_pairContext,[{key:\"thf_pair_connective\",value:function thf_pair_connective(){return this.getTypedRuleContext(Thf_pair_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_binary_pair(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_binary_pair(this);}}}]);return Thf_binary_pairContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_tupleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon18){_inherits(Thf_binary_tupleContext,_antlr4$ParserRuleCon18);var _super19=_createSuper(Thf_binary_tupleContext);function Thf_binary_tupleContext(parser,parent,invokingState){var _this19;_classCallCheck(this,Thf_binary_tupleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this19=_super19.call(this,parent,invokingState);_this19.parser=parser;_this19.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_binary_tuple;return _this19;}_createClass(Thf_binary_tupleContext,[{key:\"thf_or_formula\",value:function thf_or_formula(){return this.getTypedRuleContext(Thf_or_formulaContext,0);}},{key:\"thf_and_formula\",value:function thf_and_formula(){return this.getTypedRuleContext(Thf_and_formulaContext,0);}},{key:\"thf_apply_formula\",value:function thf_apply_formula(){return this.getTypedRuleContext(Thf_apply_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_binary_tuple(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_binary_tuple(this);}}}]);return Thf_binary_tupleContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_or_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon19){_inherits(Thf_or_formulaContext,_antlr4$ParserRuleCon19);var _super20=_createSuper(Thf_or_formulaContext);function Thf_or_formulaContext(parser,parent,invokingState){var _this20;_classCallCheck(this,Thf_or_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this20=_super20.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this20),\"thf_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_formulaContext);}else{return this.getTypedRuleContext(Thf_unitary_formulaContext,i);}});_this20.parser=parser;_this20.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_or_formula;return _this20;}_createClass(Thf_or_formulaContext,[{key:\"Or\",value:function Or(){return this.getToken(tptp_v7_0_0_0Parser.Or,0);}},{key:\"thf_or_formula\",value:function thf_or_formula(){return this.getTypedRuleContext(Thf_or_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_or_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_or_formula(this);}}}]);return Thf_or_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_and_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon20){_inherits(Thf_and_formulaContext,_antlr4$ParserRuleCon20);var _super21=_createSuper(Thf_and_formulaContext);function Thf_and_formulaContext(parser,parent,invokingState){var _this21;_classCallCheck(this,Thf_and_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this21=_super21.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this21),\"thf_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_formulaContext);}else{return this.getTypedRuleContext(Thf_unitary_formulaContext,i);}});_this21.parser=parser;_this21.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_and_formula;return _this21;}_createClass(Thf_and_formulaContext,[{key:\"And\",value:function And(){return this.getToken(tptp_v7_0_0_0Parser.And,0);}},{key:\"thf_and_formula\",value:function thf_and_formula(){return this.getTypedRuleContext(Thf_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_and_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_and_formula(this);}}}]);return Thf_and_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_apply_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon21){_inherits(Thf_apply_formulaContext,_antlr4$ParserRuleCon21);var _super22=_createSuper(Thf_apply_formulaContext);function Thf_apply_formulaContext(parser,parent,invokingState){var _this22;_classCallCheck(this,Thf_apply_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this22=_super22.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this22),\"thf_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_formulaContext);}else{return this.getTypedRuleContext(Thf_unitary_formulaContext,i);}});_this22.parser=parser;_this22.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_apply_formula;return _this22;}_createClass(Thf_apply_formulaContext,[{key:\"App\",value:function App(){return this.getToken(tptp_v7_0_0_0Parser.App,0);}},{key:\"thf_apply_formula\",value:function thf_apply_formula(){return this.getTypedRuleContext(Thf_apply_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_apply_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_apply_formula(this);}}}]);return Thf_apply_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unitary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon22){_inherits(Thf_unitary_formulaContext,_antlr4$ParserRuleCon22);var _super23=_createSuper(Thf_unitary_formulaContext);function Thf_unitary_formulaContext(parser,parent,invokingState){var _this23;_classCallCheck(this,Thf_unitary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this23=_super23.call(this,parent,invokingState);_this23.parser=parser;_this23.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_unitary_formula;return _this23;}_createClass(Thf_unitary_formulaContext,[{key:\"thf_quantified_formula\",value:function thf_quantified_formula(){return this.getTypedRuleContext(Thf_quantified_formulaContext,0);}},{key:\"thf_unary_formula\",value:function thf_unary_formula(){return this.getTypedRuleContext(Thf_unary_formulaContext,0);}},{key:\"thf_atom\",value:function thf_atom(){return this.getTypedRuleContext(Thf_atomContext,0);}},{key:\"thf_conditional\",value:function thf_conditional(){return this.getTypedRuleContext(Thf_conditionalContext,0);}},{key:\"thf_let\",value:function thf_let(){return this.getTypedRuleContext(Thf_letContext,0);}},{key:\"thf_tuple\",value:function thf_tuple(){return this.getTypedRuleContext(Thf_tupleContext,0);}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_unitary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_unitary_formula(this);}}}]);return Thf_unitary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon23){_inherits(Thf_quantified_formulaContext,_antlr4$ParserRuleCon23);var _super24=_createSuper(Thf_quantified_formulaContext);function Thf_quantified_formulaContext(parser,parent,invokingState){var _this24;_classCallCheck(this,Thf_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this24=_super24.call(this,parent,invokingState);_this24.parser=parser;_this24.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_quantified_formula;return _this24;}_createClass(Thf_quantified_formulaContext,[{key:\"thf_quantification\",value:function thf_quantification(){return this.getTypedRuleContext(Thf_quantificationContext,0);}},{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_quantified_formula(this);}}}]);return Thf_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_quantificationContext=/*#__PURE__*/function(_antlr4$ParserRuleCon24){_inherits(Thf_quantificationContext,_antlr4$ParserRuleCon24);var _super25=_createSuper(Thf_quantificationContext);function Thf_quantificationContext(parser,parent,invokingState){var _this25;_classCallCheck(this,Thf_quantificationContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this25=_super25.call(this,parent,invokingState);_this25.parser=parser;_this25.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_quantification;return _this25;}_createClass(Thf_quantificationContext,[{key:\"thf_quantifier\",value:function thf_quantifier(){return this.getTypedRuleContext(Thf_quantifierContext,0);}},{key:\"thf_variable_list\",value:function thf_variable_list(){return this.getTypedRuleContext(Thf_variable_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_quantification(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_quantification(this);}}}]);return Thf_quantificationContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_variable_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon25){_inherits(Thf_variable_listContext,_antlr4$ParserRuleCon25);var _super26=_createSuper(Thf_variable_listContext);function Thf_variable_listContext(parser,parent,invokingState){var _this26;_classCallCheck(this,Thf_variable_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this26=_super26.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this26),\"thf_variable\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_variableContext);}else{return this.getTypedRuleContext(Thf_variableContext,i);}});_this26.parser=parser;_this26.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_variable_list;return _this26;}_createClass(Thf_variable_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_variable_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_variable_list(this);}}}]);return Thf_variable_listContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon26){_inherits(Thf_variableContext,_antlr4$ParserRuleCon26);var _super27=_createSuper(Thf_variableContext);function Thf_variableContext(parser,parent,invokingState){var _this27;_classCallCheck(this,Thf_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this27=_super27.call(this,parent,invokingState);_this27.parser=parser;_this27.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_variable;return _this27;}_createClass(Thf_variableContext,[{key:\"thf_typed_variable\",value:function thf_typed_variable(){return this.getTypedRuleContext(Thf_typed_variableContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_variable(this);}}}]);return Thf_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_typed_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon27){_inherits(Thf_typed_variableContext,_antlr4$ParserRuleCon27);var _super28=_createSuper(Thf_typed_variableContext);function Thf_typed_variableContext(parser,parent,invokingState){var _this28;_classCallCheck(this,Thf_typed_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this28=_super28.call(this,parent,invokingState);_this28.parser=parser;_this28.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_typed_variable;return _this28;}_createClass(Thf_typed_variableContext,[{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"thf_top_level_type\",value:function thf_top_level_type(){return this.getTypedRuleContext(Thf_top_level_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_typed_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_typed_variable(this);}}}]);return Thf_typed_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon28){_inherits(Thf_unary_formulaContext,_antlr4$ParserRuleCon28);var _super29=_createSuper(Thf_unary_formulaContext);function Thf_unary_formulaContext(parser,parent,invokingState){var _this29;_classCallCheck(this,Thf_unary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this29=_super29.call(this,parent,invokingState);_this29.parser=parser;_this29.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_unary_formula;return _this29;}_createClass(Thf_unary_formulaContext,[{key:\"thf_unary_connective\",value:function thf_unary_connective(){return this.getTypedRuleContext(Thf_unary_connectiveContext,0);}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_unary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_unary_formula(this);}}}]);return Thf_unary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_atomContext=/*#__PURE__*/function(_antlr4$ParserRuleCon29){_inherits(Thf_atomContext,_antlr4$ParserRuleCon29);var _super30=_createSuper(Thf_atomContext);function Thf_atomContext(parser,parent,invokingState){var _this30;_classCallCheck(this,Thf_atomContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this30=_super30.call(this,parent,invokingState);_this30.parser=parser;_this30.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_atom;return _this30;}_createClass(Thf_atomContext,[{key:\"thf_function\",value:function thf_function(){return this.getTypedRuleContext(Thf_functionContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"defined_term\",value:function defined_term(){return this.getTypedRuleContext(Defined_termContext,0);}},{key:\"thf_conn_term\",value:function thf_conn_term(){return this.getTypedRuleContext(Thf_conn_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_atom(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_atom(this);}}}]);return Thf_atomContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_functionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon30){_inherits(Thf_functionContext,_antlr4$ParserRuleCon30);var _super31=_createSuper(Thf_functionContext);function Thf_functionContext(parser,parent,invokingState){var _this31;_classCallCheck(this,Thf_functionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this31=_super31.call(this,parent,invokingState);_this31.parser=parser;_this31.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_function;return _this31;}_createClass(Thf_functionContext,[{key:\"atom\",value:function atom(){return this.getTypedRuleContext(AtomContext,0);}},{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"thf_arguments\",value:function thf_arguments(){return this.getTypedRuleContext(Thf_argumentsContext,0);}},{key:\"defined_functor\",value:function defined_functor(){return this.getTypedRuleContext(Defined_functorContext,0);}},{key:\"system_functor\",value:function system_functor(){return this.getTypedRuleContext(System_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_function(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_function(this);}}}]);return Thf_functionContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_conn_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon31){_inherits(Thf_conn_termContext,_antlr4$ParserRuleCon31);var _super32=_createSuper(Thf_conn_termContext);function Thf_conn_termContext(parser,parent,invokingState){var _this32;_classCallCheck(this,Thf_conn_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this32=_super32.call(this,parent,invokingState);_this32.parser=parser;_this32.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_conn_term;return _this32;}_createClass(Thf_conn_termContext,[{key:\"thf_pair_connective\",value:function thf_pair_connective(){return this.getTypedRuleContext(Thf_pair_connectiveContext,0);}},{key:\"assoc_connective\",value:function assoc_connective(){return this.getTypedRuleContext(Assoc_connectiveContext,0);}},{key:\"thf_unary_connective\",value:function thf_unary_connective(){return this.getTypedRuleContext(Thf_unary_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_conn_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_conn_term(this);}}}]);return Thf_conn_termContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_conditionalContext=/*#__PURE__*/function(_antlr4$ParserRuleCon32){_inherits(Thf_conditionalContext,_antlr4$ParserRuleCon32);var _super33=_createSuper(Thf_conditionalContext);function Thf_conditionalContext(parser,parent,invokingState){var _this33;_classCallCheck(this,Thf_conditionalContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this33=_super33.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this33),\"thf_logic_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_logic_formulaContext);}else{return this.getTypedRuleContext(Thf_logic_formulaContext,i);}});_this33.parser=parser;_this33.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_conditional;return _this33;}_createClass(Thf_conditionalContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_conditional(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_conditional(this);}}}]);return Thf_conditionalContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_letContext=/*#__PURE__*/function(_antlr4$ParserRuleCon33){_inherits(Thf_letContext,_antlr4$ParserRuleCon33);var _super34=_createSuper(Thf_letContext);function Thf_letContext(parser,parent,invokingState){var _this34;_classCallCheck(this,Thf_letContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this34=_super34.call(this,parent,invokingState);_this34.parser=parser;_this34.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_let;return _this34;}_createClass(Thf_letContext,[{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"thf_formula\",value:function thf_formula(){return this.getTypedRuleContext(Thf_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_let(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_let(this);}}}]);return Thf_letContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_argumentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon34){_inherits(Thf_argumentsContext,_antlr4$ParserRuleCon34);var _super35=_createSuper(Thf_argumentsContext);function Thf_argumentsContext(parser,parent,invokingState){var _this35;_classCallCheck(this,Thf_argumentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this35=_super35.call(this,parent,invokingState);_this35.parser=parser;_this35.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_arguments;return _this35;}_createClass(Thf_argumentsContext,[{key:\"thf_formula_list\",value:function thf_formula_list(){return this.getTypedRuleContext(Thf_formula_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_arguments(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_arguments(this);}}}]);return Thf_argumentsContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_type_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon35){_inherits(Thf_type_formulaContext,_antlr4$ParserRuleCon35);var _super36=_createSuper(Thf_type_formulaContext);function Thf_type_formulaContext(parser,parent,invokingState){var _this36;_classCallCheck(this,Thf_type_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this36=_super36.call(this,parent,invokingState);_this36.parser=parser;_this36.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_type_formula;return _this36;}_createClass(Thf_type_formulaContext,[{key:\"thf_typeable_formula\",value:function thf_typeable_formula(){return this.getTypedRuleContext(Thf_typeable_formulaContext,0);}},{key:\"thf_top_level_type\",value:function thf_top_level_type(){return this.getTypedRuleContext(Thf_top_level_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_type_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_type_formula(this);}}}]);return Thf_type_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_typeable_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon36){_inherits(Thf_typeable_formulaContext,_antlr4$ParserRuleCon36);var _super37=_createSuper(Thf_typeable_formulaContext);function Thf_typeable_formulaContext(parser,parent,invokingState){var _this37;_classCallCheck(this,Thf_typeable_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this37=_super37.call(this,parent,invokingState);_this37.parser=parser;_this37.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_typeable_formula;return _this37;}_createClass(Thf_typeable_formulaContext,[{key:\"thf_atom\",value:function thf_atom(){return this.getTypedRuleContext(Thf_atomContext,0);}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_typeable_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_typeable_formula(this);}}}]);return Thf_typeable_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_subtypeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon37){_inherits(Thf_subtypeContext,_antlr4$ParserRuleCon37);var _super38=_createSuper(Thf_subtypeContext);function Thf_subtypeContext(parser,parent,invokingState){var _this38;_classCallCheck(this,Thf_subtypeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this38=_super38.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this38),\"thf_atom\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_atomContext);}else{return this.getTypedRuleContext(Thf_atomContext,i);}});_this38.parser=parser;_this38.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_subtype;return _this38;}_createClass(Thf_subtypeContext,[{key:\"Subtype_sign\",value:function Subtype_sign(){return this.getToken(tptp_v7_0_0_0Parser.Subtype_sign,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_subtype(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_subtype(this);}}}]);return Thf_subtypeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_top_level_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon38){_inherits(Thf_top_level_typeContext,_antlr4$ParserRuleCon38);var _super39=_createSuper(Thf_top_level_typeContext);function Thf_top_level_typeContext(parser,parent,invokingState){var _this39;_classCallCheck(this,Thf_top_level_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this39=_super39.call(this,parent,invokingState);_this39.parser=parser;_this39.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_top_level_type;return _this39;}_createClass(Thf_top_level_typeContext,[{key:\"thf_unitary_type\",value:function thf_unitary_type(){return this.getTypedRuleContext(Thf_unitary_typeContext,0);}},{key:\"thf_mapping_type\",value:function thf_mapping_type(){return this.getTypedRuleContext(Thf_mapping_typeContext,0);}},{key:\"thf_apply_type\",value:function thf_apply_type(){return this.getTypedRuleContext(Thf_apply_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_top_level_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_top_level_type(this);}}}]);return Thf_top_level_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unitary_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon39){_inherits(Thf_unitary_typeContext,_antlr4$ParserRuleCon39);var _super40=_createSuper(Thf_unitary_typeContext);function Thf_unitary_typeContext(parser,parent,invokingState){var _this40;_classCallCheck(this,Thf_unitary_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this40=_super40.call(this,parent,invokingState);_this40.parser=parser;_this40.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_unitary_type;return _this40;}_createClass(Thf_unitary_typeContext,[{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_unitary_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_unitary_type(this);}}}]);return Thf_unitary_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_apply_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon40){_inherits(Thf_apply_typeContext,_antlr4$ParserRuleCon40);var _super41=_createSuper(Thf_apply_typeContext);function Thf_apply_typeContext(parser,parent,invokingState){var _this41;_classCallCheck(this,Thf_apply_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this41=_super41.call(this,parent,invokingState);_this41.parser=parser;_this41.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_apply_type;return _this41;}_createClass(Thf_apply_typeContext,[{key:\"thf_apply_formula\",value:function thf_apply_formula(){return this.getTypedRuleContext(Thf_apply_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_apply_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_apply_type(this);}}}]);return Thf_apply_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon41){_inherits(Thf_binary_typeContext,_antlr4$ParserRuleCon41);var _super42=_createSuper(Thf_binary_typeContext);function Thf_binary_typeContext(parser,parent,invokingState){var _this42;_classCallCheck(this,Thf_binary_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this42=_super42.call(this,parent,invokingState);_this42.parser=parser;_this42.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_binary_type;return _this42;}_createClass(Thf_binary_typeContext,[{key:\"thf_mapping_type\",value:function thf_mapping_type(){return this.getTypedRuleContext(Thf_mapping_typeContext,0);}},{key:\"thf_xprod_type\",value:function thf_xprod_type(){return this.getTypedRuleContext(Thf_xprod_typeContext,0);}},{key:\"thf_union_type\",value:function thf_union_type(){return this.getTypedRuleContext(Thf_union_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_binary_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_binary_type(this);}}}]);return Thf_binary_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_mapping_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon42){_inherits(Thf_mapping_typeContext,_antlr4$ParserRuleCon42);var _super43=_createSuper(Thf_mapping_typeContext);function Thf_mapping_typeContext(parser,parent,invokingState){var _this43;_classCallCheck(this,Thf_mapping_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this43=_super43.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this43),\"thf_unitary_type\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_typeContext);}else{return this.getTypedRuleContext(Thf_unitary_typeContext,i);}});_this43.parser=parser;_this43.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_mapping_type;return _this43;}_createClass(Thf_mapping_typeContext,[{key:\"Arrow\",value:function Arrow(){return this.getToken(tptp_v7_0_0_0Parser.Arrow,0);}},{key:\"thf_mapping_type\",value:function thf_mapping_type(){return this.getTypedRuleContext(Thf_mapping_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_mapping_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_mapping_type(this);}}}]);return Thf_mapping_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_xprod_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon43){_inherits(Thf_xprod_typeContext,_antlr4$ParserRuleCon43);var _super44=_createSuper(Thf_xprod_typeContext);function Thf_xprod_typeContext(parser,parent,invokingState){var _this44;_classCallCheck(this,Thf_xprod_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this44=_super44.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this44),\"thf_unitary_type\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_typeContext);}else{return this.getTypedRuleContext(Thf_unitary_typeContext,i);}});_this44.parser=parser;_this44.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_xprod_type;return _this44;}_createClass(Thf_xprod_typeContext,[{key:\"Star\",value:function Star(){return this.getToken(tptp_v7_0_0_0Parser.Star,0);}},{key:\"thf_xprod_type\",value:function thf_xprod_type(){return this.getTypedRuleContext(Thf_xprod_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_xprod_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_xprod_type(this);}}}]);return Thf_xprod_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_union_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon44){_inherits(Thf_union_typeContext,_antlr4$ParserRuleCon44);var _super45=_createSuper(Thf_union_typeContext);function Thf_union_typeContext(parser,parent,invokingState){var _this45;_classCallCheck(this,Thf_union_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this45=_super45.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this45),\"thf_unitary_type\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_typeContext);}else{return this.getTypedRuleContext(Thf_unitary_typeContext,i);}});_this45.parser=parser;_this45.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_union_type;return _this45;}_createClass(Thf_union_typeContext,[{key:\"Plus\",value:function Plus(){return this.getToken(tptp_v7_0_0_0Parser.Plus,0);}},{key:\"thf_union_type\",value:function thf_union_type(){return this.getTypedRuleContext(Thf_union_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_union_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_union_type(this);}}}]);return Thf_union_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_sequentContext=/*#__PURE__*/function(_antlr4$ParserRuleCon45){_inherits(Thf_sequentContext,_antlr4$ParserRuleCon45);var _super46=_createSuper(Thf_sequentContext);function Thf_sequentContext(parser,parent,invokingState){var _this46;_classCallCheck(this,Thf_sequentContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this46=_super46.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this46),\"thf_tuple\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_tupleContext);}else{return this.getTypedRuleContext(Thf_tupleContext,i);}});_this46.parser=parser;_this46.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_sequent;return _this46;}_createClass(Thf_sequentContext,[{key:\"Gentzen_arrow\",value:function Gentzen_arrow(){return this.getToken(tptp_v7_0_0_0Parser.Gentzen_arrow,0);}},{key:\"thf_sequent\",value:function thf_sequent(){return this.getTypedRuleContext(Thf_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_sequent(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_sequent(this);}}}]);return Thf_sequentContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_tupleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon46){_inherits(Thf_tupleContext,_antlr4$ParserRuleCon46);var _super47=_createSuper(Thf_tupleContext);function Thf_tupleContext(parser,parent,invokingState){var _this47;_classCallCheck(this,Thf_tupleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this47=_super47.call(this,parent,invokingState);_this47.parser=parser;_this47.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_tuple;return _this47;}_createClass(Thf_tupleContext,[{key:\"thf_formula_list\",value:function thf_formula_list(){return this.getTypedRuleContext(Thf_formula_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_tuple(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_tuple(this);}}}]);return Thf_tupleContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_formula_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon47){_inherits(Thf_formula_listContext,_antlr4$ParserRuleCon47);var _super48=_createSuper(Thf_formula_listContext);function Thf_formula_listContext(parser,parent,invokingState){var _this48;_classCallCheck(this,Thf_formula_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this48=_super48.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this48),\"thf_logic_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_logic_formulaContext);}else{return this.getTypedRuleContext(Thf_logic_formulaContext,i);}});_this48.parser=parser;_this48.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_formula_list;return _this48;}_createClass(Thf_formula_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_formula_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_formula_list(this);}}}]);return Thf_formula_listContext;}(_antlr[\"default\"].ParserRuleContext);var Tfx_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon48){_inherits(Tfx_formulaContext,_antlr4$ParserRuleCon48);var _super49=_createSuper(Tfx_formulaContext);function Tfx_formulaContext(parser,parent,invokingState){var _this49;_classCallCheck(this,Tfx_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this49=_super49.call(this,parent,invokingState);_this49.parser=parser;_this49.ruleIndex=tptp_v7_0_0_0Parser.RULE_tfx_formula;return _this49;}_createClass(Tfx_formulaContext,[{key:\"tfx_logic_formula\",value:function tfx_logic_formula(){return this.getTypedRuleContext(Tfx_logic_formulaContext,0);}},{key:\"thf_sequent\",value:function thf_sequent(){return this.getTypedRuleContext(Thf_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTfx_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTfx_formula(this);}}}]);return Tfx_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tfx_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon49){_inherits(Tfx_logic_formulaContext,_antlr4$ParserRuleCon49);var _super50=_createSuper(Tfx_logic_formulaContext);function Tfx_logic_formulaContext(parser,parent,invokingState){var _this50;_classCallCheck(this,Tfx_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this50=_super50.call(this,parent,invokingState);_this50.parser=parser;_this50.ruleIndex=tptp_v7_0_0_0Parser.RULE_tfx_logic_formula;return _this50;}_createClass(Tfx_logic_formulaContext,[{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTfx_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTfx_logic_formula(this);}}}]);return Tfx_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon50){_inherits(Tff_formulaContext,_antlr4$ParserRuleCon50);var _super51=_createSuper(Tff_formulaContext);function Tff_formulaContext(parser,parent,invokingState){var _this51;_classCallCheck(this,Tff_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this51=_super51.call(this,parent,invokingState);_this51.parser=parser;_this51.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_formula;return _this51;}_createClass(Tff_formulaContext,[{key:\"tff_logic_formula\",value:function tff_logic_formula(){return this.getTypedRuleContext(Tff_logic_formulaContext,0);}},{key:\"tff_typed_atom\",value:function tff_typed_atom(){return this.getTypedRuleContext(Tff_typed_atomContext,0);}},{key:\"tff_sequent\",value:function tff_sequent(){return this.getTypedRuleContext(Tff_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_formula(this);}}}]);return Tff_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon51){_inherits(Tff_logic_formulaContext,_antlr4$ParserRuleCon51);var _super52=_createSuper(Tff_logic_formulaContext);function Tff_logic_formulaContext(parser,parent,invokingState){var _this52;_classCallCheck(this,Tff_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this52=_super52.call(this,parent,invokingState);_this52.parser=parser;_this52.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_logic_formula;return _this52;}_createClass(Tff_logic_formulaContext,[{key:\"tff_binary_formula\",value:function tff_binary_formula(){return this.getTypedRuleContext(Tff_binary_formulaContext,0);}},{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){return this.getTypedRuleContext(Tff_unitary_formulaContext,0);}},{key:\"tff_subtype\",value:function tff_subtype(){return this.getTypedRuleContext(Tff_subtypeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_logic_formula(this);}}}]);return Tff_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_binary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon52){_inherits(Tff_binary_formulaContext,_antlr4$ParserRuleCon52);var _super53=_createSuper(Tff_binary_formulaContext);function Tff_binary_formulaContext(parser,parent,invokingState){var _this53;_classCallCheck(this,Tff_binary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this53=_super53.call(this,parent,invokingState);_this53.parser=parser;_this53.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_binary_formula;return _this53;}_createClass(Tff_binary_formulaContext,[{key:\"tff_binary_nonassoc\",value:function tff_binary_nonassoc(){return this.getTypedRuleContext(Tff_binary_nonassocContext,0);}},{key:\"tff_binary_assoc\",value:function tff_binary_assoc(){return this.getTypedRuleContext(Tff_binary_assocContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_binary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_binary_formula(this);}}}]);return Tff_binary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_binary_nonassocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon53){_inherits(Tff_binary_nonassocContext,_antlr4$ParserRuleCon53);var _super54=_createSuper(Tff_binary_nonassocContext);function Tff_binary_nonassocContext(parser,parent,invokingState){var _this54;_classCallCheck(this,Tff_binary_nonassocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this54=_super54.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this54),\"tff_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unitary_formulaContext);}else{return this.getTypedRuleContext(Tff_unitary_formulaContext,i);}});_this54.parser=parser;_this54.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_binary_nonassoc;return _this54;}_createClass(Tff_binary_nonassocContext,[{key:\"binary_connective\",value:function binary_connective(){return this.getTypedRuleContext(Binary_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_binary_nonassoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_binary_nonassoc(this);}}}]);return Tff_binary_nonassocContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_binary_assocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon54){_inherits(Tff_binary_assocContext,_antlr4$ParserRuleCon54);var _super55=_createSuper(Tff_binary_assocContext);function Tff_binary_assocContext(parser,parent,invokingState){var _this55;_classCallCheck(this,Tff_binary_assocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this55=_super55.call(this,parent,invokingState);_this55.parser=parser;_this55.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_binary_assoc;return _this55;}_createClass(Tff_binary_assocContext,[{key:\"tff_or_formula\",value:function tff_or_formula(){return this.getTypedRuleContext(Tff_or_formulaContext,0);}},{key:\"tff_and_formula\",value:function tff_and_formula(){return this.getTypedRuleContext(Tff_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_binary_assoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_binary_assoc(this);}}}]);return Tff_binary_assocContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_or_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon55){_inherits(Tff_or_formulaContext,_antlr4$ParserRuleCon55);var _super56=_createSuper(Tff_or_formulaContext);function Tff_or_formulaContext(parser,parent,invokingState){var _this56;_classCallCheck(this,Tff_or_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this56=_super56.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this56),\"tff_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unitary_formulaContext);}else{return this.getTypedRuleContext(Tff_unitary_formulaContext,i);}});_this56.parser=parser;_this56.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_or_formula;return _this56;}_createClass(Tff_or_formulaContext,[{key:\"Or\",value:function Or(){return this.getToken(tptp_v7_0_0_0Parser.Or,0);}},{key:\"tff_or_formula\",value:function tff_or_formula(){return this.getTypedRuleContext(Tff_or_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_or_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_or_formula(this);}}}]);return Tff_or_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_and_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon56){_inherits(Tff_and_formulaContext,_antlr4$ParserRuleCon56);var _super57=_createSuper(Tff_and_formulaContext);function Tff_and_formulaContext(parser,parent,invokingState){var _this57;_classCallCheck(this,Tff_and_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this57=_super57.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this57),\"tff_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unitary_formulaContext);}else{return this.getTypedRuleContext(Tff_unitary_formulaContext,i);}});_this57.parser=parser;_this57.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_and_formula;return _this57;}_createClass(Tff_and_formulaContext,[{key:\"And\",value:function And(){return this.getToken(tptp_v7_0_0_0Parser.And,0);}},{key:\"tff_and_formula\",value:function tff_and_formula(){return this.getTypedRuleContext(Tff_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_and_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_and_formula(this);}}}]);return Tff_and_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unitary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon57){_inherits(Tff_unitary_formulaContext,_antlr4$ParserRuleCon57);var _super58=_createSuper(Tff_unitary_formulaContext);function Tff_unitary_formulaContext(parser,parent,invokingState){var _this58;_classCallCheck(this,Tff_unitary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this58=_super58.call(this,parent,invokingState);_this58.parser=parser;_this58.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_unitary_formula;return _this58;}_createClass(Tff_unitary_formulaContext,[{key:\"tff_quantified_formula\",value:function tff_quantified_formula(){return this.getTypedRuleContext(Tff_quantified_formulaContext,0);}},{key:\"tff_unary_formula\",value:function tff_unary_formula(){return this.getTypedRuleContext(Tff_unary_formulaContext,0);}},{key:\"tff_atomic_formula\",value:function tff_atomic_formula(){return this.getTypedRuleContext(Tff_atomic_formulaContext,0);}},{key:\"tff_conditional\",value:function tff_conditional(){return this.getTypedRuleContext(Tff_conditionalContext,0);}},{key:\"tff_let\",value:function tff_let(){return this.getTypedRuleContext(Tff_letContext,0);}},{key:\"tff_logic_formula\",value:function tff_logic_formula(){return this.getTypedRuleContext(Tff_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_unitary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_unitary_formula(this);}}}]);return Tff_unitary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon58){_inherits(Tff_quantified_formulaContext,_antlr4$ParserRuleCon58);var _super59=_createSuper(Tff_quantified_formulaContext);function Tff_quantified_formulaContext(parser,parent,invokingState){var _this59;_classCallCheck(this,Tff_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this59=_super59.call(this,parent,invokingState);_this59.parser=parser;_this59.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_quantified_formula;return _this59;}_createClass(Tff_quantified_formulaContext,[{key:\"fof_quantifier\",value:function fof_quantifier(){return this.getTypedRuleContext(Fof_quantifierContext,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){return this.getTypedRuleContext(Tff_unitary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_quantified_formula(this);}}}]);return Tff_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_variable_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon59){_inherits(Tff_variable_listContext,_antlr4$ParserRuleCon59);var _super60=_createSuper(Tff_variable_listContext);function Tff_variable_listContext(parser,parent,invokingState){var _this60;_classCallCheck(this,Tff_variable_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this60=_super60.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this60),\"tff_variable\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_variableContext);}else{return this.getTypedRuleContext(Tff_variableContext,i);}});_this60.parser=parser;_this60.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_variable_list;return _this60;}_createClass(Tff_variable_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_variable_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_variable_list(this);}}}]);return Tff_variable_listContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon60){_inherits(Tff_variableContext,_antlr4$ParserRuleCon60);var _super61=_createSuper(Tff_variableContext);function Tff_variableContext(parser,parent,invokingState){var _this61;_classCallCheck(this,Tff_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this61=_super61.call(this,parent,invokingState);_this61.parser=parser;_this61.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_variable;return _this61;}_createClass(Tff_variableContext,[{key:\"tff_typed_variable\",value:function tff_typed_variable(){return this.getTypedRuleContext(Tff_typed_variableContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_variable(this);}}}]);return Tff_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_typed_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon61){_inherits(Tff_typed_variableContext,_antlr4$ParserRuleCon61);var _super62=_createSuper(Tff_typed_variableContext);function Tff_typed_variableContext(parser,parent,invokingState){var _this62;_classCallCheck(this,Tff_typed_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this62=_super62.call(this,parent,invokingState);_this62.parser=parser;_this62.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_typed_variable;return _this62;}_createClass(Tff_typed_variableContext,[{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_typed_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_typed_variable(this);}}}]);return Tff_typed_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon62){_inherits(Tff_unary_formulaContext,_antlr4$ParserRuleCon62);var _super63=_createSuper(Tff_unary_formulaContext);function Tff_unary_formulaContext(parser,parent,invokingState){var _this63;_classCallCheck(this,Tff_unary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this63=_super63.call(this,parent,invokingState);_this63.parser=parser;_this63.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_unary_formula;return _this63;}_createClass(Tff_unary_formulaContext,[{key:\"unary_connective\",value:function unary_connective(){return this.getTypedRuleContext(Unary_connectiveContext,0);}},{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){return this.getTypedRuleContext(Tff_unitary_formulaContext,0);}},{key:\"fof_infix_unary\",value:function fof_infix_unary(){return this.getTypedRuleContext(Fof_infix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_unary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_unary_formula(this);}}}]);return Tff_unary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon63){_inherits(Tff_atomic_formulaContext,_antlr4$ParserRuleCon63);var _super64=_createSuper(Tff_atomic_formulaContext);function Tff_atomic_formulaContext(parser,parent,invokingState){var _this64;_classCallCheck(this,Tff_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this64=_super64.call(this,parent,invokingState);_this64.parser=parser;_this64.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_atomic_formula;return _this64;}_createClass(Tff_atomic_formulaContext,[{key:\"fof_atomic_formula\",value:function fof_atomic_formula(){return this.getTypedRuleContext(Fof_atomic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_atomic_formula(this);}}}]);return Tff_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_conditionalContext=/*#__PURE__*/function(_antlr4$ParserRuleCon64){_inherits(Tff_conditionalContext,_antlr4$ParserRuleCon64);var _super65=_createSuper(Tff_conditionalContext);function Tff_conditionalContext(parser,parent,invokingState){var _this65;_classCallCheck(this,Tff_conditionalContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this65=_super65.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this65),\"tff_logic_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_logic_formulaContext);}else{return this.getTypedRuleContext(Tff_logic_formulaContext,i);}});_this65.parser=parser;_this65.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_conditional;return _this65;}_createClass(Tff_conditionalContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_conditional(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_conditional(this);}}}]);return Tff_conditionalContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_letContext=/*#__PURE__*/function(_antlr4$ParserRuleCon65){_inherits(Tff_letContext,_antlr4$ParserRuleCon65);var _super66=_createSuper(Tff_letContext);function Tff_letContext(parser,parent,invokingState){var _this66;_classCallCheck(this,Tff_letContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this66=_super66.call(this,parent,invokingState);_this66.parser=parser;_this66.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let;return _this66;}_createClass(Tff_letContext,[{key:\"tff_let_term_defns\",value:function tff_let_term_defns(){return this.getTypedRuleContext(Tff_let_term_defnsContext,0);}},{key:\"tff_formula\",value:function tff_formula(){return this.getTypedRuleContext(Tff_formulaContext,0);}},{key:\"tff_let_formula_defns\",value:function tff_let_formula_defns(){return this.getTypedRuleContext(Tff_let_formula_defnsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let(this);}}}]);return Tff_letContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_term_defnsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon66){_inherits(Tff_let_term_defnsContext,_antlr4$ParserRuleCon66);var _super67=_createSuper(Tff_let_term_defnsContext);function Tff_let_term_defnsContext(parser,parent,invokingState){var _this67;_classCallCheck(this,Tff_let_term_defnsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this67=_super67.call(this,parent,invokingState);_this67.parser=parser;_this67.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_term_defns;return _this67;}_createClass(Tff_let_term_defnsContext,[{key:\"tff_let_term_defn\",value:function tff_let_term_defn(){return this.getTypedRuleContext(Tff_let_term_defnContext,0);}},{key:\"tff_let_term_list\",value:function tff_let_term_list(){return this.getTypedRuleContext(Tff_let_term_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_term_defns(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_term_defns(this);}}}]);return Tff_let_term_defnsContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_term_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon67){_inherits(Tff_let_term_listContext,_antlr4$ParserRuleCon67);var _super68=_createSuper(Tff_let_term_listContext);function Tff_let_term_listContext(parser,parent,invokingState){var _this68;_classCallCheck(this,Tff_let_term_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this68=_super68.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this68),\"tff_let_term_defn\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_let_term_defnContext);}else{return this.getTypedRuleContext(Tff_let_term_defnContext,i);}});_this68.parser=parser;_this68.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_term_list;return _this68;}_createClass(Tff_let_term_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_term_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_term_list(this);}}}]);return Tff_let_term_listContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_term_defnContext=/*#__PURE__*/function(_antlr4$ParserRuleCon68){_inherits(Tff_let_term_defnContext,_antlr4$ParserRuleCon68);var _super69=_createSuper(Tff_let_term_defnContext);function Tff_let_term_defnContext(parser,parent,invokingState){var _this69;_classCallCheck(this,Tff_let_term_defnContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this69=_super69.call(this,parent,invokingState);_this69.parser=parser;_this69.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_term_defn;return _this69;}_createClass(Tff_let_term_defnContext,[{key:\"Forall\",value:function Forall(){return this.getToken(tptp_v7_0_0_0Parser.Forall,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"tff_let_term_defn\",value:function tff_let_term_defn(){return this.getTypedRuleContext(Tff_let_term_defnContext,0);}},{key:\"tff_let_term_binding\",value:function tff_let_term_binding(){return this.getTypedRuleContext(Tff_let_term_bindingContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_term_defn(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_term_defn(this);}}}]);return Tff_let_term_defnContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_term_bindingContext=/*#__PURE__*/function(_antlr4$ParserRuleCon69){_inherits(Tff_let_term_bindingContext,_antlr4$ParserRuleCon69);var _super70=_createSuper(Tff_let_term_bindingContext);function Tff_let_term_bindingContext(parser,parent,invokingState){var _this70;_classCallCheck(this,Tff_let_term_bindingContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this70=_super70.call(this,parent,invokingState);_this70.parser=parser;_this70.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_term_binding;return _this70;}_createClass(Tff_let_term_bindingContext,[{key:\"fof_plain_term\",value:function fof_plain_term(){return this.getTypedRuleContext(Fof_plain_termContext,0);}},{key:\"Infix_equality\",value:function Infix_equality(){return this.getToken(tptp_v7_0_0_0Parser.Infix_equality,0);}},{key:\"fof_term\",value:function fof_term(){return this.getTypedRuleContext(Fof_termContext,0);}},{key:\"tff_let_term_binding\",value:function tff_let_term_binding(){return this.getTypedRuleContext(Tff_let_term_bindingContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_term_binding(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_term_binding(this);}}}]);return Tff_let_term_bindingContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_formula_defnsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon70){_inherits(Tff_let_formula_defnsContext,_antlr4$ParserRuleCon70);var _super71=_createSuper(Tff_let_formula_defnsContext);function Tff_let_formula_defnsContext(parser,parent,invokingState){var _this71;_classCallCheck(this,Tff_let_formula_defnsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this71=_super71.call(this,parent,invokingState);_this71.parser=parser;_this71.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_formula_defns;return _this71;}_createClass(Tff_let_formula_defnsContext,[{key:\"tff_let_formula_defn\",value:function tff_let_formula_defn(){return this.getTypedRuleContext(Tff_let_formula_defnContext,0);}},{key:\"tff_let_formula_list\",value:function tff_let_formula_list(){return this.getTypedRuleContext(Tff_let_formula_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_formula_defns(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_formula_defns(this);}}}]);return Tff_let_formula_defnsContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_formula_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon71){_inherits(Tff_let_formula_listContext,_antlr4$ParserRuleCon71);var _super72=_createSuper(Tff_let_formula_listContext);function Tff_let_formula_listContext(parser,parent,invokingState){var _this72;_classCallCheck(this,Tff_let_formula_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this72=_super72.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this72),\"tff_let_formula_defn\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_let_formula_defnContext);}else{return this.getTypedRuleContext(Tff_let_formula_defnContext,i);}});_this72.parser=parser;_this72.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_formula_list;return _this72;}_createClass(Tff_let_formula_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_formula_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_formula_list(this);}}}]);return Tff_let_formula_listContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_formula_defnContext=/*#__PURE__*/function(_antlr4$ParserRuleCon72){_inherits(Tff_let_formula_defnContext,_antlr4$ParserRuleCon72);var _super73=_createSuper(Tff_let_formula_defnContext);function Tff_let_formula_defnContext(parser,parent,invokingState){var _this73;_classCallCheck(this,Tff_let_formula_defnContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this73=_super73.call(this,parent,invokingState);_this73.parser=parser;_this73.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_formula_defn;return _this73;}_createClass(Tff_let_formula_defnContext,[{key:\"Forall\",value:function Forall(){return this.getToken(tptp_v7_0_0_0Parser.Forall,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"tff_let_formula_defn\",value:function tff_let_formula_defn(){return this.getTypedRuleContext(Tff_let_formula_defnContext,0);}},{key:\"tff_let_formula_binding\",value:function tff_let_formula_binding(){return this.getTypedRuleContext(Tff_let_formula_bindingContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_formula_defn(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_formula_defn(this);}}}]);return Tff_let_formula_defnContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_formula_bindingContext=/*#__PURE__*/function(_antlr4$ParserRuleCon73){_inherits(Tff_let_formula_bindingContext,_antlr4$ParserRuleCon73);var _super74=_createSuper(Tff_let_formula_bindingContext);function Tff_let_formula_bindingContext(parser,parent,invokingState){var _this74;_classCallCheck(this,Tff_let_formula_bindingContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this74=_super74.call(this,parent,invokingState);_this74.parser=parser;_this74.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_formula_binding;return _this74;}_createClass(Tff_let_formula_bindingContext,[{key:\"fof_plain_atomic_formula\",value:function fof_plain_atomic_formula(){return this.getTypedRuleContext(Fof_plain_atomic_formulaContext,0);}},{key:\"Iff\",value:function Iff(){return this.getToken(tptp_v7_0_0_0Parser.Iff,0);}},{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){return this.getTypedRuleContext(Tff_unitary_formulaContext,0);}},{key:\"tff_let_formula_binding\",value:function tff_let_formula_binding(){return this.getTypedRuleContext(Tff_let_formula_bindingContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_formula_binding(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_formula_binding(this);}}}]);return Tff_let_formula_bindingContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_sequentContext=/*#__PURE__*/function(_antlr4$ParserRuleCon74){_inherits(Tff_sequentContext,_antlr4$ParserRuleCon74);var _super75=_createSuper(Tff_sequentContext);function Tff_sequentContext(parser,parent,invokingState){var _this75;_classCallCheck(this,Tff_sequentContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this75=_super75.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this75),\"tff_formula_tuple\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_formula_tupleContext);}else{return this.getTypedRuleContext(Tff_formula_tupleContext,i);}});_this75.parser=parser;_this75.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_sequent;return _this75;}_createClass(Tff_sequentContext,[{key:\"Gentzen_arrow\",value:function Gentzen_arrow(){return this.getToken(tptp_v7_0_0_0Parser.Gentzen_arrow,0);}},{key:\"tff_sequent\",value:function tff_sequent(){return this.getTypedRuleContext(Tff_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_sequent(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_sequent(this);}}}]);return Tff_sequentContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_formula_tupleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon75){_inherits(Tff_formula_tupleContext,_antlr4$ParserRuleCon75);var _super76=_createSuper(Tff_formula_tupleContext);function Tff_formula_tupleContext(parser,parent,invokingState){var _this76;_classCallCheck(this,Tff_formula_tupleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this76=_super76.call(this,parent,invokingState);_this76.parser=parser;_this76.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_formula_tuple;return _this76;}_createClass(Tff_formula_tupleContext,[{key:\"tff_formula_tuple_list\",value:function tff_formula_tuple_list(){return this.getTypedRuleContext(Tff_formula_tuple_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_formula_tuple(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_formula_tuple(this);}}}]);return Tff_formula_tupleContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_formula_tuple_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon76){_inherits(Tff_formula_tuple_listContext,_antlr4$ParserRuleCon76);var _super77=_createSuper(Tff_formula_tuple_listContext);function Tff_formula_tuple_listContext(parser,parent,invokingState){var _this77;_classCallCheck(this,Tff_formula_tuple_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this77=_super77.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this77),\"tff_logic_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_logic_formulaContext);}else{return this.getTypedRuleContext(Tff_logic_formulaContext,i);}});_this77.parser=parser;_this77.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_formula_tuple_list;return _this77;}_createClass(Tff_formula_tuple_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_formula_tuple_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_formula_tuple_list(this);}}}]);return Tff_formula_tuple_listContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_typed_atomContext=/*#__PURE__*/function(_antlr4$ParserRuleCon77){_inherits(Tff_typed_atomContext,_antlr4$ParserRuleCon77);var _super78=_createSuper(Tff_typed_atomContext);function Tff_typed_atomContext(parser,parent,invokingState){var _this78;_classCallCheck(this,Tff_typed_atomContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this78=_super78.call(this,parent,invokingState);_this78.parser=parser;_this78.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_typed_atom;return _this78;}_createClass(Tff_typed_atomContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"tff_top_level_type\",value:function tff_top_level_type(){return this.getTypedRuleContext(Tff_top_level_typeContext,0);}},{key:\"tff_typed_atom\",value:function tff_typed_atom(){return this.getTypedRuleContext(Tff_typed_atomContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_typed_atom(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_typed_atom(this);}}}]);return Tff_typed_atomContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_subtypeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon78){_inherits(Tff_subtypeContext,_antlr4$ParserRuleCon78);var _super79=_createSuper(Tff_subtypeContext);function Tff_subtypeContext(parser,parent,invokingState){var _this79;_classCallCheck(this,Tff_subtypeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this79=_super79.call(this,parent,invokingState);_this79.parser=parser;_this79.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_subtype;return _this79;}_createClass(Tff_subtypeContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"Subtype_sign\",value:function Subtype_sign(){return this.getToken(tptp_v7_0_0_0Parser.Subtype_sign,0);}},{key:\"atom\",value:function atom(){return this.getTypedRuleContext(AtomContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_subtype(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_subtype(this);}}}]);return Tff_subtypeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_top_level_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon79){_inherits(Tff_top_level_typeContext,_antlr4$ParserRuleCon79);var _super80=_createSuper(Tff_top_level_typeContext);function Tff_top_level_typeContext(parser,parent,invokingState){var _this80;_classCallCheck(this,Tff_top_level_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this80=_super80.call(this,parent,invokingState);_this80.parser=parser;_this80.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_top_level_type;return _this80;}_createClass(Tff_top_level_typeContext,[{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_mapping_type\",value:function tff_mapping_type(){return this.getTypedRuleContext(Tff_mapping_typeContext,0);}},{key:\"tf1_quantified_type\",value:function tf1_quantified_type(){return this.getTypedRuleContext(Tf1_quantified_typeContext,0);}},{key:\"tff_top_level_type\",value:function tff_top_level_type(){return this.getTypedRuleContext(Tff_top_level_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_top_level_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_top_level_type(this);}}}]);return Tff_top_level_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tf1_quantified_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon80){_inherits(Tf1_quantified_typeContext,_antlr4$ParserRuleCon80);var _super81=_createSuper(Tf1_quantified_typeContext);function Tf1_quantified_typeContext(parser,parent,invokingState){var _this81;_classCallCheck(this,Tf1_quantified_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this81=_super81.call(this,parent,invokingState);_this81.parser=parser;_this81.ruleIndex=tptp_v7_0_0_0Parser.RULE_tf1_quantified_type;return _this81;}_createClass(Tf1_quantified_typeContext,[{key:\"TyForall\",value:function TyForall(){return this.getToken(tptp_v7_0_0_0Parser.TyForall,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"tff_monotype\",value:function tff_monotype(){return this.getTypedRuleContext(Tff_monotypeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTf1_quantified_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTf1_quantified_type(this);}}}]);return Tf1_quantified_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_monotypeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon81){_inherits(Tff_monotypeContext,_antlr4$ParserRuleCon81);var _super82=_createSuper(Tff_monotypeContext);function Tff_monotypeContext(parser,parent,invokingState){var _this82;_classCallCheck(this,Tff_monotypeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this82=_super82.call(this,parent,invokingState);_this82.parser=parser;_this82.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_monotype;return _this82;}_createClass(Tff_monotypeContext,[{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_mapping_type\",value:function tff_mapping_type(){return this.getTypedRuleContext(Tff_mapping_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_monotype(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_monotype(this);}}}]);return Tff_monotypeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unitary_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon82){_inherits(Tff_unitary_typeContext,_antlr4$ParserRuleCon82);var _super83=_createSuper(Tff_unitary_typeContext);function Tff_unitary_typeContext(parser,parent,invokingState){var _this83;_classCallCheck(this,Tff_unitary_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this83=_super83.call(this,parent,invokingState);_this83.parser=parser;_this83.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_unitary_type;return _this83;}_createClass(Tff_unitary_typeContext,[{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_xprod_type\",value:function tff_xprod_type(){return this.getTypedRuleContext(Tff_xprod_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_unitary_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_unitary_type(this);}}}]);return Tff_unitary_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_atomic_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon83){_inherits(Tff_atomic_typeContext,_antlr4$ParserRuleCon83);var _super84=_createSuper(Tff_atomic_typeContext);function Tff_atomic_typeContext(parser,parent,invokingState){var _this84;_classCallCheck(this,Tff_atomic_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this84=_super84.call(this,parent,invokingState);_this84.parser=parser;_this84.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_atomic_type;return _this84;}_createClass(Tff_atomic_typeContext,[{key:\"type_constant\",value:function type_constant(){return this.getTypedRuleContext(Type_constantContext,0);}},{key:\"defined_type\",value:function defined_type(){return this.getTypedRuleContext(Defined_typeContext,0);}},{key:\"type_functor\",value:function type_functor(){return this.getTypedRuleContext(Type_functorContext,0);}},{key:\"tff_type_arguments\",value:function tff_type_arguments(){return this.getTypedRuleContext(Tff_type_argumentsContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_atomic_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_atomic_type(this);}}}]);return Tff_atomic_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_type_argumentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon84){_inherits(Tff_type_argumentsContext,_antlr4$ParserRuleCon84);var _super85=_createSuper(Tff_type_argumentsContext);function Tff_type_argumentsContext(parser,parent,invokingState){var _this85;_classCallCheck(this,Tff_type_argumentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this85=_super85.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this85),\"tff_atomic_type\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_atomic_typeContext);}else{return this.getTypedRuleContext(Tff_atomic_typeContext,i);}});_this85.parser=parser;_this85.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_type_arguments;return _this85;}_createClass(Tff_type_argumentsContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_type_arguments(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_type_arguments(this);}}}]);return Tff_type_argumentsContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_mapping_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon85){_inherits(Tff_mapping_typeContext,_antlr4$ParserRuleCon85);var _super86=_createSuper(Tff_mapping_typeContext);function Tff_mapping_typeContext(parser,parent,invokingState){var _this86;_classCallCheck(this,Tff_mapping_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this86=_super86.call(this,parent,invokingState);_this86.parser=parser;_this86.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_mapping_type;return _this86;}_createClass(Tff_mapping_typeContext,[{key:\"tff_unitary_type\",value:function tff_unitary_type(){return this.getTypedRuleContext(Tff_unitary_typeContext,0);}},{key:\"Arrow\",value:function Arrow(){return this.getToken(tptp_v7_0_0_0Parser.Arrow,0);}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_mapping_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_mapping_type(this);}}}]);return Tff_mapping_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_xprod_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon86){_inherits(Tff_xprod_typeContext,_antlr4$ParserRuleCon86);var _super87=_createSuper(Tff_xprod_typeContext);function Tff_xprod_typeContext(parser,parent,invokingState){var _this87;_classCallCheck(this,Tff_xprod_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this87=_super87.call(this,parent,invokingState);_this87.parser=parser;_this87.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_xprod_type;return _this87;}_createClass(Tff_xprod_typeContext,[{key:\"tff_unitary_type\",value:function tff_unitary_type(){return this.getTypedRuleContext(Tff_unitary_typeContext,0);}},{key:\"Star\",value:function Star(){return this.getToken(tptp_v7_0_0_0Parser.Star,0);}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_xprod_type\",value:function tff_xprod_type(){return this.getTypedRuleContext(Tff_xprod_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_xprod_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_xprod_type(this);}}}]);return Tff_xprod_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon87){_inherits(Tcf_formulaContext,_antlr4$ParserRuleCon87);var _super88=_createSuper(Tcf_formulaContext);function Tcf_formulaContext(parser,parent,invokingState){var _this88;_classCallCheck(this,Tcf_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this88=_super88.call(this,parent,invokingState);_this88.parser=parser;_this88.ruleIndex=tptp_v7_0_0_0Parser.RULE_tcf_formula;return _this88;}_createClass(Tcf_formulaContext,[{key:\"tcf_logic_formula\",value:function tcf_logic_formula(){return this.getTypedRuleContext(Tcf_logic_formulaContext,0);}},{key:\"tff_typed_atom\",value:function tff_typed_atom(){return this.getTypedRuleContext(Tff_typed_atomContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTcf_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTcf_formula(this);}}}]);return Tcf_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon88){_inherits(Tcf_logic_formulaContext,_antlr4$ParserRuleCon88);var _super89=_createSuper(Tcf_logic_formulaContext);function Tcf_logic_formulaContext(parser,parent,invokingState){var _this89;_classCallCheck(this,Tcf_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this89=_super89.call(this,parent,invokingState);_this89.parser=parser;_this89.ruleIndex=tptp_v7_0_0_0Parser.RULE_tcf_logic_formula;return _this89;}_createClass(Tcf_logic_formulaContext,[{key:\"tcf_quantified_formula\",value:function tcf_quantified_formula(){return this.getTypedRuleContext(Tcf_quantified_formulaContext,0);}},{key:\"cnf_formula\",value:function cnf_formula(){return this.getTypedRuleContext(Cnf_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTcf_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTcf_logic_formula(this);}}}]);return Tcf_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon89){_inherits(Tcf_quantified_formulaContext,_antlr4$ParserRuleCon89);var _super90=_createSuper(Tcf_quantified_formulaContext);function Tcf_quantified_formulaContext(parser,parent,invokingState){var _this90;_classCallCheck(this,Tcf_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this90=_super90.call(this,parent,invokingState);_this90.parser=parser;_this90.ruleIndex=tptp_v7_0_0_0Parser.RULE_tcf_quantified_formula;return _this90;}_createClass(Tcf_quantified_formulaContext,[{key:\"Forall\",value:function Forall(){return this.getToken(tptp_v7_0_0_0Parser.Forall,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"cnf_formula\",value:function cnf_formula(){return this.getTypedRuleContext(Cnf_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTcf_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTcf_quantified_formula(this);}}}]);return Tcf_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon90){_inherits(Fof_formulaContext,_antlr4$ParserRuleCon90);var _super91=_createSuper(Fof_formulaContext);function Fof_formulaContext(parser,parent,invokingState){var _this91;_classCallCheck(this,Fof_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this91=_super91.call(this,parent,invokingState);_this91.parser=parser;_this91.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_formula;return _this91;}_createClass(Fof_formulaContext,[{key:\"fof_logic_formula\",value:function fof_logic_formula(){return this.getTypedRuleContext(Fof_logic_formulaContext,0);}},{key:\"fof_sequent\",value:function fof_sequent(){return this.getTypedRuleContext(Fof_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_formula(this);}}}]);return Fof_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon91){_inherits(Fof_logic_formulaContext,_antlr4$ParserRuleCon91);var _super92=_createSuper(Fof_logic_formulaContext);function Fof_logic_formulaContext(parser,parent,invokingState){var _this92;_classCallCheck(this,Fof_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this92=_super92.call(this,parent,invokingState);_this92.parser=parser;_this92.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_logic_formula;return _this92;}_createClass(Fof_logic_formulaContext,[{key:\"fof_binary_formula\",value:function fof_binary_formula(){return this.getTypedRuleContext(Fof_binary_formulaContext,0);}},{key:\"fof_unitary_formula\",value:function fof_unitary_formula(){return this.getTypedRuleContext(Fof_unitary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_logic_formula(this);}}}]);return Fof_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_binary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon92){_inherits(Fof_binary_formulaContext,_antlr4$ParserRuleCon92);var _super93=_createSuper(Fof_binary_formulaContext);function Fof_binary_formulaContext(parser,parent,invokingState){var _this93;_classCallCheck(this,Fof_binary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this93=_super93.call(this,parent,invokingState);_this93.parser=parser;_this93.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_binary_formula;return _this93;}_createClass(Fof_binary_formulaContext,[{key:\"fof_binary_nonassoc\",value:function fof_binary_nonassoc(){return this.getTypedRuleContext(Fof_binary_nonassocContext,0);}},{key:\"fof_binary_assoc\",value:function fof_binary_assoc(){return this.getTypedRuleContext(Fof_binary_assocContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_binary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_binary_formula(this);}}}]);return Fof_binary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_binary_nonassocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon93){_inherits(Fof_binary_nonassocContext,_antlr4$ParserRuleCon93);var _super94=_createSuper(Fof_binary_nonassocContext);function Fof_binary_nonassocContext(parser,parent,invokingState){var _this94;_classCallCheck(this,Fof_binary_nonassocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this94=_super94.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this94),\"fof_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_unitary_formulaContext);}else{return this.getTypedRuleContext(Fof_unitary_formulaContext,i);}});_this94.parser=parser;_this94.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_binary_nonassoc;return _this94;}_createClass(Fof_binary_nonassocContext,[{key:\"binary_connective\",value:function binary_connective(){return this.getTypedRuleContext(Binary_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_binary_nonassoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_binary_nonassoc(this);}}}]);return Fof_binary_nonassocContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_binary_assocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon94){_inherits(Fof_binary_assocContext,_antlr4$ParserRuleCon94);var _super95=_createSuper(Fof_binary_assocContext);function Fof_binary_assocContext(parser,parent,invokingState){var _this95;_classCallCheck(this,Fof_binary_assocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this95=_super95.call(this,parent,invokingState);_this95.parser=parser;_this95.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_binary_assoc;return _this95;}_createClass(Fof_binary_assocContext,[{key:\"fof_or_formula\",value:function fof_or_formula(){return this.getTypedRuleContext(Fof_or_formulaContext,0);}},{key:\"fof_and_formula\",value:function fof_and_formula(){return this.getTypedRuleContext(Fof_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_binary_assoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_binary_assoc(this);}}}]);return Fof_binary_assocContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_or_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon95){_inherits(Fof_or_formulaContext,_antlr4$ParserRuleCon95);var _super96=_createSuper(Fof_or_formulaContext);function Fof_or_formulaContext(parser,parent,invokingState){var _this96;_classCallCheck(this,Fof_or_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this96=_super96.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this96),\"fof_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_unitary_formulaContext);}else{return this.getTypedRuleContext(Fof_unitary_formulaContext,i);}});_this96.parser=parser;_this96.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_or_formula;return _this96;}_createClass(Fof_or_formulaContext,[{key:\"Or\",value:function Or(){return this.getToken(tptp_v7_0_0_0Parser.Or,0);}},{key:\"fof_or_formula\",value:function fof_or_formula(){return this.getTypedRuleContext(Fof_or_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_or_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_or_formula(this);}}}]);return Fof_or_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_and_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon96){_inherits(Fof_and_formulaContext,_antlr4$ParserRuleCon96);var _super97=_createSuper(Fof_and_formulaContext);function Fof_and_formulaContext(parser,parent,invokingState){var _this97;_classCallCheck(this,Fof_and_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this97=_super97.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this97),\"fof_unitary_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_unitary_formulaContext);}else{return this.getTypedRuleContext(Fof_unitary_formulaContext,i);}});_this97.parser=parser;_this97.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_and_formula;return _this97;}_createClass(Fof_and_formulaContext,[{key:\"And\",value:function And(){return this.getToken(tptp_v7_0_0_0Parser.And,0);}},{key:\"fof_and_formula\",value:function fof_and_formula(){return this.getTypedRuleContext(Fof_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_and_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_and_formula(this);}}}]);return Fof_and_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_unitary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon97){_inherits(Fof_unitary_formulaContext,_antlr4$ParserRuleCon97);var _super98=_createSuper(Fof_unitary_formulaContext);function Fof_unitary_formulaContext(parser,parent,invokingState){var _this98;_classCallCheck(this,Fof_unitary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this98=_super98.call(this,parent,invokingState);_this98.parser=parser;_this98.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_unitary_formula;return _this98;}_createClass(Fof_unitary_formulaContext,[{key:\"fof_quantified_formula\",value:function fof_quantified_formula(){return this.getTypedRuleContext(Fof_quantified_formulaContext,0);}},{key:\"fof_unary_formula\",value:function fof_unary_formula(){return this.getTypedRuleContext(Fof_unary_formulaContext,0);}},{key:\"fof_atomic_formula\",value:function fof_atomic_formula(){return this.getTypedRuleContext(Fof_atomic_formulaContext,0);}},{key:\"fof_logic_formula\",value:function fof_logic_formula(){return this.getTypedRuleContext(Fof_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_unitary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_unitary_formula(this);}}}]);return Fof_unitary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon98){_inherits(Fof_quantified_formulaContext,_antlr4$ParserRuleCon98);var _super99=_createSuper(Fof_quantified_formulaContext);function Fof_quantified_formulaContext(parser,parent,invokingState){var _this99;_classCallCheck(this,Fof_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this99=_super99.call(this,parent,invokingState);_this99.parser=parser;_this99.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_quantified_formula;return _this99;}_createClass(Fof_quantified_formulaContext,[{key:\"fof_quantifier\",value:function fof_quantifier(){return this.getTypedRuleContext(Fof_quantifierContext,0);}},{key:\"fof_variable_list\",value:function fof_variable_list(){return this.getTypedRuleContext(Fof_variable_listContext,0);}},{key:\"fof_unitary_formula\",value:function fof_unitary_formula(){return this.getTypedRuleContext(Fof_unitary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_quantified_formula(this);}}}]);return Fof_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_variable_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon99){_inherits(Fof_variable_listContext,_antlr4$ParserRuleCon99);var _super100=_createSuper(Fof_variable_listContext);function Fof_variable_listContext(parser,parent,invokingState){var _this100;_classCallCheck(this,Fof_variable_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this100=_super100.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this100),\"variable\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(VariableContext);}else{return this.getTypedRuleContext(VariableContext,i);}});_this100.parser=parser;_this100.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_variable_list;return _this100;}_createClass(Fof_variable_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_variable_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_variable_list(this);}}}]);return Fof_variable_listContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_unary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon100){_inherits(Fof_unary_formulaContext,_antlr4$ParserRuleCon100);var _super101=_createSuper(Fof_unary_formulaContext);function Fof_unary_formulaContext(parser,parent,invokingState){var _this101;_classCallCheck(this,Fof_unary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this101=_super101.call(this,parent,invokingState);_this101.parser=parser;_this101.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_unary_formula;return _this101;}_createClass(Fof_unary_formulaContext,[{key:\"unary_connective\",value:function unary_connective(){return this.getTypedRuleContext(Unary_connectiveContext,0);}},{key:\"fof_unitary_formula\",value:function fof_unitary_formula(){return this.getTypedRuleContext(Fof_unitary_formulaContext,0);}},{key:\"fof_infix_unary\",value:function fof_infix_unary(){return this.getTypedRuleContext(Fof_infix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_unary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_unary_formula(this);}}}]);return Fof_unary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_infix_unaryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon101){_inherits(Fof_infix_unaryContext,_antlr4$ParserRuleCon101);var _super102=_createSuper(Fof_infix_unaryContext);function Fof_infix_unaryContext(parser,parent,invokingState){var _this102;_classCallCheck(this,Fof_infix_unaryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this102=_super102.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this102),\"fof_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_termContext);}else{return this.getTypedRuleContext(Fof_termContext,i);}});_this102.parser=parser;_this102.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_infix_unary;return _this102;}_createClass(Fof_infix_unaryContext,[{key:\"Infix_inequality\",value:function Infix_inequality(){return this.getToken(tptp_v7_0_0_0Parser.Infix_inequality,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_infix_unary(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_infix_unary(this);}}}]);return Fof_infix_unaryContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon102){_inherits(Fof_atomic_formulaContext,_antlr4$ParserRuleCon102);var _super103=_createSuper(Fof_atomic_formulaContext);function Fof_atomic_formulaContext(parser,parent,invokingState){var _this103;_classCallCheck(this,Fof_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this103=_super103.call(this,parent,invokingState);_this103.parser=parser;_this103.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_atomic_formula;return _this103;}_createClass(Fof_atomic_formulaContext,[{key:\"fof_plain_atomic_formula\",value:function fof_plain_atomic_formula(){return this.getTypedRuleContext(Fof_plain_atomic_formulaContext,0);}},{key:\"fof_defined_atomic_formula\",value:function fof_defined_atomic_formula(){return this.getTypedRuleContext(Fof_defined_atomic_formulaContext,0);}},{key:\"fof_system_atomic_formula\",value:function fof_system_atomic_formula(){return this.getTypedRuleContext(Fof_system_atomic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_atomic_formula(this);}}}]);return Fof_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_plain_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon103){_inherits(Fof_plain_atomic_formulaContext,_antlr4$ParserRuleCon103);var _super104=_createSuper(Fof_plain_atomic_formulaContext);function Fof_plain_atomic_formulaContext(parser,parent,invokingState){var _this104;_classCallCheck(this,Fof_plain_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this104=_super104.call(this,parent,invokingState);_this104.parser=parser;_this104.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_plain_atomic_formula;return _this104;}_createClass(Fof_plain_atomic_formulaContext,[{key:\"fof_plain_term\",value:function fof_plain_term(){return this.getTypedRuleContext(Fof_plain_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_plain_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_plain_atomic_formula(this);}}}]);return Fof_plain_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon104){_inherits(Fof_defined_atomic_formulaContext,_antlr4$ParserRuleCon104);var _super105=_createSuper(Fof_defined_atomic_formulaContext);function Fof_defined_atomic_formulaContext(parser,parent,invokingState){var _this105;_classCallCheck(this,Fof_defined_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this105=_super105.call(this,parent,invokingState);_this105.parser=parser;_this105.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_defined_atomic_formula;return _this105;}_createClass(Fof_defined_atomic_formulaContext,[{key:\"fof_defined_plain_formula\",value:function fof_defined_plain_formula(){return this.getTypedRuleContext(Fof_defined_plain_formulaContext,0);}},{key:\"fof_defined_infix_formula\",value:function fof_defined_infix_formula(){return this.getTypedRuleContext(Fof_defined_infix_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_defined_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_defined_atomic_formula(this);}}}]);return Fof_defined_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_plain_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon105){_inherits(Fof_defined_plain_formulaContext,_antlr4$ParserRuleCon105);var _super106=_createSuper(Fof_defined_plain_formulaContext);function Fof_defined_plain_formulaContext(parser,parent,invokingState){var _this106;_classCallCheck(this,Fof_defined_plain_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this106=_super106.call(this,parent,invokingState);_this106.parser=parser;_this106.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_defined_plain_formula;return _this106;}_createClass(Fof_defined_plain_formulaContext,[{key:\"fof_defined_term\",value:function fof_defined_term(){return this.getTypedRuleContext(Fof_defined_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_defined_plain_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_defined_plain_formula(this);}}}]);return Fof_defined_plain_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_infix_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon106){_inherits(Fof_defined_infix_formulaContext,_antlr4$ParserRuleCon106);var _super107=_createSuper(Fof_defined_infix_formulaContext);function Fof_defined_infix_formulaContext(parser,parent,invokingState){var _this107;_classCallCheck(this,Fof_defined_infix_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this107=_super107.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this107),\"fof_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_termContext);}else{return this.getTypedRuleContext(Fof_termContext,i);}});_this107.parser=parser;_this107.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_defined_infix_formula;return _this107;}_createClass(Fof_defined_infix_formulaContext,[{key:\"defined_infix_pred\",value:function defined_infix_pred(){return this.getTypedRuleContext(Defined_infix_predContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_defined_infix_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_defined_infix_formula(this);}}}]);return Fof_defined_infix_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_system_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon107){_inherits(Fof_system_atomic_formulaContext,_antlr4$ParserRuleCon107);var _super108=_createSuper(Fof_system_atomic_formulaContext);function Fof_system_atomic_formulaContext(parser,parent,invokingState){var _this108;_classCallCheck(this,Fof_system_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this108=_super108.call(this,parent,invokingState);_this108.parser=parser;_this108.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_system_atomic_formula;return _this108;}_createClass(Fof_system_atomic_formulaContext,[{key:\"fof_system_term\",value:function fof_system_term(){return this.getTypedRuleContext(Fof_system_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_system_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_system_atomic_formula(this);}}}]);return Fof_system_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_plain_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon108){_inherits(Fof_plain_termContext,_antlr4$ParserRuleCon108);var _super109=_createSuper(Fof_plain_termContext);function Fof_plain_termContext(parser,parent,invokingState){var _this109;_classCallCheck(this,Fof_plain_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this109=_super109.call(this,parent,invokingState);_this109.parser=parser;_this109.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_plain_term;return _this109;}_createClass(Fof_plain_termContext,[{key:\"constant\",value:function constant(){return this.getTypedRuleContext(ConstantContext,0);}},{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_plain_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_plain_term(this);}}}]);return Fof_plain_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon109){_inherits(Fof_defined_termContext,_antlr4$ParserRuleCon109);var _super110=_createSuper(Fof_defined_termContext);function Fof_defined_termContext(parser,parent,invokingState){var _this110;_classCallCheck(this,Fof_defined_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this110=_super110.call(this,parent,invokingState);_this110.parser=parser;_this110.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_defined_term;return _this110;}_createClass(Fof_defined_termContext,[{key:\"defined_term\",value:function defined_term(){return this.getTypedRuleContext(Defined_termContext,0);}},{key:\"fof_defined_atomic_term\",value:function fof_defined_atomic_term(){return this.getTypedRuleContext(Fof_defined_atomic_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_defined_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_defined_term(this);}}}]);return Fof_defined_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_atomic_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon110){_inherits(Fof_defined_atomic_termContext,_antlr4$ParserRuleCon110);var _super111=_createSuper(Fof_defined_atomic_termContext);function Fof_defined_atomic_termContext(parser,parent,invokingState){var _this111;_classCallCheck(this,Fof_defined_atomic_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this111=_super111.call(this,parent,invokingState);_this111.parser=parser;_this111.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_defined_atomic_term;return _this111;}_createClass(Fof_defined_atomic_termContext,[{key:\"fof_defined_plain_term\",value:function fof_defined_plain_term(){return this.getTypedRuleContext(Fof_defined_plain_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_defined_atomic_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_defined_atomic_term(this);}}}]);return Fof_defined_atomic_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_plain_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon111){_inherits(Fof_defined_plain_termContext,_antlr4$ParserRuleCon111);var _super112=_createSuper(Fof_defined_plain_termContext);function Fof_defined_plain_termContext(parser,parent,invokingState){var _this112;_classCallCheck(this,Fof_defined_plain_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this112=_super112.call(this,parent,invokingState);_this112.parser=parser;_this112.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_defined_plain_term;return _this112;}_createClass(Fof_defined_plain_termContext,[{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"defined_functor\",value:function defined_functor(){return this.getTypedRuleContext(Defined_functorContext,0);}},{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_defined_plain_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_defined_plain_term(this);}}}]);return Fof_defined_plain_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_system_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon112){_inherits(Fof_system_termContext,_antlr4$ParserRuleCon112);var _super113=_createSuper(Fof_system_termContext);function Fof_system_termContext(parser,parent,invokingState){var _this113;_classCallCheck(this,Fof_system_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this113=_super113.call(this,parent,invokingState);_this113.parser=parser;_this113.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_system_term;return _this113;}_createClass(Fof_system_termContext,[{key:\"system_constant\",value:function system_constant(){return this.getTypedRuleContext(System_constantContext,0);}},{key:\"system_functor\",value:function system_functor(){return this.getTypedRuleContext(System_functorContext,0);}},{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_system_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_system_term(this);}}}]);return Fof_system_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_argumentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon113){_inherits(Fof_argumentsContext,_antlr4$ParserRuleCon113);var _super114=_createSuper(Fof_argumentsContext);function Fof_argumentsContext(parser,parent,invokingState){var _this114;_classCallCheck(this,Fof_argumentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this114=_super114.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this114),\"fof_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_termContext);}else{return this.getTypedRuleContext(Fof_termContext,i);}});_this114.parser=parser;_this114.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_arguments;return _this114;}_createClass(Fof_argumentsContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_arguments(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_arguments(this);}}}]);return Fof_argumentsContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon114){_inherits(Fof_termContext,_antlr4$ParserRuleCon114);var _super115=_createSuper(Fof_termContext);function Fof_termContext(parser,parent,invokingState){var _this115;_classCallCheck(this,Fof_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this115=_super115.call(this,parent,invokingState);_this115.parser=parser;_this115.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_term;return _this115;}_createClass(Fof_termContext,[{key:\"fof_function_term\",value:function fof_function_term(){return this.getTypedRuleContext(Fof_function_termContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"tff_conditional_term\",value:function tff_conditional_term(){return this.getTypedRuleContext(Tff_conditional_termContext,0);}},{key:\"tff_let_term\",value:function tff_let_term(){return this.getTypedRuleContext(Tff_let_termContext,0);}},{key:\"tff_tuple_term\",value:function tff_tuple_term(){return this.getTypedRuleContext(Tff_tuple_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_term(this);}}}]);return Fof_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_function_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon115){_inherits(Fof_function_termContext,_antlr4$ParserRuleCon115);var _super116=_createSuper(Fof_function_termContext);function Fof_function_termContext(parser,parent,invokingState){var _this116;_classCallCheck(this,Fof_function_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this116=_super116.call(this,parent,invokingState);_this116.parser=parser;_this116.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_function_term;return _this116;}_createClass(Fof_function_termContext,[{key:\"fof_plain_term\",value:function fof_plain_term(){return this.getTypedRuleContext(Fof_plain_termContext,0);}},{key:\"fof_defined_term\",value:function fof_defined_term(){return this.getTypedRuleContext(Fof_defined_termContext,0);}},{key:\"fof_system_term\",value:function fof_system_term(){return this.getTypedRuleContext(Fof_system_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_function_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_function_term(this);}}}]);return Fof_function_termContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_conditional_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon116){_inherits(Tff_conditional_termContext,_antlr4$ParserRuleCon116);var _super117=_createSuper(Tff_conditional_termContext);function Tff_conditional_termContext(parser,parent,invokingState){var _this117;_classCallCheck(this,Tff_conditional_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this117=_super117.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this117),\"fof_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_termContext);}else{return this.getTypedRuleContext(Fof_termContext,i);}});_this117.parser=parser;_this117.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_conditional_term;return _this117;}_createClass(Tff_conditional_termContext,[{key:\"tff_logic_formula\",value:function tff_logic_formula(){return this.getTypedRuleContext(Tff_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_conditional_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_conditional_term(this);}}}]);return Tff_conditional_termContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_let_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon117){_inherits(Tff_let_termContext,_antlr4$ParserRuleCon117);var _super118=_createSuper(Tff_let_termContext);function Tff_let_termContext(parser,parent,invokingState){var _this118;_classCallCheck(this,Tff_let_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this118=_super118.call(this,parent,invokingState);_this118.parser=parser;_this118.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_let_term;return _this118;}_createClass(Tff_let_termContext,[{key:\"tff_let_formula_defns\",value:function tff_let_formula_defns(){return this.getTypedRuleContext(Tff_let_formula_defnsContext,0);}},{key:\"fof_term\",value:function fof_term(){return this.getTypedRuleContext(Fof_termContext,0);}},{key:\"tff_let_term_defns\",value:function tff_let_term_defns(){return this.getTypedRuleContext(Tff_let_term_defnsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_let_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_let_term(this);}}}]);return Tff_let_termContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_tuple_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon118){_inherits(Tff_tuple_termContext,_antlr4$ParserRuleCon118);var _super119=_createSuper(Tff_tuple_termContext);function Tff_tuple_termContext(parser,parent,invokingState){var _this119;_classCallCheck(this,Tff_tuple_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this119=_super119.call(this,parent,invokingState);_this119.parser=parser;_this119.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_tuple_term;return _this119;}_createClass(Tff_tuple_termContext,[{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_tuple_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_tuple_term(this);}}}]);return Tff_tuple_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_sequentContext=/*#__PURE__*/function(_antlr4$ParserRuleCon119){_inherits(Fof_sequentContext,_antlr4$ParserRuleCon119);var _super120=_createSuper(Fof_sequentContext);function Fof_sequentContext(parser,parent,invokingState){var _this120;_classCallCheck(this,Fof_sequentContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this120=_super120.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this120),\"fof_formula_tuple\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_formula_tupleContext);}else{return this.getTypedRuleContext(Fof_formula_tupleContext,i);}});_this120.parser=parser;_this120.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_sequent;return _this120;}_createClass(Fof_sequentContext,[{key:\"Gentzen_arrow\",value:function Gentzen_arrow(){return this.getToken(tptp_v7_0_0_0Parser.Gentzen_arrow,0);}},{key:\"fof_sequent\",value:function fof_sequent(){return this.getTypedRuleContext(Fof_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_sequent(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_sequent(this);}}}]);return Fof_sequentContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_formula_tupleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon120){_inherits(Fof_formula_tupleContext,_antlr4$ParserRuleCon120);var _super121=_createSuper(Fof_formula_tupleContext);function Fof_formula_tupleContext(parser,parent,invokingState){var _this121;_classCallCheck(this,Fof_formula_tupleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this121=_super121.call(this,parent,invokingState);_this121.parser=parser;_this121.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_formula_tuple;return _this121;}_createClass(Fof_formula_tupleContext,[{key:\"fof_formula_tuple_list\",value:function fof_formula_tuple_list(){return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_formula_tuple(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_formula_tuple(this);}}}]);return Fof_formula_tupleContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_formula_tuple_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon121){_inherits(Fof_formula_tuple_listContext,_antlr4$ParserRuleCon121);var _super122=_createSuper(Fof_formula_tuple_listContext);function Fof_formula_tuple_listContext(parser,parent,invokingState){var _this122;_classCallCheck(this,Fof_formula_tuple_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this122=_super122.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this122),\"fof_logic_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_logic_formulaContext);}else{return this.getTypedRuleContext(Fof_logic_formulaContext,i);}});_this122.parser=parser;_this122.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_formula_tuple_list;return _this122;}_createClass(Fof_formula_tuple_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_formula_tuple_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_formula_tuple_list(this);}}}]);return Fof_formula_tuple_listContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon122){_inherits(Cnf_formulaContext,_antlr4$ParserRuleCon122);var _super123=_createSuper(Cnf_formulaContext);function Cnf_formulaContext(parser,parent,invokingState){var _this123;_classCallCheck(this,Cnf_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this123=_super123.call(this,parent,invokingState);_this123.parser=parser;_this123.ruleIndex=tptp_v7_0_0_0Parser.RULE_cnf_formula;return _this123;}_createClass(Cnf_formulaContext,[{key:\"cnf_disjunction\",value:function cnf_disjunction(){return this.getTypedRuleContext(Cnf_disjunctionContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterCnf_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitCnf_formula(this);}}}]);return Cnf_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_disjunctionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon123){_inherits(Cnf_disjunctionContext,_antlr4$ParserRuleCon123);var _super124=_createSuper(Cnf_disjunctionContext);function Cnf_disjunctionContext(parser,parent,invokingState){var _this124;_classCallCheck(this,Cnf_disjunctionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this124=_super124.call(this,parent,invokingState);_this124.parser=parser;_this124.ruleIndex=tptp_v7_0_0_0Parser.RULE_cnf_disjunction;return _this124;}_createClass(Cnf_disjunctionContext,[{key:\"cnf_literal\",value:function cnf_literal(){return this.getTypedRuleContext(Cnf_literalContext,0);}},{key:\"cnf_disjunction\",value:function cnf_disjunction(){return this.getTypedRuleContext(Cnf_disjunctionContext,0);}},{key:\"Or\",value:function Or(){return this.getToken(tptp_v7_0_0_0Parser.Or,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterCnf_disjunction(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitCnf_disjunction(this);}}}]);return Cnf_disjunctionContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_literalContext=/*#__PURE__*/function(_antlr4$ParserRuleCon124){_inherits(Cnf_literalContext,_antlr4$ParserRuleCon124);var _super125=_createSuper(Cnf_literalContext);function Cnf_literalContext(parser,parent,invokingState){var _this125;_classCallCheck(this,Cnf_literalContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this125=_super125.call(this,parent,invokingState);_this125.parser=parser;_this125.ruleIndex=tptp_v7_0_0_0Parser.RULE_cnf_literal;return _this125;}_createClass(Cnf_literalContext,[{key:\"fof_atomic_formula\",value:function fof_atomic_formula(){return this.getTypedRuleContext(Fof_atomic_formulaContext,0);}},{key:\"Not\",value:function Not(){return this.getToken(tptp_v7_0_0_0Parser.Not,0);}},{key:\"fof_infix_unary\",value:function fof_infix_unary(){return this.getTypedRuleContext(Fof_infix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterCnf_literal(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitCnf_literal(this);}}}]);return Cnf_literalContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon125){_inherits(Thf_quantifierContext,_antlr4$ParserRuleCon125);var _super126=_createSuper(Thf_quantifierContext);function Thf_quantifierContext(parser,parent,invokingState){var _this126;_classCallCheck(this,Thf_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this126=_super126.call(this,parent,invokingState);_this126.parser=parser;_this126.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_quantifier;return _this126;}_createClass(Thf_quantifierContext,[{key:\"fof_quantifier\",value:function fof_quantifier(){return this.getTypedRuleContext(Fof_quantifierContext,0);}},{key:\"th0_quantifier\",value:function th0_quantifier(){return this.getTypedRuleContext(Th0_quantifierContext,0);}},{key:\"th1_quantifier\",value:function th1_quantifier(){return this.getTypedRuleContext(Th1_quantifierContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_quantifier(this);}}}]);return Thf_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Th0_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon126){_inherits(Th0_quantifierContext,_antlr4$ParserRuleCon126);var _super127=_createSuper(Th0_quantifierContext);function Th0_quantifierContext(parser,parent,invokingState){var _this127;_classCallCheck(this,Th0_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this127=_super127.call(this,parent,invokingState);_this127.parser=parser;_this127.ruleIndex=tptp_v7_0_0_0Parser.RULE_th0_quantifier;return _this127;}_createClass(Th0_quantifierContext,[{key:\"Lambda\",value:function Lambda(){return this.getToken(tptp_v7_0_0_0Parser.Lambda,0);}},{key:\"Choice\",value:function Choice(){return this.getToken(tptp_v7_0_0_0Parser.Choice,0);}},{key:\"Description\",value:function Description(){return this.getToken(tptp_v7_0_0_0Parser.Description,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTh0_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTh0_quantifier(this);}}}]);return Th0_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Th1_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon127){_inherits(Th1_quantifierContext,_antlr4$ParserRuleCon127);var _super128=_createSuper(Th1_quantifierContext);function Th1_quantifierContext(parser,parent,invokingState){var _this128;_classCallCheck(this,Th1_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this128=_super128.call(this,parent,invokingState);_this128.parser=parser;_this128.ruleIndex=tptp_v7_0_0_0Parser.RULE_th1_quantifier;return _this128;}_createClass(Th1_quantifierContext,[{key:\"TyForall\",value:function TyForall(){return this.getToken(tptp_v7_0_0_0Parser.TyForall,0);}},{key:\"TyExists\",value:function TyExists(){return this.getToken(tptp_v7_0_0_0Parser.TyExists,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTh1_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTh1_quantifier(this);}}}]);return Th1_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_pair_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon128){_inherits(Thf_pair_connectiveContext,_antlr4$ParserRuleCon128);var _super129=_createSuper(Thf_pair_connectiveContext);function Thf_pair_connectiveContext(parser,parent,invokingState){var _this129;_classCallCheck(this,Thf_pair_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this129=_super129.call(this,parent,invokingState);_this129.parser=parser;_this129.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_pair_connective;return _this129;}_createClass(Thf_pair_connectiveContext,[{key:\"Infix_equality\",value:function Infix_equality(){return this.getToken(tptp_v7_0_0_0Parser.Infix_equality,0);}},{key:\"Infix_inequality\",value:function Infix_inequality(){return this.getToken(tptp_v7_0_0_0Parser.Infix_inequality,0);}},{key:\"binary_connective\",value:function binary_connective(){return this.getTypedRuleContext(Binary_connectiveContext,0);}},{key:\"Assignment\",value:function Assignment(){return this.getToken(tptp_v7_0_0_0Parser.Assignment,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_pair_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_pair_connective(this);}}}]);return Thf_pair_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unary_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon129){_inherits(Thf_unary_connectiveContext,_antlr4$ParserRuleCon129);var _super130=_createSuper(Thf_unary_connectiveContext);function Thf_unary_connectiveContext(parser,parent,invokingState){var _this130;_classCallCheck(this,Thf_unary_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this130=_super130.call(this,parent,invokingState);_this130.parser=parser;_this130.ruleIndex=tptp_v7_0_0_0Parser.RULE_thf_unary_connective;return _this130;}_createClass(Thf_unary_connectiveContext,[{key:\"unary_connective\",value:function unary_connective(){return this.getTypedRuleContext(Unary_connectiveContext,0);}},{key:\"th1_unary_connective\",value:function th1_unary_connective(){return this.getTypedRuleContext(Th1_unary_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterThf_unary_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitThf_unary_connective(this);}}}]);return Thf_unary_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Th1_unary_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon130){_inherits(Th1_unary_connectiveContext,_antlr4$ParserRuleCon130);var _super131=_createSuper(Th1_unary_connectiveContext);function Th1_unary_connectiveContext(parser,parent,invokingState){var _this131;_classCallCheck(this,Th1_unary_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this131=_super131.call(this,parent,invokingState);_this131.parser=parser;_this131.ruleIndex=tptp_v7_0_0_0Parser.RULE_th1_unary_connective;return _this131;}_createClass(Th1_unary_connectiveContext,[{key:\"ForallComb\",value:function ForallComb(){return this.getToken(tptp_v7_0_0_0Parser.ForallComb,0);}},{key:\"ExistsComb\",value:function ExistsComb(){return this.getToken(tptp_v7_0_0_0Parser.ExistsComb,0);}},{key:\"ChoiceComb\",value:function ChoiceComb(){return this.getToken(tptp_v7_0_0_0Parser.ChoiceComb,0);}},{key:\"DescriptionComb\",value:function DescriptionComb(){return this.getToken(tptp_v7_0_0_0Parser.DescriptionComb,0);}},{key:\"EqComb\",value:function EqComb(){return this.getToken(tptp_v7_0_0_0Parser.EqComb,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTh1_unary_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTh1_unary_connective(this);}}}]);return Th1_unary_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_pair_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon131){_inherits(Tff_pair_connectiveContext,_antlr4$ParserRuleCon131);var _super132=_createSuper(Tff_pair_connectiveContext);function Tff_pair_connectiveContext(parser,parent,invokingState){var _this132;_classCallCheck(this,Tff_pair_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this132=_super132.call(this,parent,invokingState);_this132.parser=parser;_this132.ruleIndex=tptp_v7_0_0_0Parser.RULE_tff_pair_connective;return _this132;}_createClass(Tff_pair_connectiveContext,[{key:\"binary_connective\",value:function binary_connective(){return this.getTypedRuleContext(Binary_connectiveContext,0);}},{key:\"Assignment\",value:function Assignment(){return this.getToken(tptp_v7_0_0_0Parser.Assignment,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTff_pair_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTff_pair_connective(this);}}}]);return Tff_pair_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon132){_inherits(Fof_quantifierContext,_antlr4$ParserRuleCon132);var _super133=_createSuper(Fof_quantifierContext);function Fof_quantifierContext(parser,parent,invokingState){var _this133;_classCallCheck(this,Fof_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this133=_super133.call(this,parent,invokingState);_this133.parser=parser;_this133.ruleIndex=tptp_v7_0_0_0Parser.RULE_fof_quantifier;return _this133;}_createClass(Fof_quantifierContext,[{key:\"Forall\",value:function Forall(){return this.getToken(tptp_v7_0_0_0Parser.Forall,0);}},{key:\"Exists\",value:function Exists(){return this.getToken(tptp_v7_0_0_0Parser.Exists,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFof_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFof_quantifier(this);}}}]);return Fof_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Binary_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon133){_inherits(Binary_connectiveContext,_antlr4$ParserRuleCon133);var _super134=_createSuper(Binary_connectiveContext);function Binary_connectiveContext(parser,parent,invokingState){var _this134;_classCallCheck(this,Binary_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this134=_super134.call(this,parent,invokingState);_this134.parser=parser;_this134.ruleIndex=tptp_v7_0_0_0Parser.RULE_binary_connective;return _this134;}_createClass(Binary_connectiveContext,[{key:\"Iff\",value:function Iff(){return this.getToken(tptp_v7_0_0_0Parser.Iff,0);}},{key:\"Impl\",value:function Impl(){return this.getToken(tptp_v7_0_0_0Parser.Impl,0);}},{key:\"If\",value:function If(){return this.getToken(tptp_v7_0_0_0Parser.If,0);}},{key:\"Niff\",value:function Niff(){return this.getToken(tptp_v7_0_0_0Parser.Niff,0);}},{key:\"Nor\",value:function Nor(){return this.getToken(tptp_v7_0_0_0Parser.Nor,0);}},{key:\"Nand\",value:function Nand(){return this.getToken(tptp_v7_0_0_0Parser.Nand,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterBinary_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitBinary_connective(this);}}}]);return Binary_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Assoc_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon134){_inherits(Assoc_connectiveContext,_antlr4$ParserRuleCon134);var _super135=_createSuper(Assoc_connectiveContext);function Assoc_connectiveContext(parser,parent,invokingState){var _this135;_classCallCheck(this,Assoc_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this135=_super135.call(this,parent,invokingState);_this135.parser=parser;_this135.ruleIndex=tptp_v7_0_0_0Parser.RULE_assoc_connective;return _this135;}_createClass(Assoc_connectiveContext,[{key:\"Or\",value:function Or(){return this.getToken(tptp_v7_0_0_0Parser.Or,0);}},{key:\"And\",value:function And(){return this.getToken(tptp_v7_0_0_0Parser.And,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAssoc_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAssoc_connective(this);}}}]);return Assoc_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Unary_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon135){_inherits(Unary_connectiveContext,_antlr4$ParserRuleCon135);var _super136=_createSuper(Unary_connectiveContext);function Unary_connectiveContext(parser,parent,invokingState){var _this136;_classCallCheck(this,Unary_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this136=_super136.call(this,parent,invokingState);_this136.parser=parser;_this136.ruleIndex=tptp_v7_0_0_0Parser.RULE_unary_connective;return _this136;}_createClass(Unary_connectiveContext,[{key:\"Not\",value:function Not(){return this.getToken(tptp_v7_0_0_0Parser.Not,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterUnary_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitUnary_connective(this);}}}]);return Unary_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Type_constantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon136){_inherits(Type_constantContext,_antlr4$ParserRuleCon136);var _super137=_createSuper(Type_constantContext);function Type_constantContext(parser,parent,invokingState){var _this137;_classCallCheck(this,Type_constantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this137=_super137.call(this,parent,invokingState);_this137.parser=parser;_this137.ruleIndex=tptp_v7_0_0_0Parser.RULE_type_constant;return _this137;}_createClass(Type_constantContext,[{key:\"type_functor\",value:function type_functor(){return this.getTypedRuleContext(Type_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterType_constant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitType_constant(this);}}}]);return Type_constantContext;}(_antlr[\"default\"].ParserRuleContext);var Type_functorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon137){_inherits(Type_functorContext,_antlr4$ParserRuleCon137);var _super138=_createSuper(Type_functorContext);function Type_functorContext(parser,parent,invokingState){var _this138;_classCallCheck(this,Type_functorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this138=_super138.call(this,parent,invokingState);_this138.parser=parser;_this138.ruleIndex=tptp_v7_0_0_0Parser.RULE_type_functor;return _this138;}_createClass(Type_functorContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterType_functor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitType_functor(this);}}}]);return Type_functorContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon138){_inherits(Defined_typeContext,_antlr4$ParserRuleCon138);var _super139=_createSuper(Defined_typeContext);function Defined_typeContext(parser,parent,invokingState){var _this139;_classCallCheck(this,Defined_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this139=_super139.call(this,parent,invokingState);_this139.parser=parser;_this139.ruleIndex=tptp_v7_0_0_0Parser.RULE_defined_type;return _this139;}_createClass(Defined_typeContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(tptp_v7_0_0_0Parser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDefined_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDefined_type(this);}}}]);return Defined_typeContext;}(_antlr[\"default\"].ParserRuleContext);var System_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon139){_inherits(System_typeContext,_antlr4$ParserRuleCon139);var _super140=_createSuper(System_typeContext);function System_typeContext(parser,parent,invokingState){var _this140;_classCallCheck(this,System_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this140=_super140.call(this,parent,invokingState);_this140.parser=parser;_this140.ruleIndex=tptp_v7_0_0_0Parser.RULE_system_type;return _this140;}_createClass(System_typeContext,[{key:\"atomic_system_word\",value:function atomic_system_word(){return this.getTypedRuleContext(Atomic_system_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterSystem_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitSystem_type(this);}}}]);return System_typeContext;}(_antlr[\"default\"].ParserRuleContext);var AtomContext=/*#__PURE__*/function(_antlr4$ParserRuleCon140){_inherits(AtomContext,_antlr4$ParserRuleCon140);var _super141=_createSuper(AtomContext);function AtomContext(parser,parent,invokingState){var _this141;_classCallCheck(this,AtomContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this141=_super141.call(this,parent,invokingState);_this141.parser=parser;_this141.ruleIndex=tptp_v7_0_0_0Parser.RULE_atom;return _this141;}_createClass(AtomContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAtom(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAtom(this);}}}]);return AtomContext;}(_antlr[\"default\"].ParserRuleContext);var Untyped_atomContext=/*#__PURE__*/function(_antlr4$ParserRuleCon141){_inherits(Untyped_atomContext,_antlr4$ParserRuleCon141);var _super142=_createSuper(Untyped_atomContext);function Untyped_atomContext(parser,parent,invokingState){var _this142;_classCallCheck(this,Untyped_atomContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this142=_super142.call(this,parent,invokingState);_this142.parser=parser;_this142.ruleIndex=tptp_v7_0_0_0Parser.RULE_untyped_atom;return _this142;}_createClass(Untyped_atomContext,[{key:\"constant\",value:function constant(){return this.getTypedRuleContext(ConstantContext,0);}},{key:\"system_constant\",value:function system_constant(){return this.getTypedRuleContext(System_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterUntyped_atom(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitUntyped_atom(this);}}}]);return Untyped_atomContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_propositionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon142){_inherits(Defined_propositionContext,_antlr4$ParserRuleCon142);var _super143=_createSuper(Defined_propositionContext);function Defined_propositionContext(parser,parent,invokingState){var _this143;_classCallCheck(this,Defined_propositionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this143=_super143.call(this,parent,invokingState);_this143.parser=parser;_this143.ruleIndex=tptp_v7_0_0_0Parser.RULE_defined_proposition;return _this143;}_createClass(Defined_propositionContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(tptp_v7_0_0_0Parser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDefined_proposition(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDefined_proposition(this);}}}]);return Defined_propositionContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_predicateContext=/*#__PURE__*/function(_antlr4$ParserRuleCon143){_inherits(Defined_predicateContext,_antlr4$ParserRuleCon143);var _super144=_createSuper(Defined_predicateContext);function Defined_predicateContext(parser,parent,invokingState){var _this144;_classCallCheck(this,Defined_predicateContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this144=_super144.call(this,parent,invokingState);_this144.parser=parser;_this144.ruleIndex=tptp_v7_0_0_0Parser.RULE_defined_predicate;return _this144;}_createClass(Defined_predicateContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(tptp_v7_0_0_0Parser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDefined_predicate(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDefined_predicate(this);}}}]);return Defined_predicateContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_infix_predContext=/*#__PURE__*/function(_antlr4$ParserRuleCon144){_inherits(Defined_infix_predContext,_antlr4$ParserRuleCon144);var _super145=_createSuper(Defined_infix_predContext);function Defined_infix_predContext(parser,parent,invokingState){var _this145;_classCallCheck(this,Defined_infix_predContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this145=_super145.call(this,parent,invokingState);_this145.parser=parser;_this145.ruleIndex=tptp_v7_0_0_0Parser.RULE_defined_infix_pred;return _this145;}_createClass(Defined_infix_predContext,[{key:\"Infix_equality\",value:function Infix_equality(){return this.getToken(tptp_v7_0_0_0Parser.Infix_equality,0);}},{key:\"Assignment\",value:function Assignment(){return this.getToken(tptp_v7_0_0_0Parser.Assignment,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDefined_infix_pred(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDefined_infix_pred(this);}}}]);return Defined_infix_predContext;}(_antlr[\"default\"].ParserRuleContext);var ConstantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon145){_inherits(ConstantContext,_antlr4$ParserRuleCon145);var _super146=_createSuper(ConstantContext);function ConstantContext(parser,parent,invokingState){var _this146;_classCallCheck(this,ConstantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this146=_super146.call(this,parent,invokingState);_this146.parser=parser;_this146.ruleIndex=tptp_v7_0_0_0Parser.RULE_constant;return _this146;}_createClass(ConstantContext,[{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterConstant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitConstant(this);}}}]);return ConstantContext;}(_antlr[\"default\"].ParserRuleContext);var FunctorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon146){_inherits(FunctorContext,_antlr4$ParserRuleCon146);var _super147=_createSuper(FunctorContext);function FunctorContext(parser,parent,invokingState){var _this147;_classCallCheck(this,FunctorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this147=_super147.call(this,parent,invokingState);_this147.parser=parser;_this147.ruleIndex=tptp_v7_0_0_0Parser.RULE_functor;return _this147;}_createClass(FunctorContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFunctor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFunctor(this);}}}]);return FunctorContext;}(_antlr[\"default\"].ParserRuleContext);var System_constantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon147){_inherits(System_constantContext,_antlr4$ParserRuleCon147);var _super148=_createSuper(System_constantContext);function System_constantContext(parser,parent,invokingState){var _this148;_classCallCheck(this,System_constantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this148=_super148.call(this,parent,invokingState);_this148.parser=parser;_this148.ruleIndex=tptp_v7_0_0_0Parser.RULE_system_constant;return _this148;}_createClass(System_constantContext,[{key:\"system_functor\",value:function system_functor(){return this.getTypedRuleContext(System_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterSystem_constant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitSystem_constant(this);}}}]);return System_constantContext;}(_antlr[\"default\"].ParserRuleContext);var System_functorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon148){_inherits(System_functorContext,_antlr4$ParserRuleCon148);var _super149=_createSuper(System_functorContext);function System_functorContext(parser,parent,invokingState){var _this149;_classCallCheck(this,System_functorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this149=_super149.call(this,parent,invokingState);_this149.parser=parser;_this149.ruleIndex=tptp_v7_0_0_0Parser.RULE_system_functor;return _this149;}_createClass(System_functorContext,[{key:\"atomic_system_word\",value:function atomic_system_word(){return this.getTypedRuleContext(Atomic_system_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterSystem_functor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitSystem_functor(this);}}}]);return System_functorContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_constantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon149){_inherits(Defined_constantContext,_antlr4$ParserRuleCon149);var _super150=_createSuper(Defined_constantContext);function Defined_constantContext(parser,parent,invokingState){var _this150;_classCallCheck(this,Defined_constantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this150=_super150.call(this,parent,invokingState);_this150.parser=parser;_this150.ruleIndex=tptp_v7_0_0_0Parser.RULE_defined_constant;return _this150;}_createClass(Defined_constantContext,[{key:\"defined_functor\",value:function defined_functor(){return this.getTypedRuleContext(Defined_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDefined_constant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDefined_constant(this);}}}]);return Defined_constantContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_functorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon150){_inherits(Defined_functorContext,_antlr4$ParserRuleCon150);var _super151=_createSuper(Defined_functorContext);function Defined_functorContext(parser,parent,invokingState){var _this151;_classCallCheck(this,Defined_functorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this151=_super151.call(this,parent,invokingState);_this151.parser=parser;_this151.ruleIndex=tptp_v7_0_0_0Parser.RULE_defined_functor;return _this151;}_createClass(Defined_functorContext,[{key:\"atomic_defined_word\",value:function atomic_defined_word(){return this.getTypedRuleContext(Atomic_defined_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDefined_functor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDefined_functor(this);}}}]);return Defined_functorContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon151){_inherits(Defined_termContext,_antlr4$ParserRuleCon151);var _super152=_createSuper(Defined_termContext);function Defined_termContext(parser,parent,invokingState){var _this152;_classCallCheck(this,Defined_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this152=_super152.call(this,parent,invokingState);_this152.parser=parser;_this152.ruleIndex=tptp_v7_0_0_0Parser.RULE_defined_term;return _this152;}_createClass(Defined_termContext,[{key:\"number\",value:function number(){return this.getTypedRuleContext(NumberContext,0);}},{key:\"Distinct_object\",value:function Distinct_object(){return this.getToken(tptp_v7_0_0_0Parser.Distinct_object,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDefined_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDefined_term(this);}}}]);return Defined_termContext;}(_antlr[\"default\"].ParserRuleContext);var VariableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon152){_inherits(VariableContext,_antlr4$ParserRuleCon152);var _super153=_createSuper(VariableContext);function VariableContext(parser,parent,invokingState){var _this153;_classCallCheck(this,VariableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this153=_super153.call(this,parent,invokingState);_this153.parser=parser;_this153.ruleIndex=tptp_v7_0_0_0Parser.RULE_variable;return _this153;}_createClass(VariableContext,[{key:\"Upper_word\",value:function Upper_word(){return this.getToken(tptp_v7_0_0_0Parser.Upper_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterVariable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitVariable(this);}}}]);return VariableContext;}(_antlr[\"default\"].ParserRuleContext);var SourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon153){_inherits(SourceContext,_antlr4$ParserRuleCon153);var _super154=_createSuper(SourceContext);function SourceContext(parser,parent,invokingState){var _this154;_classCallCheck(this,SourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this154=_super154.call(this,parent,invokingState);_this154.parser=parser;_this154.ruleIndex=tptp_v7_0_0_0Parser.RULE_source;return _this154;}_createClass(SourceContext,[{key:\"dag_source\",value:function dag_source(){return this.getTypedRuleContext(Dag_sourceContext,0);}},{key:\"internal_source\",value:function internal_source(){return this.getTypedRuleContext(Internal_sourceContext,0);}},{key:\"external_source\",value:function external_source(){return this.getTypedRuleContext(External_sourceContext,0);}},{key:\"Lower_word\",value:function Lower_word(){return this.getToken(tptp_v7_0_0_0Parser.Lower_word,0);}},{key:\"sources\",value:function sources(){return this.getTypedRuleContext(SourcesContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterSource(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitSource(this);}}}]);return SourceContext;}(_antlr[\"default\"].ParserRuleContext);var SourcesContext=/*#__PURE__*/function(_antlr4$ParserRuleCon154){_inherits(SourcesContext,_antlr4$ParserRuleCon154);var _super155=_createSuper(SourcesContext);function SourcesContext(parser,parent,invokingState){var _this155;_classCallCheck(this,SourcesContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this155=_super155.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this155),\"source\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SourceContext);}else{return this.getTypedRuleContext(SourceContext,i);}});_this155.parser=parser;_this155.ruleIndex=tptp_v7_0_0_0Parser.RULE_sources;return _this155;}_createClass(SourcesContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterSources(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitSources(this);}}}]);return SourcesContext;}(_antlr[\"default\"].ParserRuleContext);var Dag_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon155){_inherits(Dag_sourceContext,_antlr4$ParserRuleCon155);var _super156=_createSuper(Dag_sourceContext);function Dag_sourceContext(parser,parent,invokingState){var _this156;_classCallCheck(this,Dag_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this156=_super156.call(this,parent,invokingState);_this156.parser=parser;_this156.ruleIndex=tptp_v7_0_0_0Parser.RULE_dag_source;return _this156;}_createClass(Dag_sourceContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"inference_record\",value:function inference_record(){return this.getTypedRuleContext(Inference_recordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDag_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDag_source(this);}}}]);return Dag_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_recordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon156){_inherits(Inference_recordContext,_antlr4$ParserRuleCon156);var _super157=_createSuper(Inference_recordContext);function Inference_recordContext(parser,parent,invokingState){var _this157;_classCallCheck(this,Inference_recordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this157=_super157.call(this,parent,invokingState);_this157.parser=parser;_this157.ruleIndex=tptp_v7_0_0_0Parser.RULE_inference_record;return _this157;}_createClass(Inference_recordContext,[{key:\"inference_rule\",value:function inference_rule(){return this.getTypedRuleContext(Inference_ruleContext,0);}},{key:\"useful_info\",value:function useful_info(){return this.getTypedRuleContext(Useful_infoContext,0);}},{key:\"inference_parents\",value:function inference_parents(){return this.getTypedRuleContext(Inference_parentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInference_record(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInference_record(this);}}}]);return Inference_recordContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_ruleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon157){_inherits(Inference_ruleContext,_antlr4$ParserRuleCon157);var _super158=_createSuper(Inference_ruleContext);function Inference_ruleContext(parser,parent,invokingState){var _this158;_classCallCheck(this,Inference_ruleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this158=_super158.call(this,parent,invokingState);_this158.parser=parser;_this158.ruleIndex=tptp_v7_0_0_0Parser.RULE_inference_rule;return _this158;}_createClass(Inference_ruleContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInference_rule(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInference_rule(this);}}}]);return Inference_ruleContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_parentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon158){_inherits(Inference_parentsContext,_antlr4$ParserRuleCon158);var _super159=_createSuper(Inference_parentsContext);function Inference_parentsContext(parser,parent,invokingState){var _this159;_classCallCheck(this,Inference_parentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this159=_super159.call(this,parent,invokingState);_this159.parser=parser;_this159.ruleIndex=tptp_v7_0_0_0Parser.RULE_inference_parents;return _this159;}_createClass(Inference_parentsContext,[{key:\"parent_list\",value:function parent_list(){return this.getTypedRuleContext(Parent_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInference_parents(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInference_parents(this);}}}]);return Inference_parentsContext;}(_antlr[\"default\"].ParserRuleContext);var Parent_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon159){_inherits(Parent_listContext,_antlr4$ParserRuleCon159);var _super160=_createSuper(Parent_listContext);function Parent_listContext(parser,parent,invokingState){var _this160;_classCallCheck(this,Parent_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this160=_super160.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this160),\"parent_info\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Parent_infoContext);}else{return this.getTypedRuleContext(Parent_infoContext,i);}});_this160.parser=parser;_this160.ruleIndex=tptp_v7_0_0_0Parser.RULE_parent_list;return _this160;}_createClass(Parent_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterParent_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitParent_list(this);}}}]);return Parent_listContext;}(_antlr[\"default\"].ParserRuleContext);var Parent_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon160){_inherits(Parent_infoContext,_antlr4$ParserRuleCon160);var _super161=_createSuper(Parent_infoContext);function Parent_infoContext(parser,parent,invokingState){var _this161;_classCallCheck(this,Parent_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this161=_super161.call(this,parent,invokingState);_this161.parser=parser;_this161.ruleIndex=tptp_v7_0_0_0Parser.RULE_parent_info;return _this161;}_createClass(Parent_infoContext,[{key:\"source\",value:function source(){return this.getTypedRuleContext(SourceContext,0);}},{key:\"parent_details\",value:function parent_details(){return this.getTypedRuleContext(Parent_detailsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterParent_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitParent_info(this);}}}]);return Parent_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Parent_detailsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon161){_inherits(Parent_detailsContext,_antlr4$ParserRuleCon161);var _super162=_createSuper(Parent_detailsContext);function Parent_detailsContext(parser,parent,invokingState){var _this162;_classCallCheck(this,Parent_detailsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this162=_super162.call(this,parent,invokingState);_this162.parser=parser;_this162.ruleIndex=tptp_v7_0_0_0Parser.RULE_parent_details;return _this162;}_createClass(Parent_detailsContext,[{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterParent_details(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitParent_details(this);}}}]);return Parent_detailsContext;}(_antlr[\"default\"].ParserRuleContext);var Internal_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon162){_inherits(Internal_sourceContext,_antlr4$ParserRuleCon162);var _super163=_createSuper(Internal_sourceContext);function Internal_sourceContext(parser,parent,invokingState){var _this163;_classCallCheck(this,Internal_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this163=_super163.call(this,parent,invokingState);_this163.parser=parser;_this163.ruleIndex=tptp_v7_0_0_0Parser.RULE_internal_source;return _this163;}_createClass(Internal_sourceContext,[{key:\"intro_type\",value:function intro_type(){return this.getTypedRuleContext(Intro_typeContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInternal_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInternal_source(this);}}}]);return Internal_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var Intro_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon163){_inherits(Intro_typeContext,_antlr4$ParserRuleCon163);var _super164=_createSuper(Intro_typeContext);function Intro_typeContext(parser,parent,invokingState){var _this164;_classCallCheck(this,Intro_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this164=_super164.call(this,parent,invokingState);_this164.parser=parser;_this164.ruleIndex=tptp_v7_0_0_0Parser.RULE_intro_type;return _this164;}_createClass(Intro_typeContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(tptp_v7_0_0_0Parser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterIntro_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitIntro_type(this);}}}]);return Intro_typeContext;}(_antlr[\"default\"].ParserRuleContext);var External_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon164){_inherits(External_sourceContext,_antlr4$ParserRuleCon164);var _super165=_createSuper(External_sourceContext);function External_sourceContext(parser,parent,invokingState){var _this165;_classCallCheck(this,External_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this165=_super165.call(this,parent,invokingState);_this165.parser=parser;_this165.ruleIndex=tptp_v7_0_0_0Parser.RULE_external_source;return _this165;}_createClass(External_sourceContext,[{key:\"file_source\",value:function file_source(){return this.getTypedRuleContext(File_sourceContext,0);}},{key:\"theory\",value:function theory(){return this.getTypedRuleContext(TheoryContext,0);}},{key:\"creator_source\",value:function creator_source(){return this.getTypedRuleContext(Creator_sourceContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterExternal_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitExternal_source(this);}}}]);return External_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var File_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon165){_inherits(File_sourceContext,_antlr4$ParserRuleCon165);var _super166=_createSuper(File_sourceContext);function File_sourceContext(parser,parent,invokingState){var _this166;_classCallCheck(this,File_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this166=_super166.call(this,parent,invokingState);_this166.parser=parser;_this166.ruleIndex=tptp_v7_0_0_0Parser.RULE_file_source;return _this166;}_createClass(File_sourceContext,[{key:\"file_name\",value:function file_name(){return this.getTypedRuleContext(File_nameContext,0);}},{key:\"file_info\",value:function file_info(){return this.getTypedRuleContext(File_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFile_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFile_source(this);}}}]);return File_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var File_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon166){_inherits(File_infoContext,_antlr4$ParserRuleCon166);var _super167=_createSuper(File_infoContext);function File_infoContext(parser,parent,invokingState){var _this167;_classCallCheck(this,File_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this167=_super167.call(this,parent,invokingState);_this167.parser=parser;_this167.ruleIndex=tptp_v7_0_0_0Parser.RULE_file_info;return _this167;}_createClass(File_infoContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFile_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFile_info(this);}}}]);return File_infoContext;}(_antlr[\"default\"].ParserRuleContext);var TheoryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon167){_inherits(TheoryContext,_antlr4$ParserRuleCon167);var _super168=_createSuper(TheoryContext);function TheoryContext(parser,parent,invokingState){var _this168;_classCallCheck(this,TheoryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this168=_super168.call(this,parent,invokingState);_this168.parser=parser;_this168.ruleIndex=tptp_v7_0_0_0Parser.RULE_theory;return _this168;}_createClass(TheoryContext,[{key:\"theory_name\",value:function theory_name(){return this.getTypedRuleContext(Theory_nameContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTheory(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTheory(this);}}}]);return TheoryContext;}(_antlr[\"default\"].ParserRuleContext);var Theory_nameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon168){_inherits(Theory_nameContext,_antlr4$ParserRuleCon168);var _super169=_createSuper(Theory_nameContext);function Theory_nameContext(parser,parent,invokingState){var _this169;_classCallCheck(this,Theory_nameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this169=_super169.call(this,parent,invokingState);_this169.parser=parser;_this169.ruleIndex=tptp_v7_0_0_0Parser.RULE_theory_name;return _this169;}_createClass(Theory_nameContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(tptp_v7_0_0_0Parser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterTheory_name(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitTheory_name(this);}}}]);return Theory_nameContext;}(_antlr[\"default\"].ParserRuleContext);var Creator_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon169){_inherits(Creator_sourceContext,_antlr4$ParserRuleCon169);var _super170=_createSuper(Creator_sourceContext);function Creator_sourceContext(parser,parent,invokingState){var _this170;_classCallCheck(this,Creator_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this170=_super170.call(this,parent,invokingState);_this170.parser=parser;_this170.ruleIndex=tptp_v7_0_0_0Parser.RULE_creator_source;return _this170;}_createClass(Creator_sourceContext,[{key:\"creator_name\",value:function creator_name(){return this.getTypedRuleContext(Creator_nameContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterCreator_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitCreator_source(this);}}}]);return Creator_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var Creator_nameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon170){_inherits(Creator_nameContext,_antlr4$ParserRuleCon170);var _super171=_createSuper(Creator_nameContext);function Creator_nameContext(parser,parent,invokingState){var _this171;_classCallCheck(this,Creator_nameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this171=_super171.call(this,parent,invokingState);_this171.parser=parser;_this171.ruleIndex=tptp_v7_0_0_0Parser.RULE_creator_name;return _this171;}_createClass(Creator_nameContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterCreator_name(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitCreator_name(this);}}}]);return Creator_nameContext;}(_antlr[\"default\"].ParserRuleContext);var Optional_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon171){_inherits(Optional_infoContext,_antlr4$ParserRuleCon171);var _super172=_createSuper(Optional_infoContext);function Optional_infoContext(parser,parent,invokingState){var _this172;_classCallCheck(this,Optional_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this172=_super172.call(this,parent,invokingState);_this172.parser=parser;_this172.ruleIndex=tptp_v7_0_0_0Parser.RULE_optional_info;return _this172;}_createClass(Optional_infoContext,[{key:\"useful_info\",value:function useful_info(){return this.getTypedRuleContext(Useful_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterOptional_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitOptional_info(this);}}}]);return Optional_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Useful_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon172){_inherits(Useful_infoContext,_antlr4$ParserRuleCon172);var _super173=_createSuper(Useful_infoContext);function Useful_infoContext(parser,parent,invokingState){var _this173;_classCallCheck(this,Useful_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this173=_super173.call(this,parent,invokingState);_this173.parser=parser;_this173.ruleIndex=tptp_v7_0_0_0Parser.RULE_useful_info;return _this173;}_createClass(Useful_infoContext,[{key:\"info_items\",value:function info_items(){return this.getTypedRuleContext(Info_itemsContext,0);}},{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterUseful_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitUseful_info(this);}}}]);return Useful_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Info_itemsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon173){_inherits(Info_itemsContext,_antlr4$ParserRuleCon173);var _super174=_createSuper(Info_itemsContext);function Info_itemsContext(parser,parent,invokingState){var _this174;_classCallCheck(this,Info_itemsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this174=_super174.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this174),\"info_item\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Info_itemContext);}else{return this.getTypedRuleContext(Info_itemContext,i);}});_this174.parser=parser;_this174.ruleIndex=tptp_v7_0_0_0Parser.RULE_info_items;return _this174;}_createClass(Info_itemsContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInfo_items(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInfo_items(this);}}}]);return Info_itemsContext;}(_antlr[\"default\"].ParserRuleContext);var Info_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon174){_inherits(Info_itemContext,_antlr4$ParserRuleCon174);var _super175=_createSuper(Info_itemContext);function Info_itemContext(parser,parent,invokingState){var _this175;_classCallCheck(this,Info_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this175=_super175.call(this,parent,invokingState);_this175.parser=parser;_this175.ruleIndex=tptp_v7_0_0_0Parser.RULE_info_item;return _this175;}_createClass(Info_itemContext,[{key:\"formula_item\",value:function formula_item(){return this.getTypedRuleContext(Formula_itemContext,0);}},{key:\"inference_item\",value:function inference_item(){return this.getTypedRuleContext(Inference_itemContext,0);}},{key:\"general_function\",value:function general_function(){return this.getTypedRuleContext(General_functionContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInfo_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInfo_item(this);}}}]);return Info_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon175){_inherits(Formula_itemContext,_antlr4$ParserRuleCon175);var _super176=_createSuper(Formula_itemContext);function Formula_itemContext(parser,parent,invokingState){var _this176;_classCallCheck(this,Formula_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this176=_super176.call(this,parent,invokingState);_this176.parser=parser;_this176.ruleIndex=tptp_v7_0_0_0Parser.RULE_formula_item;return _this176;}_createClass(Formula_itemContext,[{key:\"description_item\",value:function description_item(){return this.getTypedRuleContext(Description_itemContext,0);}},{key:\"iquote_item\",value:function iquote_item(){return this.getTypedRuleContext(Iquote_itemContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFormula_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFormula_item(this);}}}]);return Formula_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Description_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon176){_inherits(Description_itemContext,_antlr4$ParserRuleCon176);var _super177=_createSuper(Description_itemContext);function Description_itemContext(parser,parent,invokingState){var _this177;_classCallCheck(this,Description_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this177=_super177.call(this,parent,invokingState);_this177.parser=parser;_this177.ruleIndex=tptp_v7_0_0_0Parser.RULE_description_item;return _this177;}_createClass(Description_itemContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterDescription_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitDescription_item(this);}}}]);return Description_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Iquote_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon177){_inherits(Iquote_itemContext,_antlr4$ParserRuleCon177);var _super178=_createSuper(Iquote_itemContext);function Iquote_itemContext(parser,parent,invokingState){var _this178;_classCallCheck(this,Iquote_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this178=_super178.call(this,parent,invokingState);_this178.parser=parser;_this178.ruleIndex=tptp_v7_0_0_0Parser.RULE_iquote_item;return _this178;}_createClass(Iquote_itemContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterIquote_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitIquote_item(this);}}}]);return Iquote_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon178){_inherits(Inference_itemContext,_antlr4$ParserRuleCon178);var _super179=_createSuper(Inference_itemContext);function Inference_itemContext(parser,parent,invokingState){var _this179;_classCallCheck(this,Inference_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this179=_super179.call(this,parent,invokingState);_this179.parser=parser;_this179.ruleIndex=tptp_v7_0_0_0Parser.RULE_inference_item;return _this179;}_createClass(Inference_itemContext,[{key:\"inference_status\",value:function inference_status(){return this.getTypedRuleContext(Inference_statusContext,0);}},{key:\"assumptions_record\",value:function assumptions_record(){return this.getTypedRuleContext(Assumptions_recordContext,0);}},{key:\"new_symbol_record\",value:function new_symbol_record(){return this.getTypedRuleContext(New_symbol_recordContext,0);}},{key:\"refutation\",value:function refutation(){return this.getTypedRuleContext(RefutationContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInference_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInference_item(this);}}}]);return Inference_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_statusContext=/*#__PURE__*/function(_antlr4$ParserRuleCon179){_inherits(Inference_statusContext,_antlr4$ParserRuleCon179);var _super180=_createSuper(Inference_statusContext);function Inference_statusContext(parser,parent,invokingState){var _this180;_classCallCheck(this,Inference_statusContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this180=_super180.call(this,parent,invokingState);_this180.parser=parser;_this180.ruleIndex=tptp_v7_0_0_0Parser.RULE_inference_status;return _this180;}_createClass(Inference_statusContext,[{key:\"status_value\",value:function status_value(){return this.getTypedRuleContext(Status_valueContext,0);}},{key:\"inference_info\",value:function inference_info(){return this.getTypedRuleContext(Inference_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInference_status(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInference_status(this);}}}]);return Inference_statusContext;}(_antlr[\"default\"].ParserRuleContext);var Status_valueContext=/*#__PURE__*/function(_antlr4$ParserRuleCon180){_inherits(Status_valueContext,_antlr4$ParserRuleCon180);var _super181=_createSuper(Status_valueContext);function Status_valueContext(parser,parent,invokingState){var _this181;_classCallCheck(this,Status_valueContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this181=_super181.call(this,parent,invokingState);_this181.parser=parser;_this181.ruleIndex=tptp_v7_0_0_0Parser.RULE_status_value;return _this181;}_createClass(Status_valueContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(tptp_v7_0_0_0Parser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterStatus_value(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitStatus_value(this);}}}]);return Status_valueContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon181){_inherits(Inference_infoContext,_antlr4$ParserRuleCon181);var _super182=_createSuper(Inference_infoContext);function Inference_infoContext(parser,parent,invokingState){var _this182;_classCallCheck(this,Inference_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this182=_super182.call(this,parent,invokingState);_this182.parser=parser;_this182.ruleIndex=tptp_v7_0_0_0Parser.RULE_inference_info;return _this182;}_createClass(Inference_infoContext,[{key:\"inference_rule\",value:function inference_rule(){return this.getTypedRuleContext(Inference_ruleContext,0);}},{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInference_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInference_info(this);}}}]);return Inference_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Assumptions_recordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon182){_inherits(Assumptions_recordContext,_antlr4$ParserRuleCon182);var _super183=_createSuper(Assumptions_recordContext);function Assumptions_recordContext(parser,parent,invokingState){var _this183;_classCallCheck(this,Assumptions_recordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this183=_super183.call(this,parent,invokingState);_this183.parser=parser;_this183.ruleIndex=tptp_v7_0_0_0Parser.RULE_assumptions_record;return _this183;}_createClass(Assumptions_recordContext,[{key:\"name_list\",value:function name_list(){return this.getTypedRuleContext(Name_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAssumptions_record(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAssumptions_record(this);}}}]);return Assumptions_recordContext;}(_antlr[\"default\"].ParserRuleContext);var RefutationContext=/*#__PURE__*/function(_antlr4$ParserRuleCon183){_inherits(RefutationContext,_antlr4$ParserRuleCon183);var _super184=_createSuper(RefutationContext);function RefutationContext(parser,parent,invokingState){var _this184;_classCallCheck(this,RefutationContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this184=_super184.call(this,parent,invokingState);_this184.parser=parser;_this184.ruleIndex=tptp_v7_0_0_0Parser.RULE_refutation;return _this184;}_createClass(RefutationContext,[{key:\"file_source\",value:function file_source(){return this.getTypedRuleContext(File_sourceContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterRefutation(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitRefutation(this);}}}]);return RefutationContext;}(_antlr[\"default\"].ParserRuleContext);var New_symbol_recordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon184){_inherits(New_symbol_recordContext,_antlr4$ParserRuleCon184);var _super185=_createSuper(New_symbol_recordContext);function New_symbol_recordContext(parser,parent,invokingState){var _this185;_classCallCheck(this,New_symbol_recordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this185=_super185.call(this,parent,invokingState);_this185.parser=parser;_this185.ruleIndex=tptp_v7_0_0_0Parser.RULE_new_symbol_record;return _this185;}_createClass(New_symbol_recordContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"new_symbol_list\",value:function new_symbol_list(){return this.getTypedRuleContext(New_symbol_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterNew_symbol_record(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitNew_symbol_record(this);}}}]);return New_symbol_recordContext;}(_antlr[\"default\"].ParserRuleContext);var New_symbol_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon185){_inherits(New_symbol_listContext,_antlr4$ParserRuleCon185);var _super186=_createSuper(New_symbol_listContext);function New_symbol_listContext(parser,parent,invokingState){var _this186;_classCallCheck(this,New_symbol_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this186=_super186.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this186),\"principal_symbol\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Principal_symbolContext);}else{return this.getTypedRuleContext(Principal_symbolContext,i);}});_this186.parser=parser;_this186.ruleIndex=tptp_v7_0_0_0Parser.RULE_new_symbol_list;return _this186;}_createClass(New_symbol_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterNew_symbol_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitNew_symbol_list(this);}}}]);return New_symbol_listContext;}(_antlr[\"default\"].ParserRuleContext);var Principal_symbolContext=/*#__PURE__*/function(_antlr4$ParserRuleCon186){_inherits(Principal_symbolContext,_antlr4$ParserRuleCon186);var _super187=_createSuper(Principal_symbolContext);function Principal_symbolContext(parser,parent,invokingState){var _this187;_classCallCheck(this,Principal_symbolContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this187=_super187.call(this,parent,invokingState);_this187.parser=parser;_this187.ruleIndex=tptp_v7_0_0_0Parser.RULE_principal_symbol;return _this187;}_createClass(Principal_symbolContext,[{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterPrincipal_symbol(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitPrincipal_symbol(this);}}}]);return Principal_symbolContext;}(_antlr[\"default\"].ParserRuleContext);var IncludeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon187){_inherits(IncludeContext,_antlr4$ParserRuleCon187);var _super188=_createSuper(IncludeContext);function IncludeContext(parser,parent,invokingState){var _this188;_classCallCheck(this,IncludeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this188=_super188.call(this,parent,invokingState);_this188.parser=parser;_this188.ruleIndex=tptp_v7_0_0_0Parser.RULE_include;return _this188;}_createClass(IncludeContext,[{key:\"file_name\",value:function file_name(){return this.getTypedRuleContext(File_nameContext,0);}},{key:\"formula_selection\",value:function formula_selection(){return this.getTypedRuleContext(Formula_selectionContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterInclude(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitInclude(this);}}}]);return IncludeContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_selectionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon188){_inherits(Formula_selectionContext,_antlr4$ParserRuleCon188);var _super189=_createSuper(Formula_selectionContext);function Formula_selectionContext(parser,parent,invokingState){var _this189;_classCallCheck(this,Formula_selectionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this189=_super189.call(this,parent,invokingState);_this189.parser=parser;_this189.ruleIndex=tptp_v7_0_0_0Parser.RULE_formula_selection;return _this189;}_createClass(Formula_selectionContext,[{key:\"name_list\",value:function name_list(){return this.getTypedRuleContext(Name_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFormula_selection(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFormula_selection(this);}}}]);return Formula_selectionContext;}(_antlr[\"default\"].ParserRuleContext);var Name_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon189){_inherits(Name_listContext,_antlr4$ParserRuleCon189);var _super190=_createSuper(Name_listContext);function Name_listContext(parser,parent,invokingState){var _this190;_classCallCheck(this,Name_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this190=_super190.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this190),\"name\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NameContext);}else{return this.getTypedRuleContext(NameContext,i);}});_this190.parser=parser;_this190.ruleIndex=tptp_v7_0_0_0Parser.RULE_name_list;return _this190;}_createClass(Name_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterName_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitName_list(this);}}}]);return Name_listContext;}(_antlr[\"default\"].ParserRuleContext);var General_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon190){_inherits(General_termContext,_antlr4$ParserRuleCon190);var _super191=_createSuper(General_termContext);function General_termContext(parser,parent,invokingState){var _this191;_classCallCheck(this,General_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this191=_super191.call(this,parent,invokingState);_this191.parser=parser;_this191.ruleIndex=tptp_v7_0_0_0Parser.RULE_general_term;return _this191;}_createClass(General_termContext,[{key:\"general_data\",value:function general_data(){return this.getTypedRuleContext(General_dataContext,0);}},{key:\"general_term\",value:function general_term(){return this.getTypedRuleContext(General_termContext,0);}},{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterGeneral_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitGeneral_term(this);}}}]);return General_termContext;}(_antlr[\"default\"].ParserRuleContext);var General_dataContext=/*#__PURE__*/function(_antlr4$ParserRuleCon191){_inherits(General_dataContext,_antlr4$ParserRuleCon191);var _super192=_createSuper(General_dataContext);function General_dataContext(parser,parent,invokingState){var _this192;_classCallCheck(this,General_dataContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this192=_super192.call(this,parent,invokingState);_this192.parser=parser;_this192.ruleIndex=tptp_v7_0_0_0Parser.RULE_general_data;return _this192;}_createClass(General_dataContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"general_function\",value:function general_function(){return this.getTypedRuleContext(General_functionContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"number\",value:function number(){return this.getTypedRuleContext(NumberContext,0);}},{key:\"Distinct_object\",value:function Distinct_object(){return this.getToken(tptp_v7_0_0_0Parser.Distinct_object,0);}},{key:\"formula_data\",value:function formula_data(){return this.getTypedRuleContext(Formula_dataContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterGeneral_data(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitGeneral_data(this);}}}]);return General_dataContext;}(_antlr[\"default\"].ParserRuleContext);var General_functionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon192){_inherits(General_functionContext,_antlr4$ParserRuleCon192);var _super193=_createSuper(General_functionContext);function General_functionContext(parser,parent,invokingState){var _this193;_classCallCheck(this,General_functionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this193=_super193.call(this,parent,invokingState);_this193.parser=parser;_this193.ruleIndex=tptp_v7_0_0_0Parser.RULE_general_function;return _this193;}_createClass(General_functionContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"general_terms\",value:function general_terms(){return this.getTypedRuleContext(General_termsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterGeneral_function(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitGeneral_function(this);}}}]);return General_functionContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_dataContext=/*#__PURE__*/function(_antlr4$ParserRuleCon193){_inherits(Formula_dataContext,_antlr4$ParserRuleCon193);var _super194=_createSuper(Formula_dataContext);function Formula_dataContext(parser,parent,invokingState){var _this194;_classCallCheck(this,Formula_dataContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this194=_super194.call(this,parent,invokingState);_this194.parser=parser;_this194.ruleIndex=tptp_v7_0_0_0Parser.RULE_formula_data;return _this194;}_createClass(Formula_dataContext,[{key:\"thf_formula\",value:function thf_formula(){return this.getTypedRuleContext(Thf_formulaContext,0);}},{key:\"tff_formula\",value:function tff_formula(){return this.getTypedRuleContext(Tff_formulaContext,0);}},{key:\"fof_formula\",value:function fof_formula(){return this.getTypedRuleContext(Fof_formulaContext,0);}},{key:\"cnf_formula\",value:function cnf_formula(){return this.getTypedRuleContext(Cnf_formulaContext,0);}},{key:\"fof_term\",value:function fof_term(){return this.getTypedRuleContext(Fof_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFormula_data(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFormula_data(this);}}}]);return Formula_dataContext;}(_antlr[\"default\"].ParserRuleContext);var General_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon194){_inherits(General_listContext,_antlr4$ParserRuleCon194);var _super195=_createSuper(General_listContext);function General_listContext(parser,parent,invokingState){var _this195;_classCallCheck(this,General_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this195=_super195.call(this,parent,invokingState);_this195.parser=parser;_this195.ruleIndex=tptp_v7_0_0_0Parser.RULE_general_list;return _this195;}_createClass(General_listContext,[{key:\"general_terms\",value:function general_terms(){return this.getTypedRuleContext(General_termsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterGeneral_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitGeneral_list(this);}}}]);return General_listContext;}(_antlr[\"default\"].ParserRuleContext);var General_termsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon195){_inherits(General_termsContext,_antlr4$ParserRuleCon195);var _super196=_createSuper(General_termsContext);function General_termsContext(parser,parent,invokingState){var _this196;_classCallCheck(this,General_termsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this196=_super196.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this196),\"general_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(General_termContext);}else{return this.getTypedRuleContext(General_termContext,i);}});_this196.parser=parser;_this196.ruleIndex=tptp_v7_0_0_0Parser.RULE_general_terms;return _this196;}_createClass(General_termsContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterGeneral_terms(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitGeneral_terms(this);}}}]);return General_termsContext;}(_antlr[\"default\"].ParserRuleContext);var NameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon196){_inherits(NameContext,_antlr4$ParserRuleCon196);var _super197=_createSuper(NameContext);function NameContext(parser,parent,invokingState){var _this197;_classCallCheck(this,NameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this197=_super197.call(this,parent,invokingState);_this197.parser=parser;_this197.ruleIndex=tptp_v7_0_0_0Parser.RULE_name;return _this197;}_createClass(NameContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"Integer\",value:function Integer(){return this.getToken(tptp_v7_0_0_0Parser.Integer,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterName(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitName(this);}}}]);return NameContext;}(_antlr[\"default\"].ParserRuleContext);var Atomic_wordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon197){_inherits(Atomic_wordContext,_antlr4$ParserRuleCon197);var _super198=_createSuper(Atomic_wordContext);function Atomic_wordContext(parser,parent,invokingState){var _this198;_classCallCheck(this,Atomic_wordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this198=_super198.call(this,parent,invokingState);_this198.parser=parser;_this198.ruleIndex=tptp_v7_0_0_0Parser.RULE_atomic_word;return _this198;}_createClass(Atomic_wordContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(tptp_v7_0_0_0Parser.Lower_word,0);}},{key:\"Single_quoted\",value:function Single_quoted(){return this.getToken(tptp_v7_0_0_0Parser.Single_quoted,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAtomic_word(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAtomic_word(this);}}}]);return Atomic_wordContext;}(_antlr[\"default\"].ParserRuleContext);var Atomic_defined_wordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon198){_inherits(Atomic_defined_wordContext,_antlr4$ParserRuleCon198);var _super199=_createSuper(Atomic_defined_wordContext);function Atomic_defined_wordContext(parser,parent,invokingState){var _this199;_classCallCheck(this,Atomic_defined_wordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this199=_super199.call(this,parent,invokingState);_this199.parser=parser;_this199.ruleIndex=tptp_v7_0_0_0Parser.RULE_atomic_defined_word;return _this199;}_createClass(Atomic_defined_wordContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(tptp_v7_0_0_0Parser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAtomic_defined_word(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAtomic_defined_word(this);}}}]);return Atomic_defined_wordContext;}(_antlr[\"default\"].ParserRuleContext);var Atomic_system_wordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon199){_inherits(Atomic_system_wordContext,_antlr4$ParserRuleCon199);var _super200=_createSuper(Atomic_system_wordContext);function Atomic_system_wordContext(parser,parent,invokingState){var _this200;_classCallCheck(this,Atomic_system_wordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this200=_super200.call(this,parent,invokingState);_this200.parser=parser;_this200.ruleIndex=tptp_v7_0_0_0Parser.RULE_atomic_system_word;return _this200;}_createClass(Atomic_system_wordContext,[{key:\"Dollar_dollar_word\",value:function Dollar_dollar_word(){return this.getToken(tptp_v7_0_0_0Parser.Dollar_dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterAtomic_system_word(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitAtomic_system_word(this);}}}]);return Atomic_system_wordContext;}(_antlr[\"default\"].ParserRuleContext);var NumberContext=/*#__PURE__*/function(_antlr4$ParserRuleCon200){_inherits(NumberContext,_antlr4$ParserRuleCon200);var _super201=_createSuper(NumberContext);function NumberContext(parser,parent,invokingState){var _this201;_classCallCheck(this,NumberContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this201=_super201.call(this,parent,invokingState);_this201.parser=parser;_this201.ruleIndex=tptp_v7_0_0_0Parser.RULE_number;return _this201;}_createClass(NumberContext,[{key:\"Integer\",value:function Integer(){return this.getToken(tptp_v7_0_0_0Parser.Integer,0);}},{key:\"Rational\",value:function Rational(){return this.getToken(tptp_v7_0_0_0Parser.Rational,0);}},{key:\"Real\",value:function Real(){return this.getToken(tptp_v7_0_0_0Parser.Real,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterNumber(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitNumber(this);}}}]);return NumberContext;}(_antlr[\"default\"].ParserRuleContext);var File_nameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon201){_inherits(File_nameContext,_antlr4$ParserRuleCon201);var _super202=_createSuper(File_nameContext);function File_nameContext(parser,parent,invokingState){var _this202;_classCallCheck(this,File_nameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this202=_super202.call(this,parent,invokingState);_this202.parser=parser;_this202.ruleIndex=tptp_v7_0_0_0Parser.RULE_file_name;return _this202;}_createClass(File_nameContext,[{key:\"Single_quoted\",value:function Single_quoted(){return this.getToken(tptp_v7_0_0_0Parser.Single_quoted,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.enterFile_name(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _tptp_v7_0_0_0Listener[\"default\"]){listener.exitFile_name(this);}}}]);return File_nameContext;}(_antlr[\"default\"].ParserRuleContext);tptp_v7_0_0_0Parser.Tptp_fileContext=Tptp_fileContext;tptp_v7_0_0_0Parser.Tptp_inputContext=Tptp_inputContext;tptp_v7_0_0_0Parser.Annotated_formulaContext=Annotated_formulaContext;tptp_v7_0_0_0Parser.Tpi_annotatedContext=Tpi_annotatedContext;tptp_v7_0_0_0Parser.Tpi_formulaContext=Tpi_formulaContext;tptp_v7_0_0_0Parser.Thf_annotatedContext=Thf_annotatedContext;tptp_v7_0_0_0Parser.Tfx_annotatedContext=Tfx_annotatedContext;tptp_v7_0_0_0Parser.Tff_annotatedContext=Tff_annotatedContext;tptp_v7_0_0_0Parser.Tcf_annotatedContext=Tcf_annotatedContext;tptp_v7_0_0_0Parser.Fof_annotatedContext=Fof_annotatedContext;tptp_v7_0_0_0Parser.Cnf_annotatedContext=Cnf_annotatedContext;tptp_v7_0_0_0Parser.AnnotationsContext=AnnotationsContext;tptp_v7_0_0_0Parser.Formula_roleContext=Formula_roleContext;tptp_v7_0_0_0Parser.Thf_formulaContext=Thf_formulaContext;tptp_v7_0_0_0Parser.Thf_logic_formulaContext=Thf_logic_formulaContext;tptp_v7_0_0_0Parser.Thf_binary_formulaContext=Thf_binary_formulaContext;tptp_v7_0_0_0Parser.Thf_binary_pairContext=Thf_binary_pairContext;tptp_v7_0_0_0Parser.Thf_binary_tupleContext=Thf_binary_tupleContext;tptp_v7_0_0_0Parser.Thf_or_formulaContext=Thf_or_formulaContext;tptp_v7_0_0_0Parser.Thf_and_formulaContext=Thf_and_formulaContext;tptp_v7_0_0_0Parser.Thf_apply_formulaContext=Thf_apply_formulaContext;tptp_v7_0_0_0Parser.Thf_unitary_formulaContext=Thf_unitary_formulaContext;tptp_v7_0_0_0Parser.Thf_quantified_formulaContext=Thf_quantified_formulaContext;tptp_v7_0_0_0Parser.Thf_quantificationContext=Thf_quantificationContext;tptp_v7_0_0_0Parser.Thf_variable_listContext=Thf_variable_listContext;tptp_v7_0_0_0Parser.Thf_variableContext=Thf_variableContext;tptp_v7_0_0_0Parser.Thf_typed_variableContext=Thf_typed_variableContext;tptp_v7_0_0_0Parser.Thf_unary_formulaContext=Thf_unary_formulaContext;tptp_v7_0_0_0Parser.Thf_atomContext=Thf_atomContext;tptp_v7_0_0_0Parser.Thf_functionContext=Thf_functionContext;tptp_v7_0_0_0Parser.Thf_conn_termContext=Thf_conn_termContext;tptp_v7_0_0_0Parser.Thf_conditionalContext=Thf_conditionalContext;tptp_v7_0_0_0Parser.Thf_letContext=Thf_letContext;tptp_v7_0_0_0Parser.Thf_argumentsContext=Thf_argumentsContext;tptp_v7_0_0_0Parser.Thf_type_formulaContext=Thf_type_formulaContext;tptp_v7_0_0_0Parser.Thf_typeable_formulaContext=Thf_typeable_formulaContext;tptp_v7_0_0_0Parser.Thf_subtypeContext=Thf_subtypeContext;tptp_v7_0_0_0Parser.Thf_top_level_typeContext=Thf_top_level_typeContext;tptp_v7_0_0_0Parser.Thf_unitary_typeContext=Thf_unitary_typeContext;tptp_v7_0_0_0Parser.Thf_apply_typeContext=Thf_apply_typeContext;tptp_v7_0_0_0Parser.Thf_binary_typeContext=Thf_binary_typeContext;tptp_v7_0_0_0Parser.Thf_mapping_typeContext=Thf_mapping_typeContext;tptp_v7_0_0_0Parser.Thf_xprod_typeContext=Thf_xprod_typeContext;tptp_v7_0_0_0Parser.Thf_union_typeContext=Thf_union_typeContext;tptp_v7_0_0_0Parser.Thf_sequentContext=Thf_sequentContext;tptp_v7_0_0_0Parser.Thf_tupleContext=Thf_tupleContext;tptp_v7_0_0_0Parser.Thf_formula_listContext=Thf_formula_listContext;tptp_v7_0_0_0Parser.Tfx_formulaContext=Tfx_formulaContext;tptp_v7_0_0_0Parser.Tfx_logic_formulaContext=Tfx_logic_formulaContext;tptp_v7_0_0_0Parser.Tff_formulaContext=Tff_formulaContext;tptp_v7_0_0_0Parser.Tff_logic_formulaContext=Tff_logic_formulaContext;tptp_v7_0_0_0Parser.Tff_binary_formulaContext=Tff_binary_formulaContext;tptp_v7_0_0_0Parser.Tff_binary_nonassocContext=Tff_binary_nonassocContext;tptp_v7_0_0_0Parser.Tff_binary_assocContext=Tff_binary_assocContext;tptp_v7_0_0_0Parser.Tff_or_formulaContext=Tff_or_formulaContext;tptp_v7_0_0_0Parser.Tff_and_formulaContext=Tff_and_formulaContext;tptp_v7_0_0_0Parser.Tff_unitary_formulaContext=Tff_unitary_formulaContext;tptp_v7_0_0_0Parser.Tff_quantified_formulaContext=Tff_quantified_formulaContext;tptp_v7_0_0_0Parser.Tff_variable_listContext=Tff_variable_listContext;tptp_v7_0_0_0Parser.Tff_variableContext=Tff_variableContext;tptp_v7_0_0_0Parser.Tff_typed_variableContext=Tff_typed_variableContext;tptp_v7_0_0_0Parser.Tff_unary_formulaContext=Tff_unary_formulaContext;tptp_v7_0_0_0Parser.Tff_atomic_formulaContext=Tff_atomic_formulaContext;tptp_v7_0_0_0Parser.Tff_conditionalContext=Tff_conditionalContext;tptp_v7_0_0_0Parser.Tff_letContext=Tff_letContext;tptp_v7_0_0_0Parser.Tff_let_term_defnsContext=Tff_let_term_defnsContext;tptp_v7_0_0_0Parser.Tff_let_term_listContext=Tff_let_term_listContext;tptp_v7_0_0_0Parser.Tff_let_term_defnContext=Tff_let_term_defnContext;tptp_v7_0_0_0Parser.Tff_let_term_bindingContext=Tff_let_term_bindingContext;tptp_v7_0_0_0Parser.Tff_let_formula_defnsContext=Tff_let_formula_defnsContext;tptp_v7_0_0_0Parser.Tff_let_formula_listContext=Tff_let_formula_listContext;tptp_v7_0_0_0Parser.Tff_let_formula_defnContext=Tff_let_formula_defnContext;tptp_v7_0_0_0Parser.Tff_let_formula_bindingContext=Tff_let_formula_bindingContext;tptp_v7_0_0_0Parser.Tff_sequentContext=Tff_sequentContext;tptp_v7_0_0_0Parser.Tff_formula_tupleContext=Tff_formula_tupleContext;tptp_v7_0_0_0Parser.Tff_formula_tuple_listContext=Tff_formula_tuple_listContext;tptp_v7_0_0_0Parser.Tff_typed_atomContext=Tff_typed_atomContext;tptp_v7_0_0_0Parser.Tff_subtypeContext=Tff_subtypeContext;tptp_v7_0_0_0Parser.Tff_top_level_typeContext=Tff_top_level_typeContext;tptp_v7_0_0_0Parser.Tf1_quantified_typeContext=Tf1_quantified_typeContext;tptp_v7_0_0_0Parser.Tff_monotypeContext=Tff_monotypeContext;tptp_v7_0_0_0Parser.Tff_unitary_typeContext=Tff_unitary_typeContext;tptp_v7_0_0_0Parser.Tff_atomic_typeContext=Tff_atomic_typeContext;tptp_v7_0_0_0Parser.Tff_type_argumentsContext=Tff_type_argumentsContext;tptp_v7_0_0_0Parser.Tff_mapping_typeContext=Tff_mapping_typeContext;tptp_v7_0_0_0Parser.Tff_xprod_typeContext=Tff_xprod_typeContext;tptp_v7_0_0_0Parser.Tcf_formulaContext=Tcf_formulaContext;tptp_v7_0_0_0Parser.Tcf_logic_formulaContext=Tcf_logic_formulaContext;tptp_v7_0_0_0Parser.Tcf_quantified_formulaContext=Tcf_quantified_formulaContext;tptp_v7_0_0_0Parser.Fof_formulaContext=Fof_formulaContext;tptp_v7_0_0_0Parser.Fof_logic_formulaContext=Fof_logic_formulaContext;tptp_v7_0_0_0Parser.Fof_binary_formulaContext=Fof_binary_formulaContext;tptp_v7_0_0_0Parser.Fof_binary_nonassocContext=Fof_binary_nonassocContext;tptp_v7_0_0_0Parser.Fof_binary_assocContext=Fof_binary_assocContext;tptp_v7_0_0_0Parser.Fof_or_formulaContext=Fof_or_formulaContext;tptp_v7_0_0_0Parser.Fof_and_formulaContext=Fof_and_formulaContext;tptp_v7_0_0_0Parser.Fof_unitary_formulaContext=Fof_unitary_formulaContext;tptp_v7_0_0_0Parser.Fof_quantified_formulaContext=Fof_quantified_formulaContext;tptp_v7_0_0_0Parser.Fof_variable_listContext=Fof_variable_listContext;tptp_v7_0_0_0Parser.Fof_unary_formulaContext=Fof_unary_formulaContext;tptp_v7_0_0_0Parser.Fof_infix_unaryContext=Fof_infix_unaryContext;tptp_v7_0_0_0Parser.Fof_atomic_formulaContext=Fof_atomic_formulaContext;tptp_v7_0_0_0Parser.Fof_plain_atomic_formulaContext=Fof_plain_atomic_formulaContext;tptp_v7_0_0_0Parser.Fof_defined_atomic_formulaContext=Fof_defined_atomic_formulaContext;tptp_v7_0_0_0Parser.Fof_defined_plain_formulaContext=Fof_defined_plain_formulaContext;tptp_v7_0_0_0Parser.Fof_defined_infix_formulaContext=Fof_defined_infix_formulaContext;tptp_v7_0_0_0Parser.Fof_system_atomic_formulaContext=Fof_system_atomic_formulaContext;tptp_v7_0_0_0Parser.Fof_plain_termContext=Fof_plain_termContext;tptp_v7_0_0_0Parser.Fof_defined_termContext=Fof_defined_termContext;tptp_v7_0_0_0Parser.Fof_defined_atomic_termContext=Fof_defined_atomic_termContext;tptp_v7_0_0_0Parser.Fof_defined_plain_termContext=Fof_defined_plain_termContext;tptp_v7_0_0_0Parser.Fof_system_termContext=Fof_system_termContext;tptp_v7_0_0_0Parser.Fof_argumentsContext=Fof_argumentsContext;tptp_v7_0_0_0Parser.Fof_termContext=Fof_termContext;tptp_v7_0_0_0Parser.Fof_function_termContext=Fof_function_termContext;tptp_v7_0_0_0Parser.Tff_conditional_termContext=Tff_conditional_termContext;tptp_v7_0_0_0Parser.Tff_let_termContext=Tff_let_termContext;tptp_v7_0_0_0Parser.Tff_tuple_termContext=Tff_tuple_termContext;tptp_v7_0_0_0Parser.Fof_sequentContext=Fof_sequentContext;tptp_v7_0_0_0Parser.Fof_formula_tupleContext=Fof_formula_tupleContext;tptp_v7_0_0_0Parser.Fof_formula_tuple_listContext=Fof_formula_tuple_listContext;tptp_v7_0_0_0Parser.Cnf_formulaContext=Cnf_formulaContext;tptp_v7_0_0_0Parser.Cnf_disjunctionContext=Cnf_disjunctionContext;tptp_v7_0_0_0Parser.Cnf_literalContext=Cnf_literalContext;tptp_v7_0_0_0Parser.Thf_quantifierContext=Thf_quantifierContext;tptp_v7_0_0_0Parser.Th0_quantifierContext=Th0_quantifierContext;tptp_v7_0_0_0Parser.Th1_quantifierContext=Th1_quantifierContext;tptp_v7_0_0_0Parser.Thf_pair_connectiveContext=Thf_pair_connectiveContext;tptp_v7_0_0_0Parser.Thf_unary_connectiveContext=Thf_unary_connectiveContext;tptp_v7_0_0_0Parser.Th1_unary_connectiveContext=Th1_unary_connectiveContext;tptp_v7_0_0_0Parser.Tff_pair_connectiveContext=Tff_pair_connectiveContext;tptp_v7_0_0_0Parser.Fof_quantifierContext=Fof_quantifierContext;tptp_v7_0_0_0Parser.Binary_connectiveContext=Binary_connectiveContext;tptp_v7_0_0_0Parser.Assoc_connectiveContext=Assoc_connectiveContext;tptp_v7_0_0_0Parser.Unary_connectiveContext=Unary_connectiveContext;tptp_v7_0_0_0Parser.Type_constantContext=Type_constantContext;tptp_v7_0_0_0Parser.Type_functorContext=Type_functorContext;tptp_v7_0_0_0Parser.Defined_typeContext=Defined_typeContext;tptp_v7_0_0_0Parser.System_typeContext=System_typeContext;tptp_v7_0_0_0Parser.AtomContext=AtomContext;tptp_v7_0_0_0Parser.Untyped_atomContext=Untyped_atomContext;tptp_v7_0_0_0Parser.Defined_propositionContext=Defined_propositionContext;tptp_v7_0_0_0Parser.Defined_predicateContext=Defined_predicateContext;tptp_v7_0_0_0Parser.Defined_infix_predContext=Defined_infix_predContext;tptp_v7_0_0_0Parser.ConstantContext=ConstantContext;tptp_v7_0_0_0Parser.FunctorContext=FunctorContext;tptp_v7_0_0_0Parser.System_constantContext=System_constantContext;tptp_v7_0_0_0Parser.System_functorContext=System_functorContext;tptp_v7_0_0_0Parser.Defined_constantContext=Defined_constantContext;tptp_v7_0_0_0Parser.Defined_functorContext=Defined_functorContext;tptp_v7_0_0_0Parser.Defined_termContext=Defined_termContext;tptp_v7_0_0_0Parser.VariableContext=VariableContext;tptp_v7_0_0_0Parser.SourceContext=SourceContext;tptp_v7_0_0_0Parser.SourcesContext=SourcesContext;tptp_v7_0_0_0Parser.Dag_sourceContext=Dag_sourceContext;tptp_v7_0_0_0Parser.Inference_recordContext=Inference_recordContext;tptp_v7_0_0_0Parser.Inference_ruleContext=Inference_ruleContext;tptp_v7_0_0_0Parser.Inference_parentsContext=Inference_parentsContext;tptp_v7_0_0_0Parser.Parent_listContext=Parent_listContext;tptp_v7_0_0_0Parser.Parent_infoContext=Parent_infoContext;tptp_v7_0_0_0Parser.Parent_detailsContext=Parent_detailsContext;tptp_v7_0_0_0Parser.Internal_sourceContext=Internal_sourceContext;tptp_v7_0_0_0Parser.Intro_typeContext=Intro_typeContext;tptp_v7_0_0_0Parser.External_sourceContext=External_sourceContext;tptp_v7_0_0_0Parser.File_sourceContext=File_sourceContext;tptp_v7_0_0_0Parser.File_infoContext=File_infoContext;tptp_v7_0_0_0Parser.TheoryContext=TheoryContext;tptp_v7_0_0_0Parser.Theory_nameContext=Theory_nameContext;tptp_v7_0_0_0Parser.Creator_sourceContext=Creator_sourceContext;tptp_v7_0_0_0Parser.Creator_nameContext=Creator_nameContext;tptp_v7_0_0_0Parser.Optional_infoContext=Optional_infoContext;tptp_v7_0_0_0Parser.Useful_infoContext=Useful_infoContext;tptp_v7_0_0_0Parser.Info_itemsContext=Info_itemsContext;tptp_v7_0_0_0Parser.Info_itemContext=Info_itemContext;tptp_v7_0_0_0Parser.Formula_itemContext=Formula_itemContext;tptp_v7_0_0_0Parser.Description_itemContext=Description_itemContext;tptp_v7_0_0_0Parser.Iquote_itemContext=Iquote_itemContext;tptp_v7_0_0_0Parser.Inference_itemContext=Inference_itemContext;tptp_v7_0_0_0Parser.Inference_statusContext=Inference_statusContext;tptp_v7_0_0_0Parser.Status_valueContext=Status_valueContext;tptp_v7_0_0_0Parser.Inference_infoContext=Inference_infoContext;tptp_v7_0_0_0Parser.Assumptions_recordContext=Assumptions_recordContext;tptp_v7_0_0_0Parser.RefutationContext=RefutationContext;tptp_v7_0_0_0Parser.New_symbol_recordContext=New_symbol_recordContext;tptp_v7_0_0_0Parser.New_symbol_listContext=New_symbol_listContext;tptp_v7_0_0_0Parser.Principal_symbolContext=Principal_symbolContext;tptp_v7_0_0_0Parser.IncludeContext=IncludeContext;tptp_v7_0_0_0Parser.Formula_selectionContext=Formula_selectionContext;tptp_v7_0_0_0Parser.Name_listContext=Name_listContext;tptp_v7_0_0_0Parser.General_termContext=General_termContext;tptp_v7_0_0_0Parser.General_dataContext=General_dataContext;tptp_v7_0_0_0Parser.General_functionContext=General_functionContext;tptp_v7_0_0_0Parser.Formula_dataContext=Formula_dataContext;tptp_v7_0_0_0Parser.General_listContext=General_listContext;tptp_v7_0_0_0Parser.General_termsContext=General_termsContext;tptp_v7_0_0_0Parser.NameContext=NameContext;tptp_v7_0_0_0Parser.Atomic_wordContext=Atomic_wordContext;tptp_v7_0_0_0Parser.Atomic_defined_wordContext=Atomic_defined_wordContext;tptp_v7_0_0_0Parser.Atomic_system_wordContext=Atomic_system_wordContext;tptp_v7_0_0_0Parser.NumberContext=NumberContext;tptp_v7_0_0_0Parser.File_nameContext=File_nameContext;\n\n//# sourceURL=webpack:///./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Parser.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/BufferedTokenStream.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/BufferedTokenStream.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst Lexer = __webpack_require__(/*! ./Lexer */ \"./node_modules/antlr4/src/antlr4/Lexer.js\");\nconst {Interval} = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\");\n\n// this is just to keep meaningful parameter types to Parser\nclass TokenStream {}\n\n/**\n * This implementation of {@link TokenStream} loads tokens from a\n * {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n * access to any previous token by index.\n *\n * <p>\n * This token stream ignores the value of {@link Token//getChannel}. If your\n * parser requires the token stream filter tokens to only those on a particular\n * channel, such as {@link Token//DEFAULT_CHANNEL} or\n * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n * {@link CommonTokenStream}.</p>\n */\nclass BufferedTokenStream extends TokenStream {\n\tconstructor(tokenSource) {\n\n\t\tsuper();\n\t\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\t\tthis.tokenSource = tokenSource;\n\t\t/**\n\t\t * A collection of all tokens fetched from the token source. The list is\n\t\t * considered a complete view of the input once {@link //fetchedEOF} is set\n\t\t * to {@code true}.\n\t\t */\n\t\tthis.tokens = [];\n\n\t\t/**\n\t\t * The index into {@link //tokens} of the current token (next token to\n\t\t * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t\t * be\n\t\t * {@link //LT LT(1)}.\n\t\t *\n\t\t * <p>This field is set to -1 when the stream is first constructed or when\n\t\t * {@link //setTokenSource} is called, indicating that the first token has\n\t\t * not yet been fetched from the token source. For additional information,\n\t\t * see the documentation of {@link IntStream} for a description of\n\t\t * Initializing Methods.</p>\n\t\t */\n\t\tthis.index = -1;\n\n\t\t/**\n\t\t * Indicates whether the {@link Token//EOF} token has been fetched from\n\t\t * {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t\t * performance for the following cases:\n\t\t *\n\t\t * <ul>\n\t\t * <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t\t * prevent\n\t\t * consuming the EOF symbol is optimized by checking the values of\n\t\t * {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t\t * //LA}.</li>\n\t\t * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t\t * into\n\t\t * {@link //tokens} is trivial with this field.</li>\n\t\t * <ul>\n\t\t */\n\t\tthis.fetchedEOF = false;\n\t}\n\n\tmark() {\n\t\treturn 0;\n\t}\n\n\trelease(marker) {\n\t\t// no resources to release\n\t}\n\n\treset() {\n\t\tthis.seek(0);\n\t}\n\n\tseek(index) {\n\t\tthis.lazyInit();\n\t\tthis.index = this.adjustSeekIndex(index);\n\t}\n\n\tget(index) {\n\t\tthis.lazyInit();\n\t\treturn this.tokens[index];\n\t}\n\n\tconsume() {\n\t\tlet skipEofCheck = false;\n\t\tif (this.index >= 0) {\n\t\t\tif (this.fetchedEOF) {\n\t\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t\t// fetched token except the last.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t\t} else {\n\t\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t\t}\n\t\t} else {\n\t\t\t// not yet initialized\n\t\t\tskipEofCheck = false;\n\t\t}\n\t\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\t\tthrow \"cannot consume EOF\";\n\t\t}\n\t\tif (this.sync(this.index + 1)) {\n\t\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure index {@code i} in tokens has a token.\n\t *\n\t * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise\n\t * {@code false}.\n\t * @see //get(int i)\n\t */\n\tsync(i) {\n\t\tconst n = i - this.tokens.length + 1; // how many more elements we need?\n\t\tif (n > 0) {\n\t\t\tconst fetched = this.fetch(n);\n\t\t\treturn fetched >= n;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add {@code n} elements to buffer.\n\t *\n\t * @return {Number} The actual number of elements added to the buffer.\n\t */\n\tfetch(n) {\n\t\tif (this.fetchedEOF) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst t = this.tokenSource.nextToken();\n\t\t\tt.tokenIndex = this.tokens.length;\n\t\t\tthis.tokens.push(t);\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tthis.fetchedEOF = true;\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n// Get all tokens from start..stop inclusively///\n\tgetTokens(start, stop, types) {\n\t\tif (types === undefined) {\n\t\t\ttypes = null;\n\t\t}\n\t\tif (start < 0 || stop < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.lazyInit();\n\t\tconst subset = [];\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tfor (let i = start; i < stop; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (types === null || types.contains(t.type)) {\n\t\t\t\tsubset.push(t);\n\t\t\t}\n\t\t}\n\t\treturn subset;\n\t}\n\n\tLA(i) {\n\t\treturn this.LT(i).type;\n\t}\n\n\tLB(k) {\n\t\tif (this.index - k < 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.tokens[this.index - k];\n\t}\n\n\tLT(k) {\n\t\tthis.lazyInit();\n\t\tif (k === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (k < 0) {\n\t\t\treturn this.LB(-k);\n\t\t}\n\t\tconst i = this.index + k - 1;\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) { // return EOF token\n\t\t\t// EOF must be last token\n\t\t\treturn this.tokens[this.tokens.length - 1];\n\t\t}\n\t\treturn this.tokens[i];\n\t}\n\n\t/**\n\t * Allowed derived classes to modify the behavior of operations which change\n\t * the current stream position by adjusting the target token index of a seek\n\t * operation. The default implementation simply returns {@code i}. If an\n\t * exception is thrown in this method, the current stream index should not be\n\t * changed.\n\t *\n\t * <p>For example, {@link CommonTokenStream} overrides this method to ensure\n\t * that\n\t * the seek target is always an on-channel token.</p>\n\t *\n\t * @param {Number} i The target token index.\n\t * @return {Number} The adjusted target token index.\n\t */\n\tadjustSeekIndex(i) {\n\t\treturn i;\n\t}\n\n\tlazyInit() {\n\t\tif (this.index === -1) {\n\t\t\tthis.setup();\n\t\t}\n\t}\n\n\tsetup() {\n\t\tthis.sync(0);\n\t\tthis.index = this.adjustSeekIndex(0);\n\t}\n\n// Reset this token stream by setting its token source.///\n\tsetTokenSource(tokenSource) {\n\t\tthis.tokenSource = tokenSource;\n\t\tthis.tokens = [];\n\t\tthis.index = -1;\n\t\tthis.fetchedEOF = false;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the next token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and EOF.\n\t */\n\tnextTokenOnChannel(i, channel) {\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet token = this.tokens[i];\n\t\twhile (token.channel !== this.channel) {\n\t\t\tif (token.type === Token.EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tthis.sync(i);\n\t\t\ttoken = this.tokens[i];\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the previous token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and 0.\n\t */\n\tpreviousTokenOnChannel(i, channel) {\n\t\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\t\ti -= 1;\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the right of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n\t * EOF. If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToRight(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tconst from_ = tokenIndex + 1;\n\t\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\t\tconst to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the left of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n\t * If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToLeft(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\t\tif (prevOnChannel === tokenIndex - 1) {\n\t\t\treturn null;\n\t\t}\n\t\t// if none on channel to left, prevOnChannel=-1 then from=0\n\t\tconst from_ = prevOnChannel + 1;\n\t\tconst to = tokenIndex - 1;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\tfilterForChannel(left, right, channel) {\n\t\tconst hidden = [];\n\t\tfor (let i = left; i < right + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (channel === -1) {\n\t\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\t\thidden.push(t);\n\t\t\t\t}\n\t\t\t} else if (t.channel === channel) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t}\n\t\tif (hidden.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn hidden;\n\t}\n\n\tgetSourceName() {\n\t\treturn this.tokenSource.getSourceName();\n\t}\n\n// Get the text of all tokens in this buffer.///\n\tgetText(interval) {\n\t\tthis.lazyInit();\n\t\tthis.fill();\n\t\tif (interval === undefined || interval === null) {\n\t\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t\t}\n\t\tlet start = interval.start;\n\t\tif (start instanceof Token) {\n\t\t\tstart = start.tokenIndex;\n\t\t}\n\t\tlet stop = interval.stop;\n\t\tif (stop instanceof Token) {\n\t\t\tstop = stop.tokenIndex;\n\t\t}\n\t\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tlet s = \"\";\n\t\tfor (let i = start; i < stop + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = s + t.text;\n\t\t}\n\t\treturn s;\n\t}\n\n// Get all tokens from lexer until EOF///\n\tfill() {\n\t\tthis.lazyInit();\n\t\twhile (this.fetch(1000) === 1000) {\n\t\t\tcontinue;\n\t\t}\n\t}\n}\n\n\nmodule.exports = BufferedTokenStream;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/BufferedTokenStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CharStreams.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CharStreams.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst InputStream = __webpack_require__(/*! ./InputStream */ \"./node_modules/antlr4/src/antlr4/InputStream.js\");\nconst fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\n\n/**\n * Utility functions to create InputStreams from various sources.\n *\n * All returned InputStreams support the full range of Unicode\n * up to U+10FFFF (the default behavior of InputStream only supports\n * code points up to U+FFFF).\n */\nconst CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function(str) {\n    return new InputStream(str, true);\n  },\n\n  /**\n   * Asynchronously creates an InputStream from a blob given the\n   * encoding of the bytes in that blob (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes onLoad(result) on success, onError(error) on\n   * failure.\n   */\n  fromBlob: function(blob, encoding, onLoad, onError) {\n    const reader = new window.FileReader();\n    reader.onload = function(e) {\n      const is = new InputStream(e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  /**\n   * Creates an InputStream from a Buffer given the\n   * encoding of the bytes in that buffer (defaults to 'utf8' if\n   * encoding is null).\n   */\n  fromBuffer: function(buffer, encoding) {\n    return new InputStream(buffer.toString(encoding), true);\n  },\n\n  /** Asynchronously creates an InputStream from a file on disk given\n   * the encoding of the bytes in that file (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes callback(error, result) on completion.\n   */\n  fromPath: function(path, encoding, callback) {\n    fs.readFile(path, encoding, function(err, data) {\n      let is = null;\n      if (data !== null) {\n        is = new InputStream(data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  /**\n   * Synchronously creates an InputStream given a path to a file\n   * on disk and the encoding of the bytes in that file (defaults to\n   * 'utf8' if encoding is null).\n   */\n  fromPathSync: function(path, encoding) {\n    const data = fs.readFileSync(path, encoding);\n    return new InputStream(data, true);\n  }\n};\n\nmodule.exports = CharStreams\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/CharStreams.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenFactory.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenFactory.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst CommonToken = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\").CommonToken;\n\nclass TokenFactory {}\n\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nclass CommonTokenFactory extends TokenFactory {\n    constructor(copyText) {\n        super();\n        /**\n         * Indicates whether {@link CommonToken//setText} should be called after\n         * constructing tokens to explicitly set the text. This is useful for cases\n         * where the input stream might not be able to provide arbitrary substrings\n         * of text from the input after the lexer creates a token (e.g. the\n         * implementation of {@link CharStream//getText} in\n         * {@link UnbufferedCharStream} throws an\n         * {@link UnsupportedOperationException}). Explicitly setting the token text\n         * allows {@link Token//getText} to be called at any time regardless of the\n         * input stream implementation.\n         *\n         * <p>\n         * The default value is {@code false} to avoid the performance and memory\n         * overhead of copying text for every token unless explicitly requested.</p>\n         */\n        this.copyText = copyText===undefined ? false : copyText;\n    }\n\n    create(source, type, text, channel, start, stop, line, column) {\n        const t = new CommonToken(source, type, channel, start, stop);\n        t.line = line;\n        t.column = column;\n        if (text !==null) {\n            t.text = text;\n        } else if (this.copyText && source[1] !==null) {\n            t.text = source[1].getText(start,stop);\n        }\n        return t;\n    }\n\n    createThin(type, text) {\n        const t = new CommonToken(null, type);\n        t.text = text;\n        return t;\n    }\n}\n\n/**\n * The default {@link CommonTokenFactory} instance.\n *\n * <p>\n * This token factory does not explicitly copy token text when constructing\n * tokens.</p>\n */\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nmodule.exports = CommonTokenFactory;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/CommonTokenFactory.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenStream.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenStream.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nconst Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\").Token;\nconst BufferedTokenStream = __webpack_require__(/*! ./BufferedTokenStream */ \"./node_modules/antlr4/src/antlr4/BufferedTokenStream.js\");\n\n/**\n * This class extends {@link BufferedTokenStream} with functionality to filter\n * token streams to tokens on a particular channel (tokens where\n * {@link Token//getChannel} returns a particular value).\n *\n * <p>\n * This token stream provides access to all tokens by index or when calling\n * methods like {@link //getText}. The channel filtering is only used for code\n * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n * {@link //LB}.</p>\n *\n * <p>\n * By default, tokens are placed on the default channel\n * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n * call {@link Lexer//setChannel}.\n * </p>\n *\n * <p>\n * Note: lexer rules which use the {@code ->skip} lexer command or call\n * {@link Lexer//skip} do not produce tokens at all, so input text matched by\n * such a rule will not be available as part of the token stream, regardless of\n * channel.</p>\n */\nclass CommonTokenStream extends BufferedTokenStream {\n    constructor(lexer, channel) {\n        super(lexer);\n        this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;\n    }\n\n    adjustSeekIndex(i) {\n        return this.nextTokenOnChannel(i, this.channel);\n    }\n\n    LB(k) {\n        if (k===0 || this.index-k<0) {\n            return null;\n        }\n        let i = this.index;\n        let n = 1;\n        // find k good tokens looking backwards\n        while (n <= k) {\n            // skip off-channel tokens\n            i = this.previousTokenOnChannel(i - 1, this.channel);\n            n += 1;\n        }\n        if (i < 0) {\n            return null;\n        }\n        return this.tokens[i];\n    }\n\n    LT(k) {\n        this.lazyInit();\n        if (k === 0) {\n            return null;\n        }\n        if (k < 0) {\n            return this.LB(-k);\n        }\n        let i = this.index;\n        let n = 1; // we know tokens[pos] is a good one\n        // find k good tokens\n        while (n < k) {\n            // skip off-channel tokens, but make sure to not look past EOF\n            if (this.sync(i + 1)) {\n                i = this.nextTokenOnChannel(i + 1, this.channel);\n            }\n            n += 1;\n        }\n        return this.tokens[i];\n    }\n\n    // Count EOF just once.\n    getNumberOfOnChannelTokens() {\n        let n = 0;\n        this.fill();\n        for (let i =0; i< this.tokens.length;i++) {\n            const t = this.tokens[i];\n            if( t.channel===this.channel) {\n                n += 1;\n            }\n            if( t.type===Token.EOF) {\n                break;\n            }\n        }\n        return n;\n    }\n}\n\nmodule.exports = CommonTokenStream;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/CommonTokenStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/FileStream.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/FileStream.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst InputStream = __webpack_require__(/*! ./InputStream */ \"./node_modules/antlr4/src/antlr4/InputStream.js\");\nconst fs = __webpack_require__(/*! fs */ \"./node_modules/node-libs-browser/mock/empty.js\");\n\n/**\n * This is an InputStream that is loaded from a file all at once\n * when you construct the object.\n */\nclass FileStream extends InputStream {\n\tconstructor(fileName, decodeToUnicodeCodePoints) {\n\t\tconst data = fs.readFileSync(fileName, \"utf8\");\n\t\tsuper(data, decodeToUnicodeCodePoints);\n\t\tthis.fileName = fileName;\n\t}\n}\n\nmodule.exports = FileStream\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/FileStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/InputStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/InputStream.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n__webpack_require__(/*! ./polyfills/codepointat */ \"./node_modules/antlr4/src/antlr4/polyfills/codepointat.js\");\n__webpack_require__(/*! ./polyfills/fromcodepoint */ \"./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\");\n\n/**\n * If decodeToUnicodeCodePoints is true, the input is treated\n * as a series of Unicode code points.\n *\n * Otherwise, the input is treated as a series of 16-bit UTF-16 code\n * units.\n */\nclass InputStream {\n\tconstructor(data, decodeToUnicodeCodePoints) {\n\t\tthis.name = \"<empty>\";\n\t\tthis.strdata = data;\n\t\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t\t// _loadString - Vacuum all input from a string and then treat it like a buffer.\n\t\tthis._index = 0;\n\t\tthis.data = [];\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tfor (let i = 0; i < this.strdata.length; ) {\n\t\t\t\tconst codePoint = this.strdata.codePointAt(i);\n\t\t\t\tthis.data.push(codePoint);\n\t\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < this.strdata.length; i++) {\n\t\t\t\tconst codeUnit = this.strdata.charCodeAt(i);\n\t\t\t\tthis.data.push(codeUnit);\n\t\t\t}\n\t\t}\n\t\tthis._size = this.data.length;\n\t}\n\n\t/**\n\t * Reset the stream so that it's in the same state it was\n\t * when the object was created *except* the data array is not\n\t * touched.\n\t */\n\treset() {\n\t\tthis._index = 0;\n\t}\n\n\tconsume() {\n\t\tif (this._index >= this._size) {\n\t\t\t// assert this.LA(1) == Token.EOF\n\t\t\tthrow (\"cannot consume EOF\");\n\t\t}\n\t\tthis._index += 1;\n\t}\n\n\tLA(offset) {\n\t\tif (offset === 0) {\n\t\t\treturn 0; // undefined\n\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t\t}\n\t\tconst pos = this._index + offset - 1;\n\t\tif (pos < 0 || pos >= this._size) { // invalid\n\t\t\treturn Token.EOF;\n\t\t}\n\t\treturn this.data[pos];\n\t}\n\n\tLT(offset) {\n\t\treturn this.LA(offset);\n\t}\n\n// mark/release do nothing; we have entire buffer\n\tmark() {\n\t\treturn -1;\n\t}\n\n\trelease(marker) {\n\t}\n\n\t/**\n\t * consume() ahead until p==_index; can't just set p=_index as we must\n\t * update line and column. If we seek backwards, just set p\n\t */\n\tseek(_index) {\n\t\tif (_index <= this._index) {\n\t\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t\t\t\t\t\t\t// ...)\n\t\t\treturn;\n\t\t}\n\t\t// seek forward\n\t\tthis._index = Math.min(_index, this._size);\n\t}\n\n\tgetText(start, stop) {\n\t\tif (stop >= this._size) {\n\t\t\tstop = this._size - 1;\n\t\t}\n\t\tif (start >= this._size) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\t\tlet result = \"\";\n\t\t\t\tfor (let i = start; i <= stop; i++) {\n\t\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.strdata;\n\t}\n\n\tget index(){\n\t\treturn this._index;\n\t}\n\n\tget size(){\n\t\treturn this._size;\n\t}\n}\n\n\nmodule.exports = InputStream;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/InputStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/IntervalSet.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/IntervalSet.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n\n/* stop is not included! */\nclass Interval {\n\tconstructor(start, stop) {\n\t\tthis.start = start;\n\t\tthis.stop = stop;\n\t}\n\n\tcontains(item) {\n\t\treturn item >= this.start && item < this.stop;\n\t}\n\n\ttoString() {\n\t\tif(this.start===this.stop-1) {\n\t\t\treturn this.start.toString();\n\t\t} else {\n\t\t\treturn this.start.toString() + \"..\" + (this.stop-1).toString();\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.stop - this.start;\n\t}\n}\n\n\nclass IntervalSet {\n\tconstructor() {\n\t\tthis.intervals = null;\n\t\tthis.readOnly = false;\n\t}\n\n\tfirst(v) {\n\t\tif (this.intervals === null || this.intervals.length===0) {\n\t\t\treturn Token.INVALID_TYPE;\n\t\t} else {\n\t\t\treturn this.intervals[0].start;\n\t\t}\n\t}\n\n\taddOne(v) {\n\t\tthis.addInterval(new Interval(v, v + 1));\n\t}\n\n\taddRange(l, h) {\n\t\tthis.addInterval(new Interval(l, h + 1));\n\t}\n\n\taddInterval(v) {\n\t\tif (this.intervals === null) {\n\t\t\tthis.intervals = [];\n\t\t\tthis.intervals.push(v);\n\t\t} else {\n\t\t\t// find insert pos\n\t\t\tfor (let k = 0; k < this.intervals.length; k++) {\n\t\t\t\tconst i = this.intervals[k];\n\t\t\t\t// distinct range -> insert\n\t\t\t\tif (v.stop < i.start) {\n\t\t\t\t\tthis.intervals.splice(k, 0, v);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// contiguous range -> adjust\n\t\t\t\telse if (v.stop === i.start) {\n\t\t\t\t\tthis.intervals[k].start = v.start;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// overlapping range -> adjust and reduce\n\t\t\t\telse if (v.start <= i.stop) {\n\t\t\t\t\tthis.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));\n\t\t\t\t\tthis.reduce(k);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// greater than any existing\n\t\t\tthis.intervals.push(v);\n\t\t}\n\t}\n\n\taddSet(other) {\n\t\tif (other.intervals !== null) {\n\t\t\tfor (let k = 0; k < other.intervals.length; k++) {\n\t\t\t\tconst i = other.intervals[k];\n\t\t\t\tthis.addInterval(new Interval(i.start, i.stop));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\treduce(k) {\n\t\t// only need to reduce if k is not the last\n\t\tif (k < this.intervalslength - 1) {\n\t\t\tconst l = this.intervals[k];\n\t\t\tconst r = this.intervals[k + 1];\n\t\t\t// if r contained in l\n\t\t\tif (l.stop >= r.stop) {\n\t\t\t\tthis.intervals.pop(k + 1);\n\t\t\t\tthis.reduce(k);\n\t\t\t} else if (l.stop >= r.start) {\n\t\t\t\tthis.intervals[k] = new Interval(l.start, r.stop);\n\t\t\t\tthis.intervals.pop(k + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tcomplement(start, stop) {\n\t\tconst result = new IntervalSet();\n\t\tresult.addInterval(new Interval(start,stop+1));\n\t\tfor(let i=0; i<this.intervals.length; i++) {\n\t\t\tresult.removeRange(this.intervals[i]);\n\t\t}\n\t\treturn result;\n\t}\n\n\tcontains(item) {\n\t\tif (this.intervals === null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (let k = 0; k < this.intervals.length; k++) {\n\t\t\t\tif(this.intervals[k].contains(item)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tremoveRange(v) {\n\t\tif(v.start===v.stop-1) {\n\t\t\tthis.removeOne(v.start);\n\t\t} else if (this.intervals!==null) {\n\t\t\tlet k = 0;\n\t\t\tfor(let n=0; n<this.intervals.length; n++) {\n\t\t\t\tconst i = this.intervals[k];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (v.stop<=i.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for including range, split it\n\t\t\t\telse if(v.start>i.start && v.stop<i.stop) {\n\t\t\t\t\tthis.intervals[k] = new Interval(i.start, v.start);\n\t\t\t\t\tconst x = new Interval(v.stop, i.stop);\n\t\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for included range, remove it\n\t\t\t\telse if(v.start<=i.start && v.stop>=i.stop) {\n\t\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\t\tk = k - 1; // need another pass\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if(v.start<i.stop) {\n\t\t\t\t\tthis.intervals[k] = new Interval(i.start, v.start);\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if(v.stop<i.stop) {\n\t\t\t\t\tthis.intervals[k] = new Interval(v.stop, i.stop);\n\t\t\t\t}\n\t\t\t\tk += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveOne(v) {\n\t\tif (this.intervals !== null) {\n\t\t\tfor (let k = 0; k < this.intervals.length; k++) {\n\t\t\t\tconst i = this.intervals[k];\n\t\t\t\t// intervals is ordered\n\t\t\t\tif (v < i.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for single value range\n\t\t\t\telse if (v === i.start && v === i.stop - 1) {\n\t\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if (v === i.start) {\n\t\t\t\t\tthis.intervals[k] = new Interval(i.start + 1, i.stop);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if (v === i.stop - 1) {\n\t\t\t\t\tthis.intervals[k] = new Interval(i.start, i.stop - 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// split existing range\n\t\t\t\telse if (v < i.stop - 1) {\n\t\t\t\t\tconst x = new Interval(i.start, v);\n\t\t\t\t\ti.start = v + 1;\n\t\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString(literalNames, symbolicNames, elemsAreChar) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\telemsAreChar = elemsAreChar || false;\n\t\tif (this.intervals === null) {\n\t\t\treturn \"{}\";\n\t\t} else if(literalNames!==null || symbolicNames!==null) {\n\t\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t\t} else if(elemsAreChar) {\n\t\t\treturn this.toCharString();\n\t\t} else {\n\t\t\treturn this.toIndexString();\n\t\t}\n\t}\n\n\ttoCharString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst v = this.intervals[i];\n\t\t\tif(v.stop===v.start+1) {\n\t\t\t\tif ( v.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'..'\" + String.fromCharCode(v.stop-1) + \"'\");\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoIndexString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst v = this.intervals[i];\n\t\t\tif(v.stop===v.start+1) {\n\t\t\t\tif ( v.start===Token.EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(v.start.toString());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(v.start.toString() + \"..\" + (v.stop-1).toString());\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoTokenString(literalNames, symbolicNames) {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst v = this.intervals[i];\n\t\t\tfor (let j = v.start; j < v.stop; j++) {\n\t\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\telementName(literalNames, symbolicNames, a) {\n\t\tif (a === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (a === Token.EPSILON) {\n\t\t\treturn \"<EPSILON>\";\n\t\t} else {\n\t\t\treturn literalNames[a] || symbolicNames[a];\n\t\t}\n\t}\n\n\tget length(){\n\t\tlet len = 0;\n\t\tthis.intervals.map(function(i) {len += i.length;});\n\t\treturn len;\n\t}\n}\n\nmodule.exports = {\n\tInterval,\n\tIntervalSet\n};\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/IntervalSet.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/LL1Analyzer.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/LL1Analyzer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Set, BitSet} = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst {Token} = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst {ATNConfig} = __webpack_require__(/*! ./atn/ATNConfig */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {IntervalSet} = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {RuleStopState} = __webpack_require__(/*! ./atn/ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = __webpack_require__(/*! ./atn/Transition */ \"./node_modules/antlr4/src/antlr4/atn/Transition.js\");\nconst {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = __webpack_require__(/*! ./PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\n\nclass LL1Analyzer {\n    constructor(atn) {\n        this.atn = atn;\n    }\n\n    /**\n     * Calculates the SLL(1) expected lookahead set for each outgoing transition\n     * of an {@link ATNState}. The returned array has one element for each\n     * outgoing transition in {@code s}. If the closure from transition\n     * <em>i</em> leads to a semantic predicate before matching a symbol, the\n     * element at index <em>i</em> of the result will be {@code null}.\n     *\n     * @param s the ATN state\n     * @return the expected symbols for each outgoing transition of {@code s}.\n     */\n    getDecisionLookahead(s) {\n        if (s === null) {\n            return null;\n        }\n        const count = s.transitions.length;\n        const look = [];\n        for(let alt=0; alt< count; alt++) {\n            look[alt] = new IntervalSet();\n            const lookBusy = new Set();\n            const seeThruPreds = false; // fail to get lookahead upon pred\n            this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,\n                  look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n            // Wipe out lookahead for this alternative if we found nothing\n            // or we had a predicate when we !seeThruPreds\n            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n                look[alt] = null;\n            }\n        }\n        return look;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and the end of the rule containing\n     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n     * If {@code ctx} is not {@code null} and the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx the complete parser context, or {@code null} if the context\n     * should be ignored\n     *\n     * @return The set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     */\n    LOOK(s, stopState, ctx) {\n        const r = new IntervalSet();\n        const seeThruPreds = true; // ignore preds; get all lookahead\n        ctx = ctx || null;\n        const lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n        this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n        return r;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n     * {@code true} and {@code stopState} or the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state.\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx The outer context, or {@code null} if the outer context should\n     * not be used.\n     * @param look The result lookahead set.\n     * @param lookBusy A set used for preventing epsilon closures in the ATN\n     * from causing a stack overflow. Outside code should pass\n     * {@code new Set<ATNConfig>} for this argument.\n     * @param calledRuleStack A set used for preventing left recursion in the\n     * ATN from causing a stack overflow. Outside code should pass\n     * {@code new BitSet()} for this argument.\n     * @param seeThruPreds {@code true} to true semantic predicates as\n     * implicitly {@code true} and \"see through them\", otherwise {@code false}\n     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n     * result if one is encountered.\n     * @param addEOF Add {@link Token//EOF} to the result if the end of the\n     * outermost context is reached. This parameter has no effect if {@code ctx}\n     * is {@code null}.\n     */\n    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n        const c = new ATNConfig({state:s, alt:0, context: ctx}, null);\n        if (lookBusy.contains(c)) {\n            return;\n        }\n        lookBusy.add(c);\n        if (s === stopState) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n        }\n        if (s instanceof RuleStopState ) {\n            if (ctx ===null) {\n                look.addOne(Token.EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(Token.EOF);\n                return;\n            }\n            if (ctx !== PredictionContext.EMPTY) {\n                // run thru all possible stack tops in ctx\n                for(let i=0; i<ctx.length; i++) {\n                    const returnState = this.atn.states[ctx.getReturnState(i)];\n                    const removed = calledRuleStack.contains(returnState.ruleIndex);\n                    try {\n                        calledRuleStack.remove(returnState.ruleIndex);\n                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                    } finally {\n                        if (removed) {\n                            calledRuleStack.add(returnState.ruleIndex);\n                        }\n                    }\n                }\n                return;\n            }\n        }\n        for(let j=0; j<s.transitions.length; j++) {\n            const t = s.transitions[j];\n            if (t.constructor === RuleTransition) {\n                if (calledRuleStack.contains(t.target.ruleIndex)) {\n                    continue;\n                }\n                const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n                try {\n                    calledRuleStack.add(t.target.ruleIndex);\n                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    calledRuleStack.remove(t.target.ruleIndex);\n                }\n            } else if (t instanceof AbstractPredicateTransition ) {\n                if (seeThruPreds) {\n                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } else {\n                    look.addOne(LL1Analyzer.HIT_PRED);\n                }\n            } else if( t.isEpsilon) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else if (t.constructor === WildcardTransition) {\n                look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );\n            } else {\n                let set = t.label;\n                if (set !== null) {\n                    if (t instanceof NotSetTransition) {\n                        set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                    }\n                    look.addSet(set);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Special value added to the lookahead sets to indicate that we hit\n * a predicate during analysis if {@code seeThruPreds==false}.\n */\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n\nmodule.exports = LL1Analyzer;\n\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/LL1Analyzer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Lexer.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Lexer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst Recognizer = __webpack_require__(/*! ./Recognizer */ \"./node_modules/antlr4/src/antlr4/Recognizer.js\");\nconst CommonTokenFactory = __webpack_require__(/*! ./CommonTokenFactory */ \"./node_modules/antlr4/src/antlr4/CommonTokenFactory.js\");\nconst {RecognitionException} = __webpack_require__(/*! ./error/Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\");\nconst {LexerNoViableAltException} = __webpack_require__(/*! ./error/Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\");\n\nclass TokenSource {}\n\n/**\n * A lexer is recognizer that draws input symbols from a character stream.\n * lexer grammars result in a subclass of this object. A Lexer object\n * uses simplified match() and error recovery mechanisms in the interest of speed.\n */\nclass Lexer extends Recognizer {\n\tconstructor(input) {\n\t\tsuper();\n\t\tthis._input = input;\n\t\tthis._factory = CommonTokenFactory.DEFAULT;\n\t\tthis._tokenFactorySourcePair = [ this, input ];\n\n\t\tthis._interp = null; // child classes must populate this\n\n\t\t/**\n\t\t * The goal of all lexer rules/methods is to create a token object.\n\t\t * this is an instance variable as multiple rules may collaborate to\n\t\t * create a single token. nextToken will return this object after\n\t\t * matching lexer rule(s). If you subclass to allow multiple token\n\t\t * emissions, then set this to the last token to be matched or\n\t\t * something nonnull so that the auto token emit mechanism will not\n\t\t * emit another token.\n\t\t */\n\t\tthis._token = null;\n\n\t\t/**\n\t\t * What character index in the stream did the current token start at?\n\t\t * Needed, for example, to get the text for current token. Set at\n\t\t * the start of nextToken.\n\t\t */\n\t\tthis._tokenStartCharIndex = -1;\n\n\t\t// The line on which the first character of the token resides///\n\t\tthis._tokenStartLine = -1;\n\n\t\t// The character position of first character within the line///\n\t\tthis._tokenStartColumn = -1;\n\n\t\t// Once we see EOF on char stream, next token will be EOF.\n\t\t// If you have DONE : EOF ; then you see DONE EOF.\n\t\tthis._hitEOF = false;\n\n\t\t// The channel number for the current token///\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t\t// The token type for the current token///\n\t\tthis._type = Token.INVALID_TYPE;\n\n\t\tthis._modeStack = [];\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t\t/**\n\t\t * You can set the text for the current token to override what is in\n\t\t * the input char buffer. Use setText() or can set this instance var.\n\t\t */\n\t\tthis._text = null;\n\t}\n\n\treset() {\n\t\t// wack Lexer state variables\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0); // rewind the input\n\t\t}\n\t\tthis._token = null;\n\t\tthis._type = Token.INVALID_TYPE;\n\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\tthis._tokenStartCharIndex = -1;\n\t\tthis._tokenStartColumn = -1;\n\t\tthis._tokenStartLine = -1;\n\t\tthis._text = null;\n\n\t\tthis._hitEOF = false;\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\t\tthis._modeStack = [];\n\n\t\tthis._interp.reset();\n\t}\n\n// Return a token from this source; i.e., match a token on the char stream.\n\tnextToken() {\n\t\tif (this._input === null) {\n\t\t\tthrow \"nextToken requires a non-null input stream.\";\n\t\t}\n\n\t\t/**\n\t\t * Mark start location in char stream so unbuffered streams are\n\t\t * guaranteed at least have text of current token\n\t\t */\n\t\tconst tokenStartMarker = this._input.mark();\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tif (this._hitEOF) {\n\t\t\t\t\tthis.emitEOF();\n\t\t\t\t\treturn this._token;\n\t\t\t\t}\n\t\t\t\tthis._token = null;\n\t\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\t\tthis._text = null;\n\t\t\t\tlet continueOuter = false;\n\t\t\t\twhile (true) {\n\t\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\t\tlet ttype = Lexer.SKIP;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif(e instanceof RecognitionException) {\n\t\t\t\t\t\t\tthis.notifyListeners(e); // report error\n\t\t\t\t\t\t\tthis.recover(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(e.stack);\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\t\tthis._type = ttype;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (continueOuter) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._token === null) {\n\t\t\t\t\tthis.emit();\n\t\t\t\t}\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t} finally {\n\t\t\t// make sure we release marker after match or\n\t\t\t// unbuffered char stream will keep buffering\n\t\t\tthis._input.release(tokenStartMarker);\n\t\t}\n\t}\n\n\t/**\n\t * Instruct the lexer to skip creating a token for current lexer rule\n\t * and look for another token. nextToken() knows to keep looking when\n\t * a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n\t * if token==null at end of any token rule, it creates one for you\n\t * and emits it.\n\t */\n\tskip() {\n\t\tthis._type = Lexer.SKIP;\n\t}\n\n\tmore() {\n\t\tthis._type = Lexer.MORE;\n\t}\n\n\tmode(m) {\n\t\tthis._mode = m;\n\t}\n\n\tpushMode(m) {\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"pushMode \" + m);\n\t\t}\n\t\tthis._modeStack.push(this._mode);\n\t\tthis.mode(m);\n\t}\n\n\tpopMode() {\n\t\tif (this._modeStack.length === 0) {\n\t\t\tthrow \"Empty Stack\";\n\t\t}\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t\t}\n\t\tthis.mode(this._modeStack.pop());\n\t\treturn this._mode;\n\t}\n\n\t/**\n\t * By default does not support multiple emits per nextToken invocation\n\t * for efficiency reasons. Subclass and override this method, nextToken,\n\t * and getToken (to push tokens into a list and pull from that list\n\t * rather than a single variable as this implementation does).\n\t */\n\temitToken(token) {\n\t\tthis._token = token;\n\t}\n\n\t/**\n\t * The standard method called to automatically emit a token at the\n\t * outermost lexical rule. The token object should point into the\n\t * char buffer start..stop. If there is a text override in 'text',\n\t * use that to set the token's text. Override this method to emit\n\t * custom Token objects or provide a new factory.\n\t */\n\temit() {\n\t\tconst t = this._factory.create(this._tokenFactorySourcePair, this._type,\n\t\t\t\tthis._text, this._channel, this._tokenStartCharIndex, this\n\t\t\t\t\t\t.getCharIndex() - 1, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn);\n\t\tthis.emitToken(t);\n\t\treturn t;\n\t}\n\n\temitEOF() {\n\t\tconst cpos = this.column;\n\t\tconst lpos = this.line;\n\t\tconst eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,\n\t\t\t\tnull, Token.DEFAULT_CHANNEL, this._input.index,\n\t\t\t\tthis._input.index - 1, lpos, cpos);\n\t\tthis.emitToken(eof);\n\t\treturn eof;\n\t}\n\n// What is the index of the current character of lookahead?///\n\tgetCharIndex() {\n\t\treturn this._input.index;\n\t}\n\n\t/**\n\t * Return a list of all Token objects in input char stream.\n\t * Forces load of all tokens. Does not include EOF token.\n\t */\n\tgetAllTokens() {\n\t\tconst tokens = [];\n\t\tlet t = this.nextToken();\n\t\twhile (t.type !== Token.EOF) {\n\t\t\ttokens.push(t);\n\t\t\tt = this.nextToken();\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tnotifyListeners(e) {\n\t\tconst start = this._tokenStartCharIndex;\n\t\tconst stop = this._input.index;\n\t\tconst text = this._input.getText(start, stop);\n\t\tconst msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, null, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn, msg, e);\n\t}\n\n\tgetErrorDisplay(s) {\n\t\tconst d = [];\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\td.push(s[i]);\n\t\t}\n\t\treturn d.join('');\n\t}\n\n\tgetErrorDisplayForChar(c) {\n\t\tif (c.charCodeAt(0) === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (c === '\\n') {\n\t\t\treturn \"\\\\n\";\n\t\t} else if (c === '\\t') {\n\t\t\treturn \"\\\\t\";\n\t\t} else if (c === '\\r') {\n\t\t\treturn \"\\\\r\";\n\t\t} else {\n\t\t\treturn c;\n\t\t}\n\t}\n\n\tgetCharErrorDisplay(c) {\n\t\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n\t}\n\n\t/**\n\t * Lexers can normally match any char in it's vocabulary after matching\n\t * a token, so do the easy thing and just kill a character and hope\n\t * it all works out. You can instead use the rule invocation stack\n\t * to do sophisticated error recovery if you are in a fragment rule.\n\t */\n\trecover(re) {\n\t\tif (this._input.LA(1) !== Token.EOF) {\n\t\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t\t// skip a char and try again\n\t\t\t\tthis._interp.consume(this._input);\n\t\t\t} else {\n\t\t\t\t// TODO: Do we lose character or line position information?\n\t\t\t\tthis._input.consume();\n\t\t\t}\n\t\t}\n\t}\n\n\tget inputStream(){\n\t\treturn this._input;\n\t}\n\n\tset inputStream(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t}\n\n\tget sourceName(){\n\t\treturn this._input.sourceName;\n\t}\n\n\tget type(){\n\t\treturn this.type;\n\t}\n\n\tset type(type) {\n\t\tthis._type = type;\n\t}\n\n\tget line(){\n\t\treturn this._interp.line;\n\t}\n\n\tset line(line) {\n\t\tthis._interp.line = line;\n\t}\n\n\tget column(){\n\t\treturn this._interp.column;\n\t}\n\n\tset column(column) {\n\t\tthis._interp.column = column;\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n\n\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\n// Set the char stream and reset the lexer\n\n\nmodule.exports = Lexer;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/Lexer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Parser.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Parser.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst {ParseTreeListener, TerminalNode, ErrorNode} = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst Recognizer = __webpack_require__(/*! ./Recognizer */ \"./node_modules/antlr4/src/antlr4/Recognizer.js\");\nconst {DefaultErrorStrategy} = __webpack_require__(/*! ./error/ErrorStrategy */ \"./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\");\nconst ATNDeserializer = __webpack_require__(/*! ./atn/ATNDeserializer */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\");\nconst ATNDeserializationOptions = __webpack_require__(/*! ./atn/ATNDeserializationOptions */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\");\nconst Lexer = __webpack_require__(/*! ./Lexer */ \"./node_modules/antlr4/src/antlr4/Lexer.js\");\n\nclass TraceListener extends ParseTreeListener {\n\tconstructor(parser) {\n\t\tsuper();\n\t\tthis.parser = parser;\n\t}\n\n\tenterEveryRule(ctx) {\n\t\tconsole.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t}\n\n\tvisitTerminal(node) {\n\t\tconsole.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n\t}\n\n\texitEveryRule(ctx) {\n\t\tconsole.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n\t}\n}\n\nclass Parser extends Recognizer {\n\t/**\n\t * this is all the parsing support code essentially; most of it is error\n\t * recovery stuff.\n\t */\n\tconstructor(input) {\n\t\tsuper();\n\t\t// The input stream.\n\t\tthis._input = null;\n\t\t/**\n\t\t * The error handling strategy for the parser. The default value is a new\n\t\t * instance of {@link DefaultErrorStrategy}.\n\t\t */\n\t\tthis._errHandler = new DefaultErrorStrategy();\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\t/**\n\t\t * The {@link ParserRuleContext} object for the currently executing rule.\n\t\t * this is always non-null during the parsing process.\n\t\t */\n\t\tthis._ctx = null;\n\t\t/**\n\t\t * Specifies whether or not the parser should construct a parse tree during\n\t\t * the parsing process. The default value is {@code true}.\n\t\t */\n\t\tthis.buildParseTrees = true;\n\t\t/**\n\t\t * When {@link //setTrace}{@code (true)} is called, a reference to the\n\t\t * {@link TraceListener} is stored here so it can be easily removed in a\n\t\t * later call to {@link //setTrace}{@code (false)}. The listener itself is\n\t\t * implemented as a parser listener so this field is not directly used by\n\t\t * other parser methods.\n\t\t */\n\t\tthis._tracer = null;\n\t\t/**\n\t\t * The list of {@link ParseTreeListener} listeners registered to receive\n\t\t * events during the parse.\n\t\t */\n\t\tthis._parseListeners = null;\n\t\t/**\n\t\t * The number of syntax errors reported during parsing. this value is\n\t\t * incremented each time {@link //notifyErrorListeners} is called.\n\t\t */\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setInputStream(input);\n\t}\n\n\t// reset the parser's state\n\treset() {\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0);\n\t\t}\n\t\tthis._errHandler.reset(this);\n\t\tthis._ctx = null;\n\t\tthis._syntaxErrors = 0;\n\t\tthis.setTrace(false);\n\t\tthis._precedenceStack = [];\n\t\tthis._precedenceStack.push(0);\n\t\tif (this._interp !== null) {\n\t\t\tthis._interp.reset();\n\t\t}\n\t}\n\n\t/**\n\t * Match current input symbol against {@code ttype}. If the symbol type\n\t * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n\t * called to complete the match process.\n\t *\n\t * <p>If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t * {@code true} and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t *\n\t * @param ttype the token type to match\n\t * @return the matched symbol\n\t * @throws RecognitionException if the current input symbol did not match\n\t * {@code ttype} and the error strategy could not recover from the\n\t * mismatched symbol\n\t */\n\tmatch(ttype) {\n\t\tlet t = this.getCurrentToken();\n\t\tif (t.type === ttype) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this.buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\t/**\n\t * Match current input symbol as a wildcard. If the symbol type matches\n\t * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n\t * and {@link //consume} are called to complete the match process.\n\t *\n\t * <p>If the symbol type does not match,\n\t * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n\t * strategy to attempt recovery. If {@link //getBuildParseTree} is\n\t * {@code true} and the token index of the symbol returned by\n\t * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n\t * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n\t *\n\t * @return the matched symbol\n\t * @throws RecognitionException if the current input symbol did not match\n\t * a wildcard and the error strategy could not recover from the mismatched\n\t * symbol\n\t */\n\tmatchWildcard() {\n\t\tlet t = this.getCurrentToken();\n\t\tif (t.type > 0) {\n\t\t\tthis._errHandler.reportMatch(this);\n\t\t\tthis.consume();\n\t\t} else {\n\t\t\tt = this._errHandler.recoverInline(this);\n\t\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t\t// we must have conjured up a new token during single token\n\t\t\t\t// insertion\n\t\t\t\t// if it's not the current symbol\n\t\t\t\tthis._ctx.addErrorNode(t);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\tgetParseListeners() {\n\t\treturn this._parseListeners || [];\n\t}\n\n\t/**\n\t * Registers {@code listener} to receive events during the parsing process.\n\t *\n\t * <p>To support output-preserving grammar transformations (including but not\n\t * limited to left-recursion removal, automated left-factoring, and\n\t * optimized code generation), calls to listener methods during the parse\n\t * may differ substantially from calls made by\n\t * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n\t * particular, rule entry and exit events may occur in a different order\n\t * during the parse than after the parser. In addition, calls to certain\n\t * rule entry methods may be omitted.</p>\n\t *\n\t * <p>With the following specific exceptions, calls to listener events are\n\t * <em>deterministic</em>, i.e. for identical input the calls to listener\n\t * methods will be the same.</p>\n\t *\n\t * <ul>\n\t * <li>Alterations to the grammar used to generate code may change the\n\t * behavior of the listener calls.</li>\n\t * <li>Alterations to the command line options passed to ANTLR 4 when\n\t * generating the parser may change the behavior of the listener calls.</li>\n\t * <li>Changing the version of the ANTLR Tool used to generate the parser\n\t * may change the behavior of the listener calls.</li>\n\t * </ul>\n\t *\n\t * @param listener the listener to add\n\t *\n\t * @throws NullPointerException if {@code} listener is {@code null}\n\t */\n\taddParseListener(listener) {\n\t\tif (listener === null) {\n\t\t\tthrow \"listener\";\n\t\t}\n\t\tif (this._parseListeners === null) {\n\t\t\tthis._parseListeners = [];\n\t\t}\n\t\tthis._parseListeners.push(listener);\n\t}\n\n\t/**\n\t * Remove {@code listener} from the list of parse listeners.\n\t *\n\t * <p>If {@code listener} is {@code null} or has not been added as a parse\n\t * listener, this method does nothing.</p>\n\t * @param listener the listener to remove\n\t */\n\tremoveParseListener(listener) {\n\t\tif (this._parseListeners !== null) {\n\t\t\tconst idx = this._parseListeners.indexOf(listener);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._parseListeners.splice(idx, 1);\n\t\t\t}\n\t\t\tif (this._parseListeners.length === 0) {\n\t\t\t\tthis._parseListeners = null;\n\t\t\t}\n\t\t}\n\t}\n\n// Remove all parse listeners.\n\tremoveParseListeners() {\n\t\tthis._parseListeners = null;\n\t}\n\n// Notify any parse listeners of an enter rule event.\n\ttriggerEnterRuleEvent() {\n\t\tif (this._parseListeners !== null) {\n\t\t\tconst ctx = this._ctx;\n\t\t\tthis._parseListeners.map(function(listener) {\n\t\t\t\tlistener.enterEveryRule(ctx);\n\t\t\t\tctx.enterRule(listener);\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Notify any parse listeners of an exit rule event.\n\t * @see //addParseListener\n\t */\n\ttriggerExitRuleEvent() {\n\t\tif (this._parseListeners !== null) {\n\t\t\t// reverse order walk of listeners\n\t\t\tconst ctx = this._ctx;\n\t\t\tthis._parseListeners.slice(0).reverse().map(function(listener) {\n\t\t\t\tctx.exitRule(listener);\n\t\t\t\tlistener.exitEveryRule(ctx);\n\t\t\t});\n\t\t}\n\t}\n\n\tgetTokenFactory() {\n\t\treturn this._input.tokenSource._factory;\n\t}\n\n\t// Tell our token source and error strategy about a new way to create tokens.\n\tsetTokenFactory(factory) {\n\t\tthis._input.tokenSource._factory = factory;\n\t}\n\n\t/**\n\t * The ATN with bypass alternatives is expensive to create so we create it\n\t * lazily.\n\t *\n\t * @throws UnsupportedOperationException if the current parser does not\n\t * implement the {@link //getSerializedATN()} method.\n\t */\n\tgetATNWithBypassAlts() {\n\t\tconst serializedAtn = this.getSerializedATN();\n\t\tif (serializedAtn === null) {\n\t\t\tthrow \"The current parser does not support an ATN with bypass alternatives.\";\n\t\t}\n\t\tlet result = this.bypassAltsAtnCache[serializedAtn];\n\t\tif (result === null) {\n\t\t\tconst deserializationOptions = new ATNDeserializationOptions();\n\t\t\tdeserializationOptions.generateRuleBypassTransitions = true;\n\t\t\tresult = new ATNDeserializer(deserializationOptions)\n\t\t\t\t\t.deserialize(serializedAtn);\n\t\t\tthis.bypassAltsAtnCache[serializedAtn] = result;\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * The preferred method of getting a tree pattern. For example, here's a\n\t * sample use:\n\t *\n\t * <pre>\n\t * ParseTree t = parser.expr();\n\t * ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n\t * MyParser.RULE_expr);\n\t * ParseTreeMatch m = p.match(t);\n\t * String id = m.get(\"ID\");\n\t * </pre>\n\t */\n\tcompileParseTreePattern(pattern, patternRuleIndex, lexer) {\n\t\tlexer = lexer || null;\n\t\tif (lexer === null) {\n\t\t\tif (this.getTokenStream() !== null) {\n\t\t\t\tconst tokenSource = this.getTokenStream().tokenSource;\n\t\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\t\tlexer = tokenSource;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (lexer === null) {\n\t\t\tthrow \"Parser can't discover a lexer to use\";\n\t\t}\n\t\tconst m = new ParseTreePatternMatcher(lexer, this);\n\t\treturn m.compile(pattern, patternRuleIndex);\n\t}\n\n\tgetInputStream() {\n\t\treturn this.getTokenStream();\n\t}\n\n\tsetInputStream(input) {\n\t\tthis.setTokenStream(input);\n\t}\n\n\tgetTokenStream() {\n\t\treturn this._input;\n\t}\n\n\t// Set the token stream and reset the parser.\n\tsetTokenStream(input) {\n\t\tthis._input = null;\n\t\tthis.reset();\n\t\tthis._input = input;\n\t}\n\n\t/**\n\t * Match needs to return the current input symbol, which gets put\n\t * into the label for the associated token ref; e.g., x=ID.\n\t */\n\tgetCurrentToken() {\n\t\treturn this._input.LT(1);\n\t}\n\n\tnotifyErrorListeners(msg, offendingToken, err) {\n\t\toffendingToken = offendingToken || null;\n\t\terr = err || null;\n\t\tif (offendingToken === null) {\n\t\t\toffendingToken = this.getCurrentToken();\n\t\t}\n\t\tthis._syntaxErrors += 1;\n\t\tconst line = offendingToken.line;\n\t\tconst column = offendingToken.column;\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, offendingToken, line, column, msg, err);\n\t}\n\n\t/**\n\t * Consume and return the {@linkplain //getCurrentToken current symbol}.\n\t *\n\t * <p>E.g., given the following input with {@code A} being the current\n\t * lookahead symbol, this function moves the cursor to {@code B} and returns\n\t * {@code A}.</p>\n\t *\n\t * <pre>\n\t * A B\n\t * ^\n\t * </pre>\n\t *\n\t * If the parser is not in error recovery mode, the consumed symbol is added\n\t * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n\t * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n\t * If the parser <em>is</em> in error recovery mode, the consumed symbol is\n\t * added to the parse tree using\n\t * {@link ParserRuleContext//addErrorNode(Token)}, and\n\t * {@link ParseTreeListener//visitErrorNode} is called on any parse\n\t * listeners.\n\t */\n\tconsume() {\n\t\tconst o = this.getCurrentToken();\n\t\tif (o.type !== Token.EOF) {\n\t\t\tthis.getInputStream().consume();\n\t\t}\n\t\tconst hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\t\tif (this.buildParseTrees || hasListener) {\n\t\t\tlet node;\n\t\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\t\tnode = this._ctx.addErrorNode(o);\n\t\t\t} else {\n\t\t\t\tnode = this._ctx.addTokenNode(o);\n\t\t\t}\n\t\t\tnode.invokingState = this.state;\n\t\t\tif (hasListener) {\n\t\t\t\tthis._parseListeners.map(function(listener) {\n\t\t\t\t\tif (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {\n\t\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t\t} else if (node instanceof TerminalNode) {\n\t\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn o;\n\t}\n\n\taddContextToParseTree() {\n\t\t// add current context to parent if we have a parent\n\t\tif (this._ctx.parentCtx !== null) {\n\t\t\tthis._ctx.parentCtx.addChild(this._ctx);\n\t\t}\n\t}\n\n\t/**\n\t * Always called by generated parsers upon entry to a rule. Access field\n\t * {@link //_ctx} get the current context.\n\t */\n\tenterRule(localctx, state, ruleIndex) {\n\t\tthis.state = state;\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = this._input.LT(1);\n\t\tif (this.buildParseTrees) {\n\t\t\tthis.addContextToParseTree();\n\t\t}\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerEnterRuleEvent();\n\t\t}\n\t}\n\n\texitRule() {\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\t// trigger event on _ctx, before it reverts to parent\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerExitRuleEvent();\n\t\t}\n\t\tthis.state = this._ctx.invokingState;\n\t\tthis._ctx = this._ctx.parentCtx;\n\t}\n\n\tenterOuterAlt(localctx, altNum) {\n\t\tlocalctx.setAltNumber(altNum);\n\t\t// if we have new localctx, make sure we replace existing ctx\n\t\t// that is previous child of parse tree\n\t\tif (this.buildParseTrees && this._ctx !== localctx) {\n\t\t\tif (this._ctx.parentCtx !== null) {\n\t\t\t\tthis._ctx.parentCtx.removeLastChild();\n\t\t\t\tthis._ctx.parentCtx.addChild(localctx);\n\t\t\t}\n\t\t}\n\t\tthis._ctx = localctx;\n\t}\n\n\t/**\n\t * Get the precedence level for the top-most precedence rule.\n\t *\n\t * @return The precedence level for the top-most precedence rule, or -1 if\n\t * the parser context is not nested within a precedence rule.\n\t */\n\tgetPrecedence() {\n\t\tif (this._precedenceStack.length === 0) {\n\t\t\treturn -1;\n\t\t} else {\n\t\t\treturn this._precedenceStack[this._precedenceStack.length-1];\n\t\t}\n\t}\n\n\tenterRecursionRule(localctx, state, ruleIndex, precedence) {\n\t   this.state = state;\n\t   this._precedenceStack.push(precedence);\n\t   this._ctx = localctx;\n\t   this._ctx.start = this._input.LT(1);\n\t   if (this._parseListeners !== null) {\n\t\t   this.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t   \t\t\t\t\t\t\t\t\t// left-recursive rules\n\t   }\n   }\n\n\t// Like {@link //enterRule} but for recursive rules.\n\tpushNewRecursionContext(localctx, state, ruleIndex) {\n\t\tconst previous = this._ctx;\n\t\tprevious.parentCtx = localctx;\n\t\tprevious.invokingState = state;\n\t\tprevious.stop = this._input.LT(-1);\n\n\t\tthis._ctx = localctx;\n\t\tthis._ctx.start = previous.start;\n\t\tif (this.buildParseTrees) {\n\t\t\tthis._ctx.addChild(previous);\n\t\t}\n\t\tif (this._parseListeners !== null) {\n\t\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t\t\t\t\t\t\t\t\t// left-recursive rules\n\t\t}\n\t}\n\n\tunrollRecursionContexts(parentCtx) {\n\t\tthis._precedenceStack.pop();\n\t\tthis._ctx.stop = this._input.LT(-1);\n\t\tconst retCtx = this._ctx; // save current ctx (return value)\n\t\t// unroll so _ctx is as it was before call to recursive method\n\t\tif (this._parseListeners !== null) {\n\t\t\twhile (this._ctx !== parentCtx) {\n\t\t\t\tthis.triggerExitRuleEvent();\n\t\t\t\tthis._ctx = this._ctx.parentCtx;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._ctx = parentCtx;\n\t\t}\n\t\t// hook into tree\n\t\tretCtx.parentCtx = parentCtx;\n\t\tif (this.buildParseTrees && parentCtx !== null) {\n\t\t\t// add return ctx into invoking rule's tree\n\t\t\tparentCtx.addChild(retCtx);\n\t\t}\n\t}\n\n\tgetInvokingContext(ruleIndex) {\n\t\tlet ctx = this._ctx;\n\t\twhile (ctx !== null) {\n\t\t\tif (ctx.ruleIndex === ruleIndex) {\n\t\t\t\treturn ctx;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprecpred(localctx, precedence) {\n\t\treturn precedence >= this._precedenceStack[this._precedenceStack.length-1];\n\t}\n\n\tinContext(context) {\n\t\t// TODO: useful in parser?\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks whether or not {@code symbol} can follow the current state in the\n\t * ATN. The behavior of this method is equivalent to the following, but is\n\t * implemented such that the complete context-sensitive follow set does not\n\t * need to be explicitly constructed.\n\t *\n\t * <pre>\n\t * return getExpectedTokens().contains(symbol);\n\t * </pre>\n\t *\n\t * @param symbol the symbol type to check\n\t * @return {@code true} if {@code symbol} can follow the current state in\n\t * the ATN, otherwise {@code false}.\n\t */\n\tisExpectedToken(symbol) {\n\t\tconst atn = this._interp.atn;\n\t\tlet ctx = this._ctx;\n\t\tconst s = atn.states[this.state];\n\t\tlet following = atn.nextTokens(s);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!following.contains(Token.EPSILON)) {\n\t\t\treturn false;\n\t\t}\n\t\twhile (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\t\tconst invokingState = atn.states[ctx.invokingState];\n\t\t\tconst rt = invokingState.transitions[0];\n\t\t\tfollowing = atn.nextTokens(rt.followState);\n\t\t\tif (following.contains(symbol)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tctx = ctx.parentCtx;\n\t\t}\n\t\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Computes the set of input symbols which could follow the current parser\n\t * state and context, as given by {@link //getState} and {@link //getContext},\n\t * respectively.\n\t *\n\t * @see ATN//getExpectedTokens(int, RuleContext)\n\t */\n\tgetExpectedTokens() {\n\t\treturn this._interp.atn.getExpectedTokens(this.state, this._ctx);\n\t}\n\n\tgetExpectedTokensWithinCurrentRule() {\n\t\tconst atn = this._interp.atn;\n\t\tconst s = atn.states[this.state];\n\t\treturn atn.nextTokens(s);\n\t}\n\n\t// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.\n\tgetRuleIndex(ruleName) {\n\t\tconst ruleIndex = this.getRuleIndexMap()[ruleName];\n\t\tif (ruleIndex !== null) {\n\t\t\treturn ruleIndex;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\t/**\n\t * Return List&lt;String&gt; of the rule names in your parser instance\n\t * leading up to a call to the current rule. You could override if\n\t * you want more details such as the file/line info of where\n\t * in the ATN a rule is invoked.\n\t *\n\t * this is very useful for error messages.\n\t */\n\tgetRuleInvocationStack(p) {\n\t\tp = p || null;\n\t\tif (p === null) {\n\t\t\tp = this._ctx;\n\t\t}\n\t\tconst stack = [];\n\t\twhile (p !== null) {\n\t\t\t// compute what follows who invoked us\n\t\t\tconst ruleIndex = p.ruleIndex;\n\t\t\tif (ruleIndex < 0) {\n\t\t\t\tstack.push(\"n/a\");\n\t\t\t} else {\n\t\t\t\tstack.push(this.ruleNames[ruleIndex]);\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\treturn stack;\n\t}\n\n\t// For debugging and other purposes.\n\tgetDFAStrings() {\n\t\treturn this._interp.decisionToDFA.toString();\n\t}\n\n\t// For debugging and other purposes.\n\tdumpDFA() {\n\t\tlet seenOne = false;\n\t\tfor (let i = 0; i < this._interp.decisionToDFA.length; i++) {\n\t\t\tconst dfa = this._interp.decisionToDFA[i];\n\t\t\tif (dfa.states.length > 0) {\n\t\t\t\tif (seenOne) {\n\t\t\t\t\tconsole.log();\n\t\t\t\t}\n\t\t\t\tthis.printer.println(\"Decision \" + dfa.decision + \":\");\n\t\t\t\tthis.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n\t\t\t\tseenOne = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t\t\"\t\t\tprinter = function() {\\r\\n\" +\n\t\t\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\t\t\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\t\t\"\t\t\t};\\r\\n\" +\n\t\t*/\n\tgetSourceName() {\n\t\treturn this._input.sourceName;\n\t}\n\n\t/**\n\t * During a parse is sometimes useful to listen in on the rule entry and exit\n\t * events as well as token matches. this is for quick and dirty debugging.\n\t */\n\tsetTrace(trace) {\n\t\tif (!trace) {\n\t\t\tthis.removeParseListener(this._tracer);\n\t\t\tthis._tracer = null;\n\t\t} else {\n\t\t\tif (this._tracer !== null) {\n\t\t\t\tthis.removeParseListener(this._tracer);\n\t\t\t}\n\t\t\tthis._tracer = new TraceListener(this);\n\t\t\tthis.addParseListener(this._tracer);\n\t\t}\n\t}\n}\n\n/**\n * this field maps from the serialized ATN string to the deserialized {@link\n * ATN} with\n * bypass alternatives.\n *\n * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n */\nParser.bypassAltsAtnCache = {};\n\nmodule.exports = Parser;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/Parser.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/ParserRuleContext.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/ParserRuleContext.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst RuleContext = __webpack_require__(/*! ./RuleContext */ \"./node_modules/antlr4/src/antlr4/RuleContext.js\");\nconst Tree = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst INVALID_INTERVAL = Tree.INVALID_INTERVAL;\nconst TerminalNode = Tree.TerminalNode;\nconst TerminalNodeImpl = Tree.TerminalNodeImpl;\nconst ErrorNodeImpl = Tree.ErrorNodeImpl;\nconst Interval = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\").Interval;\n\n/**\n * A rule invocation record for parsing.\n *\n *  Contains all of the information about the current rule not stored in the\n *  RuleContext. It handles parse tree children list, Any ATN state\n *  tracing, and the default values available for rule indications:\n *  start, stop, rule index, current alt number, current\n *  ATN state.\n *\n *  Subclasses made for each rule and grammar track the parameters,\n *  return values, locals, and labels specific to that rule. These\n *  are the objects that are returned from rules.\n *\n *  Note text is not an actual field of a rule return value; it is computed\n *  from start and stop using the input stream's toString() method.  I\n *  could add a ctor to this so that we can pass in and store the input\n *  stream, but I'm not sure we want to do that.  It would seem to be undefined\n *  to get the .text property anyway if the rule matches tokens from multiple\n *  input streams.\n *\n *  I do not use getters for fields of objects that are used simply to\n *  group values such as this aggregate.  The getters/setters are there to\n *  satisfy the superclass interface.\n */\nclass ParserRuleContext extends RuleContext {\n\tconstructor(parent, invokingStateNumber) {\n\t\tparent = parent || null;\n\t\tinvokingStateNumber = invokingStateNumber || null;\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = -1;\n\t\t/**\n\t\t * If we are debugging or building a parse tree for a visitor,\n\t\t * we need to track all of the tokens and rule invocations associated\n\t\t * with this rule's context. This is empty for parsing w/o tree constr.\n\t\t * operation because we don't the need to track the details about\n\t\t * how we parse this rule.\n\t\t */\n\t\tthis.children = null;\n\t\tthis.start = null;\n\t\tthis.stop = null;\n\t\t/**\n\t\t * The exception that forced this rule to return. If the rule successfully\n\t\t * completed, this is {@code null}.\n\t\t */\n\t\tthis.exception = null;\n\t}\n\n\t// COPY a ctx (I'm deliberately not using copy constructor)\n\tcopyFrom(ctx) {\n\t\t// from RuleContext\n\t\tthis.parentCtx = ctx.parentCtx;\n\t\tthis.invokingState = ctx.invokingState;\n\t\tthis.children = null;\n\t\tthis.start = ctx.start;\n\t\tthis.stop = ctx.stop;\n\t\t// copy any error nodes to alt label node\n\t\tif(ctx.children) {\n\t\t\tthis.children = [];\n\t\t\t// reset parent pointer for any error nodes\n\t\t\tctx.children.map(function(child) {\n\t\t\t\tif (child instanceof ErrorNodeImpl) {\n\t\t\t\t\tthis.children.push(child);\n\t\t\t\t\tchild.parentCtx = this;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t// Double dispatch methods for listeners\n\tenterRule(listener) {\n\t}\n\n\texitRule(listener) {\n\t}\n\n\t// Does not set parent link; other add methods do that\n\taddChild(child) {\n\t\tif (this.children === null) {\n\t\t\tthis.children = [];\n\t\t}\n\t\tthis.children.push(child);\n\t\treturn child;\n\t}\n\n\t/** Used by enterOuterAlt to toss out a RuleContext previously added as\n\t * we entered a rule. If we have // label, we will need to remove\n\t * generic ruleContext object.\n\t */\n\tremoveLastChild() {\n\t\tif (this.children !== null) {\n\t\t\tthis.children.pop();\n\t\t}\n\t}\n\n\taddTokenNode(token) {\n\t\tconst node = new TerminalNodeImpl(token);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\taddErrorNode(badToken) {\n\t\tconst node = new ErrorNodeImpl(badToken);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\tgetChild(i, type) {\n\t\ttype = type || null;\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tif (type === null) {\n\t\t\treturn this.children[i];\n\t\t} else {\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif(child instanceof type) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetToken(ttype, i) {\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\tconst child = this.children[j];\n\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetTokens(ttype ) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst tokens = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\t\ttokens.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokens;\n\t\t}\n\t}\n\n\tgetTypedRuleContext(ctxType, i) {\n\t\treturn this.getChild(i, ctxType);\n\t}\n\n\tgetTypedRuleContexts(ctxType) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst contexts = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof ctxType) {\n\t\t\t\t\tcontexts.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn contexts;\n\t\t}\n\t}\n\n\tgetChildCount() {\n\t\tif (this.children=== null) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn this.children.length;\n\t\t}\n\t}\n\n\tgetSourceInterval() {\n\t\tif( this.start === null || this.stop === null) {\n\t\t\treturn INVALID_INTERVAL;\n\t\t} else {\n\t\t\treturn new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n\t\t}\n\t}\n}\n\nRuleContext.EMPTY = new ParserRuleContext();\n\nclass InterpreterRuleContext extends ParserRuleContext {\n\tconstructor(parent, invokingStateNumber, ruleIndex) {\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = ruleIndex;\n\t}\n}\n\nmodule.exports = ParserRuleContext;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/ParserRuleContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/PredictionContext.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/PredictionContext.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst RuleContext = __webpack_require__(/*! ./RuleContext */ \"./node_modules/antlr4/src/antlr4/RuleContext.js\");\nconst {Hash, Map, equalArrays} = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\n\nclass PredictionContext {\n\n\tconstructor(cachedHashCode) {\n\t\tthis.cachedHashCode = cachedHashCode;\n\t}\n\n\t/**\n\t * Stores the computed hash code of this {@link PredictionContext}. The hash\n\t * code is computed in parts to match the following reference algorithm.\n\t *\n\t * <pre>\n\t * private int referenceHashCode() {\n\t * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n\t * //INITIAL_HASH});\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n\t * getParent}(i));\n\t * }\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n\t * //getReturnState getReturnState}(i));\n\t * }\n\t *\n\t * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n\t * //size()});\n\t * return hash;\n\t * }\n\t * </pre>\n\t * This means only the {@link //EMPTY} context is in set.\n\t */\n\tisEmpty() {\n\t\treturn this === PredictionContext.EMPTY;\n\t}\n\n\thasEmptyPath() {\n\t\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n}\n\n/**\n * Represents {@code $} in local context prediction, which means wildcard.\n * {@code//+x =//}.\n */\nPredictionContext.EMPTY = null;\n\n/**\n * Represents {@code $} in an array in full context mode, when {@code $}\n * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n * {@code $} = {@link //EMPTY_RETURN_STATE}.\n */\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n\n\n/*\nfunction calculateHashString(parent, returnState) {\n\treturn \"\" + parent + returnState;\n}\n*/\n\n/**\n * Used to cache {@link PredictionContext} objects. Its used for the shared\n * context cash associated with contexts in DFA states. This cache\n * can be used for both lexers and parsers.\n */\nclass PredictionContextCache {\n\n\tconstructor() {\n\t\tthis.cache = new Map();\n\t}\n\n\t/**\n\t * Add a context to the cache and return it. If the context already exists,\n\t * return that one instead and do not add a new context to the cache.\n\t * Protect shared cache from unsafe thread access.\n\t */\n\tadd(ctx) {\n\t\tif (ctx === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY;\n\t\t}\n\t\tconst existing = this.cache.get(ctx) || null;\n\t\tif (existing !== null) {\n\t\t\treturn existing;\n\t\t}\n\t\tthis.cache.put(ctx, ctx);\n\t\treturn ctx;\n\t}\n\n\tget(ctx) {\n\t\treturn this.cache.get(ctx) || null;\n\t}\n\n\tget length(){\n\t\treturn this.cache.length;\n\t}\n}\n\n\nclass SingletonPredictionContext extends PredictionContext {\n\n\tconstructor(parent, returnState) {\n\t\tlet hashCode = 0;\n\t\tconst hash = new Hash();\n\t\tif(parent !== null) {\n\t\t\thash.update(parent, returnState);\n\t\t} else {\n\t\t\thash.update(1);\n\t\t}\n\t\thashCode = hash.finish();\n\t\tsuper(hashCode);\n\t\tthis.parentCtx = parent;\n\t\tthis.returnState = returnState;\n\t}\n\n\tgetParent(index) {\n\t\treturn this.parentCtx;\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnState;\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof SingletonPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\tif(this.returnState !== other.returnState)\n\t\t\t\treturn false;\n\t\t\telse if(this.parentCtx==null)\n\t\t\t\treturn other.parentCtx==null\n\t\t\telse\n\t\t\t\treturn this.parentCtx.equals(other.parentCtx);\n\t\t}\n\t}\n\n\ttoString() {\n\t\tconst up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\t\tif (up.length === 0) {\n\t\t\tif (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\treturn \"$\";\n\t\t\t} else {\n\t\t\t\treturn \"\" + this.returnState;\n\t\t\t}\n\t\t} else {\n\t\t\treturn \"\" + this.returnState + \" \" + up;\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn 1;\n\t}\n\n\tstatic create(parent, returnState) {\n\t\tif (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n\t\t\t// someone can pass in the bits of an array ctx that mean $\n\t\t\treturn PredictionContext.EMPTY;\n\t\t} else {\n\t\t\treturn new SingletonPredictionContext(parent, returnState);\n\t\t}\n\t}\n}\n\nclass EmptyPredictionContext extends SingletonPredictionContext {\n\n\tconstructor() {\n\t\tsuper(null, PredictionContext.EMPTY_RETURN_STATE);\n\t}\n\n\tisEmpty() {\n\t\treturn true;\n\t}\n\n\tgetParent(index) {\n\t\treturn null;\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnState;\n\t}\n\n\tequals(other) {\n\t\treturn this === other;\n\t}\n\n\ttoString() {\n\t\treturn \"$\";\n\t}\n}\n\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n\nclass ArrayPredictionContext extends PredictionContext {\n\n\tconstructor(parents, returnStates) {\n\t\t/**\n\t\t * Parent can be null only if full ctx mode and we make an array\n\t\t * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n\t\t * null parent and\n\t\t * returnState == {@link //EMPTY_RETURN_STATE}.\n\t\t */\n\t\tconst h = new Hash();\n\t\th.update(parents, returnStates);\n\t\tconst hashCode = h.finish();\n\t\tsuper(hashCode);\n\t\tthis.parents = parents;\n\t\tthis.returnStates = returnStates;\n\t\treturn this;\n\t}\n\n\tisEmpty() {\n\t\t// since EMPTY_RETURN_STATE can only appear in the last position, we\n\t\t// don't need to verify that size==1\n\t\treturn this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\tgetParent(index) {\n\t\treturn this.parents[index];\n\t}\n\n\tgetReturnState(index) {\n\t\treturn this.returnStates[index];\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof ArrayPredictionContext)) {\n\t\t\treturn false;\n\t\t} else if (this.hashCode() !== other.hashCode()) {\n\t\t\treturn false; // can't be same if hash is different\n\t\t} else {\n\t\t\treturn equalArrays(this.returnStates, other.returnStates) &&\n\t\t\t\tequalArrays(this.parents, other.parents);\n\t\t}\n\t}\n\n\ttoString() {\n\t\tif (this.isEmpty()) {\n\t\t\treturn \"[]\";\n\t\t} else {\n\t\t\tlet s = \"[\";\n\t\t\tfor (let i = 0; i < this.returnStates.length; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\ts = s + \", \";\n\t\t\t\t}\n\t\t\t\tif (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\ts = s + \"$\";\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ts = s + this.returnStates[i];\n\t\t\t\tif (this.parents[i] !== null) {\n\t\t\t\t\ts = s + \" \" + this.parents[i];\n\t\t\t\t} else {\n\t\t\t\t\ts = s + \"null\";\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn s + \"]\";\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.returnStates.length;\n\t}\n}\n\n\n/**\n * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n * Return {@link //EMPTY} if {@code outerContext} is empty or null.\n */\nfunction predictionContextFromRuleContext(atn, outerContext) {\n\tif (outerContext === undefined || outerContext === null) {\n\t\touterContext = RuleContext.EMPTY;\n\t}\n\t// if we are in RuleContext of start rule, s, then PredictionContext\n\t// is EMPTY. Nobody called us. (if we are empty, return empty)\n\tif (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\t// If we have a parent, convert it to a PredictionContext graph\n\tconst parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n\tconst state = atn.states[outerContext.invokingState];\n\tconst transition = state.transitions[0];\n\treturn SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n/*\nfunction calculateListsHashString(parents, returnStates) {\n\tconst s = \"\";\n\tparents.map(function(p) {\n\t\ts = s + p;\n\t});\n\treturnStates.map(function(r) {\n\t\ts = s + r;\n\t});\n\treturn s;\n}\n*/\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n\t// share same graph if both same\n\tif (a === b) {\n\t\treturn a;\n\t}\n\tif (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n\t\treturn mergeSingletons(a, b, rootIsWildcard, mergeCache);\n\t}\n\t// At least one of a or b is array\n\t// If one is $ and rootIsWildcard, return $ as// wildcard\n\tif (rootIsWildcard) {\n\t\tif (a instanceof EmptyPredictionContext) {\n\t\t\treturn a;\n\t\t}\n\t\tif (b instanceof EmptyPredictionContext) {\n\t\t\treturn b;\n\t\t}\n\t}\n\t// convert singleton so both are arrays to normalize\n\tif (a instanceof SingletonPredictionContext) {\n\t\ta = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n\t}\n\tif (b instanceof SingletonPredictionContext) {\n\t\tb = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n\t}\n\treturn mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n/**\n * Merge two {@link SingletonPredictionContext} instances.\n *\n * <p>Stack tops equal, parents merge is same; return left graph.<br>\n * <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Same stack top, parents differ; merge parents giving array node, then\n * remainders of those graphs. A new root node is created to point to the\n * merged parents.<br>\n * <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to same parent. Make array node for the\n * root where both element in the root point to the same (original)\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to different parents. Make array node for\n * the root where each element points to the corresponding original\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n * @param mergeCache\n */\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tlet previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\n\tconst rootMerge = mergeRoot(a, b, rootIsWildcard);\n\tif (rootMerge !== null) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, rootMerge);\n\t\t}\n\t\treturn rootMerge;\n\t}\n\tif (a.returnState === b.returnState) {\n\t\tconst parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n\t\t// if parent is same as existing a or b parent or reduced to a parent,\n\t\t// return it\n\t\tif (parent === a.parentCtx) {\n\t\t\treturn a; // ax + bx = ax, if a=b\n\t\t}\n\t\tif (parent === b.parentCtx) {\n\t\t\treturn b; // ax + bx = bx, if a=b\n\t\t}\n\t\t// else: ax + ay = a'[x,y]\n\t\t// merge parents x and y, giving array node with x,y then remainders\n\t\t// of those graphs. dup a, a' points at merged array\n\t\t// new joined parent so create new singleton pointing to it, a'\n\t\tconst spc = SingletonPredictionContext.create(parent, a.returnState);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, spc);\n\t\t}\n\t\treturn spc;\n\t} else { // a != b payloads differ\n\t\t// see if we can collapse parents due to $+x parents if local ctx\n\t\tlet singleParent = null;\n\t\tif (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// bx =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [a,b]x\n\t\t\tsingleParent = a.parentCtx;\n\t\t}\n\t\tif (singleParent !== null) { // parents are same\n\t\t\t// sort payloads and use same parent\n\t\t\tconst payloads = [ a.returnState, b.returnState ];\n\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t}\n\t\t\tconst parents = [ singleParent, singleParent ];\n\t\t\tconst apc = new ArrayPredictionContext(parents, payloads);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, apc);\n\t\t\t}\n\t\t\treturn apc;\n\t\t}\n\t\t// parents differ and can't merge them. Just pack together\n\t\t// into array; can't merge.\n\t\t// ax + by = [ax,by]\n\t\tconst payloads = [ a.returnState, b.returnState ];\n\t\tlet parents = [ a.parentCtx, b.parentCtx ];\n\t\tif (a.returnState > b.returnState) { // sort by payload\n\t\t\tpayloads[0] = b.returnState;\n\t\t\tpayloads[1] = a.returnState;\n\t\t\tparents = [ b.parentCtx, a.parentCtx ];\n\t\t}\n\t\tconst a_ = new ArrayPredictionContext(parents, payloads);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a_);\n\t\t}\n\t\treturn a_;\n\t}\n}\n\n/**\n * Handle case where at least one of {@code a} or {@code b} is\n * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n * to represent {@link //EMPTY}.\n *\n * <h2>Local-Context Merges</h2>\n *\n * <p>These local-context merge operations are used when {@code rootIsWildcard}\n * is true.</p>\n *\n * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n * <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n * {@code //EMPTY}; return left graph.<br>\n * <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Special case of last merge if local context.<br>\n * <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <h2>Full-Context Merges</h2>\n *\n * <p>These full-context merge operations are used when {@code rootIsWildcard}\n * is false.</p>\n *\n * <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n * null parent).<br>\n * <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n */\nfunction mergeRoot(a, b, rootIsWildcard) {\n\tif (rootIsWildcard) {\n\t\tif (a === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // // + b =//\n\t\t}\n\t\tif (b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // a +// =//\n\t\t}\n\t} else {\n\t\tif (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // $ + $ = $\n\t\t} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]\n\t\t\tconst payloads = [ b.returnState,\n\t\t\t\t\tPredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tconst parents = [ b.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)\n\t\t\tconst payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tconst parents = [ a.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t}\n\t}\n\treturn null;\n}\n\n/**\n * Merge two {@link ArrayPredictionContext} instances.\n *\n * <p>Different tops, different parents.<br>\n * <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, same parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, different parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, all shared parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Equal tops, merge parents and reduce top to\n * {@link SingletonPredictionContext}.<br>\n * <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n */\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tlet previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\t// merge sorted payloads a + b => M\n\tlet i = 0; // walks a\n\tlet j = 0; // walks b\n\tlet k = 0; // walks target M array\n\n\tlet mergedReturnStates = [];\n\tlet mergedParents = [];\n\t// walk and merge to yield mergedParents, mergedReturnStates\n\twhile (i < a.returnStates.length && j < b.returnStates.length) {\n\t\tconst a_parent = a.parents[i];\n\t\tconst b_parent = b.parents[j];\n\t\tif (a.returnStates[i] === b.returnStates[j]) {\n\t\t\t// same payload (stack tops are equal), must yield merged singleton\n\t\t\tconst payload = a.returnStates[i];\n\t\t\t// $+$ = $\n\t\t\tconst bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&\n\t\t\t\t\ta_parent === null && b_parent === null;\n\t\t\tconst ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ax\n\t\t\tif (bothDollars || ax_ax) {\n\t\t\t\tmergedParents[k] = a_parent; // choose left\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t} else { // ax+ay -> a'[x,y]\n\t\t\t\tmergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t}\n\t\t\ti += 1; // hop over left one as usual\n\t\t\tj += 1; // but also skip one in right side since we merge\n\t\t} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M\n\t\t\tmergedParents[k] = a_parent;\n\t\t\tmergedReturnStates[k] = a.returnStates[i];\n\t\t\ti += 1;\n\t\t} else { // b > a, copy b[j] to M\n\t\t\tmergedParents[k] = b_parent;\n\t\t\tmergedReturnStates[k] = b.returnStates[j];\n\t\t\tj += 1;\n\t\t}\n\t\tk += 1;\n\t}\n\t// copy over any payloads remaining in either array\n\tif (i < a.returnStates.length) {\n\t\tfor (let p = i; p < a.returnStates.length; p++) {\n\t\t\tmergedParents[k] = a.parents[p];\n\t\t\tmergedReturnStates[k] = a.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t} else {\n\t\tfor (let p = j; p < b.returnStates.length; p++) {\n\t\t\tmergedParents[k] = b.parents[p];\n\t\t\tmergedReturnStates[k] = b.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t}\n\t// trim merged if we combined a few that had same stack tops\n\tif (k < mergedParents.length) { // write index < last position; trim\n\t\tif (k === 1) { // for just one merged element, return singleton top\n\t\t\tconst a_ = SingletonPredictionContext.create(mergedParents[0],\n\t\t\t\t\tmergedReturnStates[0]);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t}\n\t\t\treturn a_;\n\t\t}\n\t\tmergedParents = mergedParents.slice(0, k);\n\t\tmergedReturnStates = mergedReturnStates.slice(0, k);\n\t}\n\n\tconst M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n\t// if we created same array as a or b, return that instead\n\t// TODO: track whether this is possible above during merge sort for speed\n\tif (M === a) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a);\n\t\t}\n\t\treturn a;\n\t}\n\tif (M === b) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, b);\n\t\t}\n\t\treturn b;\n\t}\n\tcombineCommonParents(mergedParents);\n\n\tif (mergeCache !== null) {\n\t\tmergeCache.set(a, b, M);\n\t}\n\treturn M;\n}\n\n/**\n * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n * ones.\n */\nfunction combineCommonParents(parents) {\n\tconst uniqueParents = new Map();\n\n\tfor (let p = 0; p < parents.length; p++) {\n\t\tconst parent = parents[p];\n\t\tif (!(uniqueParents.containsKey(parent))) {\n\t\t\tuniqueParents.put(parent, parent);\n\t\t}\n\t}\n\tfor (let q = 0; q < parents.length; q++) {\n\t\tparents[q] = uniqueParents.get(parents[q]);\n\t}\n}\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n\tif (context.isEmpty()) {\n\t\treturn context;\n\t}\n\tlet existing = visited.get(context) || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\texisting = contextCache.get(context);\n\tif (existing !== null) {\n\t\tvisited.put(context, existing);\n\t\treturn existing;\n\t}\n\tlet changed = false;\n\tlet parents = [];\n\tfor (let i = 0; i < parents.length; i++) {\n\t\tconst parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\tif (!changed) {\n\t\t\t\tparents = [];\n\t\t\t\tfor (let j = 0; j < context.length; j++) {\n\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t}\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tparents[i] = parent;\n\t\t}\n\t}\n\tif (!changed) {\n\t\tcontextCache.add(context);\n\t\tvisited.put(context, context);\n\t\treturn context;\n\t}\n\tlet updated = null;\n\tif (parents.length === 0) {\n\t\tupdated = PredictionContext.EMPTY;\n\t} else if (parents.length === 1) {\n\t\tupdated = SingletonPredictionContext.create(parents[0], context\n\t\t\t\t.getReturnState(0));\n\t} else {\n\t\tupdated = new ArrayPredictionContext(parents, context.returnStates);\n\t}\n\tcontextCache.add(updated);\n\tvisited.put(updated, updated);\n\tvisited.put(context, updated);\n\n\treturn updated;\n}\n\n// ter's recursive version of Sam's getAllNodes()\nfunction getAllContextNodes(context, nodes, visited) {\n\tif (nodes === null) {\n\t\tnodes = [];\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else if (visited === null) {\n\t\tvisited = new Map();\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else {\n\t\tif (context === null || visited.containsKey(context)) {\n\t\t\treturn nodes;\n\t\t}\n\t\tvisited.put(context, context);\n\t\tnodes.push(context);\n\t\tfor (let i = 0; i < context.length; i++) {\n\t\t\tgetAllContextNodes(context.getParent(i), nodes, visited);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nmodule.exports = {\n\tmerge,\n\tPredictionContext,\n\tPredictionContextCache,\n\tSingletonPredictionContext,\n\tpredictionContextFromRuleContext,\n\tgetCachedPredictionContext\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/PredictionContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Recognizer.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Recognizer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst {ConsoleErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\nconst {ProxyErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\n\nclass Recognizer {\n    constructor() {\n        this._listeners = [ ConsoleErrorListener.INSTANCE ];\n        this._interp = null;\n        this._stateNumber = -1;\n    }\n\n    checkVersion(toolVersion) {\n        const runtimeVersion = \"4.9.1\";\n        if (runtimeVersion!==toolVersion) {\n            console.log(\"ANTLR runtime and generated code versions disagree: \"+runtimeVersion+\"!=\"+toolVersion);\n        }\n    }\n\n    addErrorListener(listener) {\n        this._listeners.push(listener);\n    }\n\n    removeErrorListeners() {\n        this._listeners = [];\n    }\n\n    getTokenTypeMap() {\n        const tokenNames = this.getTokenNames();\n        if (tokenNames===null) {\n            throw(\"The current recognizer does not provide a list of token names.\");\n        }\n        let result = this.tokenTypeMapCache[tokenNames];\n        if(result===undefined) {\n            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });\n            result.EOF = Token.EOF;\n            this.tokenTypeMapCache[tokenNames] = result;\n        }\n        return result;\n    }\n\n    /**\n     * Get a map from rule names to rule indexes.\n     * <p>Used for XPath and tree pattern compilation.</p>\n     */\n    getRuleIndexMap() {\n        const ruleNames = this.ruleNames;\n        if (ruleNames===null) {\n            throw(\"The current recognizer does not provide a list of rule names.\");\n        }\n        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?\n        if(result===undefined) {\n            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });\n            this.ruleIndexMapCache[ruleNames] = result;\n        }\n        return result;\n    }\n\n    getTokenType(tokenName) {\n        const ttype = this.getTokenTypeMap()[tokenName];\n        if (ttype !==undefined) {\n            return ttype;\n        } else {\n            return Token.INVALID_TYPE;\n        }\n    }\n\n    // What is the error header, normally line/character position information?\n    getErrorHeader(e) {\n        const line = e.getOffendingToken().line;\n        const column = e.getOffendingToken().column;\n        return \"line \" + line + \":\" + column;\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out.  Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     *\n     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n     * implementations of {@link ANTLRErrorStrategy} may provide a similar\n     * feature when necessary. For example, see\n     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/\n    getTokenErrorDisplay(t) {\n        if (t===null) {\n            return \"<no token>\";\n        }\n        let s = t.text;\n        if (s===null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        s = s.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    getErrorListenerDispatch() {\n        return new ProxyErrorListener(this._listeners);\n    }\n\n    /**\n     * subclass needs to override these if there are sempreds or actions\n     * that the ATN interp needs to execute\n     */\n    sempred(localctx, ruleIndex, actionIndex) {\n        return true;\n    }\n\n    precpred(localctx , precedence) {\n        return true;\n    }\n\n    get state(){\n        return this._stateNumber;\n    }\n\n    set state(state) {\n        this._stateNumber = state;\n    }\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\nmodule.exports = Recognizer;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/Recognizer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/RuleContext.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/RuleContext.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {RuleNode} = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst {INVALID_INTERVAL} = __webpack_require__(/*! ./tree/Tree */ \"./node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst Trees = __webpack_require__(/*! ./tree/Trees */ \"./node_modules/antlr4/src/antlr4/tree/Trees.js\");\n\nclass RuleContext extends RuleNode {\n\t/** A rule context is a record of a single rule invocation. It knows\n\t * which context invoked it, if any. If there is no parent context, then\n\t * naturally the invoking state is not valid.  The parent link\n\t * provides a chain upwards from the current rule invocation to the root\n\t * of the invocation tree, forming a stack. We actually carry no\n\t * information about the rule associated with this context (except\n\t * when parsing). We keep only the state number of the invoking state from\n\t * the ATN submachine that invoked this. Contrast this with the s\n\t * pointer inside ParserRuleContext that tracks the current state\n\t * being \"executed\" for the current rule.\n\t *\n\t * The parent contexts are useful for computing lookahead sets and\n\t * getting error information.\n\t *\n\t * These objects are used during parsing and prediction.\n\t * For the special case of parsers, we use the subclass\n\t * ParserRuleContext.\n\t *\n\t * @see ParserRuleContext\n\t */\n\tconstructor(parent, invokingState) {\n\t\t// What context invoked this rule?\n\t\tsuper();\n\t\tthis.parentCtx = parent || null;\n\t\t/**\n\t\t * What state invoked the rule associated with this context?\n\t\t * The \"return address\" is the followState of invokingState\n\t\t * If parent is null, this should be -1.\n\t\t */\n\t\tthis.invokingState = invokingState || -1;\n\t}\n\n\tdepth() {\n\t\tlet n = 0;\n\t\tlet p = this;\n\t\twhile (p !== null) {\n\t\t\tp = p.parentCtx;\n\t\t\tn += 1;\n\t\t}\n\t\treturn n;\n\t}\n\n\t/**\n\t * A context is empty if there is no invoking state; meaning nobody call\n\t * current context.\n\t */\n\tisEmpty() {\n\t\treturn this.invokingState === -1;\n\t}\n\n// satisfy the ParseTree / SyntaxTree interface\n\tgetSourceInterval() {\n\t\treturn INVALID_INTERVAL;\n\t}\n\n\tgetRuleContext() {\n\t\treturn this;\n\t}\n\n\tgetPayload() {\n\t\treturn this;\n\t}\n\n\t/**\n\t * Return the combined text of all child nodes. This method only considers\n\t * tokens which have been added to the parse tree.\n\t * <p>\n\t * Since tokens on hidden channels (e.g. whitespace or comments) are not\n\t * added to the parse trees, they will not appear in the output of this\n\t * method.\n\t */\n\tgetText() {\n\t\tif (this.getChildCount() === 0) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\treturn this.children.map(function(child) {\n\t\t\t\treturn child.getText();\n\t\t\t}).join(\"\");\n\t\t}\n\t}\n\n\t/**\n\t * For rule associated with this parse tree internal node, return\n\t * the outer alternative number used to match the input. Default\n\t * implementation does not compute nor store this alt num. Create\n\t * a subclass of ParserRuleContext with backing field and set\n\t * option contextSuperClass.\n\t * to set it.\n\t */\n\tgetAltNumber() {\n\t    // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n\t    return 0;\n    }\n\n\t/**\n\t * Set the outer alternative number for this context node. Default\n\t * implementation does nothing to avoid backing field overhead for\n\t * trees that don't need it.  Create\n\t * a subclass of ParserRuleContext with backing field and set\n\t * option contextSuperClass.\n\t */\n\tsetAltNumber(altNumber) { }\n\n\tgetChild(i) {\n\t\treturn null;\n\t}\n\n\tgetChildCount() {\n\t\treturn 0;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitChildren(this);\n\t}\n\n\t/**\n\t * Print out a whole tree, not just a node, in LISP format\n\t * (root child1 .. childN). Print just a node if this is a leaf.\n\t */\n\ttoStringTree(ruleNames, recog) {\n\t\treturn Trees.toStringTree(this, ruleNames, recog);\n\t}\n\n\ttoString(ruleNames, stop) {\n\t\truleNames = ruleNames || null;\n\t\tstop = stop || null;\n\t\tlet p = this;\n\t\tlet s = \"[\";\n\t\twhile (p !== null && p !== stop) {\n\t\t\tif (ruleNames === null) {\n\t\t\t\tif (!p.isEmpty()) {\n\t\t\t\t\ts += p.invokingState;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst ri = p.ruleIndex;\n\t\t\t\tconst ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]\n\t\t\t\t\t\t: \"\" + ri;\n\t\t\t\ts += ruleName;\n\t\t\t}\n\t\t\tif (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n\t\t\t\ts += \" \";\n\t\t\t}\n\t\t\tp = p.parentCtx;\n\t\t}\n\t\ts += \"]\";\n\t\treturn s;\n\t}\n}\n\nmodule.exports = RuleContext;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/RuleContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Token.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Token.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * A token has properties: text, type, line, character position in the line\n * (so we can ignore tabs), token channel, index, and source from which\n * we obtained this token.\n */\nclass Token {\n\tconstructor() {\n\t\tthis.source = null;\n\t\tthis.type = null; // token type of the token\n\t\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\t\tthis.start = null; // optional; return -1 if not implemented.\n\t\tthis.stop = null; // optional; return -1 if not implemented.\n\t\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\t\tthis.line = null; // line=1..n of the 1st character\n\t\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\t\tthis._text = null; // text of the token.\n\t}\n\n\tgetTokenSource() {\n\t\treturn this.source[0];\n\t}\n\n\tgetInputStream() {\n\t\treturn this.source[1];\n\t}\n\n\tget text(){\n\t\treturn this._text;\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\nToken.INVALID_TYPE = 0;\n\n/**\n * During lookahead operations, this \"token\" signifies we hit rule end ATN state\n * and did not follow it despite needing to.\n */\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n/**\n * All tokens go to the parser (unless skip() is called in that rule)\n * on a particular \"channel\". The parser tunes to a particular channel\n * so that whitespace etc... can go to the parser on a \"hidden\" channel.\n */\nToken.DEFAULT_CHANNEL = 0;\n\n/**\n * Anything on different channel than DEFAULT_CHANNEL is not parsed\n * by parser.\n */\nToken.HIDDEN_CHANNEL = 1;\n\n\nclass CommonToken extends Token {\n\tconstructor(source, type, channel, start, stop) {\n\t\tsuper();\n\t\tthis.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n\t\tthis.type = type !== undefined ? type : null;\n\t\tthis.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n\t\tthis.start = start !== undefined ? start : -1;\n\t\tthis.stop = stop !== undefined ? stop : -1;\n\t\tthis.tokenIndex = -1;\n\t\tif (this.source[0] !== null) {\n\t\t\tthis.line = source[0].line;\n\t\t\tthis.column = source[0].column;\n\t\t} else {\n\t\t\tthis.column = -1;\n\t\t}\n\t}\n\n\t/**\n\t * Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n\t *\n\t * <p>\n\t * If {@code oldToken} is also a {@link CommonToken} instance, the newly\n\t * constructed token will share a reference to the {@link //text} field and\n\t * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n\t * be assigned the result of calling {@link //getText}, and {@link //source}\n\t * will be constructed from the result of {@link Token//getTokenSource} and\n\t * {@link Token//getInputStream}.</p>\n\t *\n\t * @param oldToken The token to copy.\n\t */\n\tclone() {\n\t\tconst t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n\t\tt.tokenIndex = this.tokenIndex;\n\t\tt.line = this.line;\n\t\tt.column = this.column;\n\t\tt.text = this.text;\n\t\treturn t;\n\t}\n\n\ttoString() {\n\t\tlet txt = this.text;\n\t\tif (txt !== null) {\n\t\t\ttxt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n\t\t} else {\n\t\t\ttxt = \"<no text>\";\n\t\t}\n\t\treturn \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" +\n\t\t\t\ttxt + \"',<\" + this.type + \">\" +\n\t\t\t\t(this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" +\n\t\t\t\tthis.line + \":\" + this.column + \"]\";\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t}\n\t\tconst input = this.getInputStream();\n\t\tif (input === null) {\n\t\t\treturn null;\n\t\t}\n\t\tconst n = input.size;\n\t\tif (this.start < n && this.stop < n) {\n\t\t\treturn input.getText(this.start, this.stop);\n\t\t} else {\n\t\t\treturn \"<EOF>\";\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n/**\n * An empty {@link Pair} which is used as the default value of\n * {@link //source} for tokens that do not have a source.\n */\nCommonToken.EMPTY_SOURCE = [ null, null ];\n\nmodule.exports = {\n\tToken,\n\tCommonToken\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/Token.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Utils.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Utils.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction arrayToString(a) {\n    return \"[\" + a.join(\", \") + \"]\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    const key = this.toString();\n    let h1b, k1;\n\n    const remainder = key.length & 3; // key.length % 4\n    const bytes = key.length - remainder;\n    let h1 = String.prototype.seed;\n    const c1 = 0xcc9e2d51;\n    const c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n    return a ? a.equals(b) : a==b;\n}\n\nfunction standardHashCodeFunction(a) {\n    return a ? a.hashCode() : -1;\n}\n\nclass Set {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    add(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n            values.push(value);\n            return value;\n        } else {\n            this.data[key] = [value];\n            return value;\n        }\n    }\n\n    contains(value) {\n        return this.get(value) != null;\n    }\n\n    get(value) {\n        const hash = this.hashFunction(value);\n        const key = \"hash_\" + hash;\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n        }\n        return null;\n    }\n\n    values() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    toString() {\n        return arrayToString(this.values());\n    }\n\n    get length(){\n        let l = 0;\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l + this.data[key].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass BitSet {\n    constructor() {\n        this.data = [];\n    }\n\n    add(value) {\n        this.data[value] = true;\n    }\n\n    or(set) {\n        const bits = this;\n        Object.keys(set.data).map(function (alt) {\n            bits.add(alt);\n        });\n    }\n\n    remove(value) {\n        delete this.data[value];\n    }\n\n    contains(value) {\n        return this.data[value] === true;\n    }\n\n    values() {\n        return Object.keys(this.data);\n    }\n\n    minValue() {\n        return Math.min.apply(null, this.values());\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        hash.update(this.values());\n        return hash.finish();\n    }\n\n    equals(other) {\n        if (!(other instanceof BitSet)) {\n            return false;\n        }\n        return this.hashCode() === other.hashCode();\n    }\n\n    toString() {\n        return \"{\" + this.values().join(\", \") + \"}\";\n    }\n\n    get length(){\n        return this.values().length;\n    }\n}\n\n\nclass Map {\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || standardHashCodeFunction;\n        this.equalsFunction = equalsFunction || standardEqualsFunction;\n    }\n\n    put(key, value) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if (hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key)) {\n                    const oldValue = entry.value;\n                    entry.value = value;\n                    return oldValue;\n                }\n            }\n            entries.push({key:key, value:value});\n            return value;\n        } else {\n            this.data[hashKey] = [{key:key, value:value}];\n            return value;\n        }\n    }\n\n    containsKey(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    get(key) {\n        const hashKey = \"hash_\" + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return entry.value;\n            }\n        }\n        return null;\n    }\n\n    entries() {\n        let l = [];\n        for (const key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l.concat(this.data[key]);\n            }\n        }\n        return l;\n    }\n\n    getKeys() {\n        return this.entries().map(function(e) {\n            return e.key;\n        });\n    }\n\n    getValues() {\n        return this.entries().map(function(e) {\n                return e.value;\n        });\n    }\n\n    toString() {\n        const ss = this.entries().map(function(entry) {\n            return '{' + entry.key + ':' + entry.value + '}';\n        });\n        return '[' + ss.join(\", \") + ']';\n    }\n\n    get length(){\n        let l = 0;\n        for (const hashKey in this.data) {\n            if (hashKey.indexOf(\"hash_\") === 0) {\n                l = l + this.data[hashKey].length;\n            }\n        }\n        return l;\n    }\n}\n\n\nclass AltDict {\n    constructor() {\n        this.data = {};\n    }\n\n    get(key) {\n        key = \"k-\" + key;\n        if (key in this.data) {\n            return this.data[key];\n        } else {\n            return null;\n        }\n    }\n\n    put(key, value) {\n        key = \"k-\" + key;\n        this.data[key] = value;\n    }\n\n    values() {\n        const data = this.data;\n        const keys = Object.keys(this.data);\n        return keys.map(function (key) {\n            return data[key];\n        });\n    }\n}\n\n\nclass DoubleDict {\n    constructor(defaultMapCtor) {\n        this.defaultMapCtor = defaultMapCtor || Map;\n        this.cacheMap = new this.defaultMapCtor();\n    }\n\n    get(a, b) {\n        const d = this.cacheMap.get(a) || null;\n        return d === null ? null : (d.get(b) || null);\n    }\n\n    set(a, b, o) {\n        let d = this.cacheMap.get(a) || null;\n        if (d === null) {\n            d = new this.defaultMapCtor();\n            this.cacheMap.put(a, d);\n        }\n        d.put(b, o);\n    }\n}\n\nclass Hash {\n    constructor() {\n        this.count = 0;\n        this.hash = 0;\n    }\n\n    update() {\n        for(let i=0;i<arguments.length;i++) {\n            const value = arguments[i];\n            if (value == null)\n                continue;\n            if(Array.isArray(value))\n                this.update.apply(this, value);\n            else {\n                let k = 0;\n                switch (typeof(value)) {\n                    case 'undefined':\n                    case 'function':\n                        continue;\n                    case 'number':\n                    case 'boolean':\n                        k = value;\n                        break;\n                    case 'string':\n                        k = value.hashCode();\n                        break;\n                    default:\n                        if(value.updateHashCode)\n                            value.updateHashCode(this);\n                        else\n                            console.log(\"No updateHashCode for \" + value.toString())\n                        continue;\n                }\n                k = k * 0xCC9E2D51;\n                k = (k << 15) | (k >>> (32 - 15));\n                k = k * 0x1B873593;\n                this.count = this.count + 1;\n                let hash = this.hash ^ k;\n                hash = (hash << 13) | (hash >>> (32 - 13));\n                hash = hash * 5 + 0xE6546B64;\n                this.hash = hash;\n            }\n        }\n    }\n\n    finish() {\n        let hash = this.hash ^ (this.count * 4);\n        hash = hash ^ (hash >>> 16);\n        hash = hash * 0x85EBCA6B;\n        hash = hash ^ (hash >>> 13);\n        hash = hash * 0xC2B2AE35;\n        hash = hash ^ (hash >>> 16);\n        return hash;\n    }\n}\n\nfunction hashStuff() {\n    const hash = new Hash();\n    hash.update.apply(hash, arguments);\n    return hash.finish();\n}\n\n\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\")\n         .replace(/\\n/g, \"\\\\n\")\n         .replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(/ /g, \"\\u00B7\");\n    }\n    return s;\n}\n\nfunction titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n}\n\nfunction equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a == b)\n        return true;\n    if (a.length != b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] == b[i])\n            continue;\n        if (!a[i].equals || !a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n}\n\nmodule.exports = {\n    Hash,\n    Set,\n    Map,\n    BitSet,\n    AltDict,\n    DoubleDict,\n    hashStuff,\n    escapeWhitespace,\n    arrayToString,\n    titleCase,\n    equalArrays\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/Utils.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATN.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATN.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst LL1Analyzer = __webpack_require__(/*! ./../LL1Analyzer */ \"./node_modules/antlr4/src/antlr4/LL1Analyzer.js\");\nconst {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n\nclass ATN {\n\n    constructor(grammarType , maxTokenType) {\n        /**\n         * Used for runtime deserialization of ATNs from strings\n         * The type of the ATN.\n        */\n        this.grammarType = grammarType;\n        // The maximum value for any symbol recognized by a transition in the ATN.\n        this.maxTokenType = maxTokenType;\n        this.states = [];\n        /**\n         * Each subrule/rule is a decision point and we must track them so we\n         * can go back later and build DFA predictors for them.  This includes\n         * all the rules, subrules, optional blocks, ()+, ()* etc...\n         */\n        this.decisionToState = [];\n        // Maps from rule index to starting state number.\n        this.ruleToStartState = [];\n        // Maps from rule index to stop state number.\n        this.ruleToStopState = null;\n        this.modeNameToStartState = {};\n        /**\n         * For lexer ATNs, this maps the rule index to the resulting token type.\n         * For parser ATNs, this maps the rule index to the generated bypass token\n         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n         * deserialization option was specified; otherwise, this is {@code null}\n         */\n        this.ruleToTokenType = null;\n        /**\n         * For lexer ATNs, this is an array of {@link LexerAction} objects which may\n         * be referenced by action transitions in the ATN\n         */\n        this.lexerActions = null;\n        this.modeToStartState = [];\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in state {@code s}.\n     * If {@code ctx} is null, the set of tokens will not include what can follow\n     * the rule surrounding {@code s}. In other words, the set will be\n     * restricted to tokens reachable staying within {@code s}'s rule\n     */\n    nextTokensInContext(s, ctx) {\n        const anal = new LL1Analyzer(this);\n        return anal.LOOK(s, null, ctx);\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in {@code s} and\n     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n     * rule\n     */\n    nextTokensNoContext(s) {\n        if (s.nextTokenWithinRule !== null ) {\n            return s.nextTokenWithinRule;\n        }\n        s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n        s.nextTokenWithinRule.readOnly = true;\n        return s.nextTokenWithinRule;\n    }\n\n    nextTokens(s, ctx) {\n        if ( ctx===undefined ) {\n            return this.nextTokensNoContext(s);\n        } else {\n            return this.nextTokensInContext(s, ctx);\n        }\n    }\n\n    addState(state) {\n        if ( state !== null ) {\n            state.atn = this;\n            state.stateNumber = this.states.length;\n        }\n        this.states.push(state);\n    }\n\n    removeState(state) {\n        this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n    }\n\n    defineDecisionState(s) {\n        this.decisionToState.push(s);\n        s.decision = this.decisionToState.length-1;\n        return s.decision;\n    }\n\n    getDecisionState(decision) {\n        if (this.decisionToState.length===0) {\n            return null;\n        } else {\n            return this.decisionToState[decision];\n        }\n    }\n\n    /**\n     * Computes the set of input symbols which could follow ATN state number\n     * {@code stateNumber} in the specified full {@code context}. This method\n     * considers the complete parser context, but does not evaluate semantic\n     * predicates (i.e. all predicates encountered during the calculation are\n     * assumed true). If a path in the ATN exists from the starting state to the\n     * {@link RuleStopState} of the outermost context without matching any\n     * symbols, {@link Token//EOF} is added to the returned set.\n     *\n     * <p>If {@code context} is {@code null}, it is treated as\n     * {@link ParserRuleContext//EMPTY}.</p>\n     *\n     * @param stateNumber the ATN state number\n     * @param ctx the full parse context\n     *\n     * @return {IntervalSet} The set of potentially valid input symbols which could follow the\n     * specified state in the specified context.\n     *\n     * @throws IllegalArgumentException if the ATN does not contain a state with\n     * number {@code stateNumber}\n     */\n    getExpectedTokens(stateNumber, ctx ) {\n        if ( stateNumber < 0 || stateNumber >= this.states.length ) {\n            throw(\"Invalid state number.\");\n        }\n        const s = this.states[stateNumber];\n        let following = this.nextTokens(s);\n        if (!following.contains(Token.EPSILON)) {\n            return following;\n        }\n        const expected = new IntervalSet();\n        expected.addSet(following);\n        expected.removeOne(Token.EPSILON);\n        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n            const invokingState = this.states[ctx.invokingState];\n            const rt = invokingState.transitions[0];\n            following = this.nextTokens(rt.followState);\n            expected.addSet(following);\n            expected.removeOne(Token.EPSILON);\n            ctx = ctx.parentCtx;\n        }\n        if (following.contains(Token.EPSILON)) {\n            expected.addOne(Token.EOF);\n        }\n        return expected;\n    }\n}\n\nATN.INVALID_ALT_NUMBER = 0;\n\nmodule.exports = ATN;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATN.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfig.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {DecisionState} = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\nconst {Hash} = __webpack_require__(/*! ../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\n\n\nfunction checkParams(params, isCfg) {\n\tif(params===null) {\n\t\tconst result = { state:null, alt:null, context:null, semanticContext:null };\n\t\tif(isCfg) {\n\t\t\tresult.reachesIntoOuterContext = 0;\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tconst props = {};\n\t\tprops.state = params.state || null;\n\t\tprops.alt = (params.alt === undefined) ? null : params.alt;\n\t\tprops.context = params.context || null;\n\t\tprops.semanticContext = params.semanticContext || null;\n\t\tif(isCfg) {\n\t\t\tprops.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t\t\tprops.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t\t}\n\t\treturn props;\n\t}\n}\n\nclass ATNConfig {\n    /**\n     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).\n     * The syntactic context is a graph-structured stack node whose\n     * path(s) to the root is the rule invocation(s)\n     * chain used to arrive at the state.  The semantic context is\n     * the tree of semantic predicates encountered before reaching\n     * an ATN state\n     */\n    constructor(params, config) {\n        this.checkContext(params, config);\n        params = checkParams(params);\n        config = checkParams(config, true);\n        // The ATN state associated with this configuration///\n        this.state = params.state!==null ? params.state : config.state;\n        // What alt (or lexer rule) is predicted by this configuration///\n        this.alt = params.alt!==null ? params.alt : config.alt;\n        /**\n         * The stack of invoking states leading to the rule/states associated\n         * with this config.  We track only those contexts pushed during\n         * execution of the ATN simulator\n         */\n        this.context = params.context!==null ? params.context : config.context;\n        this.semanticContext = params.semanticContext!==null ? params.semanticContext :\n            (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);\n        // TODO: make it a boolean then\n        /**\n         * We cannot execute predicates dependent upon local context unless\n         * we know for sure we are in the correct context. Because there is\n         * no way to do this efficiently, we simply cannot evaluate\n         * dependent predicates unless we are in the rule that initially\n         * invokes the ATN simulator.\n         * closure() tracks the depth of how far we dip into the\n         * outer context: depth &gt; 0.  Note that it may not be totally\n         * accurate depth since I don't ever decrement\n         */\n        this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    }\n\n    checkContext(params, config) {\n        if((params.context===null || params.context===undefined) &&\n                (config===null || config.context===null || config.context===undefined)) {\n            this.context = null;\n        }\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        this.updateHashCode(hash);\n        return hash.finish();\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n    }\n\n    /**\n     * An ATN configuration is equal to another if both have\n     * the same state, they predict the same alternative, and\n     * syntactic/semantic contexts are the same\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                (this.context===null ? other.context===null : this.context.equals(other.context)) &&\n                this.semanticContext.equals(other.semanticContext) &&\n                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;\n        }\n    }\n\n    hashCodeForConfigSet() {\n        const hash = new Hash();\n        hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n        return hash.finish();\n    }\n\n    equalsForConfigSet(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                this.semanticContext.equals(other.semanticContext);\n        }\n    }\n\n    toString() {\n        return \"(\" + this.state + \",\" + this.alt +\n            (this.context!==null ? \",[\" + this.context.toString() + \"]\" : \"\") +\n            (this.semanticContext !== SemanticContext.NONE ?\n                    (\",\" + this.semanticContext.toString())\n                    : \"\") +\n            (this.reachesIntoOuterContext>0 ?\n                    (\",up=\" + this.reachesIntoOuterContext)\n                    : \"\") + \")\";\n    }\n}\n\n\nclass LexerATNConfig extends ATNConfig {\n    constructor(params, config) {\n        super(params, config);\n\n        // This is the backing field for {@link //getLexerActionExecutor}.\n        const lexerActionExecutor = params.lexerActionExecutor || null;\n        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);\n        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;\n        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n        this.equalsForConfigSet = LexerATNConfig.prototype.equals;\n        return this;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n    }\n\n    equals(other) {\n        return this === other ||\n                (other instanceof LexerATNConfig &&\n                this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&\n                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&\n                super.equals(other));\n    }\n\n    checkNonGreedyDecision(source, target) {\n        return source.passedThroughNonGreedyDecision ||\n            (target instanceof DecisionState) && target.nonGreedy;\n    }\n}\n\n\nmodule.exports.ATNConfig = ATNConfig;\nmodule.exports.LexerATNConfig = LexerATNConfig;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATNConfig.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst Utils = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\nconst {merge} = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif ( a===b ) {\n\t\treturn true;\n\t} else if ( a===null || b===null ) {\n\t\treturn false;\n\t} else\n       return a.equalsForConfigSet(b);\n }\n\n/**\n * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n * info about the set, with support for combining similar configurations using a\n * graph-structured stack\n */\nclass ATNConfigSet {\n\tconstructor(fullCtx) {\n\t\t/**\n\t\t * The reason that we need this is because we don't want the hash map to use\n\t\t * the standard hash code and equals. We need all configurations with the\n\t\t * same\n\t\t * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t\t * doubles\n\t\t * the number of objects associated with ATNConfigs. The other solution is\n\t\t * to\n\t\t * use a hash table that lets us specify the equals/hashcode operation.\n\t\t * All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t\t * when we go readonly as this set becomes a DFA state\n\t\t */\n\t\tthis.configLookup = new Utils.Set(hashATNConfig, equalATNConfigs);\n\t\t/**\n\t\t * Indicates that this configuration set is part of a full context\n\t\t * LL prediction. It will be used to determine how to merge $. With SLL\n\t\t * it's a wildcard whereas it is not for LL context merge\n\t\t */\n\t\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t\t/**\n\t\t * Indicates that the set of configurations is read-only. Do not\n\t\t * allow any code to manipulate the set; DFA states will point at\n\t\t * the sets and they must not change. This does not protect the other\n\t\t * fields; in particular, conflictingAlts is set after\n\t\t * we've made this readonly\n\t\t */\n\t\tthis.readOnly = false;\n\t\t// Track the elements as they are added to the set; supports get(i)///\n\t\tthis.configs = [];\n\n\t\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t\t// together, saves recomputation\n\t\t// TODO: can we track conflicts as they are added to save scanning configs\n\t\t// later?\n\t\tthis.uniqueAlt = 0;\n\t\tthis.conflictingAlts = null;\n\n\t\t/**\n\t\t * Used in parser and lexer. In lexer, it indicates we hit a pred\n\t\t * while computing a closure operation. Don't make a DFA state from this\n\t\t */\n\t\tthis.hasSemanticContext = false;\n\t\tthis.dipsIntoOuterContext = false;\n\n\t\tthis.cachedHashCode = -1;\n\t}\n\n\t/**\n\t * Adding a new config means merging contexts with existing configs for\n\t * {@code (s, i, pi, _)}, where {@code s} is the\n\t * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n\t * {@code pi} is the {@link ATNConfig//semanticContext}. We use\n\t * {@code (s,i,pi)} as key.\n\t *\n\t * <p>This method updates {@link //dipsIntoOuterContext} and\n\t * {@link //hasSemanticContext} when necessary.</p>\n\t */\n\tadd(config, mergeCache) {\n\t\tif (mergeCache === undefined) {\n\t\t\tmergeCache = null;\n\t\t}\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\t\tthis.hasSemanticContext = true;\n\t\t}\n\t\tif (config.reachesIntoOuterContext > 0) {\n\t\t\tthis.dipsIntoOuterContext = true;\n\t\t}\n\t\tconst existing = this.configLookup.add(config);\n\t\tif (existing === config) {\n\t\t\tthis.cachedHashCode = -1;\n\t\t\tthis.configs.push(config); // track order here\n\t\t\treturn true;\n\t\t}\n\t\t// a previous (s,i,pi,_), merge with it and save result\n\t\tconst rootIsWildcard = !this.fullCtx;\n\t\tconst merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t\t/**\n\t\t * no need to check for existing.context, config.context in cache\n\t\t * since only way to create new graphs is \"call rule\" and here. We\n\t\t * cache at both places\n\t\t */\n\t\texisting.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t\t// make sure to preserve the precedence filter suppression during the merge\n\t\tif (config.precedenceFilterSuppressed) {\n\t\t\texisting.precedenceFilterSuppressed = true;\n\t\t}\n\t\texisting.context = merged; // replace context; no need to alt mapping\n\t\treturn true;\n\t}\n\n\tgetStates() {\n\t\tconst states = new Utils.Set();\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tstates.add(this.configs[i].state);\n\t\t}\n\t\treturn states;\n\t}\n\n\tgetPredicates() {\n\t\tconst preds = [];\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst c = this.configs[i].semanticContext;\n\t\t\tif (c !== SemanticContext.NONE) {\n\t\t\t\tpreds.push(c.semanticContext);\n\t\t\t}\n\t\t}\n\t\treturn preds;\n\t}\n\n\toptimizeConfigs(interpreter) {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (this.configLookup.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst config = this.configs[i];\n\t\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t\t}\n\t}\n\n\taddAll(coll) {\n\t\tfor (let i = 0; i < coll.length; i++) {\n\t\t\tthis.add(coll[i]);\n\t\t}\n\t\treturn false;\n\t}\n\n\tequals(other) {\n\t\treturn this === other ||\n\t\t\t(other instanceof ATNConfigSet &&\n\t\t\tUtils.equalArrays(this.configs, other.configs) &&\n\t\t\tthis.fullCtx === other.fullCtx &&\n\t\t\tthis.uniqueAlt === other.uniqueAlt &&\n\t\t\tthis.conflictingAlts === other.conflictingAlts &&\n\t\t\tthis.hasSemanticContext === other.hasSemanticContext &&\n\t\t\tthis.dipsIntoOuterContext === other.dipsIntoOuterContext);\n\t}\n\n\thashCode() {\n\t\tconst hash = new Utils.Hash();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n\n\tupdateHashCode(hash) {\n\t\tif (this.readOnly) {\n\t\t\tif (this.cachedHashCode === -1) {\n\t\t\t\tthis.cachedHashCode = this.hashCode();\n\t\t\t}\n\t\t\thash.update(this.cachedHashCode);\n\t\t} else {\n\t\t\thash.update(this.hashCode());\n\t\t}\n\t}\n\n\tisEmpty() {\n\t\treturn this.configs.length === 0;\n\t}\n\n\tcontains(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.contains(item);\n\t}\n\n\tcontainsFast(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.containsFast(item);\n\t}\n\n\tclear() {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tthis.configs = [];\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configLookup = new Utils.Set();\n\t}\n\n\tsetReadonly(readOnly) {\n\t\tthis.readOnly = readOnly;\n\t\tif (readOnly) {\n\t\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn Utils.arrayToString(this.configs) +\n\t\t\t(this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") +\n\t\t\t(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") +\n\t\t\t(this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") +\n\t\t\t(this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n\t}\n\n\tget items(){\n\t\treturn this.configs;\n\t}\n\n\tget length(){\n\t\treturn this.configs.length;\n\t}\n}\n\n\nclass OrderedATNConfigSet extends ATNConfigSet {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.configLookup = new Utils.Set();\n\t}\n}\n\nmodule.exports = {\n\tATNConfigSet,\n\tOrderedATNConfigSet\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nclass ATNDeserializationOptions {\n\tconstructor(copyFrom) {\n\t\tif(copyFrom===undefined) {\n\t\t\tcopyFrom = null;\n\t\t}\n\t\tthis.readOnly = false;\n\t\tthis.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;\n\t\tthis.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;\n\t}\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n//    def __setattr__(self, key, value):\n//        if key!=\"readOnly\" and self.readOnly:\n//            raise Exception(\"The object is read only.\")\n//        super(type(self), self).__setattr__(key,value)\n\nmodule.exports = ATNDeserializationOptions\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst ATNType = __webpack_require__(/*! ./ATNType */ \"./node_modules/antlr4/src/antlr4/atn/ATNType.js\");\n\nconst {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n} = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\");\n\nconst {\n    Transition,\n    AtomTransition,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    RangeTransition,\n    ActionTransition,\n    EpsilonTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition\n} = __webpack_require__(/*! ./Transition */ \"./node_modules/antlr4/src/antlr4/atn/Transition.js\")\n\nconst {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst ATNDeserializationOptions = __webpack_require__(/*! ./ATNDeserializationOptions */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\");\n\nconst {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction,\n} = __webpack_require__(/*! ./LexerAction */ \"./node_modules/antlr4/src/antlr4/atn/LexerAction.js\");\n\n// This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\nconst BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n\n//\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\nconst ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n\n// This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\nconst SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];\n\nconst SERIALIZED_VERSION = 3;\n\n// This is the current serialized UUID.\nconst SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray( length, value) {\n\tconst tmp = [];\n\ttmp[length-1] = value;\n\treturn tmp.map(function(i) {return value;});\n}\n\nclass ATNDeserializer {\n    constructor(options) {\n\n        if ( options=== undefined || options === null ) {\n            options = ATNDeserializationOptions.defaultOptions;\n        }\n        this.deserializationOptions = options;\n        this.stateFactories = null;\n        this.actionFactories = null;\n    }\n\n    /**\n     * Determines if a particular serialized representation of an ATN supports\n     * a particular feature, identified by the {@link UUID} used for serializing\n     * the ATN at the time the feature was first introduced.\n     *\n     * @param feature The {@link UUID} marking the first time the feature was\n     * supported in the serialized ATN.\n     * @param actualUuid The {@link UUID} of the actual serialized ATN which is\n     * currently being deserialized.\n     * @return {@code true} if the {@code actualUuid} value represents a\n     * serialized ATN at or after the feature identified by {@code feature} was\n     * introduced; otherwise, {@code false}.\n    */\n    isFeatureSupported(feature, actualUuid) {\n        const idx1 = SUPPORTED_UUIDS.indexOf(feature);\n        if (idx1<0) {\n            return false;\n        }\n        const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n        return idx2 >= idx1;\n    }\n\n    deserialize(data) {\n        this.reset(data);\n        this.checkVersion();\n        this.checkUUID();\n        const atn = this.readATN();\n        this.readStates(atn);\n        this.readRules(atn);\n        this.readModes(atn);\n        const sets = [];\n        // First, deserialize sets with 16-bit arguments <= U+FFFF.\n        this.readSets(atn, sets, this.readInt.bind(this));\n        // Next, if the ATN was serialized with the Unicode SMP feature,\n        // deserialize sets with 32-bit arguments <= U+10FFFF.\n        if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n            this.readSets(atn, sets, this.readInt32.bind(this));\n        }\n        this.readEdges(atn, sets);\n        this.readDecisions(atn);\n        this.readLexerActions(atn);\n        this.markPrecedenceDecisions(atn);\n        this.verifyATN(atn);\n        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {\n            this.generateRuleBypassTransitions(atn);\n            // re-verify after modification\n            this.verifyATN(atn);\n        }\n        return atn;\n    }\n\n    reset(data) {\n        const adjust = function(c) {\n            const v = c.charCodeAt(0);\n            return v>1  ? v-2 : v + 65534;\n        };\n        const temp = data.split(\"\").map(adjust);\n        // don't adjust the first value since that's the version number\n        temp[0] = data.charCodeAt(0);\n        this.data = temp;\n        this.pos = 0;\n    }\n\n    checkVersion() {\n        const version = this.readInt();\n        if ( version !== SERIALIZED_VERSION ) {\n            throw (\"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\");\n        }\n    }\n\n    checkUUID() {\n        const uuid = this.readUUID();\n        if (SUPPORTED_UUIDS.indexOf(uuid)<0) {\n            throw (\"Could not deserialize ATN with UUID: \" + uuid +\n                            \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID);\n        }\n        this.uuid = uuid;\n    }\n\n    readATN() {\n        const grammarType = this.readInt();\n        const maxTokenType = this.readInt();\n        return new ATN(grammarType, maxTokenType);\n    }\n\n    readStates(atn) {\n        let j, pair, stateNumber;\n        const  loopBackStateNumbers = [];\n        const  endStateNumbers = [];\n        const  nstates = this.readInt();\n        for(let i=0; i<nstates; i++) {\n            const  stype = this.readInt();\n            // ignore bad type of states\n            if (stype===ATNState.INVALID_TYPE) {\n                atn.addState(null);\n                continue;\n            }\n            let ruleIndex = this.readInt();\n            if (ruleIndex === 0xFFFF) {\n                ruleIndex = -1;\n            }\n            const  s = this.stateFactory(stype, ruleIndex);\n            if (stype === ATNState.LOOP_END) { // special case\n                const  loopBackStateNumber = this.readInt();\n                loopBackStateNumbers.push([s, loopBackStateNumber]);\n            } else if(s instanceof BlockStartState) {\n                const  endStateNumber = this.readInt();\n                endStateNumbers.push([s, endStateNumber]);\n            }\n            atn.addState(s);\n        }\n        // delay the assignment of loop back and end states until we know all the\n        // state instances have been initialized\n        for (j=0; j<loopBackStateNumbers.length; j++) {\n            pair = loopBackStateNumbers[j];\n            pair[0].loopBackState = atn.states[pair[1]];\n        }\n\n        for (j=0; j<endStateNumbers.length; j++) {\n            pair = endStateNumbers[j];\n            pair[0].endState = atn.states[pair[1]];\n        }\n\n        let numNonGreedyStates = this.readInt();\n        for (j=0; j<numNonGreedyStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].nonGreedy = true;\n        }\n\n        let numPrecedenceStates = this.readInt();\n        for (j=0; j<numPrecedenceStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].isPrecedenceRule = true;\n        }\n    }\n\n    readRules(atn) {\n        let i;\n        const nrules = this.readInt();\n        if (atn.grammarType === ATNType.LEXER ) {\n            atn.ruleToTokenType = initArray(nrules, 0);\n        }\n        atn.ruleToStartState = initArray(nrules, 0);\n        for (i=0; i<nrules; i++) {\n            const s = this.readInt();\n            atn.ruleToStartState[i] = atn.states[s];\n            if ( atn.grammarType === ATNType.LEXER ) {\n                let tokenType = this.readInt();\n                if (tokenType === 0xFFFF) {\n                    tokenType = Token.EOF;\n                }\n                atn.ruleToTokenType[i] = tokenType;\n            }\n        }\n        atn.ruleToStopState = initArray(nrules, 0);\n        for (i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!(state instanceof RuleStopState)) {\n                continue;\n            }\n            atn.ruleToStopState[state.ruleIndex] = state;\n            atn.ruleToStartState[state.ruleIndex].stopState = state;\n        }\n    }\n\n    readModes(atn) {\n        const nmodes = this.readInt();\n        for (let i=0; i<nmodes; i++) {\n            let s = this.readInt();\n            atn.modeToStartState.push(atn.states[s]);\n        }\n    }\n\n    readSets(atn, sets, readUnicode) {\n        const m = this.readInt();\n        for (let i=0; i<m; i++) {\n            const iset = new IntervalSet();\n            sets.push(iset);\n            const n = this.readInt();\n            const containsEof = this.readInt();\n            if (containsEof!==0) {\n                iset.addOne(-1);\n            }\n            for (let j=0; j<n; j++) {\n                const i1 = readUnicode();\n                const i2 = readUnicode();\n                iset.addRange(i1, i2);\n            }\n        }\n    }\n\n    readEdges(atn, sets) {\n        let i, j, state, trans, target;\n        const nedges = this.readInt();\n        for (i=0; i<nedges; i++) {\n            const src = this.readInt();\n            const trg = this.readInt();\n            const ttype = this.readInt();\n            const arg1 = this.readInt();\n            const arg2 = this.readInt();\n            const arg3 = this.readInt();\n            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n            const srcState = atn.states[src];\n            srcState.addTransition(trans);\n        }\n        // edges for rule stop states can be derived, so they aren't serialized\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for (j=0; j<state.transitions.length; j++) {\n                const t = state.transitions[j];\n                if (!(t instanceof RuleTransition)) {\n                    continue;\n                }\n                let outermostPrecedenceReturn = -1;\n                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n                    if (t.precedence === 0) {\n                        outermostPrecedenceReturn = t.target.ruleIndex;\n                    }\n                }\n\n                trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n            }\n        }\n\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            if (state instanceof BlockStartState) {\n                // we need to know the end state to set its start state\n                if (state.endState === null) {\n                    throw (\"IllegalState\");\n                }\n                // block end states can only be associated to a single block start\n                // state\n                if ( state.endState.startState !== null) {\n                    throw (\"IllegalState\");\n                }\n                state.endState.startState = state;\n            }\n            if (state instanceof PlusLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof PlusBlockStartState) {\n                        target.loopBackState = state;\n                    }\n                }\n            } else if (state instanceof StarLoopbackState) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof StarLoopEntryState) {\n                        target.loopBackState = state;\n                    }\n                }\n            }\n        }\n    }\n\n    readDecisions(atn) {\n        const ndecisions = this.readInt();\n        for (let i=0; i<ndecisions; i++) {\n            const s = this.readInt();\n            const decState = atn.states[s];\n            atn.decisionToState.push(decState);\n            decState.decision = i;\n        }\n    }\n\n    readLexerActions(atn) {\n        if (atn.grammarType === ATNType.LEXER) {\n            const count = this.readInt();\n            atn.lexerActions = initArray(count, null);\n            for (let i=0; i<count; i++) {\n                const actionType = this.readInt();\n                let data1 = this.readInt();\n                if (data1 === 0xFFFF) {\n                    data1 = -1;\n                }\n                let data2 = this.readInt();\n                if (data2 === 0xFFFF) {\n                    data2 = -1;\n                }\n\n                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);\n            }\n        }\n    }\n\n    generateRuleBypassTransitions(atn) {\n        let i;\n        const count = atn.ruleToStartState.length;\n        for(i=0; i<count; i++) {\n            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n        }\n        for(i=0; i<count; i++) {\n            this.generateRuleBypassTransition(atn, i);\n        }\n    }\n\n    generateRuleBypassTransition(atn, idx) {\n        let i, state;\n        const bypassStart = new BasicBlockStartState();\n        bypassStart.ruleIndex = idx;\n        atn.addState(bypassStart);\n\n        const bypassStop = new BlockEndState();\n        bypassStop.ruleIndex = idx;\n        atn.addState(bypassStop);\n\n        bypassStart.endState = bypassStop;\n        atn.defineDecisionState(bypassStart);\n\n        bypassStop.startState = bypassStart;\n\n        let excludeTransition = null;\n        let endState = null;\n\n        if (atn.ruleToStartState[idx].isPrecedenceRule) {\n            // wrap from the beginning of the rule to the StarLoopEntryState\n            endState = null;\n            for(i=0; i<atn.states.length; i++) {\n                state = atn.states[i];\n                if (this.stateIsEndStateFor(state, idx)) {\n                    endState = state;\n                    excludeTransition = state.loopBackState.transitions[0];\n                    break;\n                }\n            }\n            if (excludeTransition === null) {\n                throw (\"Couldn't identify final state of the precedence rule prefix section.\");\n            }\n        } else {\n            endState = atn.ruleToStopState[idx];\n        }\n\n        // all non-excluded transitions that currently target end state need to\n        // target blockEnd instead\n        for(i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for(let j=0; j<state.transitions.length; j++) {\n                const transition = state.transitions[j];\n                if (transition === excludeTransition) {\n                    continue;\n                }\n                if (transition.target === endState) {\n                    transition.target = bypassStop;\n                }\n            }\n        }\n\n        // all transitions leaving the rule start state need to leave blockStart\n        // instead\n        const ruleToStartState = atn.ruleToStartState[idx];\n        const count = ruleToStartState.transitions.length;\n        while ( count > 0) {\n            bypassStart.addTransition(ruleToStartState.transitions[count-1]);\n            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n        }\n        // link the new states\n        atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n        bypassStop.addTransition(new EpsilonTransition(endState));\n\n        const matchState = new BasicState();\n        atn.addState(matchState);\n        matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n        bypassStart.addTransition(new EpsilonTransition(matchState));\n    }\n\n    stateIsEndStateFor(state, idx) {\n        if ( state.ruleIndex !== idx) {\n            return null;\n        }\n        if (!( state instanceof StarLoopEntryState)) {\n            return null;\n        }\n        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n        if (!( maybeLoopEndState instanceof LoopEndState)) {\n            return null;\n        }\n        if (maybeLoopEndState.epsilonOnlyTransitions &&\n            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n            return state;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n     * correct value.\n     * @param atn The ATN.\n     */\n    markPrecedenceDecisions(atn) {\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!( state instanceof StarLoopEntryState)) {\n                continue;\n            }\n            // We analyze the ATN to determine if this ATN decision state is the\n            // decision for the closure block that determines whether a\n            // precedence rule should continue or complete.\n            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n                if (maybeLoopEndState instanceof LoopEndState) {\n                    if ( maybeLoopEndState.epsilonOnlyTransitions &&\n                            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n                        state.isPrecedenceDecision = true;\n                    }\n                }\n            }\n        }\n    }\n\n    verifyATN(atn) {\n        if (!this.deserializationOptions.verifyATN) {\n            return;\n        }\n        // verify assumptions\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (state === null) {\n                continue;\n            }\n            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n            if (state instanceof PlusBlockStartState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else  if (state instanceof StarLoopEntryState) {\n                this.checkCondition(state.loopBackState !== null);\n                this.checkCondition(state.transitions.length === 2);\n                if (state.transitions[0].target instanceof StarBlockStartState) {\n                    this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n                    this.checkCondition(!state.nonGreedy);\n                } else if (state.transitions[0].target instanceof LoopEndState) {\n                    this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n                    this.checkCondition(state.nonGreedy);\n                } else {\n                    throw(\"IllegalState\");\n                }\n            } else if (state instanceof StarLoopbackState) {\n                this.checkCondition(state.transitions.length === 1);\n                this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n            } else if (state instanceof LoopEndState) {\n                this.checkCondition(state.loopBackState !== null);\n            } else if (state instanceof RuleStartState) {\n                this.checkCondition(state.stopState !== null);\n            } else if (state instanceof BlockStartState) {\n                this.checkCondition(state.endState !== null);\n            } else if (state instanceof BlockEndState) {\n                this.checkCondition(state.startState !== null);\n            } else if (state instanceof DecisionState) {\n                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n            } else {\n                this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));\n            }\n        }\n    }\n\n    checkCondition(condition, message) {\n        if (!condition) {\n            if (message === undefined || message===null) {\n                message = \"IllegalState\";\n            }\n            throw (message);\n        }\n    }\n\n    readInt() {\n        return this.data[this.pos++];\n    }\n\n    readInt32() {\n        const low = this.readInt();\n        const high = this.readInt();\n        return low | (high << 16);\n    }\n\n    readLong() {\n        const low = this.readInt32();\n        const high = this.readInt32();\n        return (low & 0x00000000FFFFFFFF) | (high << 32);\n    }\n\n    readUUID() {\n        const bb = [];\n        for(let i=7;i>=0;i--) {\n            const int = this.readInt();\n            /* jshint bitwise: false */\n            bb[(2*i)+1] = int & 0xFF;\n            bb[2*i] = (int >> 8) & 0xFF;\n        }\n        return byteToHex[bb[0]] + byteToHex[bb[1]] +\n        byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +\n        byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +\n        byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +\n        byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +\n        byteToHex[bb[10]] + byteToHex[bb[11]] +\n        byteToHex[bb[12]] + byteToHex[bb[13]] +\n        byteToHex[bb[14]] + byteToHex[bb[15]];\n    }\n\n    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {\n        const target = atn.states[trg];\n        switch(type) {\n        case Transition.EPSILON:\n            return new EpsilonTransition(target);\n        case Transition.RANGE:\n            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n        case Transition.RULE:\n            return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n        case Transition.PREDICATE:\n            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.PRECEDENCE:\n            return new PrecedencePredicateTransition(target, arg1);\n        case Transition.ATOM:\n            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n        case Transition.ACTION:\n            return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n        case Transition.SET:\n            return new SetTransition(target, sets[arg1]);\n        case Transition.NOT_SET:\n            return new NotSetTransition(target, sets[arg1]);\n        case Transition.WILDCARD:\n            return new WildcardTransition(target);\n        default:\n            throw \"The specified transition type: \" + type + \" is not valid.\";\n        }\n    }\n\n    stateFactory(type, ruleIndex) {\n        if (this.stateFactories === null) {\n            const sf = [];\n            sf[ATNState.INVALID_TYPE] = null;\n            sf[ATNState.BASIC] = () => new BasicState();\n            sf[ATNState.RULE_START] = () => new RuleStartState();\n            sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();\n            sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();\n            sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();\n            sf[ATNState.TOKEN_START] = () => new TokensStartState();\n            sf[ATNState.RULE_STOP] = () => new RuleStopState();\n            sf[ATNState.BLOCK_END] = () => new BlockEndState();\n            sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();\n            sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();\n            sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();\n            sf[ATNState.LOOP_END] = () => new LoopEndState();\n            this.stateFactories = sf;\n        }\n        if (type>this.stateFactories.length || this.stateFactories[type] === null) {\n            throw(\"The specified state type \" + type + \" is not valid.\");\n        } else {\n            const s = this.stateFactories[type]();\n            if (s!==null) {\n                s.ruleIndex = ruleIndex;\n                return s;\n            }\n        }\n    }\n\n    lexerActionFactory(type, data1, data2) {\n        if (this.actionFactories === null) {\n            const af = [];\n            af[LexerActionType.CHANNEL] = (data1, data2) => new LexerChannelAction(data1);\n            af[LexerActionType.CUSTOM] = (data1, data2) => new LexerCustomAction(data1, data2);\n            af[LexerActionType.MODE] = (data1, data2) => new LexerModeAction(data1);\n            af[LexerActionType.MORE] = (data1, data2) => LexerMoreAction.INSTANCE;\n            af[LexerActionType.POP_MODE] = (data1, data2) => LexerPopModeAction.INSTANCE;\n            af[LexerActionType.PUSH_MODE] = (data1, data2) => new LexerPushModeAction(data1);\n            af[LexerActionType.SKIP] = (data1, data2) => LexerSkipAction.INSTANCE;\n            af[LexerActionType.TYPE] = (data1, data2) => new LexerTypeAction(data1);\n            this.actionFactories = af;\n        }\n        if (type>this.actionFactories.length || this.actionFactories[type] === null) {\n            throw(\"The specified lexer action type \" + type + \" is not valid.\");\n        } else {\n            return this.actionFactories[type](data1, data2);\n        }\n    }\n}\n\nfunction createByteToHex() {\n\tconst bth = [];\n\tfor (let i = 0; i < 256; i++) {\n\t\tbth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n\t}\n\treturn bth;\n}\n\nconst byteToHex = createByteToHex();\n\n\nmodule.exports = ATNDeserializer;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {getCachedPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {Map} = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\n\nclass ATNSimulator {\n    constructor(atn, sharedContextCache) {\n        /**\n         * The context cache maps all PredictionContext objects that are ==\n         * to a single cached copy. This cache is shared across all contexts\n         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n         * to use only cached nodes/graphs in addDFAState(). We don't want to\n         * fill this during closure() since there are lots of contexts that\n         * pop up but are not used ever again. It also greatly slows down closure().\n         *\n         * <p>This cache makes a huge difference in memory and a little bit in speed.\n         * For the Java grammar on java.*, it dropped the memory requirements\n         * at the end from 25M to 16M. We don't store any of the full context\n         * graphs in the DFA because they are limited to local context only,\n         * but apparently there's a lot of repetition there as well. We optimize\n         * the config contexts before storing the config set in the DFA states\n         * by literally rebuilding them with cached subgraphs only.</p>\n         *\n         * <p>I tried a cache for use during closure operations, that was\n         * whacked after each adaptivePredict(). It cost a little bit\n         * more time I think and doesn't save on the overall footprint\n         * so it's not worth the complexity.</p>\n         */\n        this.atn = atn;\n        this.sharedContextCache = sharedContextCache;\n        return this;\n    }\n\n    getCachedContext(context) {\n        if (this.sharedContextCache ===null) {\n            return context;\n        }\n        const visited = new Map();\n        return getCachedPredictionContext(context, this.sharedContextCache, visited);\n    }\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\n\nmodule.exports = ATNSimulator;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNState.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNState.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst INITIAL_NUM_TRANSITIONS = 4;\n\n/**\n * The following images show the relation of states and\n * {@link ATNState//transitions} for various grammar constructs.\n *\n * <ul>\n *\n * <li>Solid edges marked with an &//0949; indicate a required\n * {@link EpsilonTransition}.</li>\n *\n * <li>Dashed edges indicate locations where any transition derived from\n * {@link Transition} might appear.</li>\n *\n * <li>Dashed nodes are place holders for either a sequence of linked\n * {@link BasicState} states or the inclusion of a block representing a nested\n * construct in one of the forms below.</li>\n *\n * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n * any number of alternatives (one or more). Nodes without the {@code ...} only\n * support the exact number of alternatives shown in the diagram.</li>\n *\n * </ul>\n *\n * <h2>Basic Blocks</h2>\n *\n * <h3>Rule</h3>\n *\n * <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Block of 1 or more alternatives</h3>\n *\n * <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Greedy Loops</h2>\n *\n * <h3>Greedy Closure: {@code (...)*}</h3>\n *\n * <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Positive Closure: {@code (...)+}</h3>\n *\n * <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Optional: {@code (...)?}</h3>\n *\n * <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Non-Greedy Loops</h2>\n *\n * <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n *\n * <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n *\n * <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Optional: {@code (...)??}</h3>\n *\n * <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n */\nclass ATNState {\n    constructor() {\n        // Which ATN are we in?\n        this.atn = null;\n        this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n        this.stateType = null;\n        this.ruleIndex = 0; // at runtime, we don't have Rule objects\n        this.epsilonOnlyTransitions = false;\n        // Track the transitions emanating from this ATN state.\n        this.transitions = [];\n        // Used to cache lookahead during parsing, not used during construction\n        this.nextTokenWithinRule = null;\n    }\n\n    toString() {\n        return this.stateNumber;\n    }\n\n    equals(other) {\n        if (other instanceof ATNState) {\n            return this.stateNumber===other.stateNumber;\n        } else {\n            return false;\n        }\n    }\n\n    isNonGreedyExitState() {\n        return false;\n    }\n\n    addTransition(trans, index) {\n        if(index===undefined) {\n            index = -1;\n        }\n        if (this.transitions.length===0) {\n            this.epsilonOnlyTransitions = trans.isEpsilon;\n        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {\n            this.epsilonOnlyTransitions = false;\n        }\n        if (index===-1) {\n            this.transitions.push(trans);\n        } else {\n            this.transitions.splice(index, 1, trans);\n        }\n    }\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\" ];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\n\nclass BasicState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BASIC;\n    }\n}\n\nclass DecisionState extends ATNState {\n    constructor() {\n        super();\n        this.decision = -1;\n        this.nonGreedy = false;\n        return this;\n    }\n}\n\n/**\n *  The start of a regular {@code (...)} block\n */\nclass BlockStartState extends DecisionState {\n    constructor() {\n        super();\n        this.endState = null;\n        return this;\n    }\n}\n\nclass BasicBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_START;\n        return this;\n    }\n}\n\n/**\n * Terminal node of a simple {@code (a|b|c)} block\n */\nclass BlockEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.BLOCK_END;\n        this.startState = null;\n        return this;\n    }\n}\n\n/**\n * The last node in the ATN for a rule, unless that rule is the start symbol.\n * In that case, there is one transition to EOF. Later, we might encode\n * references to all calls to this rule to compute FOLLOW sets for\n * error handling\n */\nclass RuleStopState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_STOP;\n        return this;\n    }\n}\n\nclass RuleStartState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.RULE_START;\n        this.stopState = null;\n        this.isPrecedenceRule = false;\n        return this;\n    }\n}\n\n/**\n * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n * one to the loop back to start of the block and one to exit.\n */\nclass PlusLoopbackState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_LOOP_BACK;\n        return this;\n    }\n}\n\n/**\n * Start of {@code (A|B|...)+} loop. Technically a decision state, but\n * we don't use for code generation; somebody might need it, so I'm defining\n * it for completeness. In reality, the {@link PlusLoopbackState} node is the\n * real decision-making note for {@code A+}\n */\nclass PlusBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.PLUS_BLOCK_START;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n/**\n * The block that begins a closure loop\n */\nclass StarBlockStartState extends BlockStartState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_BLOCK_START;\n        return this;\n    }\n}\n\nclass StarLoopbackState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_BACK;\n        return this;\n    }\n}\n\nclass StarLoopEntryState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.STAR_LOOP_ENTRY;\n        this.loopBackState = null;\n        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n        this.isPrecedenceDecision = null;\n        return this;\n    }\n}\n\n/**\n * Mark the end of a * or + loop\n */\nclass LoopEndState extends ATNState {\n    constructor() {\n        super();\n        this.stateType = ATNState.LOOP_END;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n/**\n * The Tokens rule start state linking to each lexer rule start state\n */\nclass TokensStartState extends DecisionState {\n    constructor() {\n        super();\n        this.stateType = ATNState.TOKEN_START;\n        return this;\n    }\n}\n\nmodule.exports = {\n    ATNState,\n    BasicState,\n    DecisionState,\n    BlockStartState,\n    BlockEndState,\n    LoopEndState,\n    RuleStartState,\n    RuleStopState,\n    TokensStartState,\n    PlusLoopbackState,\n    StarLoopbackState,\n    StarLoopEntryState,\n    PlusBlockStartState,\n    StarBlockStartState,\n    BasicBlockStartState\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATNState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNType.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNType.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Represents the type of recognizer an ATN applies to\n */\nmodule.exports = {\n    LEXER: 0,\n    PARSER: 1\n};\n\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ATNType.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst Lexer = __webpack_require__(/*! ./../Lexer */ \"./node_modules/antlr4/src/antlr4/Lexer.js\");\nconst ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ \"./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\");\nconst {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst {OrderedATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {SingletonPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {RuleStopState} = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {LexerATNConfig} = __webpack_require__(/*! ./ATNConfig */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {Transition} = __webpack_require__(/*! ./Transition */ \"./node_modules/antlr4/src/antlr4/atn/Transition.js\");\nconst LexerActionExecutor = __webpack_require__(/*! ./LexerActionExecutor */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js\");\nconst {LexerNoViableAltException} = __webpack_require__(/*! ./../error/Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\");\n\nfunction resetSimState(sim) {\n\tsim.index = -1;\n\tsim.line = 0;\n\tsim.column = -1;\n\tsim.dfaState = null;\n}\n\nclass SimState {\n\tconstructor() {\n\t\tresetSimState(this);\n\t}\n\n\treset() {\n\t\tresetSimState(this);\n\t}\n}\n\nclass LexerATNSimulator extends ATNSimulator {\n\t/**\n\t * When we hit an accept state in either the DFA or the ATN, we\n\t * have to notify the character stream to start buffering characters\n\t * via {@link IntStream//mark} and record the current state. The current sim state\n\t * includes the current index into the input, the current line,\n\t * and current character position in that line. Note that the Lexer is\n\t * tracking the starting line and characterization of the token. These\n\t * variables track the \"state\" of the simulator when it hits an accept state.\n\t *\n\t * <p>We track these variables separately for the DFA and ATN simulation\n\t * because the DFA simulation often has to fail over to the ATN\n\t * simulation. If the ATN simulation fails, we need the DFA to fall\n\t * back to its previously accepted state, if any. If the ATN succeeds,\n\t * then the ATN does the accept and the DFA simulator that invoked it\n\t * can simply return the predicted token type.</p>\n\t */\n\tconstructor(recog, atn, decisionToDFA, sharedContextCache) {\n\t\tsuper(atn, sharedContextCache);\n\t\tthis.decisionToDFA = decisionToDFA;\n\t\tthis.recog = recog;\n\t\t/**\n\t\t * The current token's starting index into the character stream.\n\t\t * Shared across DFA to ATN simulation in case the ATN fails and the\n\t\t * DFA did not have a previous accept state. In this case, we use the\n\t\t * ATN-generated exception object\n\t\t */\n\t\tthis.startIndex = -1;\n\t\t// line number 1..n within the input///\n\t\tthis.line = 1;\n\t\t/**\n\t\t * The index of the character relative to the beginning of the line\n\t\t * 0..n-1\n\t\t */\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t\t/**\n\t\t * Used during DFA/ATN exec to record the most recent accept configuration\n\t\t * info\n\t\t */\n\t\tthis.prevAccept = new SimState();\n\t}\n\n\tcopyState(simulator) {\n\t\tthis.column = simulator.column;\n\t\tthis.line = simulator.line;\n\t\tthis.mode = simulator.mode;\n\t\tthis.startIndex = simulator.startIndex;\n\t}\n\n\tmatch(input, mode) {\n\t\tthis.match_calls += 1;\n\t\tthis.mode = mode;\n\t\tconst mark = input.mark();\n\t\ttry {\n\t\t\tthis.startIndex = input.index;\n\t\t\tthis.prevAccept.reset();\n\t\t\tconst dfa = this.decisionToDFA[mode];\n\t\t\tif (dfa.s0 === null) {\n\t\t\t\treturn this.matchATN(input);\n\t\t\t} else {\n\t\t\t\treturn this.execATN(input, dfa.s0);\n\t\t\t}\n\t\t} finally {\n\t\t\tinput.release(mark);\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.prevAccept.reset();\n\t\tthis.startIndex = -1;\n\t\tthis.line = 1;\n\t\tthis.column = 0;\n\t\tthis.mode = Lexer.DEFAULT_MODE;\n\t}\n\n\tmatchATN(input) {\n\t\tconst startState = this.atn.modeToStartState[this.mode];\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n\t\t}\n\t\tconst old_mode = this.mode;\n\t\tconst s0_closure = this.computeStartState(input, startState);\n\t\tconst suppressEdge = s0_closure.hasSemanticContext;\n\t\ts0_closure.hasSemanticContext = false;\n\n\t\tconst next = this.addDFAState(s0_closure);\n\t\tif (!suppressEdge) {\n\t\t\tthis.decisionToDFA[this.mode].s0 = next;\n\t\t}\n\n\t\tconst predict = this.execATN(input, next);\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n\t\t}\n\t\treturn predict;\n\t}\n\n\texecATN(input, ds0) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"start state closure=\" + ds0.configs);\n\t\t}\n\t\tif (ds0.isAcceptState) {\n\t\t\t// allow zero-length tokens\n\t\t\tthis.captureSimState(this.prevAccept, input, ds0);\n\t\t}\n\t\tlet t = input.LA(1);\n\t\tlet s = ds0; // s is current/from DFA state\n\n\t\twhile (true) { // while more work\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"execATN loop starting closure: \" + s.configs);\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * As we move src->trg, src->trg, we keep track of the previous trg to\n\t\t\t * avoid looking up the DFA state again, which is expensive.\n\t\t\t * If the previous target was already part of the DFA, we might\n\t\t\t * be able to avoid doing a reach operation upon t. If s!=null,\n\t\t\t * it means that semantic predicates didn't prevent us from\n\t\t\t * creating a DFA state. Once we know s!=null, we check to see if\n\t\t\t * the DFA state has an edge already for t. If so, we can just reuse\n\t\t\t * it's configuration set; there's no point in re-computing it.\n\t\t\t * This is kind of like doing DFA simulation within the ATN\n\t\t\t * simulation because DFA simulation is really just a way to avoid\n\t\t\t * computing reach/closure sets. Technically, once we know that\n\t\t\t * we have a previously added DFA state, we could jump over to\n\t\t\t * the DFA simulator. But, that would mean popping back and forth\n\t\t\t * a lot and making things more complicated algorithmically.\n\t\t\t * This optimization makes a lot of sense for loops within DFA.\n\t\t\t * A character will take us back to an existing DFA state\n\t\t\t * that already has lots of edges out of it. e.g., .* in comments.\n\t\t\t * print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\t\t\t */\n\t\t\tlet target = this.getExistingTargetState(s, t);\n\t\t\t// print(\"Existing:\" + str(target))\n\t\t\tif (target === null) {\n\t\t\t\ttarget = this.computeTargetState(input, s, t);\n\t\t\t\t// print(\"Computed:\" + str(target))\n\t\t\t}\n\t\t\tif (target === ATNSimulator.ERROR) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// If this is a consumable input element, make sure to consume before\n\t\t\t// capturing the accept state so the input index, line, and char\n\t\t\t// position accurately reflect the state of the interpreter at the\n\t\t\t// end of the token.\n\t\t\tif (t !== Token.EOF) {\n\t\t\t\tthis.consume(input);\n\t\t\t}\n\t\t\tif (target.isAcceptState) {\n\t\t\t\tthis.captureSimState(this.prevAccept, input, target);\n\t\t\t\tif (t === Token.EOF) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tt = input.LA(1);\n\t\t\ts = target; // flip; current DFA target becomes new src/from state\n\t\t}\n\t\treturn this.failOrAccept(this.prevAccept, input, s.configs, t);\n\t}\n\n\t/**\n\t * Get an existing target state for an edge in the DFA. If the target state\n\t * for the edge has not yet been computed or is otherwise not available,\n\t * this method returns {@code null}.\n\t *\n\t * @param s The current DFA state\n\t * @param t The next input symbol\n\t * @return The existing target DFA state for the given input symbol\n\t * {@code t}, or {@code null} if the target state for this edge is not\n\t * already cached\n\t */\n\tgetExistingTargetState(s, t) {\n\t\tif (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\t\tif(target===undefined) {\n\t\t\ttarget = null;\n\t\t}\n\t\tif (LexerATNSimulator.debug && target !== null) {\n\t\t\tconsole.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n\t\t}\n\t\treturn target;\n\t}\n\n\t/**\n\t * Compute a target state for an edge in the DFA, and attempt to add the\n\t * computed state and corresponding edge to the DFA.\n\t *\n\t * @param input The input stream\n\t * @param s The current DFA state\n\t * @param t The next input symbol\n\t *\n\t * @return The computed target DFA state for the given input symbol\n\t * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n\t * returns {@link //ERROR}.\n\t */\n\tcomputeTargetState(input, s, t) {\n\t\tconst reach = new OrderedATNConfigSet();\n\t\t// if we don't find an existing DFA state\n\t\t// Fill reach starting from closure, following t transitions\n\t\tthis.getReachableConfigSet(input, s.configs, reach, t);\n\n\t\tif (reach.items.length === 0) { // we got nowhere on t from s\n\t\t\tif (!reach.hasSemanticContext) {\n\t\t\t\t// we got nowhere on t, don't throw out this knowledge; it'd\n\t\t\t\t// cause a failover from DFA later.\n\t\t\t\tthis.addDFAEdge(s, t, ATNSimulator.ERROR);\n\t\t\t}\n\t\t\t// stop when we can't match any more char\n\t\t\treturn ATNSimulator.ERROR;\n\t\t}\n\t\t// Add an edge from s to target DFA found/created for reach\n\t\treturn this.addDFAEdge(s, t, null, reach);\n\t}\n\n\tfailOrAccept(prevAccept, input, reach, t) {\n\t\tif (this.prevAccept.dfaState !== null) {\n\t\t\tconst lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n\t\t\tthis.accept(input, lexerActionExecutor, this.startIndex,\n\t\t\t\t\tprevAccept.index, prevAccept.line, prevAccept.column);\n\t\t\treturn prevAccept.dfaState.prediction;\n\t\t} else {\n\t\t\t// if no accept and EOF is first char, return EOF\n\t\t\tif (t === Token.EOF && input.index === this.startIndex) {\n\t\t\t\treturn Token.EOF;\n\t\t\t}\n\t\t\tthrow new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n\t\t}\n\t}\n\n\t/**\n\t * Given a starting configuration set, figure out all ATN configurations\n\t * we can reach upon input {@code t}. Parameter {@code reach} is a return\n\t * parameter.\n\t */\n\tgetReachableConfigSet(input, closure,\n\t\t\treach, t) {\n\t\t// this is used to skip processing for configs which have a lower priority\n\t\t// than a config that already reached an accept state for the same rule\n\t\tlet skipAlt = ATN.INVALID_ALT_NUMBER;\n\t\tfor (let i = 0; i < closure.items.length; i++) {\n\t\t\tconst cfg = closure.items[i];\n\t\t\tconst currentAltReachedAcceptState = (cfg.alt === skipAlt);\n\t\t\tif (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg\n\t\t\t\t\t\t.toString(this.recog, true));\n\t\t\t}\n\t\t\tfor (let j = 0; j < cfg.state.transitions.length; j++) {\n\t\t\t\tconst trans = cfg.state.transitions[j]; // for each transition\n\t\t\t\tconst target = this.getReachableTarget(trans, t);\n\t\t\t\tif (target !== null) {\n\t\t\t\t\tlet lexerActionExecutor = cfg.lexerActionExecutor;\n\t\t\t\t\tif (lexerActionExecutor !== null) {\n\t\t\t\t\t\tlexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n\t\t\t\t\t}\n\t\t\t\t\tconst treatEofAsEpsilon = (t === Token.EOF);\n\t\t\t\t\tconst config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);\n\t\t\t\t\tif (this.closure(input, config, reach,\n\t\t\t\t\t\t\tcurrentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n\t\t\t\t\t\t// any remaining configs for this alt have a lower priority\n\t\t\t\t\t\t// than the one that just reached an accept state.\n\t\t\t\t\t\tskipAlt = cfg.alt;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\taccept(input, lexerActionExecutor,\n\t\t\t   startIndex, index, line, charPos) {\n\t\t   if (LexerATNSimulator.debug) {\n\t\t\t   console.log(\"ACTION %s\\n\", lexerActionExecutor);\n\t\t   }\n\t\t   // seek to after last char in token\n\t\t   input.seek(index);\n\t\t   this.line = line;\n\t\t   this.column = charPos;\n\t\t   if (lexerActionExecutor !== null && this.recog !== null) {\n\t\t\t   lexerActionExecutor.execute(this.recog, input, startIndex);\n\t\t   }\n\t   }\n\n\tgetReachableTarget(trans, t) {\n\t\tif (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\treturn trans.target;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tcomputeStartState(input, p) {\n\t\tconst initialContext = PredictionContext.EMPTY;\n\t\tconst configs = new OrderedATNConfigSet();\n\t\tfor (let i = 0; i < p.transitions.length; i++) {\n\t\t\tconst target = p.transitions[i].target;\n\t\t\tconst cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);\n\t\t\tthis.closure(input, cfg, configs, false, false, false);\n\t\t}\n\t\treturn configs;\n\t}\n\n\t/**\n\t * Since the alternatives within any lexer decision are ordered by\n\t * preference, this method stops pursuing the closure as soon as an accept\n\t * state is reached. After the first accept state is reached by depth-first\n\t * search from {@code config}, all other (potentially reachable) states for\n\t * this rule would have a lower priority.\n\t *\n\t * @return {Boolean} {@code true} if an accept state is reached, otherwise\n\t * {@code false}.\n\t */\n\tclosure(input, config, configs,\n\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n\t\tlet cfg = null;\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n\t\t}\n\t\tif (config.state instanceof RuleStopState) {\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tif (this.recog !== null) {\n\t\t\t\t\tconsole.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log(\"closure at rule stop %s\\n\", config);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\tif (config.context === null || config.context.isEmpty()) {\n\t\t\t\t\tconfigs.add(config);\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconfigs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));\n\t\t\t\t\tcurrentAltReachedAcceptState = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (config.context !== null && !config.context.isEmpty()) {\n\t\t\t\tfor (let i = 0; i < config.context.length; i++) {\n\t\t\t\t\tif (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\t\tconst newContext = config.context.getParent(i); // \"pop\" return state\n\t\t\t\t\t\tconst returnState = this.atn.states[config.context.getReturnState(i)];\n\t\t\t\t\t\tcfg = new LexerATNConfig({ state:returnState, context:newContext }, config);\n\t\t\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg,\n\t\t\t\t\t\t\t\tconfigs, currentAltReachedAcceptState, speculative,\n\t\t\t\t\t\t\t\ttreatEofAsEpsilon);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn currentAltReachedAcceptState;\n\t\t}\n\t\t// optimization\n\t\tif (!config.state.epsilonOnlyTransitions) {\n\t\t\tif (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n\t\t\t\tconfigs.add(config);\n\t\t\t}\n\t\t}\n\t\tfor (let j = 0; j < config.state.transitions.length; j++) {\n\t\t\tconst trans = config.state.transitions[j];\n\t\t\tcfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\t\t\tif (cfg !== null) {\n\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs,\n\t\t\t\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t\t}\n\t\t}\n\t\treturn currentAltReachedAcceptState;\n\t}\n\n\t// side-effect: can alter configs.hasSemanticContext\n\tgetEpsilonTarget(input, config, trans,\n\t\t\tconfigs, speculative, treatEofAsEpsilon) {\n\t\tlet cfg = null;\n\t\tif (trans.serializationType === Transition.RULE) {\n\t\t\tconst newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n\t\t\tcfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);\n\t\t} else if (trans.serializationType === Transition.PRECEDENCE) {\n\t\t\tthrow \"Precedence predicates are not supported in lexers.\";\n\t\t} else if (trans.serializationType === Transition.PREDICATE) {\n\t\t\t// Track traversing semantic predicates. If we traverse,\n\t\t\t// we cannot add a DFA state for this \"reach\" computation\n\t\t\t// because the DFA would not test the predicate again in the\n\t\t\t// future. Rather than creating collections of semantic predicates\n\t\t\t// like v3 and testing them on prediction, v4 will test them on the\n\t\t\t// fly all the time using the ATN not the DFA. This is slower but\n\t\t\t// semantically it's not used that often. One of the key elements to\n\t\t\t// this predicate mechanism is not adding DFA states that see\n\t\t\t// predicates immediately afterwards in the ATN. For example,\n\n\t\t\t// a : ID {p1}? | ID {p2}? ;\n\n\t\t\t// should create the start state for rule 'a' (to save start state\n\t\t\t// competition), but should not create target of ID state. The\n\t\t\t// collection of ATN states the following ID references includes\n\t\t\t// states reached by traversing predicates. Since this is when we\n\t\t\t// test them, we cannot cash the DFA state target of ID.\n\n\t\t\tif (LexerATNSimulator.debug) {\n\t\t\t\tconsole.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n\t\t\t}\n\t\t\tconfigs.hasSemanticContext = true;\n\t\t\tif (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n\t\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.ACTION) {\n\t\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t\t// execute actions anywhere in the start rule for a token.\n\t\t\t\t//\n\t\t\t\t// TODO: if the entry rule is invoked recursively, some\n\t\t\t\t// actions may be executed during the recursive call. The\n\t\t\t\t// problem can appear when hasEmptyPath() is true but\n\t\t\t\t// isEmpty() is false. In this case, the config needs to be\n\t\t\t\t// split into two contexts - one with just the empty path\n\t\t\t\t// and another with everything but the empty path.\n\t\t\t\t// Unfortunately, the current algorithm does not allow\n\t\t\t\t// getEpsilonTarget to return two configurations, so\n\t\t\t\t// additional modifications are needed before we can support\n\t\t\t\t// the split operation.\n\t\t\t\tconst lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,\n\t\t\t\t\t\tthis.atn.lexerActions[trans.actionIndex]);\n\t\t\t\tcfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);\n\t\t\t} else {\n\t\t\t\t// ignore actions in referenced rules\n\t\t\t\tcfg = new LexerATNConfig( { state:trans.target}, config);\n\t\t\t}\n\t\t} else if (trans.serializationType === Transition.EPSILON) {\n\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t} else if (trans.serializationType === Transition.ATOM ||\n\t\t\t\t\ttrans.serializationType === Transition.RANGE ||\n\t\t\t\t\ttrans.serializationType === Transition.SET) {\n\t\t\tif (treatEofAsEpsilon) {\n\t\t\t\tif (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\t\t\tcfg = new LexerATNConfig( { state:trans.target }, config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn cfg;\n\t}\n\n\t/**\n\t * Evaluate a predicate specified in the lexer.\n\t *\n\t * <p>If {@code speculative} is {@code true}, this method was called before\n\t * {@link //consume} for the matched character. This method should call\n\t * {@link //consume} before evaluating the predicate to ensure position\n\t * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n\t * and {@link Lexer//getcolumn}, properly reflect the current\n\t * lexer state. This method should restore {@code input} and the simulator\n\t * to the original state before returning (i.e. undo the actions made by the\n\t * call to {@link //consume}.</p>\n\t *\n\t * @param input The input stream.\n\t * @param ruleIndex The rule containing the predicate.\n\t * @param predIndex The index of the predicate within the rule.\n\t * @param speculative {@code true} if the current index in {@code input} is\n\t * one character before the predicate's location.\n\t *\n\t * @return {@code true} if the specified predicate evaluates to\n\t * {@code true}.\n\t */\n\tevaluatePredicate(input, ruleIndex,\n\t\t\tpredIndex, speculative) {\n\t\t// assume true if no recognizer was provided\n\t\tif (this.recog === null) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!speculative) {\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t}\n\t\tconst savedcolumn = this.column;\n\t\tconst savedLine = this.line;\n\t\tconst index = input.index;\n\t\tconst marker = input.mark();\n\t\ttry {\n\t\t\tthis.consume(input);\n\t\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t\t} finally {\n\t\t\tthis.column = savedcolumn;\n\t\t\tthis.line = savedLine;\n\t\t\tinput.seek(index);\n\t\t\tinput.release(marker);\n\t\t}\n\t}\n\n\tcaptureSimState(settings, input, dfaState) {\n\t\tsettings.index = input.index;\n\t\tsettings.line = this.line;\n\t\tsettings.column = this.column;\n\t\tsettings.dfaState = dfaState;\n\t}\n\n\taddDFAEdge(from_, tk, to, cfgs) {\n\t\tif (to === undefined) {\n\t\t\tto = null;\n\t\t}\n\t\tif (cfgs === undefined) {\n\t\t\tcfgs = null;\n\t\t}\n\t\tif (to === null && cfgs !== null) {\n\t\t\t// leading to this call, ATNConfigSet.hasSemanticContext is used as a\n\t\t\t// marker indicating dynamic predicate evaluation makes this edge\n\t\t\t// dependent on the specific input sequence, so the static edge in the\n\t\t\t// DFA should be omitted. The target DFAState is still created since\n\t\t\t// execATN has the ability to resynchronize with the DFA state cache\n\t\t\t// following the predicate evaluation step.\n\t\t\t//\n\t\t\t// TJP notes: next time through the DFA, we see a pred again and eval.\n\t\t\t// If that gets us to a previously created (but dangling) DFA\n\t\t\t// state, we can continue in pure DFA mode from there.\n\t\t\t// /\n\t\t\tconst suppressEdge = cfgs.hasSemanticContext;\n\t\t\tcfgs.hasSemanticContext = false;\n\n\t\t\tto = this.addDFAState(cfgs);\n\n\t\t\tif (suppressEdge) {\n\t\t\t\treturn to;\n\t\t\t}\n\t\t}\n\t\t// add the edge\n\t\tif (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t\t// Only track edges within the DFA bounds\n\t\t\treturn to;\n\t\t}\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n\t\t}\n\t\tif (from_.edges === null) {\n\t\t\t// make room for tokens 1..n and -1 masquerading as index 0\n\t\t\tfrom_.edges = [];\n\t\t}\n\t\tfrom_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n\t\treturn to;\n\t}\n\n\t/**\n\t * Add a new DFA state if there isn't one with this set of\n\t * configurations already. This method also detects the first\n\t * configuration containing an ATN rule stop state. Later, when\n\t * traversing the DFA, we will know which rule to accept.\n\t */\n\taddDFAState(configs) {\n\t\tconst proposed = new DFAState(null, configs);\n\t\tlet firstConfigWithRuleStopState = null;\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tconst cfg = configs.items[i];\n\t\t\tif (cfg.state instanceof RuleStopState) {\n\t\t\t\tfirstConfigWithRuleStopState = cfg;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (firstConfigWithRuleStopState !== null) {\n\t\t\tproposed.isAcceptState = true;\n\t\t\tproposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n\t\t\tproposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n\t\t}\n\t\tconst dfa = this.decisionToDFA[this.mode];\n\t\tconst existing = dfa.states.get(proposed);\n\t\tif (existing!==null) {\n\t\t\treturn existing;\n\t\t}\n\t\tconst newState = proposed;\n\t\tnewState.stateNumber = dfa.states.length;\n\t\tconfigs.setReadonly(true);\n\t\tnewState.configs = configs;\n\t\tdfa.states.add(newState);\n\t\treturn newState;\n\t}\n\n\tgetDFA(mode) {\n\t\treturn this.decisionToDFA[mode];\n\t}\n\n// Get the text matched so far for the current token.\n\tgetText(input) {\n\t\t// index is first lookahead char, don't include.\n\t\treturn input.getText(this.startIndex, input.index - 1);\n\t}\n\n\tconsume(input) {\n\t\tconst curChar = input.LA(1);\n\t\tif (curChar === \"\\n\".charCodeAt(0)) {\n\t\t\tthis.line += 1;\n\t\t\tthis.column = 0;\n\t\t} else {\n\t\t\tthis.column += 1;\n\t\t}\n\t\tinput.consume();\n\t}\n\n\tgetTokenName(tt) {\n\t\tif (tt === -1) {\n\t\t\treturn \"EOF\";\n\t\t} else {\n\t\t\treturn \"'\" + String.fromCharCode(tt) + \"'\";\n\t\t}\n\t}\n}\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\nLexerATNSimulator.match_calls = 0;\n\nmodule.exports = LexerATNSimulator;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerAction.js":
/*!***********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerAction.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst LexerActionType = {\n    // The type of a {@link LexerChannelAction} action.\n    CHANNEL: 0,\n    // The type of a {@link LexerCustomAction} action\n    CUSTOM: 1,\n    // The type of a {@link LexerModeAction} action.\n    MODE: 2,\n    //The type of a {@link LexerMoreAction} action.\n    MORE: 3,\n    //The type of a {@link LexerPopModeAction} action.\n    POP_MODE: 4,\n    //The type of a {@link LexerPushModeAction} action.\n    PUSH_MODE: 5,\n    //The type of a {@link LexerSkipAction} action.\n    SKIP: 6,\n    //The type of a {@link LexerTypeAction} action.\n    TYPE: 7\n}\n\nclass LexerAction {\n    constructor(action) {\n        this.actionType = action;\n        this.isPositionDependent = false;\n    }\n\n    hashCode() {\n        const hash = new Hash();\n        this.updateHashCode(hash);\n        return hash.finish()\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType);\n    }\n\n    equals(other) {\n        return this === other;\n    }\n}\n\n\n/**\n * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n *\n * <p>The {@code skip} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerSkipAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.SKIP);\n    }\n\n    execute(lexer) {\n        lexer.skip();\n    }\n\n    toString() {\n        return \"skip\";\n    }\n}\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\n/**\n * Implements the {@code type} lexer action by calling {@link Lexer//setType}\n * with the assigned type\n */\nclass LexerTypeAction extends LexerAction {\n    constructor(type) {\n        super(LexerActionType.TYPE);\n        this.type = type;\n    }\n\n    execute(lexer) {\n        lexer.type = this.type;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.type);\n    }\n\n    equals(other) {\n        if(this === other) {\n            return true;\n        } else if (! (other instanceof LexerTypeAction)) {\n            return false;\n        } else {\n            return this.type === other.type;\n        }\n    }\n\n    toString() {\n        return \"type(\" + this.type + \")\";\n    }\n}\n\n\n/**\n * Implements the {@code pushMode} lexer action by calling\n * {@link Lexer//pushMode} with the assigned mode\n */\nclass LexerPushModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.PUSH_MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//pushMode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.pushMode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerPushModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"pushMode(\" + this.mode + \")\";\n    }\n}\n\n/**\n * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n *\n * <p>The {@code popMode} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerPopModeAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.POP_MODE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.popMode();\n    }\n\n    toString() {\n        return \"popMode\";\n    }\n}\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n/**\n * Implements the {@code more} lexer action by calling {@link Lexer//more}.\n *\n * <p>The {@code more} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerMoreAction extends LexerAction {\n    constructor() {\n        super(LexerActionType.MORE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.more();\n    }\n\n    toString() {\n        return \"more\";\n    }\n}\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n\n/**\n * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n * the assigned mode\n */\nclass LexerModeAction extends LexerAction {\n    constructor(mode) {\n        super(LexerActionType.MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//mode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.mode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"mode(\" + this.mode + \")\";\n    }\n}\n\n/**\n * Executes a custom lexer action by calling {@link Recognizer//action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer//action} when the grammar is compiled.\n *\n * <p>This class may represent embedded actions created with the <code>{...}</code>\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.</p>\n */\nclass LexerCustomAction extends LexerAction {\n    /**\n     * Constructs a custom lexer action with the specified rule and action\n     * indexes.\n     *\n     * @param ruleIndex The rule index to use for calls to\n     * {@link Recognizer//action}.\n     * @param actionIndex The action index to use for calls to\n     * {@link Recognizer//action}.\n     */\n    constructor(ruleIndex, actionIndex) {\n        super(LexerActionType.CUSTOM);\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>Custom actions are implemented by calling {@link Lexer//action} with the\n     * appropriate rule and action indexes.</p>\n     */\n    execute(lexer) {\n        lexer.action(null, this.ruleIndex, this.actionIndex);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerCustomAction)) {\n            return false;\n        } else {\n            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n        }\n    }\n}\n\n/**\n * Implements the {@code channel} lexer action by calling\n * {@link Lexer//setChannel} with the assigned channel.\n * Constructs a new {@code channel} action with the specified channel value.\n * @param channel The channel value to pass to {@link Lexer//setChannel}\n */\nclass LexerChannelAction extends LexerAction {\n    constructor(channel) {\n        super(LexerActionType.CHANNEL);\n        this.channel = channel;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//setChannel} with the\n     * value provided by {@link //getChannel}.</p>\n     */\n    execute(lexer) {\n        lexer._channel = this.channel;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.channel);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerChannelAction)) {\n            return false;\n        } else {\n            return this.channel === other.channel;\n        }\n    }\n\n    toString() {\n        return \"channel(\" + this.channel + \")\";\n    }\n}\n\n\n/**\n * This implementation of {@link LexerAction} is used for tracking input offsets\n * for position-dependent actions within a {@link LexerActionExecutor}.\n *\n * <p>This action is not serialized as part of the ATN, and is only required for\n * position-dependent lexer actions which appear at a location other than the\n * end of a rule. For more information about DFA optimizations employed for\n * lexer actions, see {@link LexerActionExecutor//append} and\n * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n *\n * Constructs a new indexed custom action by associating a character offset\n * with a {@link LexerAction}.\n *\n * <p>Note: This class is only required for lexer actions for which\n * {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n *\n * @param offset The offset into the input {@link CharStream}, relative to\n * the token start index, at which the specified lexer action should be\n * executed.\n * @param action The lexer action to execute at a particular offset in the\n * input {@link CharStream}.\n */\nclass LexerIndexedCustomAction extends LexerAction {\n    constructor(offset, action) {\n        super(action.actionType);\n        this.offset = offset;\n        this.action = action;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>This method calls {@link //execute} on the result of {@link //getAction}\n     * using the provided {@code lexer}.</p>\n     */\n    execute(lexer) {\n        // assume the input stream position was properly set by the calling code\n        this.action.execute(lexer);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.offset, this.action);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerIndexedCustomAction)) {\n            return false;\n        } else {\n            return this.offset === other.offset && this.action === other.action;\n        }\n    }\n}\n\nmodule.exports = {\n    LexerActionType,\n    LexerSkipAction,\n    LexerChannelAction,\n    LexerCustomAction,\n    LexerIndexedCustomAction,\n    LexerMoreAction,\n    LexerTypeAction,\n    LexerPushModeAction,\n    LexerPopModeAction,\n    LexerModeAction\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/LexerAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {hashStuff} = __webpack_require__(/*! ../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst {LexerIndexedCustomAction} = __webpack_require__(/*! ./LexerAction */ \"./node_modules/antlr4/src/antlr4/atn/LexerAction.js\");\n\nclass LexerActionExecutor {\n\t/**\n\t * Represents an executor for a sequence of lexer actions which traversed during\n\t * the matching operation of a lexer rule (token).\n\t *\n\t * <p>The executor tracks position information for position-dependent lexer actions\n\t * efficiently, ensuring that actions appearing only at the end of the rule do\n\t * not cause bloating of the {@link DFA} created for the lexer.</p>\n\t */\n\tconstructor(lexerActions) {\n\t\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t\t/**\n\t\t * Caches the result of {@link //hashCode} since the hash code is an element\n\t\t * of the performance-critical {@link LexerATNConfig//hashCode} operation\n\t\t */\n\t\tthis.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t\t// lexerActions]))\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which encodes the current offset\n\t * for position-dependent lexer actions.\n\t *\n\t * <p>Normally, when the executor encounters lexer actions where\n\t * {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n\t * {@link IntStream//seek} on the input {@link CharStream} to set the input\n\t * position to the <em>end</em> of the current token. This behavior provides\n\t * for efficient DFA representation of lexer actions which appear at the end\n\t * of a lexer rule, even when the lexer rule matches a variable number of\n\t * characters.</p>\n\t *\n\t * <p>Prior to traversing a match transition in the ATN, the current offset\n\t * from the token start index is assigned to all position-dependent lexer\n\t * actions which have not already been assigned a fixed offset. By storing\n\t * the offsets relative to the token start index, the DFA representation of\n\t * lexer actions which appear in the middle of tokens remains efficient due\n\t * to sharing among tokens of the same length, regardless of their absolute\n\t * position in the input stream.</p>\n\t *\n\t * <p>If the current executor already has offsets assigned to all\n\t * position-dependent lexer actions, the method returns {@code this}.</p>\n\t *\n\t * @param offset The current offset to assign to all position-dependent\n\t * lexer actions which do not already have offsets assigned.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets\n\t * for all position-dependent lexer actions.\n\t */\n\tfixOffsetBeforeMatch(offset) {\n\t\tlet updatedLexerActions = null;\n\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\tif (this.lexerActions[i].isPositionDependent &&\n\t\t\t\t\t!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\t\tif (updatedLexerActions === null) {\n\t\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t\t}\n\t\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset,\n\t\t\t\t\t\tthis.lexerActions[i]);\n\t\t\t}\n\t\t}\n\t\tif (updatedLexerActions === null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t\t}\n\t}\n\n\t/**\n\t * Execute the actions encapsulated by this executor within the context of a\n\t * particular {@link Lexer}.\n\t *\n\t * <p>This method calls {@link IntStream//seek} to set the position of the\n\t * {@code input} {@link CharStream} prior to calling\n\t * {@link LexerAction//execute} on a position-dependent action. Before the\n\t * method returns, the input position will be restored to the same position\n\t * it was in when the method was invoked.</p>\n\t *\n\t * @param lexer The lexer instance.\n\t * @param input The input stream which is the source for the current token.\n\t * When this method is called, the current {@link IntStream//index} for\n\t * {@code input} should be the start of the following token, i.e. 1\n\t * character past the end of the current token.\n\t * @param startIndex The token start index. This value may be passed to\n\t * {@link IntStream//seek} to set the {@code input} position to the beginning\n\t * of the token.\n\t */\n\texecute(lexer, input, startIndex) {\n\t\tlet requiresSeek = false;\n\t\tconst stopIndex = input.index;\n\t\ttry {\n\t\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\t\tlet lexerAction = this.lexerActions[i];\n\t\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\t\tconst offset = lexerAction.offset;\n\t\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\t\trequiresSeek = (startIndex + offset) !== stopIndex;\n\t\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\t\tinput.seek(stopIndex);\n\t\t\t\t\trequiresSeek = false;\n\t\t\t\t}\n\t\t\t\tlexerAction.execute(lexer);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (requiresSeek) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\t\treturn false;\n\t\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\t\treturn false;\n\t\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tconst numActions = this.lexerActions.length\n\t\t\tfor (let idx = 0; idx < numActions; ++idx) {\n\t\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which executes the actions for\n\t * the input {@code lexerActionExecutor} followed by a specified\n\t * {@code lexerAction}.\n\t *\n\t * @param lexerActionExecutor The executor for actions already traversed by\n\t * the lexer while matching a token within a particular\n\t * {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n\t * though it were an empty executor.\n\t * @param lexerAction The lexer action to execute after the actions\n\t * specified in {@code lexerActionExecutor}.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions\n\t * of {@code lexerActionExecutor} and {@code lexerAction}.\n\t */\n\tstatic append(lexerActionExecutor, lexerAction) {\n\t\tif (lexerActionExecutor === null) {\n\t\t\treturn new LexerActionExecutor([ lexerAction ]);\n\t\t}\n\t\tconst lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);\n\t\treturn new LexerActionExecutor(lexerActions);\n\t}\n}\n\n\nmodule.exports = LexerActionExecutor;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Utils = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst {Set, BitSet, DoubleDict} = Utils;\n\nconst ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst {ATNState, RuleStopState} = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\");\n\nconst {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst {DFAState, PredPrediction} = __webpack_require__(/*! ./../dfa/DFAState */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ \"./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\");\nconst PredictionMode = __webpack_require__(/*! ./PredictionMode */ \"./node_modules/antlr4/src/antlr4/atn/PredictionMode.js\");\nconst RuleContext = __webpack_require__(/*! ./../RuleContext */ \"./node_modules/antlr4/src/antlr4/RuleContext.js\");\nconst ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ \"./node_modules/antlr4/src/antlr4/ParserRuleContext.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\nconst {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\nconst {Interval} = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = __webpack_require__(/*! ./Transition */ \"./node_modules/antlr4/src/antlr4/atn/Transition.js\");\nconst {NoViableAltException} = __webpack_require__(/*! ./../error/Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\");\nconst {SingletonPredictionContext, predictionContextFromRuleContext} = __webpack_require__(/*! ./../PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\n\n\n/**\n * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n *\n * <p>\n * The basic complexity of the adaptive strategy makes it harder to understand.\n * We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n * requests go through the DFA first. If they reach a state without an edge for\n * the current symbol, the algorithm fails over to the ATN simulation to\n * complete the DFA path for the current input (until it finds a conflict state\n * or uniquely predicting state).</p>\n *\n * <p>\n * All of that is done without using the outer context because we want to create\n * a DFA that is not dependent upon the rule invocation stack when we do a\n * prediction. One DFA works in all contexts. We avoid using context not\n * necessarily because it's slower, although it can be, but because of the DFA\n * caching problem. The closure routine only considers the rule invocation stack\n * created during prediction beginning in the decision rule. For example, if\n * prediction occurs without invoking another rule's ATN, there are no context\n * stacks in the configurations. When lack of context leads to a conflict, we\n * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n * strategy (versus full LL(*)).</p>\n *\n * <p>\n * When SLL yields a configuration set with conflict, we rewind the input and\n * retry the ATN simulation, this time using full outer context without adding\n * to the DFA. Configuration context stacks will be the full invocation stacks\n * from the start rule. If we get a conflict using full context, then we can\n * definitively say we have a true ambiguity for that input sequence. If we\n * don't get a conflict, it implies that the decision is sensitive to the outer\n * context. (It is not context-sensitive in the sense of context-sensitive\n * grammars.)</p>\n *\n * <p>\n * The next time we reach this DFA state with an SLL conflict, through DFA\n * simulation, we will again retry the ATN simulation using full context mode.\n * This is slow because we can't save the results and have to \"interpret\" the\n * ATN each time we get that input.</p>\n *\n * <p>\n * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n *\n * <p>\n * We could cache results from full context to predicted alternative easily and\n * that saves a lot of time but doesn't work in presence of predicates. The set\n * of visible predicates from the ATN start state changes depending on the\n * context, because closure can fall off the end of a rule. I tried to cache\n * tuples (stack context, semantic context, predicted alt) but it was slower\n * than interpreting and much more complicated. Also required a huge amount of\n * memory. The goal is not to create the world's fastest parser anyway. I'd like\n * to keep this algorithm simple. By launching multiple threads, we can improve\n * the speed of parsing across a large number of files.</p>\n *\n * <p>\n * There is no strict ordering between the amount of input used by SLL vs LL,\n * which makes it really hard to build a cache for full context. Let's say that\n * we have input A B C that leads to an SLL conflict with full context X. That\n * implies that using X we might only use A B but we could also use A B C D to\n * resolve conflict. Input A B C D could predict alternative 1 in one position\n * in the input and A B C E could predict alternative 2 in another position in\n * input. The conflicting SLL configurations could still be non-unique in the\n * full context prediction, which would lead us to requiring more input than the\n * original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n * input\tused during the previous prediction. That amounts to a cache that maps\n * X to a specific DFA for that context.</p>\n *\n * <p>\n * Something should be done for left-recursive expression predictions. They are\n * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n * with full LL thing Sam does.</p>\n *\n * <p>\n * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n *\n * <p>\n * We avoid doing full context retry when the outer context is empty, we did not\n * dip into the outer context by falling off the end of the decision state rule,\n * or when we force SLL mode.</p>\n *\n * <p>\n * As an example of the not dip into outer context case, consider as super\n * constructor calls versus function calls. One grammar might look like\n * this:</p>\n *\n * <pre>\n * ctorBody\n *   : '{' superCall? stat* '}'\n *   ;\n * </pre>\n *\n * <p>\n * Or, you might see something like</p>\n *\n * <pre>\n * stat\n *   : superCall ';'\n *   | expression ';'\n *   | ...\n *   ;\n * </pre>\n *\n * <p>\n * In both cases I believe that no closure operations will dip into the outer\n * context. In the first case ctorBody in the worst case will stop at the '}'.\n * In the 2nd case it should stop at the ';'. Both cases should stay within the\n * entry rule and not dip into the outer context.</p>\n *\n * <p>\n * <strong>PREDICATES</strong></p>\n *\n * <p>\n * Predicates are always evaluated if present in either SLL or LL both. SLL and\n * LL simulation deals with predicates differently. SLL collects predicates as\n * it performs closure operations like ANTLR v3 did. It delays predicate\n * evaluation until it reaches and accept state. This allows us to cache the SLL\n * ATN simulation whereas, if we had evaluated predicates on-the-fly during\n * closure, the DFA state configuration sets would be different and we couldn't\n * build up a suitable DFA.</p>\n *\n * <p>\n * When building a DFA accept state during ATN simulation, we evaluate any\n * predicates and return the sole semantically valid alternative. If there is\n * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n * we throw an exception. Alternatives without predicates act like they have\n * true predicates. The simple way to think about it is to strip away all\n * alternatives with false predicates and choose the minimum alternative that\n * remains.</p>\n *\n * <p>\n * When we start in the DFA and reach an accept state that's predicated, we test\n * those and return the minimum semantically viable alternative. If no\n * alternatives are viable, we throw an exception.</p>\n *\n * <p>\n * During full LL ATN simulation, closure always evaluates predicates and\n * on-the-fly. This is crucial to reducing the configuration set size during\n * closure. It hits a landmine when parsing with the Java grammar, for example,\n * without this on-the-fly evaluation.</p>\n *\n * <p>\n * <strong>SHARING DFA</strong></p>\n *\n * <p>\n * All instances of the same parser share the same decision DFAs through a\n * static field. Each instance gets its own ATN simulator but they share the\n * same {@link //decisionToDFA} field. They also share a\n * {@link PredictionContextCache} object that makes sure that all\n * {@link PredictionContext} objects are shared among the DFA states. This makes\n * a big size difference.</p>\n *\n * <p>\n * <strong>THREAD SAFETY</strong></p>\n *\n * <p>\n * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n * it adds a new DFA object to that array. {@link //addDFAEdge}\n * locks on the DFA for the current decision when setting the\n * {@link DFAState//edges} field. {@link //addDFAState} locks on\n * the DFA for the current decision when looking up a DFA state to see if it\n * already exists. We must make sure that all requests to add DFA states that\n * are equivalent result in the same shared DFA object. This is because lots of\n * threads will be trying to update the DFA at once. The\n * {@link //addDFAState} method also locks inside the DFA lock\n * but this time on the shared context cache when it rebuilds the\n * configurations' {@link PredictionContext} objects using cached\n * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n * safe as long as we can guarantee that all threads referencing\n * {@code s.edge[t]} get the same physical target {@link DFAState}, or\n * {@code null}. Once into the DFA, the DFA simulation does not reference the\n * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n * targets. The DFA simulator will either find {@link DFAState//edges} to be\n * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n * {@code dfa.edges[t]} to be non-null. The\n * {@link //addDFAEdge} method could be racing to set the field\n * but in either case the DFA simulator works; if {@code null}, and requests ATN\n * simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n * way it will work because it's not doing a test and set operation.</p>\n *\n * <p>\n * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n * Parsing)</strong></p>\n *\n * <p>\n * Sam pointed out that if SLL does not give a syntax error, then there is no\n * point in doing full LL, which is slower. We only have to try LL if we get a\n * syntax error. For maximum speed, Sam starts the parser set to pure SLL\n * mode with the {@link BailErrorStrategy}:</p>\n *\n * <pre>\n * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n * </pre>\n *\n * <p>\n * If it does not get a syntax error, then we're done. If it does get a syntax\n * error, we need to retry with the combined SLL/LL strategy.</p>\n *\n * <p>\n * The reason this works is as follows. If there are no SLL conflicts, then the\n * grammar is SLL (at least for that input set). If there is an SLL conflict,\n * the full LL analysis must yield a set of viable alternatives which is a\n * subset of the alternatives reported by SLL. If the LL set is a singleton,\n * then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n * set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n * is truly ambiguous on the current input. If the LL set is smaller, then the\n * SLL conflict resolution might choose an alternative that the full LL would\n * rule out as a possibility based upon better context information. If that's\n * the case, then the SLL parse will definitely get an error because the full LL\n * analysis says it's not viable. If SLL conflict resolution chooses an\n * alternative within the LL set, them both SLL and LL would choose the same\n * alternative because they both choose the minimum of multiple conflicting\n * alternatives.</p>\n *\n * <p>\n * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n * parsing will get an error because SLL will pursue alternative 1. If\n * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n * choose the same alternative because alternative one is the minimum of either\n * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n *\n * <p>\n * Of course, if the input is invalid, then we will get an error for sure in\n * both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n * the input.</p>\n */\nclass ParserATNSimulator extends ATNSimulator {\n    constructor(parser, atn, decisionToDFA, sharedContextCache) {\n        super(atn, sharedContextCache);\n        this.parser = parser;\n        this.decisionToDFA = decisionToDFA;\n        // SLL, LL, or LL + exact ambig detection?//\n        this.predictionMode = PredictionMode.LL;\n        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n        this._input = null;\n        this._startIndex = 0;\n        this._outerContext = null;\n        this._dfa = null;\n        /**\n         * Each prediction operation uses a cache for merge of prediction contexts.\n         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n         *  isn't synchronized but we're ok since two threads shouldn't reuse same\n         *  parser/atnsim object because it can only handle one input at a time.\n         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n         *  also be examined during cache lookup.\n         */\n        this.mergeCache = null;\n        this.debug = false;\n        this.debug_closure = false;\n        this.debug_add = false;\n        this.debug_list_atn_decisions = false;\n        this.dfa_debug = false;\n        this.retry_debug = false;\n    }\n\n    reset() {}\n\n    adaptivePredict(input, decision, outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"adaptivePredict decision \" + decision +\n                                   \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                   \" line \" + input.LT(1).line + \":\" +\n                                   input.LT(1).column);\n        }\n        this._input = input;\n        this._startIndex = input.index;\n        this._outerContext = outerContext;\n\n        const dfa = this.decisionToDFA[decision];\n        this._dfa = dfa;\n        const m = input.mark();\n        const index = input.index;\n\n        // Now we are certain to have a specific decision's DFA\n        // But, do we still need an initial state?\n        try {\n            let s0;\n            if (dfa.precedenceDfa) {\n                // the start state for a precedence DFA depends on the current\n                // parser precedence, and is provided by a DFA method.\n                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n            } else {\n                // the start state for a \"regular\" DFA is just s0\n                s0 = dfa.s0;\n            }\n            if (s0===null) {\n                if (outerContext===null) {\n                    outerContext = RuleContext.EMPTY;\n                }\n                if (this.debug || this.debug_list_atn_decisions) {\n                    console.log(\"predictATN decision \" + dfa.decision +\n                                       \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                       \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n                }\n\n                const fullCtx = false;\n                let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n                if( dfa.precedenceDfa) {\n                    // If this is a precedence DFA, we use applyPrecedenceFilter\n                    // to convert the computed start state to a precedence start\n                    // state. We then use DFA.setPrecedenceStartState to set the\n                    // appropriate start state for the precedence level rather\n                    // than simply setting DFA.s0.\n                    //\n                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                    s0_closure = this.applyPrecedenceFilter(s0_closure);\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n                } else {\n                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                    dfa.s0 = s0;\n                }\n            }\n            const alt = this.execATN(dfa, s0, input, index, outerContext);\n            if (this.debug) {\n                console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n            }\n            return alt;\n        } finally {\n            this._dfa = null;\n            this.mergeCache = null; // wack cache after each prediction\n            input.seek(index);\n            input.release(m);\n        }\n    }\n\n    /**\n     * Performs ATN simulation to compute a predicted alternative based\n     *  upon the remaining input, but also updates the DFA cache to avoid\n     *  having to traverse the ATN again for the same input sequence.\n     *\n     * There are some key conditions we're looking for after computing a new\n     * set of ATN configs (proposed DFA state):\n     *       if the set is empty, there is no viable alternative for current symbol\n     *       does the state uniquely predict an alternative?\n     *       does the state have a conflict that would prevent us from\n     *         putting it on the work list?\n     *\n     * We also have some key operations to do:\n     *       add an edge from previous DFA state to potentially new DFA state, D,\n     *         upon current symbol but only if adding to work list, which means in all\n     *         cases except no viable alternative (and possibly non-greedy decisions?)\n     *       collecting predicates and adding semantic context to DFA accept states\n     *       adding rule context to context-sensitive DFA accept states\n     *       consuming an input symbol\n     *       reporting a conflict\n     *       reporting an ambiguity\n     *       reporting a context sensitivity\n     *       reporting insufficient predicates\n     *\n     * cover these cases:\n     *    dead end\n     *    single alt\n     *    single alt + preds\n     *    conflict\n     *    conflict + preds\n     *\n     */\n    execATN(dfa, s0, input, startIndex, outerContext ) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATN decision \" + dfa.decision +\n                    \" exec LA(1)==\" + this.getLookaheadName(input) +\n                    \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n        }\n        let alt;\n        let previousD = s0;\n\n        if (this.debug) {\n            console.log(\"s0 = \" + s0);\n        }\n        let t = input.LA(1);\n        while(true) { // while more work\n            let D = this.getExistingTargetState(previousD, t);\n            if(D===null) {\n                D = this.computeTargetState(dfa, previousD, t);\n            }\n            if(D===ATNSimulator.ERROR) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for SLL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n                input.seek(startIndex);\n                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n                let conflictingAlts = null;\n                if (D.predicates!==null) {\n                    if (this.debug) {\n                        console.log(\"DFA state has preds in DFA sim LL failover\");\n                    }\n                    const conflictIndex = input.index;\n                    if(conflictIndex !== startIndex) {\n                        input.seek(startIndex);\n                    }\n                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                    if (conflictingAlts.length===1) {\n                        if(this.debug) {\n                            console.log(\"Full LL avoided\");\n                        }\n                        return conflictingAlts.minValue();\n                    }\n                    if (conflictIndex !== startIndex) {\n                        // restore the index so reporting the fallback to full\n                        // context occurs with the index at the correct spot\n                        input.seek(conflictIndex);\n                    }\n                }\n                if (this.dfa_debug) {\n                    console.log(\"ctx sensitive state \" + outerContext +\" in \" + D);\n                }\n                const fullCtx = true;\n                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n                return alt;\n            }\n            if (D.isAcceptState) {\n                if (D.predicates===null) {\n                    return D.prediction;\n                }\n                const stopIndex = input.index;\n                input.seek(startIndex);\n                const alts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (alts.length===0) {\n                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n                } else if (alts.length===1) {\n                    return alts.minValue();\n                } else {\n                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                    return alts.minValue();\n                }\n            }\n            previousD = D;\n\n            if (t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n    }\n\n    /**\n     * Get an existing target state for an edge in the DFA. If the target state\n     * for the edge has not yet been computed or is otherwise not available,\n     * this method returns {@code null}.\n     *\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     * @return The existing target DFA state for the given input symbol\n     * {@code t}, or {@code null} if the target state for this edge is not\n     * already cached\n     */\n    getExistingTargetState(previousD, t) {\n        const edges = previousD.edges;\n        if (edges===null) {\n            return null;\n        } else {\n            return edges[t + 1] || null;\n        }\n    }\n\n    /**\n     * Compute a target state for an edge in the DFA, and attempt to add the\n     * computed state and corresponding edge to the DFA.\n     *\n     * @param dfa The DFA\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     *\n     * @return The computed target DFA state for the given input symbol\n     * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n     * returns {@link //ERROR\n     */\n    computeTargetState(dfa, previousD, t) {\n       const reach = this.computeReachSet(previousD.configs, t, false);\n        if(reach===null) {\n            this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n            return ATNSimulator.ERROR;\n        }\n        // create new target state; we'll add to DFA after it's complete\n        let D = new DFAState(null, reach);\n\n        const predictedAlt = this.getUniqueAlt(reach);\n\n        if (this.debug) {\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) +\n                        \", previous=\" + previousD.configs +\n                        \", configs=\" + reach +\n                        \", predict=\" + predictedAlt +\n                        \", allSubsetsConflict=\" +\n                        PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" +\n                        this.getConflictingAlts(reach));\n        }\n        if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {\n            // NO CONFLICT, UNIQUELY PREDICTED ALT\n            D.isAcceptState = true;\n            D.configs.uniqueAlt = predictedAlt;\n            D.prediction = predictedAlt;\n        } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n            // MORE THAN ONE VIABLE ALTERNATIVE\n            D.configs.conflictingAlts = this.getConflictingAlts(reach);\n            D.requiresFullContext = true;\n            // in SLL-only mode, we will stop at this state and return the minimum alt\n            D.isAcceptState = true;\n            D.prediction = D.configs.conflictingAlts.minValue();\n        }\n        if (D.isAcceptState && D.configs.hasSemanticContext) {\n            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n            if( D.predicates!==null) {\n                D.prediction = ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        // all adds to dfa are done after we've created full D state\n        D = this.addDFAEdge(dfa, previousD, t, D);\n        return D;\n    }\n\n    predicateDFAState(dfaState, decisionState) {\n        // We need to test all predicates, even in DFA states that\n        // uniquely predict alternative.\n        const nalts = decisionState.transitions.length;\n        // Update DFA so reach becomes accept state with (predicate,alt)\n        // pairs if preds found for conflicting alts\n        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n        if (altToPred!==null) {\n            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n            dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n        } else {\n            // There are preds in configs but they might go away\n            // when OR'd together like {p}? || NONE == NONE. If neither\n            // alt has preds, resolve to min alt\n            dfaState.prediction = altsToCollectPredsFrom.minValue();\n        }\n    }\n\n// comes back with reach.uniqueAlt set to a valid alt\n    execATNWithFullContext(dfa, D, // how far we got before failing over\n                                         s0,\n                                         input,\n                                         startIndex,\n                                         outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATNWithFullContext \"+s0);\n        }\n        const fullCtx = true;\n        let foundExactAmbig = false;\n        let reach = null;\n        let previous = s0;\n        input.seek(startIndex);\n        let t = input.LA(1);\n        let predictedAlt = -1;\n        while (true) { // while more work\n            reach = this.computeReachSet(previous, t, fullCtx);\n            if (reach===null) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for LL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previous, startIndex);\n                input.seek(startIndex);\n                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n                if(alt!==ATN.INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n            if(this.debug) {\n                console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" +\n                      PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" +\n                      PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n            }\n            reach.uniqueAlt = this.getUniqueAlt(reach);\n            // unique prediction?\n            if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {\n                predictedAlt = reach.uniqueAlt;\n                break;\n            } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n                if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n                    break;\n                }\n            } else {\n                // In exact ambiguity mode, we never try to terminate early.\n                // Just keeps scarfing until we know what the conflict is\n                if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n                    foundExactAmbig = true;\n                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n                    break;\n                }\n                // else there are multiple non-conflicting subsets or\n                // we're not sure what the ambiguity is yet.\n                // So, keep going.\n            }\n            previous = reach;\n            if( t !== Token.EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n        // If the configuration set uniquely predicts an alternative,\n        // without conflict, then we know that it's a full LL decision\n        // not SLL.\n        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {\n            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n            return predictedAlt;\n        }\n        // We do not check predicates here because we have checked them\n        // on-the-fly when doing full context prediction.\n\n        //\n        // In non-exact ambiguity detection mode, we might\tactually be able to\n        // detect an exact ambiguity, but I'm not going to spend the cycles\n        // needed to check. We only emit ambiguity warnings in exact ambiguity\n        // mode.\n        //\n        // For example, we might know that we have conflicting configurations.\n        // But, that does not mean that there is no way forward without a\n        // conflict. It's possible to have nonconflicting alt subsets as in:\n\n        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n        // from\n        //\n        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n        //\n        // In this case, (17,1,[5 $]) indicates there is some next sequence that\n        // would resolve this without conflict to alternative 1. Any other viable\n        // next sequence, however, is associated with a conflict.  We stop\n        // looking for input because no amount of further lookahead will alter\n        // the fact that we should predict alternative 1.  We just can't say for\n        // sure that there is an ambiguity without looking further.\n\n        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n        return predictedAlt;\n    }\n\n    computeReachSet(closure, t, fullCtx) {\n        if (this.debug) {\n            console.log(\"in computeReachSet, starting closure: \" + closure);\n        }\n        if( this.mergeCache===null) {\n            this.mergeCache = new DoubleDict();\n        }\n        const intermediate = new ATNConfigSet(fullCtx);\n\n        // Configurations already in a rule stop state indicate reaching the end\n        // of the decision rule (local context) or end of the start rule (full\n        // context). Once reached, these configurations are never updated by a\n        // closure operation, so they are handled separately for the performance\n        // advantage of having a smaller intermediate set when calling closure.\n        //\n        // For full-context reach operations, separate handling is required to\n        // ensure that the alternative matching the longest overall sequence is\n        // chosen when multiple such configurations can match the input.\n\n        let skippedStopStates = null;\n\n        // First figure out where we can reach on input t\n        for (let i=0; i<closure.items.length;i++) {\n            const c = closure.items[i];\n            if(this.debug_add) {\n                console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n            }\n            if (c.state instanceof RuleStopState) {\n                if (fullCtx || t === Token.EOF) {\n                    if (skippedStopStates===null) {\n                        skippedStopStates = [];\n                    }\n                    skippedStopStates.push(c);\n                    if(this.debug_add) {\n                        console.log(\"added \" + c + \" to skippedStopStates\");\n                    }\n                }\n                continue;\n            }\n            for(let j=0;j<c.state.transitions.length;j++) {\n                const trans = c.state.transitions[j];\n                const target = this.getReachableTarget(trans, t);\n                if (target!==null) {\n                    const cfg = new ATNConfig({state:target}, c);\n                    intermediate.add(cfg, this.mergeCache);\n                    if(this.debug_add) {\n                        console.log(\"added \" + cfg + \" to intermediate\");\n                    }\n                }\n            }\n        }\n        // Now figure out where the reach operation can take us...\n        let reach = null;\n\n        // This block optimizes the reach operation for intermediate sets which\n        // trivially indicate a termination state for the overall\n        // adaptivePredict operation.\n        //\n        // The conditions assume that intermediate\n        // contains all configurations relevant to the reach set, but this\n        // condition is not true when one or more configurations have been\n        // withheld in skippedStopStates, or when the current symbol is EOF.\n        //\n        if (skippedStopStates===null && t!==Token.EOF) {\n            if (intermediate.items.length===1) {\n                // Don't pursue the closure if there is just one state.\n                // It can only have one alternative; just add to result\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            }\n        }\n        // If the reach set could not be trivially determined, perform a closure\n        // operation on the intermediate set to compute its initial value.\n        //\n        if (reach===null) {\n            reach = new ATNConfigSet(fullCtx);\n            const closureBusy = new Set();\n            const treatEofAsEpsilon = t === Token.EOF;\n            for (let k=0; k<intermediate.items.length;k++) {\n                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n            }\n        }\n        if (t === Token.EOF) {\n            // After consuming EOF no additional input is possible, so we are\n            // only interested in configurations which reached the end of the\n            // decision rule (local context) or end of the start rule (full\n            // context). Update reach to contain only these configurations. This\n            // handles both explicit EOF transitions in the grammar and implicit\n            // EOF transitions following the end of the decision or start rule.\n            //\n            // When reach==intermediate, no closure operation was performed. In\n            // this case, removeAllConfigsNotInRuleStopState needs to check for\n            // reachable rule stop states as well as configurations already in\n            // a rule stop state.\n            //\n            // This is handled before the configurations in skippedStopStates,\n            // because any configurations potentially added from that list are\n            // already guaranteed to meet this condition whether or not it's\n            // required.\n            //\n            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n        }\n        // If skippedStopStates!==null, then it contains at least one\n        // configuration. For full-context reach operations, these\n        // configurations reached the end of the start rule, in which case we\n        // only add them back to reach if no configuration during the current\n        // closure operation reached such a state. This ensures adaptivePredict\n        // chooses an alternative matching the longest overall sequence when\n        // multiple alternatives are viable.\n        //\n        if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {\n            for (let l=0; l<skippedStopStates.length;l++) {\n                reach.add(skippedStopStates[l], this.mergeCache);\n            }\n        }\n        if (reach.items.length===0) {\n            return null;\n        } else {\n            return reach;\n        }\n    }\n\n    /**\n     * Return a configuration set containing only the configurations from\n     * {@code configs} which are in a {@link RuleStopState}. If all\n     * configurations in {@code configs} are already in a rule stop state, this\n     * method simply returns {@code configs}.\n     *\n     * <p>When {@code lookToEndOfRule} is true, this method uses\n     * {@link ATN//nextTokens} for each configuration in {@code configs} which is\n     * not already in a rule stop state to see if a rule stop state is reachable\n     * from the configuration via epsilon-only transitions.</p>\n     *\n     * @param configs the configuration set to update\n     * @param lookToEndOfRule when true, this method checks for rule stop states\n     * reachable by epsilon-only transitions from each configuration in\n     * {@code configs}.\n     *\n     * @return {@code configs} if all configurations in {@code configs} are in a\n     * rule stop state, otherwise return a new configuration set containing only\n     * the configurations from {@code configs} which are in a rule stop state\n     */\n    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return configs;\n        }\n        const result = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length;i++) {\n            const config = configs.items[i];\n            if (config.state instanceof RuleStopState) {\n                result.add(config, this.mergeCache);\n                continue;\n            }\n            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n                const nextTokens = this.atn.nextTokens(config.state);\n                if (nextTokens.contains(Token.EPSILON)) {\n                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                    result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);\n                }\n            }\n        }\n        return result;\n    }\n\n    computeStartState(p, ctx, fullCtx) {\n        // always at least the implicit call to start rule\n        const initialContext = predictionContextFromRuleContext(this.atn, ctx);\n        const configs = new ATNConfigSet(fullCtx);\n        for(let i=0;i<p.transitions.length;i++) {\n            const target = p.transitions[i].target;\n            const c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);\n            const closureBusy = new Set();\n            this.closure(c, configs, closureBusy, true, fullCtx, false);\n        }\n        return configs;\n    }\n\n    /**\n     * This method transforms the start state computed by\n     * {@link //computeStartState} to the special start state used by a\n     * precedence DFA for a particular precedence value. The transformation\n     * process applies the following changes to the start state's configuration\n     * set.\n     *\n     * <ol>\n     * <li>Evaluate the precedence predicates for each configuration using\n     * {@link SemanticContext//evalPrecedence}.</li>\n     * <li>Remove all configurations which predict an alternative greater than\n     * 1, for which another configuration that predicts alternative 1 is in the\n     * same ATN state with the same prediction context. This transformation is\n     * valid for the following reasons:\n     * <ul>\n     * <li>The closure block cannot contain any epsilon transitions which bypass\n     * the body of the closure, so all states reachable via alternative 1 are\n     * part of the precedence alternatives of the transformed left-recursive\n     * rule.</li>\n     * <li>The \"primary\" portion of a left recursive rule cannot contain an\n     * epsilon transition, so the only way an alternative other than 1 can exist\n     * in a state that is also reachable via alternative 1 is by nesting calls\n     * to the left-recursive rule, with the outer calls not being at the\n     * preferred precedence level.</li>\n     * </ul>\n     * </li>\n     * </ol>\n     *\n     * <p>\n     * The prediction context must be considered by this filter to address\n     * situations like the following.\n     * </p>\n     * <code>\n     * <pre>\n     * grammar TA;\n     * prog: statement* EOF;\n     * statement: letterA | statement letterA 'b' ;\n     * letterA: 'a';\n     * </pre>\n     * </code>\n     * <p>\n     * If the above grammar, the ATN state immediately before the token\n     * reference {@code 'a'} in {@code letterA} is reachable from the left edge\n     * of both the primary and closure blocks of the left-recursive rule\n     * {@code statement}. The prediction context associated with each of these\n     * configurations distinguishes between them, and prevents the alternative\n     * which stepped out to {@code prog} (and then back in to {@code statement}\n     * from being eliminated by the filter.\n     * </p>\n     *\n     * @param configs The configuration set computed by\n     * {@link //computeStartState} as the start state for the DFA.\n     * @return The transformed configuration set representing the start state\n     * for a precedence DFA at a particular precedence level (determined by\n     * calling {@link Parser//getPrecedence})\n     */\n    applyPrecedenceFilter(configs) {\n        let config;\n        const statesFromAlt1 = [];\n        const configSet = new ATNConfigSet(configs.fullCtx);\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            // handle alt 1 first\n            if (config.alt !== 1) {\n                continue;\n            }\n            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n            if (updatedContext===null) {\n                // the configuration was eliminated\n                continue;\n            }\n            statesFromAlt1[config.state.stateNumber] = config.context;\n            if (updatedContext !== config.semanticContext) {\n                configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);\n            } else {\n                configSet.add(config, this.mergeCache);\n            }\n        }\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            if (config.alt === 1) {\n                // already handled\n                continue;\n            }\n            // In the future, this elimination step could be updated to also\n            // filter the prediction context for alternatives predicting alt>1\n            // (basically a graph subtraction algorithm).\n            if (!config.precedenceFilterSuppressed) {\n                const context = statesFromAlt1[config.state.stateNumber] || null;\n                if (context!==null && context.equals(config.context)) {\n                    // eliminated\n                    continue;\n                }\n            }\n            configSet.add(config, this.mergeCache);\n        }\n        return configSet;\n    }\n\n    getReachableTarget(trans, ttype) {\n        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n            return trans.target;\n        } else {\n            return null;\n        }\n    }\n\n    getPredsForAmbigAlts(ambigAlts, configs, nalts) {\n        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n        // altToPred starts as an array of all null contexts. The entry at index i\n        // corresponds to alternative i. altToPred[i] may have one of three values:\n        //   1. null: no ATNConfig c is found such that c.alt==i\n        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n        //      alt i has at least one unpredicated config.\n        //   3. Non-NONE Semantic Context: There exists at least one, and for all\n        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n        //\n        // From this, it is clear that NONE||anything==NONE.\n        //\n        let altToPred = [];\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if(ambigAlts.contains( c.alt )) {\n                altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n            }\n        }\n        let nPredAlts = 0;\n        for (let i =1;i< nalts+1;i++) {\n            const pred = altToPred[i] || null;\n            if (pred===null) {\n                altToPred[i] = SemanticContext.NONE;\n            } else if (pred !== SemanticContext.NONE) {\n                nPredAlts += 1;\n            }\n        }\n        // nonambig alts are null in altToPred\n        if (nPredAlts===0) {\n            altToPred = null;\n        }\n        if (this.debug) {\n            console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n        }\n        return altToPred;\n    }\n\n    getPredicatePredictions(ambigAlts, altToPred) {\n        const pairs = [];\n        let containsPredicate = false;\n        for (let i=1; i<altToPred.length;i++) {\n            const pred = altToPred[i];\n            // unpredicated is indicated by SemanticContext.NONE\n            if( ambigAlts!==null && ambigAlts.contains( i )) {\n                pairs.push(new PredPrediction(pred, i));\n            }\n            if (pred !== SemanticContext.NONE) {\n                containsPredicate = true;\n            }\n        }\n        if (! containsPredicate) {\n            return null;\n        }\n        return pairs;\n    }\n\n    /**\n     * This method is used to improve the localization of error messages by\n     * choosing an alternative rather than throwing a\n     * {@link NoViableAltException} in particular prediction scenarios where the\n     * {@link //ERROR} state was reached during ATN simulation.\n     *\n     * <p>\n     * The default implementation of this method uses the following\n     * algorithm to identify an ATN configuration which successfully parsed the\n     * decision entry rule. Choosing such an alternative ensures that the\n     * {@link ParserRuleContext} returned by the calling rule will be complete\n     * and valid, and the syntax error will be reported later at a more\n     * localized location.</p>\n     *\n     * <ul>\n     * <li>If a syntactically valid path or paths reach the end of the decision rule and\n     * they are semantically valid if predicated, return the min associated alt.</li>\n     * <li>Else, if a semantically invalid but syntactically valid path exist\n     * or paths exist, return the minimum associated alt.\n     * </li>\n     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n     * </ul>\n     *\n     * <p>\n     * In some scenarios, the algorithm described above could predict an\n     * alternative which will result in a {@link FailedPredicateException} in\n     * the parser. Specifically, this could occur if the <em>only</em> configuration\n     * capable of successfully parsing to the end of the decision rule is\n     * blocked by a semantic predicate. By choosing this alternative within\n     * {@link //adaptivePredict} instead of throwing a\n     * {@link NoViableAltException}, the resulting\n     * {@link FailedPredicateException} in the parser will identify the specific\n     * predicate which is preventing the parser from successfully parsing the\n     * decision rule, which helps developers identify and correct logic errors\n     * in semantic predicates.\n     * </p>\n     *\n     * @param configs The ATN configurations which were valid immediately before\n     * the {@link //ERROR} state was reached\n     * @param outerContext The is the \\gamma_0 initial parser context from the paper\n     * or the parser stack at the instant before prediction commences.\n     *\n     * @return The value to return from {@link //adaptivePredict}, or\n     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n     * identified and {@link //adaptivePredict} should report an error instead\n     */\n    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {\n        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n        const semValidConfigs = cfgs[0];\n        const semInvalidConfigs = cfgs[1];\n        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n        if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists\n            return alt;\n        }\n        // Is there a syntactically valid path with a failed pred?\n        if (semInvalidConfigs.items.length>0) {\n            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n            if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists\n                return alt;\n            }\n        }\n        return ATN.INVALID_ALT_NUMBER;\n    }\n\n    getAltThatFinishedDecisionEntryRule(configs) {\n        const alts = [];\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {\n                if(alts.indexOf(c.alt)<0) {\n                    alts.push(c.alt);\n                }\n            }\n        }\n        if (alts.length===0) {\n            return ATN.INVALID_ALT_NUMBER;\n        } else {\n            return Math.min.apply(null, alts);\n        }\n    }\n\n    /**\n     * Walk the list of configurations and split them according to\n     * those that have preds evaluating to true/false.  If no pred, assume\n     * true pred and include in succeeded set.  Returns Pair of sets.\n     *\n     * Create a new set so as not to alter the incoming parameter.\n     *\n     * Assumption: the input stream has been restored to the starting point\n     * prediction, which is where predicates need to evaluate.*/\n    splitAccordingToSemanticValidity( configs, outerContext) {\n        const succeeded = new ATNConfigSet(configs.fullCtx);\n        const failed = new ATNConfigSet(configs.fullCtx);\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.semanticContext !== SemanticContext.NONE) {\n                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n                if (predicateEvaluationResult) {\n                    succeeded.add(c);\n                } else {\n                    failed.add(c);\n                }\n            } else {\n                succeeded.add(c);\n            }\n        }\n        return [succeeded, failed];\n    }\n\n    /**\n     * Look through a list of predicate/alt pairs, returning alts for the\n     * pairs that win. A {@code NONE} predicate indicates an alt containing an\n     * unpredicated config which behaves as \"always true.\" If !complete\n     * then we stop at the first predicate that evaluates to true. This\n     * includes pairs with null predicates.\n     */\n    evalSemanticContext(predPredictions, outerContext, complete) {\n        const predictions = new BitSet();\n        for(let i=0;i<predPredictions.length;i++) {\n            const pair = predPredictions[i];\n            if (pair.pred === SemanticContext.NONE) {\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n                continue;\n            }\n            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n            if (this.debug || this.dfa_debug) {\n                console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n            }\n            if (predicateEvaluationResult) {\n                if (this.debug || this.dfa_debug) {\n                    console.log(\"PREDICT \" + pair.alt);\n                }\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n            }\n        }\n        return predictions;\n    }\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n        const initialDepth = 0;\n        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,\n                                 fullCtx, initialDepth, treatEofAsEpsilon);\n    }\n\n    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        if (this.debug || this.debug_closure) {\n            console.log(\"closure(\" + config.toString(this.parser,true) + \")\");\n            // console.log(\"configs(\" + configs.toString() + \")\");\n            if(config.reachesIntoOuterContext>50) {\n                throw \"problem\";\n            }\n        }\n        if (config.state instanceof RuleStopState) {\n            // We hit rule end. If we have context info, use it\n            // run thru all possible stack tops in ctx\n            if (! config.context.isEmpty()) {\n                for (let i =0; i<config.context.length; i++) {\n                    if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n                        if (fullCtx) {\n                            configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);\n                            continue;\n                        } else {\n                            // we have no context info, just chase follow links (if greedy)\n                            if (this.debug) {\n                                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                            }\n                            this.closure_(config, configs, closureBusy, collectPredicates,\n                                     fullCtx, depth, treatEofAsEpsilon);\n                        }\n                        continue;\n                    }\n                    const returnState = this.atn.states[config.context.getReturnState(i)];\n                    const newContext = config.context.getParent(i); // \"pop\" return state\n                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};\n                    const c = new ATNConfig(parms, null);\n                    // While we have context to pop back from, we may have\n                    // gotten that context AFTER having falling off a rule.\n                    // Make sure we track that we are now out of context.\n                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n                }\n                return;\n            } else if( fullCtx) {\n                // reached end of start rule\n                configs.add(config, this.mergeCache);\n                return;\n            } else {\n                // else if we have no context info, just chase follow links (if greedy)\n                if (this.debug) {\n                    console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                }\n            }\n        }\n        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n    }\n\n    // Do the actual work of walking epsilon edges//\n    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        const p = config.state;\n        // optimization\n        if (! p.epsilonOnlyTransitions) {\n            configs.add(config, this.mergeCache);\n            // make sure to not return here, because EOF transitions can act as\n            // both epsilon transitions and non-epsilon transitions.\n        }\n        for(let i = 0;i<p.transitions.length; i++) {\n            if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n                continue;\n\n            const t = p.transitions[i];\n            const continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n            if (c!==null) {\n                let newDepth = depth;\n                if ( config.state instanceof RuleStopState) {\n                    // target fell off end of rule; mark resulting c as having dipped into outer context\n                    // We can't get here if incoming config was rule stop and we had context\n                    // track how far we dip into outer context.  Might\n                    // come in handy and we avoid evaluating context dependent\n                    // preds if this is > 0.\n                    if (this._dfa !== null && this._dfa.precedenceDfa) {\n                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n                            c.precedenceFilterSuppressed = true;\n                        }\n                    }\n\n                    c.reachesIntoOuterContext += 1;\n                    if (closureBusy.add(c)!==c) {\n                        // avoid infinite recursion for right-recursive rules\n                        continue;\n                    }\n                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                    newDepth -= 1;\n                    if (this.debug) {\n                        console.log(\"dips into outer ctx: \" + c);\n                    }\n                } else {\n                    if (!t.isEpsilon && closureBusy.add(c)!==c){\n                        // avoid infinite recursion for EOF* and EOF+\n                        continue;\n                    }\n                    if (t instanceof RuleTransition) {\n                        // latch when newDepth goes negative - once we step out of the entry context we can't return\n                        if (newDepth >= 0) {\n                            newDepth += 1;\n                        }\n                    }\n                }\n                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n            }\n        }\n    }\n\n    canDropLoopEntryEdgeInLeftRecursiveRule(config) {\n        // return False\n        const p = config.state;\n        // First check to see if we are in StarLoopEntryState generated during\n        // left-recursion elimination. For efficiency, also check if\n        // the context has an empty stack case. If so, it would mean\n        // global FOLLOW so we can't perform optimization\n        // Are we the special loop entry/exit state? or SLL wildcard\n        if(p.stateType != ATNState.STAR_LOOP_ENTRY)\n            return false;\n        if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||\n               config.context.isEmpty() || config.context.hasEmptyPath())\n            return false;\n\n        // Require all return states to return back to the same rule that p is in.\n        const numCtxs = config.context.length;\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnState = this.atn.states[config.context.getReturnState(i)];\n            if (returnState.ruleIndex != p.ruleIndex)\n                return false;\n        }\n\n        const decisionStartState = p.transitions[0].target;\n        const blockEndStateNum = decisionStartState.endState.stateNumber;\n        const blockEndState = this.atn.states[blockEndStateNum];\n\n        // Verify that the top of each stack context leads to loop entry/exit\n        // state through epsilon edges and w/o leaving rule.\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnStateNumber = config.context.getReturnState(i);\n            const returnState = this.atn.states[returnStateNumber];\n            // all states must have single outgoing epsilon edge\n            if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)\n                return false;\n\n            // Look for prefix op case like 'not expr', (' type ')' expr\n            const returnStateTarget = returnState.transitions[0].target;\n            if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )\n                continue;\n\n            // Look for 'expr op expr' or case where expr's return state is block end\n            // of (...)* internal block; the block end points to loop back\n            // which points to p but we don't need to check that\n            if ( returnState == blockEndState )\n                continue;\n\n            // Look for ternary expr ? expr : expr. The return state points at block end,\n            // which points at loop entry state\n            if ( returnStateTarget == blockEndState )\n                continue;\n\n            // Look for complex prefix 'between expr and expr' case where 2nd expr's\n            // return state points at block end state of (...)* internal block\n            if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1\n                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)\n                continue;\n\n            // anything else ain't conforming\n            return false;\n        }\n        return true;\n    }\n\n    getRuleName(index) {\n        if (this.parser!==null && index>=0) {\n            return this.parser.ruleNames[index];\n        } else {\n            return \"<rule \" + index + \">\";\n        }\n    }\n\n    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n        switch(t.serializationType) {\n        case Transition.RULE:\n            return this.ruleTransition(config, t);\n        case Transition.PRECEDENCE:\n            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.PREDICATE:\n            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n        case Transition.ACTION:\n            return this.actionTransition(config, t);\n        case Transition.EPSILON:\n            return new ATNConfig({state:t.target}, config);\n        case Transition.ATOM:\n        case Transition.RANGE:\n        case Transition.SET:\n            // EOF transitions act like epsilon transitions after the first EOF\n            // transition is traversed\n            if (treatEofAsEpsilon) {\n                if (t.matches(Token.EOF, 0, 1)) {\n                    return new ATNConfig({state: t.target}, config);\n                }\n            }\n            return null;\n        default:\n            return null;\n        }\n    }\n\n    actionTransition(config, t) {\n        if (this.debug) {\n            const index = t.actionIndex==-1 ? 65535 : t.actionIndex;\n            console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n        }\n        return new ATNConfig({state:t.target}, config);\n    }\n\n    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" +\n                    pt.precedence + \">=_p, ctx dependent=true\");\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && inContext) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    predTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex +\n                    \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new ATNConfig({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new ATNConfig({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    ruleTransition(config, t) {\n        if (this.debug) {\n            console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n        }\n        const returnState = t.followState;\n        const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n        return new ATNConfig({state:t.target, context:newContext}, config );\n    }\n\n    getConflictingAlts(configs) {\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.getAlts(altsets);\n    }\n\n    /**\n     * Sam pointed out a problem with the previous definition, v3, of\n     * ambiguous states. If we have another state associated with conflicting\n     * alternatives, we should keep going. For example, the following grammar\n     *\n     * s : (ID | ID ID?) ';' ;\n     *\n     * When the ATN simulation reaches the state before ';', it has a DFA\n     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n     * because alternative to has another way to continue, via [6|2|[]].\n     * The key is that we have a single state that has config's only associated\n     * with a single alternative, 2, and crucially the state transitions\n     * among the configurations are all non-epsilon transitions. That means\n     * we don't consider any conflicts that include alternative 2. So, we\n     * ignore the conflict between alts 1 and 2. We ignore a set of\n     * conflicting alts when there is an intersection with an alternative\n     * associated with a single alt state in the state&rarr;config-list map.\n     *\n     * It's also the case that we might have two conflicting configurations but\n     * also a 3rd nonconflicting configuration for a different alternative:\n     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n     *\n     * a : A | A | A B ;\n     *\n     * After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not\n     * stop working on this state. In the previous example, we're concerned\n     * with states associated with the conflicting alternatives. Here alt\n     * 3 is not associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, I don't declare the state done. We\n     * ignore a set of conflicting alts when we have an alternative\n     * that we still need to pursue\n     */\n    getConflictingAltsOrUniqueAlt(configs) {\n        let conflictingAlts = null;\n        if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {\n            conflictingAlts = new BitSet();\n            conflictingAlts.add(configs.uniqueAlt);\n        } else {\n            conflictingAlts = configs.conflictingAlts;\n        }\n        return conflictingAlts;\n    }\n\n    getTokenName(t) {\n        if (t===Token.EOF) {\n            return \"EOF\";\n        }\n        if( this.parser!==null && this.parser.literalNames!==null) {\n            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n                console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n                console.log(\"\" + this.parser.getInputStream().getTokens());\n            } else {\n                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n                return name + \"<\" + t + \">\";\n            }\n        }\n        return \"\" + t;\n    }\n\n    getLookaheadName(input) {\n        return this.getTokenName(input.LA(1));\n    }\n\n    /**\n     * Used for debugging in adaptivePredict around execATN but I cut\n     * it out for clarity now that alg. works well. We can leave this\n     * \"dead\" code for a bit\n     */\n    dumpDeadEndConfigs(nvae) {\n        console.log(\"dead end configs: \");\n        const decs = nvae.getDeadEndConfigs();\n        for(let i=0; i<decs.length; i++) {\n            const c = decs[i];\n            let trans = \"no edges\";\n            if (c.state.transitions.length>0) {\n                const t = c.state.transitions[0];\n                if (t instanceof AtomTransition) {\n                    trans = \"Atom \"+ this.getTokenName(t.label);\n                } else if (t instanceof SetTransition) {\n                    const neg = (t instanceof NotSetTransition);\n                    trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n                }\n            }\n            console.error(c.toString(this.parser, true) + \":\" + trans);\n        }\n    }\n\n    noViableAlt(input, outerContext, configs, startIndex) {\n        return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n    }\n\n    getUniqueAlt(configs) {\n        let alt = ATN.INVALID_ALT_NUMBER;\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (alt === ATN.INVALID_ALT_NUMBER) {\n                alt = c.alt // found first alt\n            } else if( c.alt!==alt) {\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return alt;\n    }\n\n    /**\n     * Add an edge to the DFA, if possible. This method calls\n     * {@link //addDFAState} to ensure the {@code to} state is present in the\n     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n     * range of edges that can be represented in the DFA tables, this method\n     * returns without adding the edge to the DFA.\n     *\n     * <p>If {@code to} is {@code null}, this method returns {@code null}.\n     * Otherwise, this method returns the {@link DFAState} returned by calling\n     * {@link //addDFAState} for the {@code to} state.</p>\n     *\n     * @param dfa The DFA\n     * @param from_ The source state for the edge\n     * @param t The input symbol\n     * @param to The target state for the edge\n     *\n     * @return If {@code to} is {@code null}, this method returns {@code null};\n     * otherwise this method returns the result of calling {@link //addDFAState}\n     * on {@code to}\n     */\n    addDFAEdge(dfa, from_, t, to) {\n        if( this.debug) {\n            console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n        }\n        if (to===null) {\n            return null;\n        }\n        to = this.addDFAState(dfa, to); // used existing if possible not incoming\n        if (from_===null || t < -1 || t > this.atn.maxTokenType) {\n            return to;\n        }\n        if (from_.edges===null) {\n            from_.edges = [];\n        }\n        from_.edges[t+1] = to; // connect\n\n        if (this.debug) {\n            const literalNames = this.parser===null ? null : this.parser.literalNames;\n            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;\n            console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n        }\n        return to;\n    }\n\n    /**\n     * Add state {@code D} to the DFA if it is not already present, and return\n     * the actual instance stored in the DFA. If a state equivalent to {@code D}\n     * is already in the DFA, the existing state is returned. Otherwise this\n     * method returns {@code D} after adding it to the DFA.\n     *\n     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n     * does not change the DFA.</p>\n     *\n     * @param dfa The dfa\n     * @param D The DFA state to add\n     * @return The state stored in the DFA. This will be either the existing\n     * state if {@code D} is already in the DFA, or {@code D} itself if the\n     * state was not already present\n     */\n    addDFAState(dfa, D) {\n        if (D == ATNSimulator.ERROR) {\n            return D;\n        }\n        const existing = dfa.states.get(D);\n        if(existing!==null) {\n            return existing;\n        }\n        D.stateNumber = dfa.states.length;\n        if (! D.configs.readOnly) {\n            D.configs.optimizeConfigs(this);\n            D.configs.setReadonly(true);\n        }\n        dfa.states.add(D);\n        if (this.debug) {\n            console.log(\"adding new DFA state: \" + D);\n        }\n        return D;\n    }\n\n    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n        }\n    }\n\n    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n        }\n    }\n\n    // If context sensitive parsing, we know it's ambiguity not conflict//\n    reportAmbiguity(dfa, D, startIndex, stopIndex,\n                                   exact, ambigAlts, configs ) {\n        if (this.debug || this.retry_debug) {\n            const interval = new Interval(startIndex, stopIndex + 1);\n            console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n        }\n    }\n}\n\nmodule.exports = ParserATNSimulator;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/PredictionMode.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Map, BitSet, AltDict, hashStuff} = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\nconst {RuleStopState} = __webpack_require__(/*! ./ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\nconst {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n\n/**\n * This enumeration defines the prediction modes available in ANTLR 4 along with\n * utility methods for analyzing configuration sets for conflicts and/or\n * ambiguities.\n */\nconst PredictionMode = {\n    /**\n     * The SLL(*) prediction mode. This prediction mode ignores the current\n     * parser context when making predictions. This is the fastest prediction\n     * mode, and provides correct results for many grammars. This prediction\n     * mode is more powerful than the prediction mode provided by ANTLR 3, but\n     * may result in syntax errors for grammar and input combinations which are\n     * not SLL.\n     *\n     * <p>\n     * When using this prediction mode, the parser will either return a correct\n     * parse tree (i.e. the same parse tree that would be returned with the\n     * {@link //LL} prediction mode), or it will report a syntax error. If a\n     * syntax error is encountered when using the {@link //SLL} prediction mode,\n     * it may be due to either an actual syntax error in the input or indicate\n     * that the particular combination of grammar and input requires the more\n     * powerful {@link //LL} prediction abilities to complete successfully.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    SLL: 0,\n\n    /**\n     * The LL(*) prediction mode. This prediction mode allows the current parser\n     * context to be used for resolving SLL conflicts that occur during\n     * prediction. This is the fastest prediction mode that guarantees correct\n     * parse results for all combinations of grammars with syntactically correct\n     * inputs.\n     *\n     * <p>\n     * When using this prediction mode, the parser will make correct decisions\n     * for all syntactically-correct grammar and input combinations. However, in\n     * cases where the grammar is truly ambiguous this prediction mode might not\n     * report a precise answer for <em>exactly which</em> alternatives are\n     * ambiguous.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL: 1,\n\n    /**\n     *\n     * The LL(*) prediction mode with exact ambiguity detection. In addition to\n     * the correctness guarantees provided by the {@link //LL} prediction mode,\n     * this prediction mode instructs the prediction algorithm to determine the\n     * complete and exact set of ambiguous alternatives for every ambiguous\n     * decision encountered while parsing.\n     *\n     * <p>\n     * This prediction mode may be used for diagnosing ambiguities during\n     * grammar development. Due to the performance overhead of calculating sets\n     * of ambiguous alternatives, this prediction mode should be avoided when\n     * the exact results are not necessary.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL_EXACT_AMBIG_DETECTION: 2,\n\n    /**\n     *\n     * Computes the SLL prediction termination condition.\n     *\n     * <p>\n     * This method computes the SLL prediction termination condition for both of\n     * the following cases.</p>\n     *\n     * <ul>\n     * <li>The usual SLL+LL fallback upon SLL conflict</li>\n     * <li>Pure SLL without LL fallback</li>\n     * </ul>\n     *\n     * <p><strong>COMBINED SLL+LL PARSING</strong></p>\n     *\n     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n     * ensured regardless of how the termination condition is computed by this\n     * method. Due to the substantially higher cost of LL prediction, the\n     * prediction should only fall back to LL when the additional lookahead\n     * cannot lead to a unique SLL prediction.</p>\n     *\n     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n     * conflicting subsets should fall back to full LL, even if the\n     * configuration sets don't resolve to the same alternative (e.g.\n     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n     * configuration, SLL could continue with the hopes that more lookahead will\n     * resolve via one of those non-conflicting configurations.</p>\n     *\n     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n     * stops when it sees only conflicting configuration subsets. In contrast,\n     * full LL keeps going when there is uncertainty.</p>\n     *\n     * <p><strong>HEURISTIC</strong></p>\n     *\n     * <p>As a heuristic, we stop prediction when we see any conflicting subset\n     * unless we see a state that only has one alternative associated with it.\n     * The single-alt-state thing lets prediction continue upon rules like\n     * (otherwise, it would admit defeat too soon):</p>\n     *\n     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n     *\n     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n     * processing this node because alternative to has another way to continue,\n     * via {@code [6|2|[]]}.</p>\n     *\n     * <p>It also let's us continue for this rule:</p>\n     *\n     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n     *\n     * <p>After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not stop\n     * working on this state. In the previous example, we're concerned with\n     * states associated with the conflicting alternatives. Here alt 3 is not\n     * associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, don't declare the state done.</p>\n     *\n     * <p><strong>PURE SLL PARSING</strong></p>\n     *\n     * <p>To handle pure SLL parsing, all we have to do is make sure that we\n     * combine stack contexts for configurations that differ only by semantic\n     * predicate. From there, we can do the usual SLL termination heuristic.</p>\n     *\n     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n     *\n     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n     * states because they need to create the DFA cache that works in all\n     * semantic situations. In contrast, full LL evaluates predicates collected\n     * during start state computation so it can ignore predicates thereafter.\n     * This means that SLL termination detection can totally ignore semantic\n     * predicates.</p>\n     *\n     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n     * semantic predicate contexts so we might see two configurations like the\n     * following.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n     *\n     * <p>Before testing these configurations against others, we have to merge\n     * {@code x} and {@code x'} (without modifying the existing configurations).\n     * For example, we test {@code (x+x')==x''} when looking for conflicts in\n     * the following configurations.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n     *\n     * <p>If the configuration set has predicates (as indicated by\n     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n     * the configurations to strip out all of the predicates so that a standard\n     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n     */\n    hasSLLConflictTerminatingPrediction: function( mode, configs) {\n        // Configs in rule stop states indicate reaching the end of the decision\n        // rule (local context) or end of start rule (full context). If all\n        // configs meet this condition, then none of the configurations is able\n        // to match additional input so we terminate prediction.\n        //\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return true;\n        }\n        // pure SLL mode parsing\n        if (mode === PredictionMode.SLL) {\n            // Don't bother with combining configs from different semantic\n            // contexts if we can fail over to full LL; costs more time\n            // since we'll often fail over anyway.\n            if (configs.hasSemanticContext) {\n                // dup configs, tossing out semantic predicates\n                const dup = new ATNConfigSet();\n                for(let i=0;i<configs.items.length;i++) {\n                    let c = configs.items[i];\n                    c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);\n                    dup.add(c);\n                }\n                configs = dup;\n            }\n            // now we have combined contexts for configs with dissimilar preds\n        }\n        // pure SLL or combined SLL+LL mode parsing\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n    },\n\n    /**\n     * Checks if any configuration in {@code configs} is in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if any configuration in {@code configs} is in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    hasConfigInRuleStopState: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (c.state instanceof RuleStopState) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Checks if all configurations in {@code configs} are in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if all configurations in {@code configs} are in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    allConfigsInRuleStopStates: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (!(c.state instanceof RuleStopState)) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /**\n     *\n     * Full LL prediction termination.\n     *\n     * <p>Can we stop looking ahead during ATN simulation or is there some\n     * uncertainty as to which alternative we will ultimately pick, after\n     * consuming more input? Even if there are partial conflicts, we might know\n     * that everything is going to resolve to the same minimum alternative. That\n     * means we can stop since no more lookahead will change that fact. On the\n     * other hand, there might be multiple conflicts that resolve to different\n     * minimums. That means we need more look ahead to decide which of those\n     * alternatives we should predict.</p>\n     *\n     * <p>The basic idea is to split the set of configurations {@code C}, into\n     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n     * non-conflicting configurations. Two configurations conflict if they have\n     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n     *\n     * <p>Reduce these configuration subsets to the set of possible alternatives.\n     * You can compute the alternative subsets in one pass as follows:</p>\n     *\n     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n     * {@code C} holding {@code s} and {@code ctx} fixed.</p>\n     *\n     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     *\n     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n     *\n     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n     * {@code s} and {@code ctx}.</p>\n     *\n     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n     * the union of these alternative subsets is a singleton, then no amount of\n     * more lookahead will help us. We will always pick that alternative. If,\n     * however, there is more than one alternative, then we are uncertain which\n     * alternative to predict and must continue looking for resolution. We may\n     * or may not discover an ambiguity in the future, even if there are no\n     * conflicting subsets this round.</p>\n     *\n     * <p>The biggest sin is to terminate early because it means we've made a\n     * decision but were uncertain as to the eventual outcome. We haven't used\n     * enough lookahead. On the other hand, announcing a conflict too late is no\n     * big deal; you will still have the conflict. It's just inefficient. It\n     * might even look until the end of file.</p>\n     *\n     * <p>No special consideration for semantic predicates is required because\n     * predicates are evaluated on-the-fly for full LL prediction, ensuring that\n     * no configuration contains a semantic context during the termination\n     * check.</p>\n     *\n     * <p><strong>CONFLICTING CONFIGS</strong></p>\n     *\n     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n     * when {@code i!=j} but {@code x=x'}. Because we merge all\n     * {@code (s, i, _)} configurations together, that means that there are at\n     * most {@code n} configurations associated with state {@code s} for\n     * {@code n} possible alternatives in the decision. The merged stacks\n     * complicate the comparison of configuration contexts {@code x} and\n     * {@code x'}. Sam checks to see if one is a subset of the other by calling\n     * merge and checking to see if the merged result is either {@code x} or\n     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n     * is the superset, then {@code i} is the only possible prediction since the\n     * others resolve to {@code min(i)} as well. However, if {@code x} is\n     * associated with {@code j>i} then at least one stack configuration for\n     * {@code j} is not in conflict with alternative {@code i}. The algorithm\n     * should keep going, looking for more lookahead due to the uncertainty.</p>\n     *\n     * <p>For simplicity, I'm doing a equality check between {@code x} and\n     * {@code x'} that lets the algorithm continue to consume lookahead longer\n     * than necessary. The reason I like the equality is of course the\n     * simplicity but also because that is the test you need to detect the\n     * alternatives that are actually in conflict.</p>\n     *\n     * <p><strong>CONTINUE/STOP RULE</strong></p>\n     *\n     * <p>Continue if union of resolved alternative sets from non-conflicting and\n     * conflicting alternative subsets has more than one alternative. We are\n     * uncertain about which alternative to predict.</p>\n     *\n     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n     * alternatives are still in the running for the amount of input we've\n     * consumed at this point. The conflicting sets let us to strip away\n     * configurations that won't lead to more states because we resolve\n     * conflicts to the configuration with a minimum alternate for the\n     * conflicting set.</p>\n     *\n     * <p><strong>CASES</strong></p>\n     *\n     * <ul>\n     *\n     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n     *\n     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1,3}} =&gt; continue\n     * </li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1}} =&gt; stop and predict 1</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n     * ambiguity {@code {1,2}}</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {2}} = {@code {1,2}} =&gt; continue</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {3}} = {@code {1,3}} =&gt; continue</li>\n     *\n     * </ul>\n     *\n     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n     *\n     * <p>If all states report the same conflicting set of alternatives, then we\n     * know we have the exact ambiguity set.</p>\n     *\n     * <p><code>|A_<em>i</em>|&gt;1</code> and\n     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n     *\n     * <p>In other words, we continue examining lookahead until all {@code A_i}\n     * have more than one alternative and all {@code A_i} are the same. If\n     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n     * because the resolved set is {@code {1}}. To determine what the real\n     * ambiguity is, we have to know whether the ambiguity is between one and\n     * two or one and three so we keep going. We can only stop prediction when\n     * we need exact ambiguity detection when the sets look like\n     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n     */\n    resolvesToJustOneViableAlt: function(altsets) {\n        return PredictionMode.getSingleViableAlt(altsets);\n    },\n\n    /**\n     * Determines if every alternative subset in {@code altsets} contains more\n     * than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every {@link BitSet} in {@code altsets} has\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    allSubsetsConflict: function(altsets) {\n        return ! PredictionMode.hasNonConflictingAltSet(altsets);\n    },\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * exactly one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n     */\n    hasNonConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * more than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    hasConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length>1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if every alternative subset in {@code altsets} is equivalent.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every member of {@code altsets} is equal to the\n     * others, otherwise {@code false}\n     */\n    allSubsetsEqual: function(altsets) {\n        let first = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (first === null) {\n                first = alts;\n            } else if (alts!==first) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n\n    /**\n     * Returns the unique alternative predicted by all alternative subsets in\n     * {@code altsets}. If no such alternative exists, this method returns\n     * {@link ATN//INVALID_ALT_NUMBER}.\n     *\n     * @param altsets a collection of alternative subsets\n     */\n    getUniqueAlt: function(altsets) {\n        const all = PredictionMode.getAlts(altsets);\n        if (all.length===1) {\n            return all.minValue();\n        } else {\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    },\n\n    /**\n     * Gets the complete set of represented alternatives for a collection of\n     * alternative subsets. This method returns the union of each {@link BitSet}\n     * in {@code altsets}.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return the set of represented alternatives in {@code altsets}\n     */\n    getAlts: function(altsets) {\n        const all = new BitSet();\n        altsets.map( function(alts) { all.or(alts); });\n        return all;\n    },\n\n    /**\n     * This function gets the conflicting alt subsets from a configuration set.\n     * For each configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     */\n    getConflictingAltSubsets: function(configs) {\n        const configToAlts = new Map();\n        configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };\n        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}\n        configs.items.map(function(cfg) {\n            let alts = configToAlts.get(cfg);\n            if (alts === null) {\n                alts = new BitSet();\n                configToAlts.put(cfg, alts);\n            }\n            alts.add(cfg.alt);\n        });\n        return configToAlts.getValues();\n    },\n\n    /**\n     * Get a map from state to alt subset from a configuration set. For each\n     * configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n     * </pre>\n     */\n    getStateToAltMap: function(configs) {\n        const m = new AltDict();\n        configs.items.map(function(c) {\n            let alts = m.get(c.state);\n            if (alts === null) {\n                alts = new BitSet();\n                m.put(c.state, alts);\n            }\n            alts.add(c.alt);\n        });\n        return m;\n    },\n\n    hasStateAssociatedWithOneAlt: function(configs) {\n        const values = PredictionMode.getStateToAltMap(configs).values();\n        for(let i=0;i<values.length;i++) {\n            if (values[i].length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    getSingleViableAlt: function(altsets) {\n        let result = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            const minAlt = alts.minValue();\n            if(result===null) {\n                result = minAlt;\n            } else if(result!==minAlt) { // more than 1 viable alt\n                return ATN.INVALID_ALT_NUMBER;\n            }\n        }\n        return result;\n    }\n}\n\nmodule.exports = PredictionMode;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/PredictionMode.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/SemanticContext.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Set, Hash} = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\n\n/**\n * A tree structure used to record the semantic context in which\n * an ATN configuration is valid.  It's either a single predicate,\n * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n *\n * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n * {@link SemanticContext} within the scope of this outer class.</p>\n */\nclass SemanticContext {\n\thashCode() {\n\t\tconst hash = new Hash();\n\t\tthis.updateHashCode(hash);\n\t\treturn hash.finish();\n\t}\n\n\t/**\n\t * For context independent predicates, we evaluate them without a local\n\t * context (i.e., null context). That way, we can evaluate them without\n\t * having to create proper rule-specific context during prediction (as\n\t * opposed to the parser, which creates them naturally). In a practical\n\t * sense, this avoids a cast exception from RuleContext to myruleContext.\n\t *\n\t * <p>For context dependent predicates, we must pass in a local context so that\n\t * references such as $arg evaluate properly as _localctx.arg. We only\n\t * capture context dependent predicates in the context in which we begin\n\t * prediction, so we passed in the outer context here in case of context\n\t * dependent predicate evaluation.</p>\n\t */\n\tevaluate(parser, outerContext) {}\n\n\t/**\n\t * Evaluate the precedence predicates for the context and reduce the result.\n\t *\n\t * @param parser The parser instance.\n\t * @param outerContext The current parser context object.\n\t * @return The simplified semantic context after precedence predicates are\n\t * evaluated, which will be one of the following values.\n\t * <ul>\n\t * <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code null}: if the predicate simplifies to {@code false} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code this}: if the semantic context is not changed as a result of\n\t * precedence predicate evaluation.</li>\n\t * <li>A non-{@code null} {@link SemanticContext}: the new simplified\n\t * semantic context after precedence predicates are evaluated.</li>\n\t * </ul>\n\t */\n\tevalPrecedence(parser, outerContext) {\n\t\treturn this;\n\t}\n\n\tstatic andContext(a, b) {\n\t\tif (a === null || a === SemanticContext.NONE) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null || b === SemanticContext.NONE) {\n\t\t\treturn a;\n\t\t}\n\t\tconst result = new AND(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tstatic orContext(a, b) {\n\t\tif (a === null) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tconst result = new OR(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\n\nclass Predicate extends SemanticContext {\n\tconstructor(ruleIndex, predIndex, isCtxDependent) {\n\t\tsuper();\n\t\tthis.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n\t\tthis.predIndex = predIndex === undefined ? -1 : predIndex;\n\t\tthis.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\t}\n\n\tevaluate(parser, outerContext) {\n\t\tconst localctx = this.isCtxDependent ? outerContext : null;\n\t\treturn parser.sempred(localctx, this.ruleIndex, this.predIndex);\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof Predicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.ruleIndex === other.ruleIndex &&\n\t\t\t\t\tthis.predIndex === other.predIndex &&\n\t\t\t\t\tthis.isCtxDependent === other.isCtxDependent;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n\t}\n}\n\n/**\n * The default {@link SemanticContext}, which is semantically equivalent to\n * a predicate of the form {@code {true}?}\n */\nSemanticContext.NONE = new Predicate();\n\n\nclass PrecedencePredicate extends SemanticContext {\n\tconstructor(precedence) {\n\t\tsuper();\n\t\tthis.precedence = precedence === undefined ? 0 : precedence;\n\t}\n\n\tevaluate(parser, outerContext) {\n\t\treturn parser.precpred(outerContext, this.precedence);\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tif (parser.precpred(outerContext, this.precedence)) {\n\t\t\treturn SemanticContext.NONE;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tcompareTo(other) {\n\t\treturn this.precedence - other.precedence;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(31);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof PrecedencePredicate)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.precedence === other.precedence;\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn \"{\"+this.precedence+\">=prec}?\";\n\t}\n\n\tstatic filterPrecedencePredicates(set) {\n\t\tconst result = [];\n\t\tset.values().map( function(context) {\n\t\t\tif (context instanceof PrecedencePredicate) {\n\t\t\t\tresult.push(context);\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n}\n\nclass AND extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever none of the contained contexts\n\t * is false\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new Set();\n\t\tif (a instanceof AND) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof AND) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\t\tconst precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the lowest precedence\n\t\t\tlet reduced = null;\n\t\t\tprecedencePredicates.map( function(p) {\n\t\t\t\tif(reduced===null || p.precedence<reduced.precedence) {\n\t\t\t\t\treduced = p;\n\t\t\t\t}\n\t\t\t});\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = operands.values();\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof AND)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.opnds === other.opnds;\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"AND\");\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === null) {\n\t\t\t\t// The AND context is false if any element is false\n\t\t\t\treturn null;\n\t\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t\t// Reduce the result by skipping true elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were true, so the AND context is true\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tlet result = null;\n\t\toperands.map(function(o) {\n\t\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tlet s = \"\";\n\t\tthis.opnds.map(function(o) {\n\t\t\ts += \"&& \" + o.toString();\n\t\t});\n\t\treturn s.length > 3 ? s.slice(3) : s;\n\t}\n}\n\n\nclass OR extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever at least one of the contained\n\t * contexts is true\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new Set();\n\t\tif (a instanceof OR) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof OR) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\n\t\tconst precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the highest precedence\n\t\t\tconst s = precedencePredicates.sort(function(a, b) {\n\t\t\t\treturn a.compareTo(b);\n\t\t\t});\n\t\t\tconst reduced = s[s.length-1];\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = operands.values();\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof OR)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn this.opnds === other.opnds;\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"OR\");\n\t}\n\n\t/**\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t\t// The OR context is true if any element is true\n\t\t\t\treturn SemanticContext.NONE;\n\t\t\t} else if (evaluated !== null) {\n\t\t\t\t// Reduce the result by skipping false elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were false, so the OR context is false\n\t\t\treturn null;\n\t\t}\n\t\tconst result = null;\n\t\toperands.map(function(o) {\n\t\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tlet s = \"\";\n\t\tthis.opnds.map(function(o) {\n\t\t\ts += \"|| \" + o.toString();\n\t\t});\n\t\treturn s.length > 3 ? s.slice(3) : s;\n\t}\n}\n\nmodule.exports = {\n\tSemanticContext,\n\tPrecedencePredicate,\n\tPredicate\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/SemanticContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/Transition.js":
/*!**********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/Transition.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst {Predicate, PrecedencePredicate} = __webpack_require__(/*! ./SemanticContext */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n\n/**\n * An ATN transition between any two ATN states.  Subclasses define\n * atom, set, epsilon, action, predicate, rule transitions.\n *\n * <p>This is a one way link.  It emanates from a state (usually via a list of\n * transitions) and has a target state.</p>\n *\n * <p>Since we never have to change the ATN transitions once we construct it,\n * we can fix these transitions as specific classes. The DFA transitions\n * on the other hand need to update the labels as it adds transitions to\n * the states. We'll use the term Edge for the DFA to distinguish them from\n * ATN transitions.</p>\n */\nclass Transition {\n    constructor(target) {\n        // The target of this transition.\n        if (target===undefined || target===null) {\n            throw \"target cannot be null.\";\n        }\n        this.target = target;\n        // Are we epsilon, action, sempred?\n        this.isEpsilon = false;\n        this.label = null;\n    }\n}\n\n// constants for serialization\n\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\n// e.g., {isType(input.LT(1))}?\nTransition.PREDICATE = 4;\nTransition.ATOM = 5;\nTransition.ACTION = 6;\n// ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.SET = 7;\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ];\n\nTransition.serializationTypes = {\n        EpsilonTransition: Transition.EPSILON,\n        RangeTransition: Transition.RANGE,\n        RuleTransition: Transition.RULE,\n        PredicateTransition: Transition.PREDICATE,\n        AtomTransition: Transition.ATOM,\n        ActionTransition: Transition.ACTION,\n        SetTransition: Transition.SET,\n        NotSetTransition: Transition.NOT_SET,\n        WildcardTransition: Transition.WILDCARD,\n        PrecedencePredicateTransition: Transition.PRECEDENCE\n    };\n\n\n// TODO: make all transitions sets? no, should remove set edges\n\nclass AtomTransition extends Transition {\n    constructor(target, label) {\n        super(target);\n        // The token type or character value; or, signifies special label.\n        this.label_ = label;\n        this.label = this.makeLabel();\n        this.serializationType = Transition.ATOM;\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addOne(this.label_);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label_ === symbol;\n    }\n\n    toString() {\n        return this.label_;\n    }\n}\n\n\nclass RuleTransition extends Transition {\n    constructor(ruleStart, ruleIndex, precedence, followState) {\n        super(ruleStart);\n        // ptr to the rule definition object for this rule ref\n        this.ruleIndex = ruleIndex;\n        this.precedence = precedence;\n        // what node to begin computations following ref to rule\n        this.followState = followState;\n        this.serializationType = Transition.RULE;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n}\n\nclass EpsilonTransition extends Transition {\n    constructor(target, outermostPrecedenceReturn) {\n        super(target);\n        this.serializationType = Transition.EPSILON;\n        this.isEpsilon = true;\n        this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"epsilon\";\n    }\n}\n\n\nclass RangeTransition extends Transition {\n    constructor(target, start, stop) {\n        super(target);\n        this.serializationType = Transition.RANGE;\n        this.start = start;\n        this.stop = stop;\n        this.label = this.makeLabel();\n    }\n\n    makeLabel() {\n        const s = new IntervalSet();\n        s.addRange(this.start, this.stop);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= this.start && symbol <= this.stop;\n    }\n\n    toString() {\n        return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n    }\n}\n\n\nclass AbstractPredicateTransition extends Transition {\n    constructor(target) {\n        super(target);\n    }\n}\n\nclass PredicateTransition extends AbstractPredicateTransition {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.PREDICATE;\n        this.ruleIndex = ruleIndex;\n        this.predIndex = predIndex;\n        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n\n    toString() {\n        return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n}\n\n\nclass ActionTransition extends Transition {\n    constructor(target, ruleIndex, actionIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = Transition.ACTION;\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;\n        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n    }\n}\n\n\n// A transition containing a set of values.\nclass SetTransition extends Transition {\n    constructor(target, set) {\n        super(target);\n        this.serializationType = Transition.SET;\n        if (set !==undefined && set !==null) {\n            this.label = set;\n        } else {\n            this.label = new IntervalSet();\n            this.label.addOne(Token.INVALID_TYPE);\n        }\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label.contains(symbol);\n    }\n\n    toString() {\n        return this.label.toString();\n    }\n}\n\nclass NotSetTransition extends SetTransition {\n    constructor(target, set) {\n        super(target, set);\n        this.serializationType = Transition.NOT_SET;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&\n                !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n    }\n\n    toString() {\n        return '~' + super.toString();\n    }\n}\n\nclass WildcardTransition extends Transition {\n    constructor(target) {\n        super(target);\n        this.serializationType = Transition.WILDCARD;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n    }\n\n    toString() {\n        return \".\";\n    }\n}\n\nclass PrecedencePredicateTransition extends AbstractPredicateTransition {\n    constructor(target, precedence) {\n        super(target);\n        this.serializationType = Transition.PRECEDENCE;\n        this.precedence = precedence;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new PrecedencePredicate(this.precedence);\n    }\n\n    toString() {\n        return this.precedence + \" >= _p\";\n    }\n}\n\nmodule.exports = {\n    Transition,\n    AtomTransition,\n    SetTransition,\n    NotSetTransition,\n    RuleTransition,\n    ActionTransition,\n    EpsilonTransition,\n    RangeTransition,\n    WildcardTransition,\n    PredicateTransition,\n    PrecedencePredicateTransition,\n    AbstractPredicateTransition\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/Transition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.ATN = __webpack_require__(/*! ./ATN */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\nexports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\");\nexports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ \"./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js\");\nexports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ \"./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js\");\nexports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ \"./node_modules/antlr4/src/antlr4/atn/PredictionMode.js\");\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/atn/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFA.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFA.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Set} = __webpack_require__(/*! ../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst {DFAState} = __webpack_require__(/*! ./DFAState */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\nconst {StarLoopEntryState} = __webpack_require__(/*! ../atn/ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\");\nconst {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {DFASerializer} = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\");\nconst {LexerDFASerializer} = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\");\n\nclass DFA {\n\tconstructor(atnStartState, decision) {\n\t\tif (decision === undefined) {\n\t\t\tdecision = 0;\n\t\t}\n\t\t/**\n\t\t * From which ATN state did we create this DFA?\n\t\t */\n\t\tthis.atnStartState = atnStartState;\n\t\tthis.decision = decision;\n\t\t/**\n\t\t * A set of all DFA states. Use {@link Map} so we can get old state back\n\t\t * ({@link Set} only allows you to see if it's there).\n\t\t */\n\t\tthis._states = new Set();\n\t\tthis.s0 = null;\n\t\t/**\n\t\t * {@code true} if this DFA is for a precedence decision; otherwise,\n\t\t * {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t\t * {@link //setPrecedenceDfa}\n\t\t */\n\t\tthis.precedenceDfa = false;\n\t\tif (atnStartState instanceof StarLoopEntryState)\n\t\t{\n\t\t\tif (atnStartState.isPrecedenceDecision) {\n\t\t\t\tthis.precedenceDfa = true;\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @return The start state corresponding to the specified precedence, or\n\t * {@code null} if no start state exists for the specified precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tgetPrecedenceStartState(precedence) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\t// s0.edges is never null for a precedence DFA\n\t\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.s0.edges[precedence] || null;\n\t}\n\n\t/**\n\t * Set the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @param startState The start state corresponding to the specified\n\t * precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tsetPrecedenceStartState(precedence, startState) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\tif (precedence < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * synchronization on s0 here is ok. when the DFA is turned into a\n\t\t * precedence DFA, s0 will be initialized once and not updated again\n\t\t * s0.edges is never null for a precedence DFA\n\t\t */\n\t\tthis.s0.edges[precedence] = startState;\n\t}\n\n\t/**\n\t * Sets whether this is a precedence DFA. If the specified value differs\n\t * from the current DFA configuration, the following actions are taken;\n\t * otherwise no changes are made to the current DFA.\n\t *\n\t * <ul>\n\t * <li>The {@link //states} map is cleared</li>\n\t * <li>If {@code precedenceDfa} is {@code false}, the initial state\n\t * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n\t * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n\t * store the start states for individual precedence values.</li>\n\t * <li>The {@link //precedenceDfa} field is updated</li>\n\t * </ul>\n\t *\n\t * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n\t * {@code false}\n\t */\n\tsetPrecedenceDfa(precedenceDfa) {\n\t\tif (this.precedenceDfa!==precedenceDfa) {\n\t\t\tthis._states = new DFAStatesSet();\n\t\t\tif (precedenceDfa) {\n\t\t\t\tconst precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t} else {\n\t\t\t\tthis.s0 = null;\n\t\t\t}\n\t\t\tthis.precedenceDfa = precedenceDfa;\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all states in this DFA, ordered by state number.\n\t */\n\tsortedStates() {\n\t\tconst list = this._states.values();\n\t\treturn list.sort(function(a, b) {\n\t\t\treturn a.stateNumber - b.stateNumber;\n\t\t});\n\t}\n\n\ttoString(literalNames, symbolicNames) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new DFASerializer(this, literalNames, symbolicNames);\n\t\treturn serializer.toString();\n\t}\n\n\ttoLexerString() {\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new LexerDFASerializer(this);\n\t\treturn serializer.toString();\n\t}\n\n\tget states(){\n\t\treturn this._states;\n\t}\n}\n\n\nmodule.exports = DFA;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/dfa/DFA.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * A DFA walker that knows how to dump them to serialized strings.\n */\nclass DFASerializer {\n    constructor(dfa, literalNames, symbolicNames) {\n        this.dfa = dfa;\n        this.literalNames = literalNames || [];\n        this.symbolicNames = symbolicNames || [];\n    }\n\n    toString() {\n       if(this.dfa.s0 === null) {\n           return null;\n       }\n       let buf = \"\";\n       const states = this.dfa.sortedStates();\n       for(let i=0; i<states.length; i++) {\n           const s = states[i];\n           if(s.edges!==null) {\n                const n = s.edges.length;\n                for(let j=0;j<n;j++) {\n                    const t = s.edges[j] || null;\n                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {\n                        buf = buf.concat(this.getStateString(s));\n                        buf = buf.concat(\"-\");\n                        buf = buf.concat(this.getEdgeLabel(j));\n                        buf = buf.concat(\"->\");\n                        buf = buf.concat(this.getStateString(t));\n                        buf = buf.concat('\\n');\n                    }\n                }\n           }\n       }\n       return buf.length===0 ? null : buf;\n    }\n\n    getEdgeLabel(i) {\n        if (i===0) {\n            return \"EOF\";\n        } else if(this.literalNames !==null || this.symbolicNames!==null) {\n            return this.literalNames[i-1] || this.symbolicNames[i-1];\n        } else {\n            return String.fromCharCode(i-1);\n        }\n    }\n\n    getStateString(s) {\n        const baseStateStr = ( s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + ( s.requiresFullContext ? \"^\" : \"\");\n        if(s.isAcceptState) {\n            if (s.predicates !== null) {\n                return baseStateStr + \"=>\" + s.predicates.toString();\n            } else {\n                return baseStateStr + \"=>\" + s.prediction.toString();\n            }\n        } else {\n            return baseStateStr;\n        }\n    }\n}\n\nclass LexerDFASerializer extends DFASerializer {\n    constructor(dfa) {\n        super(dfa, null);\n    }\n\n    getEdgeLabel(i) {\n        return \"'\" + String.fromCharCode(i) + \"'\";\n    }\n}\n\nmodule.exports = { DFASerializer , LexerDFASerializer };\n\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFAState.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\nconst {Hash, Set} = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\n\n/**\n * Map a predicate to a predicted alternative.\n */\nclass PredPrediction {\n\tconstructor(pred, alt) {\n\t\tthis.alt = alt;\n\t\tthis.pred = pred;\n\t}\n\n\ttoString() {\n\t\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n\t}\n}\n\n/**\n * A DFA state represents a set of possible ATN configurations.\n * As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n * to keep track of all possible states the ATN can be in after\n * reading each input symbol. That is to say, after reading\n * input a1a2..an, the DFA is in a state that represents the\n * subset T of the states of the ATN that are reachable from the\n * ATN's start state along some path labeled a1a2..an.\"\n * In conventional NFA&rarr;DFA conversion, therefore, the subset T\n * would be a bitset representing the set of states the\n * ATN could be in. We need to track the alt predicted by each\n * state as well, however. More importantly, we need to maintain\n * a stack of states, tracking the closure operations as they\n * jump from rule to rule, emulating rule invocations (method calls).\n * I have to add a stack to simulate the proper lookahead sequences for\n * the underlying LL grammar from which the ATN was derived.\n *\n * <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n * is both a state (ala normal conversion) and a RuleContext describing\n * the chain of rules (if any) followed to arrive at that state.</p>\n *\n * <p>A DFA state may have multiple references to a particular state,\n * but with different ATN contexts (with same or different alts)\n * meaning that state was reached via a different set of rule invocations.</p>\n */\nclass DFAState {\n\tconstructor(stateNumber, configs) {\n\t\tif (stateNumber === null) {\n\t\t\tstateNumber = -1;\n\t\t}\n\t\tif (configs === null) {\n\t\t\tconfigs = new ATNConfigSet();\n\t\t}\n\t\tthis.stateNumber = stateNumber;\n\t\tthis.configs = configs;\n\t\t/**\n\t\t * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t\t * {@link Token//EOF} maps to {@code edges[0]}.\n\t\t */\n\t\tthis.edges = null;\n\t\tthis.isAcceptState = false;\n\t\t/**\n\t\t * if accept state, what ttype do we match or alt do we predict?\n\t\t * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}\n\t\t * {@code !=null} or {@link //requiresFullContext}.\n\t\t */\n\t\tthis.prediction = 0;\n\t\tthis.lexerActionExecutor = null;\n\t\t/**\n\t\t * Indicates that this state was created during SLL prediction that\n\t\t * discovered a conflict between the configurations in the state. Future\n\t\t * {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t\t * full context prediction if this field is true.\n\t\t */\n\t\tthis.requiresFullContext = false;\n\t\t/**\n\t\t * During SLL parsing, this is a list of predicates associated with the\n\t\t * ATN configurations of the DFA state. When we have predicates,\n\t\t * {@link //requiresFullContext} is {@code false} since full context\n\t\t * prediction evaluates predicates\n\t\t * on-the-fly. If this is not null, then {@link //prediction} is\n\t\t * {@link ATN//INVALID_ALT_NUMBER}.\n\t\t *\n\t\t * <p>We only use these for non-{@link //requiresFullContext} but\n\t\t * conflicting states. That\n\t\t * means we know from the context (it's $ or we don't dip into outer\n\t\t * context) that it's an ambiguity not a conflict.</p>\n\t\t *\n\t\t * <p>This list is computed by {@link\n\t\t * ParserATNSimulator//predicateDFAState}.</p>\n\t\t */\n\t\tthis.predicates = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the set of all alts mentioned by all ATN configurations in this\n\t * DFA state.\n\t */\n\tgetAltSet() {\n\t\tconst alts = new Set();\n\t\tif (this.configs !== null) {\n\t\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\t\tconst c = this.configs[i];\n\t\t\t\talts.add(c.alt);\n\t\t\t}\n\t\t}\n\t\tif (alts.length === 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn alts;\n\t\t}\n\t}\n\n\t/**\n\t * Two {@link DFAState} instances are equal if their ATN configuration sets\n\t * are the same. This method is used to see if a state already exists.\n\t *\n\t * <p>Because the number of alternatives and number of ATN configurations are\n\t * finite, there is a finite number of DFA states that can be processed.\n\t * This is necessary to show that the algorithm terminates.</p>\n\t *\n\t * <p>Cannot test the DFA state numbers here because in\n\t * {@link ParserATNSimulator//addDFAState} we need to know if any other state\n\t * exists that has this exact set of ATN configurations. The\n\t * {@link //stateNumber} is irrelevant.</p>\n\t */\n\tequals(other) {\n\t\t// compare set of ATN configurations in this set with other\n\t\treturn this === other ||\n\t\t\t\t(other instanceof DFAState &&\n\t\t\t\t\tthis.configs.equals(other.configs));\n\t}\n\n\ttoString() {\n\t\tlet s = \"\" + this.stateNumber + \":\" + this.configs;\n\t\tif(this.isAcceptState) {\n\t\t\ts = s + \"=>\";\n\t\t\tif (this.predicates !== null)\n\t\t\t\ts = s + this.predicates;\n\t\t\telse\n\t\t\t\ts = s + this.prediction;\n\t\t}\n\t\treturn s;\n\t}\n\n\thashCode() {\n\t\tconst hash = new Hash();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n}\n\nmodule.exports = { DFAState, PredPrediction };\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/dfa/DFAState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.DFA = __webpack_require__(/*! ./DFA */ \"./node_modules/antlr4/src/antlr4/dfa/DFA.js\");\nexports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\").DFASerializer;\nexports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ \"./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\").LexerDFASerializer;\nexports.PredPrediction = __webpack_require__(/*! ./DFAState */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\").PredPrediction;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/dfa/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {BitSet} = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst {ErrorListener} = __webpack_require__(/*! ./ErrorListener */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\")\nconst {Interval} = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\")\n\n\n/**\n * This implementation of {@link ANTLRErrorListener} can be used to identify\n *  certain potential correctness and performance problems in grammars. \"Reports\"\n *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n *  message.\n *\n *  <ul>\n *  <li><b>Ambiguities</b>: These are cases where more than one path through the\n *  grammar can match the input.</li>\n *  <li><b>Weak context sensitivity</b>: These are cases where full-context\n *  prediction resolved an SLL conflict to a unique alternative which equaled the\n *  minimum alternative of the SLL conflict.</li>\n *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n *  full-context prediction resolved an SLL conflict to a unique alternative,\n *  <em>and</em> the minimum alternative of the SLL conflict was found to not be\n *  a truly viable alternative. Two-stage parsing cannot be used for inputs where\n *  this situation occurs.</li>\n *  </ul>\n */\nclass DiagnosticErrorListener extends ErrorListener {\n\tconstructor(exactOnly) {\n\t\tsuper();\n\t\texactOnly = exactOnly || true;\n\t\t// whether all ambiguities or only exact ambiguities are reported.\n\t\tthis.exactOnly = exactOnly;\n\t}\n\n\treportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t\tif (this.exactOnly && !exact) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg = \"reportAmbiguity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\": ambigAlts=\" +\n\t\t\tthis.getConflictingAlts(ambigAlts, configs) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\t\tconst msg = \"reportAttemptingFullContext d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\t\tconst msg = \"reportContextSensitivity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\tgetDecisionDescription(recognizer, dfa) {\n\t\tconst decision = dfa.decision\n\t\tconst ruleIndex = dfa.atnStartState.ruleIndex\n\n\t\tconst ruleNames = recognizer.ruleNames\n\t\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\tconst ruleName = ruleNames[ruleIndex] || null\n\t\tif (ruleName === null || ruleName.length === 0) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\treturn `${decision} (${ruleName})`;\n\t}\n\n\t/**\n\t * Computes the set of conflicting or ambiguous alternatives from a\n\t * configuration set, if that information was not already provided by the\n\t * parser.\n\t *\n\t * @param reportedAlts The set of conflicting or ambiguous alternatives, as\n\t * reported by the parser.\n\t * @param configs The conflicting or ambiguous configuration set.\n\t * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n\t * returns the set of alternatives represented in {@code configs}.\n     */\n\tgetConflictingAlts(reportedAlts, configs) {\n\t\tif (reportedAlts !== null) {\n\t\t\treturn reportedAlts;\n\t\t}\n\t\tconst result = new BitSet()\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tresult.add(configs.items[i].alt);\n\t\t}\n\t\treturn `{${result.values().join(\", \")}}`;\n\t}\n}\n\nmodule.exports = DiagnosticErrorListener\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorListener.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Provides an empty default implementation of {@link ANTLRErrorListener}. The\n * default implementation of each method does nothing, but can be overridden as\n * necessary.\n */\nclass ErrorListener {\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    }\n}\n\n/**\n * {@inheritDoc}\n *\n * <p>\n * This implementation prints messages to {@link System//err} containing the\n * values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n * the following format.</p>\n *\n * <pre>\n * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n * </pre>\n *\n */\nclass ConsoleErrorListener extends ErrorListener {\n    constructor() {\n        super();\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        console.error(\"line \" + line + \":\" + column + \" \" + msg);\n    }\n}\n\n\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\nclass ProxyErrorListener extends ErrorListener {\n    constructor(delegates) {\n        super();\n        if (delegates===null) {\n            throw \"delegates\";\n        }\n        this.delegates = delegates;\n        return this;\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n    }\n}\n\nmodule.exports = {ErrorListener, ConsoleErrorListener, ProxyErrorListener}\n\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/error/ErrorListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\")\nconst {NoViableAltException, InputMismatchException, FailedPredicateException, ParseCancellationException} = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\")\nconst {ATNState} = __webpack_require__(/*! ./../atn/ATNState */ \"./node_modules/antlr4/src/antlr4/atn/ATNState.js\")\nconst {Interval, IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\")\n\nclass ErrorStrategy {\n\n    reset(recognizer) {\n    }\n\n    recoverInline(recognizer) {\n    }\n\n    recover(recognizer, e) {\n    }\n\n    sync(recognizer) {\n    }\n\n    inErrorRecoveryMode(recognizer) {\n    }\n\n    reportError(recognizer) {\n    }\n}\n\n\n/**\n * This is the default implementation of {@link ANTLRErrorStrategy} used for\n * error reporting and recovery in ANTLR parsers.\n*/\nclass DefaultErrorStrategy extends ErrorStrategy {\n    constructor() {\n        super();\n        /**\n         * Indicates whether the error strategy is currently \"recovering from an\n         * error\". This is used to suppress reporting multiple error messages while\n         * attempting to recover from a detected syntax error.\n         *\n         * @see //inErrorRecoveryMode\n         */\n        this.errorRecoveryMode = false;\n\n        /**\n         * The index into the input stream where the last error occurred.\n         * This is used to prevent infinite loops where an error is found\n         * but no token is consumed during recovery...another error is found,\n         * ad nauseum. This is a failsafe mechanism to guarantee that at least\n         * one token/tree node is consumed for two errors.\n         */\n        this.lastErrorIndex = -1;\n        this.lastErrorStates = null;\n    }\n\n    /**\n     * <p>The default implementation simply calls {@link //endErrorCondition} to\n     * ensure that the handler is not in error recovery mode.</p>\n    */\n    reset(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * This method is called to enter error recovery mode when a recognition\n     * exception is reported.\n     *\n     * @param recognizer the parser instance\n    */\n    beginErrorCondition(recognizer) {\n        this.errorRecoveryMode = true;\n    }\n\n    inErrorRecoveryMode(recognizer) {\n        return this.errorRecoveryMode;\n    }\n\n    /**\n     * This method is called to leave error recovery mode after recovering from\n     * a recognition exception.\n     * @param recognizer\n     */\n    endErrorCondition(recognizer) {\n        this.errorRecoveryMode = false;\n        this.lastErrorStates = null;\n        this.lastErrorIndex = -1;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n     */\n    reportMatch(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * <p>The default implementation returns immediately if the handler is already\n     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n     * and dispatches the reporting task based on the runtime type of {@code e}\n     * according to the following table.</p>\n     *\n     * <ul>\n     * <li>{@link NoViableAltException}: Dispatches the call to\n     * {@link //reportNoViableAlternative}</li>\n     * <li>{@link InputMismatchException}: Dispatches the call to\n     * {@link //reportInputMismatch}</li>\n     * <li>{@link FailedPredicateException}: Dispatches the call to\n     * {@link //reportFailedPredicate}</li>\n     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n     * the exception</li>\n     * </ul>\n     */\n    reportError(recognizer, e) {\n       // if we've already reported an error and have not matched a token\n       // yet successfully, don't report any errors.\n        if(this.inErrorRecoveryMode(recognizer)) {\n            return; // don't report spurious errors\n        }\n        this.beginErrorCondition(recognizer);\n        if ( e instanceof NoViableAltException ) {\n            this.reportNoViableAlternative(recognizer, e);\n        } else if ( e instanceof InputMismatchException ) {\n            this.reportInputMismatch(recognizer, e);\n        } else if ( e instanceof FailedPredicateException ) {\n            this.reportFailedPredicate(recognizer, e);\n        } else {\n            console.log(\"unknown recognition error type: \" + e.constructor.name);\n            console.log(e.stack);\n            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n        }\n    }\n\n    /**\n     *\n     * {@inheritDoc}\n     *\n     * <p>The default implementation resynchronizes the parser by consuming tokens\n     * until we find one in the resynchronization set--loosely the set of tokens\n     * that can follow the current rule.</p>\n     *\n     */\n    recover(recognizer, e) {\n        if (this.lastErrorIndex===recognizer.getInputStream().index &&\n            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {\n            // uh oh, another error at same token index and previously-visited\n            // state in ATN; must be a case where LT(1) is in the recovery\n            // token set so nothing got consumed. Consume a single token\n            // at least to prevent an infinite loop; this is a failsafe.\n            recognizer.consume();\n        }\n        this.lastErrorIndex = recognizer._input.index;\n        if (this.lastErrorStates === null) {\n            this.lastErrorStates = [];\n        }\n        this.lastErrorStates.push(recognizer.state);\n        const followSet = this.getErrorRecoverySet(recognizer)\n        this.consumeUntil(recognizer, followSet);\n    }\n\n    /**\n     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n     * that the current lookahead symbol is consistent with what were expecting\n     * at this point in the ATN. You can call this anytime but ANTLR only\n     * generates code to check before subrules/loops and each iteration.\n     *\n     * <p>Implements Jim Idle's magic sync mechanism in closures and optional\n     * subrules. E.g.,</p>\n     *\n     * <pre>\n     * a : sync ( stuff sync )* ;\n     * sync : {consume to what can follow sync} ;\n     * </pre>\n     *\n     * At the start of a sub rule upon error, {@link //sync} performs single\n     * token deletion, if possible. If it can't do that, it bails on the current\n     * rule and uses the default error recovery, which consumes until the\n     * resynchronization set of the current rule.\n     *\n     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n     * with an empty alternative), then the expected set includes what follows\n     * the subrule.</p>\n     *\n     * <p>During loop iteration, it consumes until it sees a token that can start a\n     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n     * stay in the loop as long as possible.</p>\n     *\n     * <p><strong>ORIGINS</strong></p>\n     *\n     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n     * A single mismatch token or missing token would force the parser to bail\n     * out of the entire rules surrounding the loop. So, for rule</p>\n     *\n     * <pre>\n     * classDef : 'class' ID '{' member* '}'\n     * </pre>\n     *\n     * input with an extra token between members would force the parser to\n     * consume until it found the next class definition rather than the next\n     * member definition of the current class.\n     *\n     * <p>This functionality cost a little bit of effort because the parser has to\n     * compare token set at the start of the loop and at each iteration. If for\n     * some reason speed is suffering for you, you can turn off this\n     * functionality by simply overriding this method as a blank { }.</p>\n     *\n     */\n    sync(recognizer) {\n        // If already recovering, don't try to sync\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        const s = recognizer._interp.atn.states[recognizer.state]\n        const la = recognizer.getTokenStream().LA(1)\n        // try cheaper subset first; might get lucky. seems to shave a wee bit off\n        const nextTokens = recognizer.atn.nextTokens(s)\n        if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {\n            return;\n        }\n        switch (s.stateType) {\n        case ATNState.BLOCK_START:\n        case ATNState.STAR_BLOCK_START:\n        case ATNState.PLUS_BLOCK_START:\n        case ATNState.STAR_LOOP_ENTRY:\n           // report error and recover if possible\n            if( this.singleTokenDeletion(recognizer) !== null) {\n                return;\n            } else {\n                throw new InputMismatchException(recognizer);\n            }\n        case ATNState.PLUS_LOOP_BACK:\n        case ATNState.STAR_LOOP_BACK:\n            this.reportUnwantedToken(recognizer);\n            const expecting = new IntervalSet()\n            expecting.addSet(recognizer.getExpectedTokens());\n            const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer))\n            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n            break;\n        default:\n            // do nothing if we can't identify the exact kind of ATN state\n        }\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link NoViableAltException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportNoViableAlternative(recognizer, e) {\n        const tokens = recognizer.getTokenStream()\n        let input\n        if(tokens !== null) {\n            if (e.startToken.type===Token.EOF) {\n                input = \"<EOF>\";\n            } else {\n                input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n            }\n        } else {\n            input = \"<unknown input>\";\n        }\n        const msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is an\n     * {@link InputMismatchException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportInputMismatch(recognizer, e) {\n        const msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) +\n            \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link FailedPredicateException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportFailedPredicate(recognizer, e) {\n        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]\n        const msg = \"rule \" + ruleName + \" \" + e.message\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the removal\n     * of a token from the input stream. At the time this method is called, the\n     * erroneous symbol is current {@code LT(1)} symbol and has not yet been\n     * removed from the input stream. When this method returns,\n     * {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenDeletion} identifies\n     * single-token deletion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     *\n     */\n    reportUnwantedToken(recognizer) {\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const tokenName = this.getTokenErrorDisplay(t)\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"extraneous input \" + tokenName + \" expecting \" +\n            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the\n     * insertion of a missing token into the input stream. At the time this\n     * method is called, the missing token has not yet been inserted. When this\n     * method returns, {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenInsertion} identifies\n     * single-token insertion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     */\n    reportMissingToken(recognizer) {\n        if ( this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +\n            \" at \" + this.getTokenErrorDisplay(t)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * <p>The default implementation attempts to recover from the mismatched input\n     * by using single token insertion and deletion as described below. If the\n     * recovery attempt fails, this method throws an\n     * {@link InputMismatchException}.</p>\n     *\n     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n     *\n     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n     * right token, however, then assume {@code LA(1)} is some extra spurious\n     * token and delete it. Then consume and return the next token (which was\n     * the {@code LA(2)} token) as the successful result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n     * //singleTokenDeletion}.</p>\n     *\n     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n     *\n     * <p>If current token (at {@code LA(1)}) is consistent with what could come\n     * after the expected {@code LA(1)} token, then assume the token is missing\n     * and use the parser's {@link TokenFactory} to create it on the fly. The\n     * \"insertion\" is performed by returning the created token as the successful\n     * result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n     * //singleTokenInsertion}.</p>\n     *\n     * <p><strong>EXAMPLE</strong></p>\n     *\n     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n     * the parser returns from the nested call to {@code expr}, it will have\n     * call chain:</p>\n     *\n     * <pre>\n     * stat &rarr; expr &rarr; atom\n     * </pre>\n     *\n     * and it will be trying to match the {@code ')'} at this point in the\n     * derivation:\n     *\n     * <pre>\n     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n     * ^\n     * </pre>\n     *\n     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n     * is in the set of tokens that can follow the {@code ')'} token reference\n     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n     */\n    recoverInline(recognizer) {\n        // SINGLE TOKEN DELETION\n        const matchedSymbol = this.singleTokenDeletion(recognizer)\n        if (matchedSymbol !== null) {\n            // we have deleted the extra token.\n            // now, move past ttype token as if all were ok\n            recognizer.consume();\n            return matchedSymbol;\n        }\n        // SINGLE TOKEN INSERTION\n        if (this.singleTokenInsertion(recognizer)) {\n            return this.getMissingSymbol(recognizer);\n        }\n        // even that didn't work; must throw the exception\n        throw new InputMismatchException(recognizer);\n    }\n\n    /**\n     * This method implements the single-token insertion inline error recovery\n     * strategy. It is called by {@link //recoverInline} if the single-token\n     * deletion strategy fails to recover from the mismatched input. If this\n     * method returns {@code true}, {@code recognizer} will be in error recovery\n     * mode.\n     *\n     * <p>This method determines whether or not single-token insertion is viable by\n     * checking if the {@code LA(1)} input symbol could be successfully matched\n     * if it were instead the {@code LA(2)} symbol. If this method returns\n     * {@code true}, the caller is responsible for creating and inserting a\n     * token with the correct type to produce this behavior.</p>\n     *\n     * @param recognizer the parser instance\n     * @return {@code true} if single-token insertion is a viable recovery\n     * strategy for the current mismatched input, otherwise {@code false}\n     */\n    singleTokenInsertion(recognizer) {\n        const currentSymbolType = recognizer.getTokenStream().LA(1)\n        // if current token is consistent with what could come after current\n        // ATN state, then we know we're missing a token; error recovery\n        // is free to conjure up and insert the missing token\n        const atn = recognizer._interp.atn\n        const currentState = atn.states[recognizer.state]\n        const next = currentState.transitions[0].target\n        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)\n        if (expectingAtLL2.contains(currentSymbolType) ){\n            this.reportMissingToken(recognizer);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * This method implements the single-token deletion inline error recovery\n     * strategy. It is called by {@link //recoverInline} to attempt to recover\n     * from mismatched input. If this method returns null, the parser and error\n     * handler state will not have changed. If this method returns non-null,\n     * {@code recognizer} will <em>not</em> be in error recovery mode since the\n     * returned token was a successful match.\n     *\n     * <p>If the single-token deletion is successful, this method calls\n     * {@link //reportUnwantedToken} to report the error, followed by\n     * {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n     * before returning {@link //reportMatch} is called to signal a successful\n     * match.</p>\n     *\n     * @param recognizer the parser instance\n     * @return the successfully matched {@link Token} instance if single-token\n     * deletion successfully recovers from the mismatched input, otherwise\n     * {@code null}\n     */\n    singleTokenDeletion(recognizer) {\n        const nextTokenType = recognizer.getTokenStream().LA(2)\n        const expecting = this.getExpectedTokens(recognizer)\n        if (expecting.contains(nextTokenType)) {\n            this.reportUnwantedToken(recognizer);\n            // print(\"recoverFromMismatchedToken deleting \" \\\n            // + str(recognizer.getTokenStream().LT(1)) \\\n            // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n            // + \" is what we want\", file=sys.stderr)\n            recognizer.consume(); // simply delete extra token\n            // we want to return the token we're actually matching\n            const matchedSymbol = recognizer.getCurrentToken()\n            this.reportMatch(recognizer); // we know current token is correct\n            return matchedSymbol;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Conjure up a missing token during error recovery.\n     *\n     * The recognizer attempts to recover from single missing\n     * symbols. But, actions might refer to that missing symbol.\n     * For example, x=ID {f($x);}. The action clearly assumes\n     * that there has been an identifier matched previously and that\n     * $x points at that token. If that token is missing, but\n     * the next token in the stream is what we want we assume that\n     * this token is missing and we keep going. Because we\n     * have to return some token to replace the missing token,\n     * we have to conjure one up. This method gives the user control\n     * over the tokens returned for missing tokens. Mostly,\n     * you will want to create something special for identifier\n     * tokens. For literals such as '{' and ',', the default\n     * action in the parser or tree parser works. It simply creates\n     * a CommonToken of the appropriate type. The text will be the token.\n     * If you change what tokens must be created by the lexer,\n     * override this method to create the appropriate tokens.\n     *\n     */\n    getMissingSymbol(recognizer) {\n        const currentSymbol = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const expectedTokenType = expecting.first() // get any element\n        let tokenText\n        if (expectedTokenType===Token.EOF) {\n            tokenText = \"<missing EOF>\";\n        } else {\n            tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n        }\n        let current = currentSymbol\n        const lookback = recognizer.getTokenStream().LT(-1)\n        if (current.type===Token.EOF && lookback !== null) {\n            current = lookback;\n        }\n        return recognizer.getTokenFactory().create(current.source,\n            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,\n            -1, -1, current.line, current.column);\n    }\n\n    getExpectedTokens(recognizer) {\n        return recognizer.getExpectedTokens();\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out. Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     */\n    getTokenErrorDisplay(t) {\n        if (t === null) {\n            return \"<no token>\";\n        }\n        let s = t.text\n        if (s === null) {\n            if (t.type===Token.EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        return this.escapeWSAndQuote(s);\n    }\n\n    escapeWSAndQuote(s) {\n        s = s.replace(/\\n/g,\"\\\\n\");\n        s = s.replace(/\\r/g,\"\\\\r\");\n        s = s.replace(/\\t/g,\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    /**\n     * Compute the error recovery set for the current rule. During\n     * rule invocation, the parser pushes the set of tokens that can\n     * follow that rule reference on the stack; this amounts to\n     * computing FIRST of what follows the rule reference in the\n     * enclosing rule. See LinearApproximator.FIRST().\n     * This local follow set only includes tokens\n     * from within the rule; i.e., the FIRST computation done by\n     * ANTLR stops at the end of a rule.\n     *\n     * EXAMPLE\n     *\n     * When you find a \"no viable alt exception\", the input is not\n     * consistent with any of the alternatives for rule r. The best\n     * thing to do is to consume tokens until you see something that\n     * can legally follow a call to r//or* any rule that called r.\n     * You don't want the exact set of viable next tokens because the\n     * input might just be missing a token--you might consume the\n     * rest of the input looking for one of the missing tokens.\n     *\n     * Consider grammar:\n     *\n     * a : '[' b ']'\n     * | '(' b ')'\n     * ;\n     * b : c '^' INT ;\n     * c : ID\n     * | INT\n     * ;\n     *\n     * At each rule invocation, the set of tokens that could follow\n     * that rule is pushed on a stack. Here are the various\n     * context-sensitive follow sets:\n     *\n     * FOLLOW(b1_in_a) = FIRST(']') = ']'\n     * FOLLOW(b2_in_a) = FIRST(')') = ')'\n     * FOLLOW(c_in_b) = FIRST('^') = '^'\n     *\n     * Upon erroneous input \"[]\", the call chain is\n     *\n     * a -> b -> c\n     *\n     * and, hence, the follow context stack is:\n     *\n     * depth follow set start of rule execution\n     * 0 <EOF> a (from main())\n     * 1 ']' b\n     * 2 '^' c\n     *\n     * Notice that ')' is not included, because b would have to have\n     * been called from a different context in rule a for ')' to be\n     * included.\n     *\n     * For error recovery, we cannot consider FOLLOW(c)\n     * (context-sensitive or otherwise). We need the combined set of\n     * all context-sensitive FOLLOW sets--the set of all tokens that\n     * could follow any reference in the call chain. We need to\n     * resync to one of those tokens. Note that FOLLOW(c)='^' and if\n     * we resync'd to that token, we'd consume until EOF. We need to\n     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n     * In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n     * not consume anything. After printing an error, rule c would\n     * return normally. Rule b would not find the required '^' though.\n     * At this point, it gets a mismatched token error and throws an\n     * exception (since LA(1) is not in the viable following token\n     * set). The rule exception handler tries to recover, but finds\n     * the same recovery set and doesn't consume anything. Rule b\n     * exits normally returning to rule a. Now it finds the ']' (and\n     * with the successful match exits errorRecovery mode).\n     *\n     * So, you can see that the parser walks up the call chain looking\n     * for the token that was a member of the recovery set.\n     *\n     * Errors are not generated in errorRecovery mode.\n     *\n     * ANTLR's error recovery mechanism is based upon original ideas:\n     *\n     * \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n     *\n     * and\n     *\n     * \"A note on error recovery in recursive descent parsers\":\n     * http://portal.acm.org/citation.cfm?id=947902.947905\n     *\n     * Later, Josef Grosch had some good ideas:\n     *\n     * \"Efficient and Comfortable Error Recovery in Recursive Descent\n     * Parsers\":\n     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n     *\n     * Like Grosch I implement context-sensitive FOLLOW sets that are combined\n     * at run-time upon error to avoid overhead during parsing.\n     */\n    getErrorRecoverySet(recognizer) {\n        const atn = recognizer._interp.atn\n        let ctx = recognizer._ctx\n        const recoverSet = new IntervalSet()\n        while (ctx !== null && ctx.invokingState>=0) {\n            // compute what follows who invoked us\n            const invokingState = atn.states[ctx.invokingState]\n            const rt = invokingState.transitions[0]\n            const follow = atn.nextTokens(rt.followState)\n            recoverSet.addSet(follow);\n            ctx = ctx.parentCtx;\n        }\n        recoverSet.removeOne(Token.EPSILON);\n        return recoverSet;\n    }\n\n// Consume tokens until one matches the given token set.//\n    consumeUntil(recognizer, set) {\n        let ttype = recognizer.getTokenStream().LA(1)\n        while( ttype !== Token.EOF && !set.contains(ttype)) {\n            recognizer.consume();\n            ttype = recognizer.getTokenStream().LA(1);\n        }\n    }\n}\n\n\n/**\n * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n * by immediately canceling the parse operation with a\n * {@link ParseCancellationException}. The implementation ensures that the\n * {@link ParserRuleContext//exception} field is set for all parse tree nodes\n * that were not completed prior to encountering the error.\n *\n * <p>\n * This error strategy is useful in the following scenarios.</p>\n *\n * <ul>\n * <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n * stage of two-stage parsing to immediately terminate if an error is\n * encountered, and immediately fall back to the second stage. In addition to\n * avoiding wasted work by attempting to recover from errors here, the empty\n * implementation of {@link BailErrorStrategy//sync} improves the performance of\n * the first stage.</li>\n * <li><strong>Silent validation:</strong> When syntax errors are not being\n * reported or logged, and the parse result is simply ignored if errors occur,\n * the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n * when the result will be ignored either way.</li>\n * </ul>\n *\n * <p>\n * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n *\n * @see Parser//setErrorHandler(ANTLRErrorStrategy)\n * */\nclass BailErrorStrategy extends DefaultErrorStrategy {\n    constructor() {\n        super();\n    }\n\n    /**\n     * Instead of recovering from exception {@code e}, re-throw it wrapped\n     * in a {@link ParseCancellationException} so it is not caught by the\n     * rule function catches. Use {@link Exception//getCause()} to get the\n     * original {@link RecognitionException}.\n     */\n    recover(recognizer, e) {\n        let context = recognizer._ctx\n        while (context !== null) {\n            context.exception = e;\n            context = context.parentCtx;\n        }\n        throw new ParseCancellationException(e);\n    }\n\n    /**\n     * Make sure we don't attempt to recover inline; if the parser\n     * successfully recovers, it won't throw an exception.\n     */\n    recoverInline(recognizer) {\n        this.recover(recognizer, new InputMismatchException(recognizer));\n    }\n\n// Make sure we don't attempt to recover from problems in subrules.//\n    sync(recognizer) {\n        // pass\n    }\n}\n\n\nmodule.exports = {BailErrorStrategy, DefaultErrorStrategy};\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/Errors.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/Errors.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n *  3 kinds of errors: prediction errors, failed predicate errors, and\n *  mismatched input errors. In each case, the parser knows where it is\n *  in the input, where it is in the ATN, the rule invocation stack,\n *  and what kind of problem occurred.\n */\n\nconst {PredicateTransition} = __webpack_require__(/*! ./../atn/Transition */ \"./node_modules/antlr4/src/antlr4/atn/Transition.js\")\n\nclass RecognitionException extends Error {\n    constructor(params) {\n        super(params.message);\n        if (!!Error.captureStackTrace) {\n            Error.captureStackTrace(this, RecognitionException);\n        } else {\n            var stack = new Error().stack;\n        }\n        this.message = params.message;\n        this.recognizer = params.recognizer;\n        this.input = params.input;\n        this.ctx = params.ctx;\n        /**\n         * The current {@link Token} when an error occurred. Since not all streams\n         * support accessing symbols by index, we have to track the {@link Token}\n         * instance itself\n        */\n        this.offendingToken = null;\n        /**\n         * Get the ATN state number the parser was in at the time the error\n         * occurred. For {@link NoViableAltException} and\n         * {@link LexerNoViableAltException} exceptions, this is the\n         * {@link DecisionState} number. For others, it is the state whose outgoing\n         * edge we couldn't match.\n         */\n        this.offendingState = -1;\n        if (this.recognizer!==null) {\n            this.offendingState = this.recognizer.state;\n        }\n    }\n\n    /**\n     * Gets the set of input symbols which could potentially follow the\n     * previously matched symbol at the time this exception was thrown.\n     *\n     * <p>If the set of expected tokens is not known and could not be computed,\n     * this method returns {@code null}.</p>\n     *\n     * @return The set of token types that could potentially follow the current\n     * state in the ATN, or {@code null} if the information is not available.\n     */\n    getExpectedTokens() {\n        if (this.recognizer!==null) {\n            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n        } else {\n            return null;\n        }\n    }\n\n    // <p>If the state number is not known, this method returns -1.</p>\n    toString() {\n        return this.message;\n    }\n}\n\nclass LexerNoViableAltException extends RecognitionException {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n        super({message: \"\", recognizer: lexer, input: input, ctx: null});\n        this.startIndex = startIndex;\n        this.deadEndConfigs = deadEndConfigs;\n    }\n\n    toString() {\n        let symbol = \"\"\n        if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n            symbol = this.input.getText((this.startIndex,this.startIndex));\n        }\n        return \"LexerNoViableAltException\" + symbol;\n    }\n}\n\n\n/**\n * Indicates that the parser could not decide which of two or more paths\n * to take based upon the remaining input. It tracks the starting token\n * of the offending input and also knows where the parser was\n * in the various paths when the error. Reported by reportNoViableAlternative()\n */\nclass NoViableAltException extends RecognitionException {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n        ctx = ctx || recognizer._ctx;\n        offendingToken = offendingToken || recognizer.getCurrentToken();\n        startToken = startToken || recognizer.getCurrentToken();\n        input = input || recognizer.getInputStream();\n        super({message: \"\", recognizer: recognizer, input: input, ctx: ctx});\n        // Which configurations did we try at input.index() that couldn't match\n        // input.LT(1)?//\n        this.deadEndConfigs = deadEndConfigs;\n        // The token object at the start index; the input stream might\n        // not be buffering tokens so get a reference to it. (At the\n        // time the error occurred, of course the stream needs to keep a\n        // buffer all of the tokens but later we might not have access to those.)\n        this.startToken = startToken;\n        this.offendingToken = offendingToken;\n    }\n}\n\n/**\n * This signifies any kind of mismatched input exceptions such as\n * when the current input does not match the expected token.\n*/\nclass InputMismatchException extends RecognitionException {\n    constructor(recognizer) {\n        super({message: \"\", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\nfunction formatMessage(predicate, message) {\n    if (message !==null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n}\n\n/**\n * A semantic predicate failed during validation. Validation of predicates\n * occurs when normally parsing the alternative just like matching a token.\n * Disambiguating predicate evaluation occurs when we test a predicate during\n * prediction.\n*/\nclass FailedPredicateException extends RecognitionException {\n    constructor(recognizer, predicate, message) {\n        super({\n            message: formatMessage(predicate, message || null), recognizer: recognizer,\n            input: recognizer.getInputStream(), ctx: recognizer._ctx\n        });\n        const s = recognizer._interp.atn.states[recognizer.state]\n        const trans = s.transitions[0]\n        if (trans instanceof PredicateTransition) {\n            this.ruleIndex = trans.ruleIndex;\n            this.predicateIndex = trans.predIndex;\n        } else {\n            this.ruleIndex = 0;\n            this.predicateIndex = 0;\n        }\n        this.predicate = predicate;\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\n\nclass ParseCancellationException extends Error{\n    constructor() {\n        super()\n        Error.captureStackTrace(this, ParseCancellationException);\n    }\n}\n\nmodule.exports = {\n    RecognitionException,\n    NoViableAltException,\n    LexerNoViableAltException,\n    InputMismatchException,\n    FailedPredicateException,\n    ParseCancellationException\n};\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/error/Errors.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nmodule.exports.RecognitionException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\").RecognitionException;\nmodule.exports.NoViableAltException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\").NoViableAltException;\nmodule.exports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\").LexerNoViableAltException;\nmodule.exports.InputMismatchException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\").InputMismatchException;\nmodule.exports.FailedPredicateException = __webpack_require__(/*! ./Errors */ \"./node_modules/antlr4/src/antlr4/error/Errors.js\").FailedPredicateException;\nmodule.exports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ \"./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js\");\nmodule.exports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ \"./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\").BailErrorStrategy;\nmodule.exports.DefaultErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ \"./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\").DefaultErrorStrategy;\nmodule.exports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\").ErrorListener;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/error/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/index.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.atn = __webpack_require__(/*! ./atn/index */ \"./node_modules/antlr4/src/antlr4/atn/index.js\");\nexports.codepointat = __webpack_require__(/*! ./polyfills/codepointat */ \"./node_modules/antlr4/src/antlr4/polyfills/codepointat.js\");\nexports.dfa = __webpack_require__(/*! ./dfa/index */ \"./node_modules/antlr4/src/antlr4/dfa/index.js\");\nexports.fromcodepoint = __webpack_require__(/*! ./polyfills/fromcodepoint */ \"./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\");\nexports.tree = __webpack_require__(/*! ./tree/index */ \"./node_modules/antlr4/src/antlr4/tree/index.js\");\nexports.error = __webpack_require__(/*! ./error/index */ \"./node_modules/antlr4/src/antlr4/error/index.js\");\nexports.Token = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\").Token;\nexports.CharStreams = __webpack_require__(/*! ./CharStreams */ \"./node_modules/antlr4/src/antlr4/CharStreams.js\");\nexports.CommonToken = __webpack_require__(/*! ./Token */ \"./node_modules/antlr4/src/antlr4/Token.js\").CommonToken;\nexports.InputStream = __webpack_require__(/*! ./InputStream */ \"./node_modules/antlr4/src/antlr4/InputStream.js\");\nexports.FileStream = __webpack_require__(/*! ./FileStream */ \"./node_modules/antlr4/src/antlr4/FileStream.js\");\nexports.CommonTokenStream = __webpack_require__(/*! ./CommonTokenStream */ \"./node_modules/antlr4/src/antlr4/CommonTokenStream.js\");\nexports.Lexer = __webpack_require__(/*! ./Lexer */ \"./node_modules/antlr4/src/antlr4/Lexer.js\");\nexports.Parser = __webpack_require__(/*! ./Parser */ \"./node_modules/antlr4/src/antlr4/Parser.js\");\nvar pc = __webpack_require__(/*! ./PredictionContext */ \"./node_modules/antlr4/src/antlr4/PredictionContext.js\");\nexports.PredictionContextCache = pc.PredictionContextCache;\nexports.ParserRuleContext = __webpack_require__(/*! ./ParserRuleContext */ \"./node_modules/antlr4/src/antlr4/ParserRuleContext.js\");\nexports.Interval = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\").Interval;\nexports.IntervalSet = __webpack_require__(/*! ./IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\").IntervalSet;\nexports.Utils = __webpack_require__(/*! ./Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nexports.LL1Analyzer = __webpack_require__(/*! ./LL1Analyzer */ \"./node_modules/antlr4/src/antlr4/LL1Analyzer.js\").LL1Analyzer;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/codepointat.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? Number(position) : 0;\n\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/polyfills/codepointat.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar stringFromCharCode = String.fromCharCode;\n\t\tvar floor = Math.floor;\n\t\tvar fromCodePoint = function(_) {\n\t\t\tvar MAX_SIZE = 0x4000;\n\t\t\tvar codeUnits = [];\n\t\t\tvar highSurrogate;\n\t\t\tvar lowSurrogate;\n\t\t\tvar index = -1;\n\t\t\tvar length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tvar result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tvar codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Tree.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Tree.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst {Interval} = __webpack_require__(/*! ./../IntervalSet */ \"./node_modules/antlr4/src/antlr4/IntervalSet.js\");\nconst INVALID_INTERVAL = new Interval(-1, -2);\n\n/**\n * The basic notion of a tree has a parent, a payload, and a list of children.\n * It is the most abstract interface for all the trees used by ANTLR.\n */\nclass Tree {}\n\nclass SyntaxTree extends Tree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ParseTree extends SyntaxTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass RuleNode extends ParseTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetRuleContext(){\n\t\tthrow new Error(\"missing interface implementation\")\n\t}\n}\n\nclass TerminalNode extends ParseTree {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ErrorNode extends TerminalNode {\n\tconstructor() {\n\t\tsuper();\n\t}\n}\n\nclass ParseTreeVisitor {\n\tvisit(ctx) {\n\t\t if (Array.isArray(ctx)) {\n\t\t\treturn ctx.map(function(child) {\n\t\t\t\treturn child.accept(this);\n\t\t\t}, this);\n\t\t} else {\n\t\t\treturn ctx.accept(this);\n\t\t}\n\t}\n\n\tvisitChildren(ctx) {\n\t\tif (ctx.children) {\n\t\t\treturn this.visit(ctx.children);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tvisitTerminal(node) {\n\t}\n\n\tvisitErrorNode(node) {\n\t}\n}\n\nclass ParseTreeListener {\n\tvisitTerminal(node) {\n\t}\n\n\tvisitErrorNode(node) {\n\t}\n\n\tenterEveryRule(node) {\n\t}\n\n\texitEveryRule(node) {\n\t}\n}\n\nclass TerminalNodeImpl extends TerminalNode {\n\tconstructor(symbol) {\n\t\tsuper();\n\t\tthis.parentCtx = null;\n\t\tthis.symbol = symbol;\n\t}\n\n\tgetChild(i) {\n\t\treturn null;\n\t}\n\n\tgetSymbol() {\n\t\treturn this.symbol;\n\t}\n\n\tgetParent() {\n\t\treturn this.parentCtx;\n\t}\n\n\tgetPayload() {\n\t\treturn this.symbol;\n\t}\n\n\tgetSourceInterval() {\n\t\tif (this.symbol === null) {\n\t\t\treturn INVALID_INTERVAL;\n\t\t}\n\t\tconst tokenIndex = this.symbol.tokenIndex;\n\t\treturn new Interval(tokenIndex, tokenIndex);\n\t}\n\n\tgetChildCount() {\n\t\treturn 0;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitTerminal(this);\n\t}\n\n\tgetText() {\n\t\treturn this.symbol.text;\n\t}\n\n\ttoString() {\n\t\tif (this.symbol.type === Token.EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else {\n\t\t\treturn this.symbol.text;\n\t\t}\n\t}\n}\n\n\n/**\n * Represents a token that was consumed during resynchronization\n * rather than during a valid match operation. For example,\n * we will create this kind of a node during single token insertion\n * and deletion as well as during \"consume until error recovery set\"\n * upon no viable alternative exceptions.\n */\nclass ErrorNodeImpl extends TerminalNodeImpl {\n\tconstructor(token) {\n\t\tsuper(token);\n\t}\n\n\tisErrorNode() {\n\t\treturn true;\n\t}\n\n\taccept(visitor) {\n\t\treturn visitor.visitErrorNode(this);\n\t}\n}\n\nclass ParseTreeWalker {\n\n\t/**\n\t * Performs a walk on the given parse tree starting at the root and going down recursively\n\t * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before\n\t * recursively walking down into child nodes, then\n\t * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.\n\t * @param listener The listener used by the walker to process grammar rules\n\t * @param t The parse tree to be walked on\n\t */\n\twalk(listener, t) {\n\t\tconst errorNode = t instanceof ErrorNode ||\n\t\t\t\t(t.isErrorNode !== undefined && t.isErrorNode());\n\t\tif (errorNode) {\n\t\t\tlistener.visitErrorNode(t);\n\t\t} else if (t instanceof TerminalNode) {\n\t\t\tlistener.visitTerminal(t);\n\t\t} else {\n\t\t\tthis.enterRule(listener, t);\n\t\t\tfor (let i = 0; i < t.getChildCount(); i++) {\n\t\t\t\tconst child = t.getChild(i);\n\t\t\t\tthis.walk(listener, child);\n\t\t\t}\n\t\t\tthis.exitRule(listener, t);\n\t\t}\n\t}\n\n\t/**\n\t * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}\n\t * then by triggering the event specific to the given parse tree node\n\t * @param listener The listener responding to the trigger events\n\t * @param r The grammar rule containing the rule context\n\t */\n\tenterRule(listener, r) {\n\t\tconst ctx = r.getRuleContext();\n\t\tlistener.enterEveryRule(ctx);\n\t\tctx.enterRule(listener);\n\t}\n\n\t/**\n\t * Exits a grammar rule by first triggering the event specific to the given parse tree node\n\t * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}\n\t * @param listener The listener responding to the trigger events\n\t * @param r The grammar rule containing the rule context\n\t */\n\texitRule(listener, r) {\n\t\tconst ctx = r.getRuleContext();\n\t\tctx.exitRule(listener);\n\t\tlistener.exitEveryRule(ctx);\n\t}\n}\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\nmodule.exports = {\n\tRuleNode,\n\tErrorNode,\n\tTerminalNode,\n\tErrorNodeImpl,\n\tTerminalNodeImpl,\n\tParseTreeListener,\n\tParseTreeVisitor,\n\tParseTreeWalker,\n\tINVALID_INTERVAL\n}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/tree/Tree.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Trees.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Trees.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Utils = __webpack_require__(/*! ./../Utils */ \"./node_modules/antlr4/src/antlr4/Utils.js\");\nconst {Token} = __webpack_require__(/*! ./../Token */ \"./node_modules/antlr4/src/antlr4/Token.js\");\nconst {ErrorNode, TerminalNode, RuleNode} = __webpack_require__(/*! ./Tree */ \"./node_modules/antlr4/src/antlr4/tree/Tree.js\");\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nconst Trees = {\n    /**\n     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n     *  node payloads to get the text for the nodes.  Detect\n     *  parse trees and extract data appropriately.\n     */\n    toStringTree: function(tree, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        let s = Trees.getNodeText(tree, ruleNames);\n        s = Utils.escapeWhitespace(s, false);\n        const c = tree.getChildCount();\n        if(c===0) {\n            return s;\n        }\n        let res = \"(\" + s + ' ';\n        if(c>0) {\n            s = Trees.toStringTree(tree.getChild(0), ruleNames);\n            res = res.concat(s);\n        }\n        for(let i=1;i<c;i++) {\n            s = Trees.toStringTree(tree.getChild(i), ruleNames);\n            res = res.concat(' ' + s);\n        }\n        res = res.concat(\")\");\n        return res;\n    },\n\n    getNodeText: function(t, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        if(ruleNames!==null) {\n            if (t instanceof RuleNode) {\n                const context = t.getRuleContext()\n                const altNumber = context.getAltNumber();\n                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n                if ( altNumber != 0 ) {\n                    return ruleNames[t.ruleIndex]+\":\"+altNumber;\n                }\n                return ruleNames[t.ruleIndex];\n            } else if ( t instanceof ErrorNode) {\n                return t.toString();\n            } else if(t instanceof TerminalNode) {\n                if(t.symbol!==null) {\n                    return t.symbol.text;\n                }\n            }\n        }\n        // no recog for rule names\n        const payload = t.getPayload();\n        if (payload instanceof Token ) {\n            return payload.text;\n        }\n        return t.getPayload().toString();\n    },\n\n    /**\n     * Return ordered list of all children of this node\n     */\n    getChildren: function(t) {\n        const list = [];\n        for(let i=0;i<t.getChildCount();i++) {\n            list.push(t.getChild(i));\n        }\n        return list;\n    },\n\n    /**\n     * Return a list of all ancestors of this node.  The first node of\n     * list is the root and the last is the parent of this node.\n     */\n    getAncestors: function(t) {\n        let ancestors = [];\n        t = t.getParent();\n        while(t!==null) {\n            ancestors = [t].concat(ancestors);\n            t = t.getParent();\n        }\n        return ancestors;\n    },\n\n    findAllTokenNodes: function(t, ttype) {\n        return Trees.findAllNodes(t, ttype, true);\n    },\n\n    findAllRuleNodes: function(t, ruleIndex) {\n        return Trees.findAllNodes(t, ruleIndex, false);\n    },\n\n    findAllNodes: function(t, index, findTokens) {\n        const nodes = [];\n        Trees._findAllNodes(t, index, findTokens, nodes);\n        return nodes;\n    },\n\n    _findAllNodes: function(t, index, findTokens, nodes) {\n        // check this node (the root) first\n        if(findTokens && (t instanceof TerminalNode)) {\n            if(t.symbol.type===index) {\n                nodes.push(t);\n            }\n        } else if(!findTokens && (t instanceof RuleNode)) {\n            if(t.ruleIndex===index) {\n                nodes.push(t);\n            }\n        }\n        // check children\n        for(let i=0;i<t.getChildCount();i++) {\n            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n        }\n    },\n\n    descendants: function(t) {\n        let nodes = [t];\n        for(let i=0;i<t.getChildCount();i++) {\n            nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n        }\n        return nodes;\n    }\n}\n\nmodule.exports = Trees;\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/tree/Trees.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/index.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nconst Tree = __webpack_require__(/*! ./Tree */ \"./node_modules/antlr4/src/antlr4/tree/Tree.js\");\nconst Trees = __webpack_require__(/*! ./Trees */ \"./node_modules/antlr4/src/antlr4/tree/Trees.js\");\nmodule.exports = {...Tree, Trees}\n\n\n//# sourceURL=webpack:///./node_modules/antlr4/src/antlr4/tree/index.js?");

/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("\n\n//# sourceURL=webpack:///./node_modules/node-libs-browser/mock/empty.js?");

/***/ }),

/***/ "./static/js/helpers.js":
/*!******************************!*\
  !*** ./static/js/helpers.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _parser = __webpack_require__(/*! ./parser.js */ \"./static/js/parser.js\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction choose(choices) {\n  var index = Math.floor(Math.random() * choices.length);\n  return choices[index];\n}\n\nwindow.choose = choose;\n\nfunction htmlDecode(value) {\n  var el = document.createElement(\"textarea\");\n  el.innerHTML = value;\n  return el.innerText;\n}\n\nfunction showLoadingSpinner() {\n  document.getElementById(\"loadingSymbol\").classList.remove(\"hidden\");\n}\n\nfunction hideLoadingSpinner() {\n  document.getElementById(\"loadingSymbol\").classList.add(\"hidden\");\n}\n\nfunction ancestors(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var proofObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.proof;\n  var l = [];\n  var queue = [[node, depth]];\n  var nodeName;\n\n  while (queue.length > 0) {\n    var _queue$shift = queue.shift();\n\n    var _queue$shift2 = _slicedToArray(_queue$shift, 2);\n\n    node = _queue$shift2[0];\n    depth = _queue$shift2[1];\n    var parents = node.parents.map(function (name) {\n      return [proofObj[name], depth - 1];\n    });\n    l.push.apply(l, _toConsumableArray(parents));\n    queue.push.apply(queue, _toConsumableArray(parents));\n  }\n\n  return l;\n}\n\nwindow.ancestors = ancestors;\n\nfunction descendants(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var proofObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.proof;\n  var l = [];\n  var queue = [[node, depth]];\n  var nodeName;\n\n  while (queue.length > 0) {\n    var _queue$shift3 = queue.shift();\n\n    var _queue$shift4 = _slicedToArray(_queue$shift3, 2);\n\n    node = _queue$shift4[0];\n    depth = _queue$shift4[1];\n    var children = node.children.map(function (name) {\n      return [proofObj[name], depth + 1];\n    });\n    l.push.apply(l, _toConsumableArray(children));\n    queue.push.apply(queue, _toConsumableArray(children));\n  }\n\n  return l;\n}\n\nwindow.descendants = descendants;\n\nfunction assignColorToNode(color, node) {\n  try {\n    node.graphviz.fillcolor = color;\n    node.svgNode.style.fill = color;\n  } catch (e) {}\n}\n\nfunction nodeIsUninteresting(node) {\n  // the final conclusion is always interesting.\n  if (node.children.length == 0) {\n    return false;\n  }\n\n  var anc = ancestors(originalProof[node.name], 0, originalProof).map(function (vals) {\n    return vals[0].role;\n  });\n\n  if (window.hideConjecture) {\n    if ([\"conjecture\", \"negated_conjecture\"].includes(node.role)) {\n      return true;\n    } else if (anc.includes(\"conjecture\") || anc.includes(\"negated_conjecture\")) {\n      return true;\n    }\n  }\n\n  return +node.info.interesting < window.interestFilterVal && ![-1, undefined].includes(+node.info.interesting);\n} //// begin graphviz setup ///////////////////////////\n\n\nvar graphviz = d3.select(\"#graph\").graphviz();\nwindow.graphviz = graphviz;\ngraphviz.transition(function () {\n  return d3.transition(\"main\").duration(500);\n});\ngraphviz.engine(\"dot\"); // graphviz.engine(\"neato\");\n// graphviz.engine(\"fdp\");\n// graphviz.engine(\"sfdp\");\n//// end graphviz setup /////////////////////////////\n\nfunction showGV(dot) {\n  showLoadingSpinner();\n  graphviz.renderDot(htmlDecode(dot));\n  graphviz.on(\"end\", function () {\n    // add hover eventlisteners and update window.proof to tell\n    // it where to find the svg nodes corresponding to \"proof\"/json nodes\n    var _iterator = _createForOfIteratorHelper(document.querySelectorAll(\"g.node\")),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var node = _step.value;\n        node.addEventListener(\"mouseenter\", nodeHoverEventListener);\n        var nodeName = node.querySelector(\"title\").innerHTML;\n\n        try {\n          window.proof[nodeName].svgNode = node.querySelector(\"polygon, ellipse\");\n        } catch (e) {\n          window.nodeName = nodeName;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    hideLoadingSpinner();\n  });\n}\n\nfunction nodeHoverEventListener(e) {\n  if (e.buttons != 0) {\n    return;\n  }\n\n  var nodeName = e.currentTarget.children[0].innerHTML;\n  var node = proof[nodeName];\n  var nodeInfo = document.getElementById(\"nodeInfo\");\n  var tptpTextareaOpen = \"\";\n\n  try {\n    tptpTextareaOpen = document.getElementById(\"tptpNodeStatement\").classList.contains(\"open\") ? \"open\" : \"\";\n  } catch (e) {}\n\n  var interestingnessHTML = \"\";\n\n  if (node.info.interesting != undefined) {\n    interestingnessHTML = \"<b>Interestingness: </b>\".concat(node.info.interesting, \"<br>\");\n  }\n\n  nodeInfo.innerHTML = \"<hr>\\n\\t\\t<b>Name:</b> \".concat(node['name'], \"<br>\\n\\t\\t<b>Type:</b> \").concat(node['type'], \"<br>\\n\\t\\t<b>Role:</b> \").concat(node['role'], \"<br>\\n\\t\\t\").concat(interestingnessHTML, \"\\n\\t\\t<b>Formula:</b> \").concat(node['formula'], \"<br>\\n\\t\\t<b>Inference Record:</b> \").concat(node['inference_record'], \"\\n\\t\\t<hr>\\n\\n\\t\\t<div class=\\\"box\\\">\\n\\t\\t\\t<h4 id=\\\"tptpNodeStatement\\\" \\n\\t\\t\\t\\tclass=\\\"settingsHeader \").concat(tptpTextareaOpen, \"\\\" \\n\\t\\t\\t\\tonclick=\\\"collapseBox(this)\\\">\\n\\t\\t\\t\\t\\tFull TPTP Statement: \\n\\t\\t\\t\\t\\t<span class=\\\"triangle\\\"></span>\\n\\t\\t\\t</h4>\\n\\t\\t\\t<textarea id=\\\"tptpTextarea\\\" class=\\\"\").concat(tptpTextareaOpen, \"\\\">\").concat(node['tptp'], \"</textarea>\\n\\t\\t</div>\\n  \");\n  recolorNodesByInterest();\n\n  function colorHelper(depth, min, max) {\n    var startColor = [255, 0, 0];\n    var midColor = [255, 255, 255];\n    var endColor = [0, 0, 255];\n    var frac, r, g, b;\n\n    if (depth < 0) {\n      frac = (depth - min) / (0 - min);\n      r = Math.round(startColor[0] + frac * (midColor[0] - startColor[0]));\n      g = Math.round(startColor[1] + frac * (midColor[1] - startColor[1]));\n      b = Math.round(startColor[2] + frac * (midColor[2] - startColor[2]));\n    } else if (depth > 0) {\n      frac = 1 - (max - depth) / max;\n      r = Math.round(midColor[0] + frac * (endColor[0] - midColor[0]));\n      g = Math.round(midColor[1] + frac * (endColor[1] - midColor[1]));\n      b = Math.round(midColor[2] + frac * (endColor[2] - midColor[2]));\n    } else {\n      r = midColor[0];\n      g = midColor[1];\n      b = midColor[2];\n    }\n\n    function hex(v) {\n      return v.toString(16).length == 2 ? v.toString(16) : \"0\" + v.toString(16);\n    }\n\n    return \"#\".concat(hex(r)).concat(hex(g)).concat(hex(b));\n  }\n\n  var anc = ancestors(node);\n  var minDepth = 0;\n  anc.forEach(function (a) {\n    if (a[1] < minDepth) {\n      minDepth = a[1];\n    }\n  });\n  var des = descendants(node);\n  var maxDepth = 0;\n  des.forEach(function (d) {\n    if (d[1] > maxDepth) {\n      maxDepth = d[1];\n    }\n  });\n\n  var _iterator2 = _createForOfIteratorHelper(anc),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          a = _step2$value[0],\n          depth = _step2$value[1];\n\n      if (a.graphviz.fillcolor != \"#000000\") assignColorToNode(colorHelper(depth, minDepth, maxDepth), a);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(des),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          d = _step3$value[0],\n          _depth = _step3$value[1];\n\n      if (d.graphviz.fillcolor != \"#000000\") assignColorToNode(colorHelper(_depth, minDepth, maxDepth), d);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  if (node.graphviz.fillcolor != \"#000000\") assignColorToNode(colorHelper(0, minDepth, maxDepth), node);\n} //// begin interestingness helpers /////////////////\n\n\nfunction assignInterestingnessToHeightAndWidth() {\n  for (var _i2 = 0, _Object$values = Object.values(window.proof); _i2 < _Object$values.length; _i2++) {\n    var node = _Object$values[_i2];\n\n    if (window.interestScalingBool && node.info.interesting !== undefined) {\n      node.graphviz.width = scaleFromInterestingness(node.info.interesting);\n      node.graphviz.height = scaleFromInterestingness(node.info.interesting);\n    } else {\n      node.graphviz.width = undefined;\n      node.graphviz.height = undefined;\n    }\n  }\n}\n\nwindow.assignInterestingnessToHeightAndWidth = assignInterestingnessToHeightAndWidth;\n\nfunction getInterest() {\n  showLoadingSpinner();\n  Array.from(document.querySelectorAll(\".interestHidden\")).map(function (x) {\n    return x.style.display = \"block\";\n  });\n\n  if (!window.interestScalingBool) {\n    toggleInterestScaling();\n  }\n\n  fetch(\"/idv/interestingness\", {\n    method: 'POST',\n    body: JSON.stringify({\n      \"proof\": document.getElementById(\"proofText\").innerText\n    })\n  }).then(function (response) {\n    return response.text();\n  }).then(function (response) {\n    console.log(response);\n    return response;\n  }).then(function (text) {\n    text = htmlDecode(text);\n    var interestProof = (0, _parser.parseProof)(text);\n\n    for (var _i3 = 0, _Object$keys = Object.keys(originalProof); _i3 < _Object$keys.length; _i3++) {\n      var key = _Object$keys[_i3];\n      originalProof[key].info.interesting = interestProof[key].info.interesting;\n    }\n\n    redrawNodesByInterest();\n  })[\"catch\"](function (v) {\n    alert(\"Failed to query TPTP for interestingness!\");\n  })[\"finally\"](function (v) {\n    hideLoadingSpinner();\n  });\n}\n\nwindow.getInterest = getInterest;\n\nfunction toggleInterestScaling() {\n  var el = document.querySelector(\"#interestScaleToggle\");\n\n  if (el.innerText.includes(\"Disable\")) {\n    el.innerText = el.innerText.replace(\"Disable\", \"Enable\");\n  } else {\n    el.innerText = el.innerText.replace(\"Enable\", \"Disable\");\n  }\n\n  window.interestScalingBool = !window.interestScalingBool;\n  renderInterest();\n}\n\nwindow.toggleInterestScaling = toggleInterestScaling;\n\nfunction renderInterest() {\n  assignInterestingnessToHeightAndWidth();\n  showGV((0, _parser.proofToGV)(window.proof));\n}\n\nwindow.renderInterest = renderInterest;\n\nfunction recolorNodesByInterest() {\n  window.interestFilterVal = document.getElementById(\"interestingnessSlider\").value;\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(proof); _i4 < _Object$keys2.length; _i4++) {\n    var key = _Object$keys2[_i4];\n    var node = proof[key];\n\n    if (nodeIsUninteresting(node)) {\n      assignColorToNode(\"#000000\", node);\n    } else {\n      assignColorToNode(\"#c0c0c0\", node);\n    }\n  }\n\n  assignInterestingnessToHeightAndWidth();\n}\n\nwindow.recolorNodesByInterest = recolorNodesByInterest;\n\nfunction redrawNodesByInterest() {\n  window.interestFilterVal = document.getElementById(\"interestingnessSlider\").value;\n  window.proof = JSON.parse(JSON.stringify(originalProof));\n  assignInterestingnessToHeightAndWidth();\n\n  for (var _i5 = 0, _Object$values2 = Object.values(window.proof); _i5 < _Object$values2.length; _i5++) {\n    var node = _Object$values2[_i5];\n\n    // make node invisible if it's too uninteresting.\n    if (nodeIsUninteresting(node)) {\n      // update parent nodes\n      var _iterator4 = _createForOfIteratorHelper(node.parents),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _parent$children;\n\n          var parentName = _step4.value;\n          var parent = proof[parentName];\n          parent.children.splice(parent.children.indexOf(node.name), 1);\n\n          (_parent$children = parent.children).push.apply(_parent$children, _toConsumableArray(node.children));\n\n          parent.children = Array.from(new Set(parent.children));\n        } // update children nodes\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(node.children),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _child$parents;\n\n          var childName = _step5.value;\n          var child = proof[childName];\n          child.parents.splice(child.parents.indexOf(node.name), 1);\n\n          (_child$parents = child.parents).push.apply(_child$parents, _toConsumableArray(node.parents));\n\n          child.parents = Array.from(new Set(child.parents));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      delete window.proof[node.name];\n    }\n  }\n\n  showGV((0, _parser.proofToGV)(window.proof));\n}\n\nwindow.redrawNodesByInterest = redrawNodesByInterest;\n\nfunction resetGraph() {\n  document.getElementById('interestingnessSlider').value = -1;\n  var hideConjNodesButton = document.getElementById('hideConjNodesButton');\n  hideConjNodesButton.innerText = hideConjNodesButton.innerText.replace(\"Show\", \"Blacken\");\n  window.hideConjecture = false;\n  redrawNodesByInterest();\n}\n\nwindow.resetGraph = resetGraph;\n\nfunction toggleConjectureVisible(el) {\n  if (el.innerText.includes(\"Blacken\")) {\n    el.innerText = el.innerText.replace(\"Blacken\", \"Show\");\n  } else {\n    el.innerText = el.innerText.replace(\"Show\", \"Blacken\");\n  }\n\n  window.hideConjecture = !window.hideConjecture;\n  recolorNodesByInterest();\n}\n\nwindow.toggleConjectureVisible = toggleConjectureVisible; //// end interestingness helpers ///////////////////\n\nwindow.parseProof = _parser.parseProof;\nwindow.proofToGV = _parser.proofToGV;\nwindow.showGV = showGV;\n\nwindow.collapseBox = function (title) {\n  var el = title.parentNode.children[1];\n  var open = title.classList.contains(\"open\");\n\n  if (open) {\n    title.classList.remove(\"open\");\n    el.style.height = \"0px\";\n    el.style.display = \"none\";\n  } else {\n    title.classList.add(\"open\");\n    el.style.height = \"100%\";\n    el.style.display = \"block\";\n  }\n};\n\n//# sourceURL=webpack:///./static/js/helpers.js?");

/***/ }),

/***/ "./static/js/parser.js":
/*!*****************************!*\
  !*** ./static/js/parser.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.proofToGV = exports.parseProof = void 0;\n\nvar antlr4 = _interopRequireWildcard(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));\n\nvar _tptp_v7_0_0_0Lexer = _interopRequireDefault(__webpack_require__(/*! ../../TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Lexer */ \"./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Lexer.js\"));\n\nvar _tptp_v7_0_0_0Parser = _interopRequireDefault(__webpack_require__(/*! ../../TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Parser */ \"./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Parser.js\"));\n\nvar _tptp_v7_0_0_0Listener = _interopRequireDefault(__webpack_require__(/*! ../../TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Listener */ \"./TPTP-ANTLR4-Grammar/tptp_v7_0_0_0Listener.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nwindow.antlr4 = antlr4;\n\nfunction stripParens(formula) {\n  return formula.replace(/\\s+/g, '').replace(/[()]/g, '');\n}\n\nfunction getNodeShape(node) {\n  var shapeMap = {\n    axiom: \"invtriangle\",\n    conjecture: \"house\",\n    negated_conjecture: \"invhouse\",\n    plain: \"ellipse\"\n  };\n\n  if (stripParens(node.formula) == \"$false\") {\n    return \"box\";\n  }\n\n  return shapeMap[node.role];\n}\n\nfunction getNodeColor(node) {\n  var colorMap = {\n    thf: \"blue\",\n    tff: \"orange\",\n    tcf: \"black\",\n    fof: \"green\",\n    cnf: \"red\"\n  };\n  return colorMap[node.type];\n}\n\nfunction scaleFromInterestingness(interestingness) {\n  interestingness = +interestingness;\n  var defaultSize = 1;\n\n  if ([-1, undefined].includes(interestingness)) {\n    return defaultSize;\n  } else {\n    return 0.5 * (1 + interestingness) + 0.5;\n  }\n}\n\nwindow.scaleFromInterestingness = scaleFromInterestingness; // helper function for extracting recursive parent information:\n\nfunction getParentsFromSource(source, node) {\n  var dag = source.dag_source();\n  var sources = source.sources();\n\n  if (sources !== null) {\n    var _iterator = _createForOfIteratorHelper(sources),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var s = _step.value;\n        getParentsFromSource(s, node);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (dag === null) {\n    return;\n  }\n\n  if (dag.inference_record()) {\n    var inference_record = dag.inference_record();\n    node.inference_record = inference_record.getText();\n    var parent_list = inference_record.inference_parents().parent_list().parent_info();\n\n    for (var i = 0; i < parent_list.length; i++) {\n      var p = parent_list[i];\n      var ps = p.source();\n\n      if (ps.dag_source()) {\n        if (ps.dag_source().name()) {\n          node.parents.push(ps.getText());\n        } else {\n          try {\n            var _sources = [];\n            var parents = ps.dag_source().inference_record().inference_parents().parent_list().parent_info();\n            _sources = parents.map(function (x) {\n              return x.source();\n            });\n\n            var _iterator2 = _createForOfIteratorHelper(_sources),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _s = _step2.value;\n                getParentsFromSource(_s, node);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } catch (e) {\n            console.log(\"failed to parse dag source: \".concat(ps.dag_source().getText()));\n          }\n        }\n      } else if (ps.sources()) {\n        var _sources2 = ps.sources().source();\n\n        var _iterator3 = _createForOfIteratorHelper(_sources2),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _s2 = _step3.value;\n            getParentsFromSource(_s2, node);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        console.log(\"\".concat(node.name, \" has source \").concat(source));\n      }\n    }\n  } else if (dag.name()) {\n    node.parents.push(dag.name().getText());\n  }\n} // this class exists to format the relevant parts of the parse tree for ease of use.\n// It makes it JSON. To see the schema, look at the \"process\" method.\n\n\nvar Formatter = /*#__PURE__*/function (_Listener) {\n  _inherits(Formatter, _Listener);\n\n  var _super = _createSuper(Formatter);\n\n  function Formatter() {\n    var _this;\n\n    _classCallCheck(this, Formatter);\n\n    _this = _super.call(this);\n    _this.node_map = {};\n    return _this;\n  }\n\n  _createClass(Formatter, [{\n    key: \"enterThf_annotated\",\n    value: function enterThf_annotated(ctx) {\n      this.process(ctx, \"thf\");\n    }\n  }, {\n    key: \"enterTff_annotated\",\n    value: function enterTff_annotated(ctx) {\n      this.process(ctx, \"tff\");\n    }\n  }, {\n    key: \"enterTcf_annotated\",\n    value: function enterTcf_annotated(ctx) {\n      this.process(ctx, \"tcf\");\n    }\n  }, {\n    key: \"enterFof_annotated\",\n    value: function enterFof_annotated(ctx) {\n      this.process(ctx, \"fof\");\n    }\n  }, {\n    key: \"enterCnf_annotated\",\n    value: function enterCnf_annotated(ctx) {\n      this.process(ctx, \"cnf\");\n      window.ctx = ctx;\n    }\n  }, {\n    key: \"process\",\n    value: function process(ctx, type) {\n      var role = ctx.formula_role().getText();\n\n      if (![\"conjecture\", \"negated_conjecture\", \"axiom\", \"plain\"].includes(role)) {\n        console.log(\"\\\"\".concat(role, \"\\\" role not shown for \\\"\").concat(ctx.name().getText(), \"\\\"\"));\n        return;\n      }\n\n      var node = {\n        name: ctx.name().getText(),\n        type: type,\n        role: role,\n        formula: ctx[\"\".concat(type, \"_formula\")]().getText(),\n        parents: [],\n        inference_record: \"\",\n        info: {},\n        tptp: ctx.parentCtx.parentCtx.getText()\n      }; // try to get node info...(contains interestingness)\n\n      try {\n        var info = ctx.annotations().optional_info().useful_info().info_items().getText().split(\",\");\n        var infoObj = {};\n\n        var _iterator4 = _createForOfIteratorHelper(info),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var s = _step4.value;\n\n            var _s$split = s.split(\"(\"),\n                _s$split2 = _slicedToArray(_s$split, 2),\n                key = _s$split2[0],\n                value = _s$split2[1];\n\n            value = value.substring(0, value.length - 1);\n            infoObj[key] = value;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        node.info = infoObj;\n      } catch (e) {// console.log(`\"${node.name}\" has no info (or we failed getting it)`)\n      } // try to get source...(contains parents)\n\n\n      try {\n        var source = ctx.annotations().source();\n        getParentsFromSource(source, node);\n      } catch (e) {\n        console.log(\"\\\"\".concat(node.name, \"\\\" has no sources (or we failed getting them).\"));\n      }\n\n      this.node_map[node.name] = node;\n    }\n  }]);\n\n  return Formatter;\n}(_tptp_v7_0_0_0Listener[\"default\"]); // must be a higher order function so it can take in s as input...\n\n\nfunction nodeToGV(s) {\n  return function (node) {\n    if (node.children.length == 0 && node.parents.length == 0) {\n      return;\n    }\n\n    s.push(\"\".concat(node.name, \" [\\n\\t\\t\\tfixedsize=true,\\n\\t\\t\\tlabel=\\\"\").concat(node.graphviz.invis ? \"\" : node.name, \"\\\",\\n\\t\\t\\t\").concat(node.graphviz.invis ? \"style=invis,\" : \"\", \"\\n\\t\\t\\tshape=\").concat(node.graphviz.invis ? \"point\" : node.graphviz.shape, \",\\n\\t\\t\\tcolor=\\\"\").concat(node.graphviz.color, \"\\\",\\n\\t\\t\\tfillcolor=\\\"\").concat(node.graphviz.fillcolor, \"\\\",\\n\\t\\t\\twidth=\\\"\").concat(node.graphviz.width, \"\\\",\\n\\t\\t\\theight=\\\"\").concat(node.graphviz.height, \"\\\",\\n\\t\\t\\tpenwidth=\\\"3.0\\\"\\n\\t\\t]\"));\n    var arrowOrNot = node.graphviz.invis ? \" [dir=none] \" : \"\";\n    node.parents.forEach(function (p) {\n      s.push(p + \" -> \" + node.name + arrowOrNot);\n    });\n  };\n} // nodes is a JSON object where the keys are node names.\n// and the values are the JSON objects of the nodes.\n\n\nvar proofToGV = function proofToGV(nodes) {\n  // A higher order function which returns a function from\n  // a node to whether or not that node should be in the top row of that type.\n  function isTopRow(type) {\n    return function (node) {\n      return node.parents.every(function (parentName) {\n        var parent = nodes[parentName];\n\n        if (parent === undefined) {\n          return false;\n        }\n\n        var parentType = nodes[parentName].type;\n        return parentType != type || top_row.includes(parent);\n      });\n    };\n  }\n\n  var list = Object.values(nodes); // will become string segments of the \"dot\" file graphviz file.\n\n  var s = [];\n  var top_row = list.filter(function (e) {\n    return e.parents.length == 0;\n  });\n  var others = list.filter(function (e) {\n    return e.parents.length != 0;\n  });\n  var ns = {}; // namespace for simplifying redundant ops on thf/tff/tcf/fof/cnf...\n\n  var langs = [\"thf\", \"tff\", \"tcf\", \"fof\", \"cnf\"];\n\n  var _loop = function _loop() {\n    var lang = _langs[_i2];\n    ns[lang] = others.filter(function (e) {\n      return e.type == lang;\n    });\n    ns[\"top_\".concat(lang)] = ns[lang].filter(isTopRow(lang));\n  };\n\n  for (var _i2 = 0, _langs = langs; _i2 < _langs.length; _i2++) {\n    _loop();\n  }\n\n  s.push(\"digraph G {\");\n  s.push(\"node [style=filled];\");\n  s.push(\"newrank=\\\"true\\\"\"); //begin Top Row...\n\n  s.push(\"subgraph clusterAxioms {\");\n  s.push(\"pencolor=transparent\");\n  top_row.forEach(nodeToGV(s));\n  s.push(\"{rank=same; \" + top_row.map(function (e) {\n    return e.name;\n  }).join(' ') + \"}\");\n  s.push(\"}\"); //end Top Row\n\n  for (var _i3 = 0, _langs2 = langs; _i3 < _langs2.length; _i3++) {\n    var lang = _langs2[_i3];\n    s.push(\"subgraph cluster\".concat(lang, \"s {\"));\n    s.push(\"pencolor=transparent\");\n    ns[lang].forEach(nodeToGV(s));\n    s.push(\"{rank=same; \" + ns[\"top_\".concat(lang)].map(function (e) {\n      return e.name;\n    }).join(' ') + \"}\");\n    s.push(\"}\");\n  }\n\n  s.push(\"}\");\n  return s.join('\\n');\n};\n\nexports.proofToGV = proofToGV;\n\nvar parseProof = function parseProof(proofText) {\n  var chars = new antlr4.InputStream(proofText);\n  var lexer = new _tptp_v7_0_0_0Lexer[\"default\"](chars);\n  var tokens = new antlr4.CommonTokenStream(lexer);\n  var parser = new _tptp_v7_0_0_0Parser[\"default\"](tokens); // parser.removeErrorListeners();\n\n  parser.buildParseTrees = true;\n  var formatter = new Formatter();\n  var tree;\n  console.log(\"Beginning parsing...\");\n\n  while (tree = parser.tptp_input()) {\n    if (tree.getText() == \"<EOF>\") break;\n    antlr4.tree.ParseTreeWalker.DEFAULT.walk(formatter, tree);\n  }\n\n  console.log(\"Finished parsing!\");\n  var nm = formatter.node_map; // post-processing of node-map. \n\n  for (var _i4 = 0, _Object$keys = Object.keys(nm); _i4 < _Object$keys.length; _i4++) {\n    var name = _Object$keys[_i4];\n    var node = nm[name];\n    node.graphviz = {\n      shape: getNodeShape(node),\n      color: getNodeColor(node),\n      fillcolor: \"grey\"\n    };\n\n    if (node.info['interesting'] !== undefined) {\n      node.graphviz.width = scaleFromInterestingness(node.info.interesting);\n      node.graphviz.height = scaleFromInterestingness(node.info.interesting);\n    }\n\n    if (node.children === undefined) {\n      node.children = [];\n    }\n\n    var parentsCopy = Array.from(node['parents']);\n\n    for (var _i5 = 0, _parentsCopy = parentsCopy; _i5 < _parentsCopy.length; _i5++) {\n      var parentName = _parentsCopy[_i5];\n\n      if (parentName in nm) {\n        if (nm[parentName][\"children\"] === undefined) {\n          nm[parentName][\"children\"] = [name];\n        } else {\n          nm[parentName][\"children\"].push(name);\n        }\n      } else {\n        console.log(\"Error: \".concat(parentName, \" was a parentNode of \").concat(node[\"name\"], \", but is not in the map!\")); // remove the parent.\n\n        while (node['parents'].includes(parentName)) {\n          console.log(\"Removing \".concat(parentName, \" from \").concat(node.name, \"'s parents\"));\n          var location = node['parents'].indexOf(parentName);\n          node['parents'].splice(location, 1);\n        }\n      }\n    }\n  }\n\n  return nm;\n};\n\nexports.parseProof = parseProof;\n\n//# sourceURL=webpack:///./static/js/parser.js?");

/***/ })

/******/ });