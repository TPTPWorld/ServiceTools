/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./TPTP-ANTLR4-Grammar/TPTPLexer.js":
/*!******************************************!*\
  !*** ./TPTP-ANTLR4-Grammar/TPTPLexer.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _antlr = _interopRequireDefault(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar serializedATN = [4, 0, 98, 704, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2, 42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47, 7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7, 52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57, 2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2, 63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 2, 68, 7, 68, 2, 69, 7, 69, 2, 70, 7, 70, 2, 71, 7, 71, 2, 72, 7, 72, 2, 73, 7, 73, 2, 74, 7, 74, 2, 75, 7, 75, 2, 76, 7, 76, 2, 77, 7, 77, 2, 78, 7, 78, 2, 79, 7, 79, 2, 80, 7, 80, 2, 81, 7, 81, 2, 82, 7, 82, 2, 83, 7, 83, 2, 84, 7, 84, 2, 85, 7, 85, 2, 86, 7, 86, 2, 87, 7, 87, 2, 88, 7, 88, 2, 89, 7, 89, 2, 90, 7, 90, 2, 91, 7, 91, 2, 92, 7, 92, 2, 93, 7, 93, 2, 94, 7, 94, 2, 95, 7, 95, 2, 96, 7, 96, 2, 97, 7, 97, 2, 98, 7, 98, 2, 99, 7, 99, 2, 100, 7, 100, 2, 101, 7, 101, 2, 102, 7, 102, 2, 103, 7, 103, 2, 104, 7, 104, 2, 105, 7, 105, 2, 106, 7, 106, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 1, 5, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1, 7, 1, 7, 1, 8, 1, 8, 1, 9, 1, 9, 1, 10, 1, 10, 1, 11, 1, 11, 1, 12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1, 17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 30, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 33, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40, 1, 40, 3, 40, 449, 8, 40, 1, 41, 1, 41, 1, 41, 3, 41, 454, 8, 41, 1, 42, 1, 42, 1, 43, 1, 43, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 47, 1, 47, 1, 48, 1, 48, 1, 48, 1, 48, 3, 48, 472, 8, 48, 1, 49, 1, 49, 1, 50, 1, 50, 1, 51, 1, 51, 1, 51, 1, 51, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1, 53, 1, 54, 1, 54, 1, 54, 1, 54, 1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1, 58, 1, 58, 1, 58, 1, 59, 1, 59, 1, 59, 1, 60, 1, 60, 1, 60, 1, 61, 1, 61, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 66, 1, 66, 1, 67, 1, 67, 1, 67, 1, 67, 1, 68, 1, 68, 1, 68, 1, 69, 1, 69, 1, 69, 1, 69, 1, 70, 1, 70, 1, 70, 1, 71, 1, 71, 1, 71, 1, 72, 1, 72, 1, 73, 1, 73, 1, 73, 1, 74, 1, 74, 1, 74, 1, 75, 1, 75, 1, 76, 1, 76, 1, 77, 1, 77, 1, 78, 1, 78, 1, 79, 1, 79, 1, 79, 1, 80, 1, 80, 1, 80, 1, 80, 1, 81, 1, 81, 3, 81, 565, 8, 81, 1, 82, 1, 82, 1, 82, 1, 83, 1, 83, 3, 83, 572, 8, 83, 1, 84, 1, 84, 3, 84, 576, 8, 84, 1, 85, 1, 85, 1, 85, 1, 86, 1, 86, 1, 86, 1, 86, 1, 87, 1, 87, 3, 87, 587, 8, 87, 1, 88, 1, 88, 1, 88, 1, 89, 1, 89, 1, 90, 1, 90, 3, 90, 596, 8, 90, 1, 91, 1, 91, 5, 91, 600, 8, 91, 10, 91, 12, 91, 603, 9, 91, 1, 92, 1, 92, 3, 92, 607, 8, 92, 1, 92, 1, 92, 1, 92, 1, 93, 1, 93, 1, 93, 1, 94, 1, 94, 1, 94, 5, 94, 618, 8, 94, 10, 94, 12, 94, 621, 9, 94, 1, 95, 1, 95, 3, 95, 625, 8, 95, 1, 96, 1, 96, 1, 96, 1, 97, 1, 97, 5, 97, 632, 8, 97, 10, 97, 12, 97, 635, 9, 97, 1, 98, 1, 98, 1, 98, 1, 99, 1, 99, 1, 99, 1, 99, 1, 99, 1, 100, 1, 100, 5, 100, 647, 8, 100, 10, 100, 12, 100, 650, 9, 100, 1, 101, 1, 101, 5, 101, 654, 8, 101, 10, 101, 12, 101, 657, 9, 101, 1, 102, 1, 102, 4, 102, 661, 8, 102, 11, 102, 12, 102, 662, 1, 102, 1, 102, 1, 103, 1, 103, 4, 103, 669, 8, 103, 11, 103, 12, 103, 670, 1, 103, 1, 103, 1, 104, 4, 104, 676, 8, 104, 11, 104, 12, 104, 677, 1, 104, 1, 104, 1, 105, 1, 105, 5, 105, 684, 8, 105, 10, 105, 12, 105, 687, 9, 105, 1, 105, 1, 105, 1, 106, 1, 106, 1, 106, 1, 106, 5, 106, 695, 8, 106, 10, 106, 12, 106, 698, 9, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 106, 1, 696, 0, 107, 1, 1, 3, 2, 5, 3, 7, 4, 9, 5, 11, 6, 13, 7, 15, 8, 17, 9, 19, 10, 21, 11, 23, 12, 25, 13, 27, 14, 29, 15, 31, 16, 33, 17, 35, 18, 37, 19, 39, 20, 41, 21, 43, 22, 45, 23, 47, 24, 49, 25, 51, 26, 53, 27, 55, 28, 57, 29, 59, 30, 61, 31, 63, 32, 65, 33, 67, 34, 69, 35, 71, 36, 73, 37, 75, 38, 77, 39, 79, 40, 81, 0, 83, 0, 85, 0, 87, 0, 89, 0, 91, 0, 93, 0, 95, 0, 97, 0, 99, 41, 101, 42, 103, 43, 105, 44, 107, 45, 109, 46, 111, 47, 113, 48, 115, 49, 117, 50, 119, 51, 121, 52, 123, 53, 125, 54, 127, 55, 129, 56, 131, 57, 133, 58, 135, 59, 137, 60, 139, 61, 141, 62, 143, 63, 145, 64, 147, 65, 149, 66, 151, 67, 153, 68, 155, 69, 157, 70, 159, 71, 161, 72, 163, 73, 165, 74, 167, 75, 169, 76, 171, 77, 173, 78, 175, 79, 177, 80, 179, 81, 181, 82, 183, 83, 185, 84, 187, 85, 189, 86, 191, 87, 193, 88, 195, 89, 197, 90, 199, 91, 201, 92, 203, 93, 205, 94, 207, 95, 209, 96, 211, 97, 213, 98, 1, 0, 12, 3, 0, 32, 33, 35, 91, 93, 126, 2, 0, 34, 34, 92, 92, 3, 0, 32, 38, 40, 91, 93, 126, 2, 0, 39, 39, 92, 92, 2, 0, 43, 43, 45, 45, 2, 0, 69, 69, 101, 101, 1, 0, 49, 57, 1, 0, 48, 57, 1, 0, 97, 122, 1, 0, 65, 90, 3, 0, 9, 10, 13, 13, 32, 32, 2, 0, 10, 10, 13, 13, 716, 0, 1, 1, 0, 0, 0, 0, 3, 1, 0, 0, 0, 0, 5, 1, 0, 0, 0, 0, 7, 1, 0, 0, 0, 0, 9, 1, 0, 0, 0, 0, 11, 1, 0, 0, 0, 0, 13, 1, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 17, 1, 0, 0, 0, 0, 19, 1, 0, 0, 0, 0, 21, 1, 0, 0, 0, 0, 23, 1, 0, 0, 0, 0, 25, 1, 0, 0, 0, 0, 27, 1, 0, 0, 0, 0, 29, 1, 0, 0, 0, 0, 31, 1, 0, 0, 0, 0, 33, 1, 0, 0, 0, 0, 35, 1, 0, 0, 0, 0, 37, 1, 0, 0, 0, 0, 39, 1, 0, 0, 0, 0, 41, 1, 0, 0, 0, 0, 43, 1, 0, 0, 0, 0, 45, 1, 0, 0, 0, 0, 47, 1, 0, 0, 0, 0, 49, 1, 0, 0, 0, 0, 51, 1, 0, 0, 0, 0, 53, 1, 0, 0, 0, 0, 55, 1, 0, 0, 0, 0, 57, 1, 0, 0, 0, 0, 59, 1, 0, 0, 0, 0, 61, 1, 0, 0, 0, 0, 63, 1, 0, 0, 0, 0, 65, 1, 0, 0, 0, 0, 67, 1, 0, 0, 0, 0, 69, 1, 0, 0, 0, 0, 71, 1, 0, 0, 0, 0, 73, 1, 0, 0, 0, 0, 75, 1, 0, 0, 0, 0, 77, 1, 0, 0, 0, 0, 79, 1, 0, 0, 0, 0, 99, 1, 0, 0, 0, 0, 101, 1, 0, 0, 0, 0, 103, 1, 0, 0, 0, 0, 105, 1, 0, 0, 0, 0, 107, 1, 0, 0, 0, 0, 109, 1, 0, 0, 0, 0, 111, 1, 0, 0, 0, 0, 113, 1, 0, 0, 0, 0, 115, 1, 0, 0, 0, 0, 117, 1, 0, 0, 0, 0, 119, 1, 0, 0, 0, 0, 121, 1, 0, 0, 0, 0, 123, 1, 0, 0, 0, 0, 125, 1, 0, 0, 0, 0, 127, 1, 0, 0, 0, 0, 129, 1, 0, 0, 0, 0, 131, 1, 0, 0, 0, 0, 133, 1, 0, 0, 0, 0, 135, 1, 0, 0, 0, 0, 137, 1, 0, 0, 0, 0, 139, 1, 0, 0, 0, 0, 141, 1, 0, 0, 0, 0, 143, 1, 0, 0, 0, 0, 145, 1, 0, 0, 0, 0, 147, 1, 0, 0, 0, 0, 149, 1, 0, 0, 0, 0, 151, 1, 0, 0, 0, 0, 153, 1, 0, 0, 0, 0, 155, 1, 0, 0, 0, 0, 157, 1, 0, 0, 0, 0, 159, 1, 0, 0, 0, 0, 161, 1, 0, 0, 0, 0, 163, 1, 0, 0, 0, 0, 165, 1, 0, 0, 0, 0, 167, 1, 0, 0, 0, 0, 169, 1, 0, 0, 0, 0, 171, 1, 0, 0, 0, 0, 173, 1, 0, 0, 0, 0, 175, 1, 0, 0, 0, 0, 177, 1, 0, 0, 0, 0, 179, 1, 0, 0, 0, 0, 181, 1, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 185, 1, 0, 0, 0, 0, 187, 1, 0, 0, 0, 0, 189, 1, 0, 0, 0, 0, 191, 1, 0, 0, 0, 0, 193, 1, 0, 0, 0, 0, 195, 1, 0, 0, 0, 0, 197, 1, 0, 0, 0, 0, 199, 1, 0, 0, 0, 0, 201, 1, 0, 0, 0, 0, 203, 1, 0, 0, 0, 0, 205, 1, 0, 0, 0, 0, 207, 1, 0, 0, 0, 0, 209, 1, 0, 0, 0, 0, 211, 1, 0, 0, 0, 0, 213, 1, 0, 0, 0, 1, 215, 1, 0, 0, 0, 3, 220, 1, 0, 0, 0, 5, 222, 1, 0, 0, 0, 7, 225, 1, 0, 0, 0, 9, 230, 1, 0, 0, 0, 11, 235, 1, 0, 0, 0, 13, 240, 1, 0, 0, 0, 15, 245, 1, 0, 0, 0, 17, 250, 1, 0, 0, 0, 19, 252, 1, 0, 0, 0, 21, 254, 1, 0, 0, 0, 23, 256, 1, 0, 0, 0, 25, 258, 1, 0, 0, 0, 27, 260, 1, 0, 0, 0, 29, 266, 1, 0, 0, 0, 31, 269, 1, 0, 0, 0, 33, 273, 1, 0, 0, 0, 35, 277, 1, 0, 0, 0, 37, 281, 1, 0, 0, 0, 39, 283, 1, 0, 0, 0, 41, 285, 1, 0, 0, 0, 43, 287, 1, 0, 0, 0, 45, 290, 1, 0, 0, 0, 47, 293, 1, 0, 0, 0, 49, 304, 1, 0, 0, 0, 51, 316, 1, 0, 0, 0, 53, 322, 1, 0, 0, 0, 55, 330, 1, 0, 0, 0, 57, 339, 1, 0, 0, 0, 59, 352, 1, 0, 0, 0, 61, 360, 1, 0, 0, 0, 63, 368, 1, 0, 0, 0, 65, 381, 1, 0, 0, 0, 67, 393, 1, 0, 0, 0, 69, 406, 1, 0, 0, 0, 71, 415, 1, 0, 0, 0, 73, 421, 1, 0, 0, 0, 75, 427, 1, 0, 0, 0, 77, 433, 1, 0, 0, 0, 79, 439, 1, 0, 0, 0, 81, 448, 1, 0, 0, 0, 83, 453, 1, 0, 0, 0, 85, 455, 1, 0, 0, 0, 87, 457, 1, 0, 0, 0, 89, 459, 1, 0, 0, 0, 91, 461, 1, 0, 0, 0, 93, 463, 1, 0, 0, 0, 95, 465, 1, 0, 0, 0, 97, 471, 1, 0, 0, 0, 99, 473, 1, 0, 0, 0, 101, 475, 1, 0, 0, 0, 103, 477, 1, 0, 0, 0, 105, 481, 1, 0, 0, 0, 107, 484, 1, 0, 0, 0, 109, 487, 1, 0, 0, 0, 111, 491, 1, 0, 0, 0, 113, 494, 1, 0, 0, 0, 115, 497, 1, 0, 0, 0, 117, 499, 1, 0, 0, 0, 119, 502, 1, 0, 0, 0, 121, 505, 1, 0, 0, 0, 123, 508, 1, 0, 0, 0, 125, 510, 1, 0, 0, 0, 127, 512, 1, 0, 0, 0, 129, 515, 1, 0, 0, 0, 131, 518, 1, 0, 0, 0, 133, 520, 1, 0, 0, 0, 135, 522, 1, 0, 0, 0, 137, 526, 1, 0, 0, 0, 139, 529, 1, 0, 0, 0, 141, 533, 1, 0, 0, 0, 143, 536, 1, 0, 0, 0, 145, 539, 1, 0, 0, 0, 147, 541, 1, 0, 0, 0, 149, 544, 1, 0, 0, 0, 151, 547, 1, 0, 0, 0, 153, 549, 1, 0, 0, 0, 155, 551, 1, 0, 0, 0, 157, 553, 1, 0, 0, 0, 159, 555, 1, 0, 0, 0, 161, 558, 1, 0, 0, 0, 163, 564, 1, 0, 0, 0, 165, 566, 1, 0, 0, 0, 167, 571, 1, 0, 0, 0, 169, 575, 1, 0, 0, 0, 171, 577, 1, 0, 0, 0, 173, 580, 1, 0, 0, 0, 175, 586, 1, 0, 0, 0, 177, 588, 1, 0, 0, 0, 179, 591, 1, 0, 0, 0, 181, 595, 1, 0, 0, 0, 183, 597, 1, 0, 0, 0, 185, 606, 1, 0, 0, 0, 187, 611, 1, 0, 0, 0, 189, 614, 1, 0, 0, 0, 191, 624, 1, 0, 0, 0, 193, 626, 1, 0, 0, 0, 195, 629, 1, 0, 0, 0, 197, 636, 1, 0, 0, 0, 199, 639, 1, 0, 0, 0, 201, 644, 1, 0, 0, 0, 203, 651, 1, 0, 0, 0, 205, 658, 1, 0, 0, 0, 207, 666, 1, 0, 0, 0, 209, 675, 1, 0, 0, 0, 211, 681, 1, 0, 0, 0, 213, 690, 1, 0, 0, 0, 215, 216, 5, 116, 0, 0, 216, 217, 5, 112, 0, 0, 217, 218, 5, 105, 0, 0, 218, 219, 5, 40, 0, 0, 219, 2, 1, 0, 0, 0, 220, 221, 5, 44, 0, 0, 221, 4, 1, 0, 0, 0, 222, 223, 5, 41, 0, 0, 223, 224, 5, 46, 0, 0, 224, 6, 1, 0, 0, 0, 225, 226, 5, 116, 0, 0, 226, 227, 5, 104, 0, 0, 227, 228, 5, 102, 0, 0, 228, 229, 5, 40, 0, 0, 229, 8, 1, 0, 0, 0, 230, 231, 5, 116, 0, 0, 231, 232, 5, 102, 0, 0, 232, 233, 5, 102, 0, 0, 233, 234, 5, 40, 0, 0, 234, 10, 1, 0, 0, 0, 235, 236, 5, 116, 0, 0, 236, 237, 5, 99, 0, 0, 237, 238, 5, 102, 0, 0, 238, 239, 5, 40, 0, 0, 239, 12, 1, 0, 0, 0, 240, 241, 5, 102, 0, 0, 241, 242, 5, 111, 0, 0, 242, 243, 5, 102, 0, 0, 243, 244, 5, 40, 0, 0, 244, 14, 1, 0, 0, 0, 245, 246, 5, 99, 0, 0, 246, 247, 5, 110, 0, 0, 247, 248, 5, 102, 0, 0, 248, 249, 5, 40, 0, 0, 249, 16, 1, 0, 0, 0, 250, 251, 5, 40, 0, 0, 251, 18, 1, 0, 0, 0, 252, 253, 5, 41, 0, 0, 253, 20, 1, 0, 0, 0, 254, 255, 5, 91, 0, 0, 255, 22, 1, 0, 0, 0, 256, 257, 5, 93, 0, 0, 257, 24, 1, 0, 0, 0, 258, 259, 5, 58, 0, 0, 259, 26, 1, 0, 0, 0, 260, 261, 5, 36, 0, 0, 261, 262, 5, 108, 0, 0, 262, 263, 5, 101, 0, 0, 263, 264, 5, 116, 0, 0, 264, 265, 5, 40, 0, 0, 265, 28, 1, 0, 0, 0, 266, 267, 5, 91, 0, 0, 267, 268, 5, 93, 0, 0, 268, 30, 1, 0, 0, 0, 269, 270, 5, 91, 0, 0, 270, 271, 5, 46, 0, 0, 271, 272, 5, 93, 0, 0, 272, 32, 1, 0, 0, 0, 273, 274, 5, 60, 0, 0, 274, 275, 5, 46, 0, 0, 275, 276, 5, 62, 0, 0, 276, 34, 1, 0, 0, 0, 277, 278, 5, 123, 0, 0, 278, 279, 5, 46, 0, 0, 279, 280, 5, 125, 0, 0, 280, 36, 1, 0, 0, 0, 281, 282, 5, 60, 0, 0, 282, 38, 1, 0, 0, 0, 283, 284, 5, 123, 0, 0, 284, 40, 1, 0, 0, 0, 285, 286, 5, 125, 0, 0, 286, 42, 1, 0, 0, 0, 287, 288, 5, 41, 0, 0, 288, 289, 5, 125, 0, 0, 289, 44, 1, 0, 0, 0, 290, 291, 5, 123, 0, 0, 291, 292, 5, 125, 0, 0, 292, 46, 1, 0, 0, 0, 293, 294, 5, 105, 0, 0, 294, 295, 5, 110, 0, 0, 295, 296, 5, 102, 0, 0, 296, 297, 5, 101, 0, 0, 297, 298, 5, 114, 0, 0, 298, 299, 5, 101, 0, 0, 299, 300, 5, 110, 0, 0, 300, 301, 5, 99, 0, 0, 301, 302, 5, 101, 0, 0, 302, 303, 5, 40, 0, 0, 303, 48, 1, 0, 0, 0, 304, 305, 5, 105, 0, 0, 305, 306, 5, 110, 0, 0, 306, 307, 5, 116, 0, 0, 307, 308, 5, 114, 0, 0, 308, 309, 5, 111, 0, 0, 309, 310, 5, 100, 0, 0, 310, 311, 5, 117, 0, 0, 311, 312, 5, 99, 0, 0, 312, 313, 5, 101, 0, 0, 313, 314, 5, 100, 0, 0, 314, 315, 5, 40, 0, 0, 315, 50, 1, 0, 0, 0, 316, 317, 5, 102, 0, 0, 317, 318, 5, 105, 0, 0, 318, 319, 5, 108, 0, 0, 319, 320, 5, 101, 0, 0, 320, 321, 5, 40, 0, 0, 321, 52, 1, 0, 0, 0, 322, 323, 5, 116, 0, 0, 323, 324, 5, 104, 0, 0, 324, 325, 5, 101, 0, 0, 325, 326, 5, 111, 0, 0, 326, 327, 5, 114, 0, 0, 327, 328, 5, 121, 0, 0, 328, 329, 5, 40, 0, 0, 329, 54, 1, 0, 0, 0, 330, 331, 5, 99, 0, 0, 331, 332, 5, 114, 0, 0, 332, 333, 5, 101, 0, 0, 333, 334, 5, 97, 0, 0, 334, 335, 5, 116, 0, 0, 335, 336, 5, 111, 0, 0, 336, 337, 5, 114, 0, 0, 337, 338, 5, 40, 0, 0, 338, 56, 1, 0, 0, 0, 339, 340, 5, 100, 0, 0, 340, 341, 5, 101, 0, 0, 341, 342, 5, 115, 0, 0, 342, 343, 5, 99, 0, 0, 343, 344, 5, 114, 0, 0, 344, 345, 5, 105, 0, 0, 345, 346, 5, 112, 0, 0, 346, 347, 5, 116, 0, 0, 347, 348, 5, 105, 0, 0, 348, 349, 5, 111, 0, 0, 349, 350, 5, 110, 0, 0, 350, 351, 5, 40, 0, 0, 351, 58, 1, 0, 0, 0, 352, 353, 5, 105, 0, 0, 353, 354, 5, 113, 0, 0, 354, 355, 5, 117, 0, 0, 355, 356, 5, 111, 0, 0, 356, 357, 5, 116, 0, 0, 357, 358, 5, 101, 0, 0, 358, 359, 5, 40, 0, 0, 359, 60, 1, 0, 0, 0, 360, 361, 5, 115, 0, 0, 361, 362, 5, 116, 0, 0, 362, 363, 5, 97, 0, 0, 363, 364, 5, 116, 0, 0, 364, 365, 5, 117, 0, 0, 365, 366, 5, 115, 0, 0, 366, 367, 5, 40, 0, 0, 367, 62, 1, 0, 0, 0, 368, 369, 5, 97, 0, 0, 369, 370, 5, 115, 0, 0, 370, 371, 5, 115, 0, 0, 371, 372, 5, 117, 0, 0, 372, 373, 5, 109, 0, 0, 373, 374, 5, 112, 0, 0, 374, 375, 5, 116, 0, 0, 375, 376, 5, 105, 0, 0, 376, 377, 5, 111, 0, 0, 377, 378, 5, 110, 0, 0, 378, 379, 5, 115, 0, 0, 379, 380, 5, 40, 0, 0, 380, 64, 1, 0, 0, 0, 381, 382, 5, 114, 0, 0, 382, 383, 5, 101, 0, 0, 383, 384, 5, 102, 0, 0, 384, 385, 5, 117, 0, 0, 385, 386, 5, 116, 0, 0, 386, 387, 5, 97, 0, 0, 387, 388, 5, 116, 0, 0, 388, 389, 5, 105, 0, 0, 389, 390, 5, 111, 0, 0, 390, 391, 5, 110, 0, 0, 391, 392, 5, 40, 0, 0, 392, 66, 1, 0, 0, 0, 393, 394, 5, 110, 0, 0, 394, 395, 5, 101, 0, 0, 395, 396, 5, 119, 0, 0, 396, 397, 5, 95, 0, 0, 397, 398, 5, 115, 0, 0, 398, 399, 5, 121, 0, 0, 399, 400, 5, 109, 0, 0, 400, 401, 5, 98, 0, 0, 401, 402, 5, 111, 0, 0, 402, 403, 5, 108, 0, 0, 403, 404, 5, 115, 0, 0, 404, 405, 5, 40, 0, 0, 405, 68, 1, 0, 0, 0, 406, 407, 5, 105, 0, 0, 407, 408, 5, 110, 0, 0, 408, 409, 5, 99, 0, 0, 409, 410, 5, 108, 0, 0, 410, 411, 5, 117, 0, 0, 411, 412, 5, 100, 0, 0, 412, 413, 5, 101, 0, 0, 413, 414, 5, 40, 0, 0, 414, 70, 1, 0, 0, 0, 415, 416, 5, 36, 0, 0, 416, 417, 5, 116, 0, 0, 417, 418, 5, 104, 0, 0, 418, 419, 5, 102, 0, 0, 419, 420, 5, 40, 0, 0, 420, 72, 1, 0, 0, 0, 421, 422, 5, 36, 0, 0, 422, 423, 5, 116, 0, 0, 423, 424, 5, 102, 0, 0, 424, 425, 5, 102, 0, 0, 425, 426, 5, 40, 0, 0, 426, 74, 1, 0, 0, 0, 427, 428, 5, 36, 0, 0, 428, 429, 5, 102, 0, 0, 429, 430, 5, 111, 0, 0, 430, 431, 5, 102, 0, 0, 431, 432, 5, 40, 0, 0, 432, 76, 1, 0, 0, 0, 433, 434, 5, 36, 0, 0, 434, 435, 5, 99, 0, 0, 435, 436, 5, 110, 0, 0, 436, 437, 5, 102, 0, 0, 437, 438, 5, 40, 0, 0, 438, 78, 1, 0, 0, 0, 439, 440, 5, 36, 0, 0, 440, 441, 5, 102, 0, 0, 441, 442, 5, 111, 0, 0, 442, 443, 5, 116, 0, 0, 443, 444, 5, 40, 0, 0, 444, 80, 1, 0, 0, 0, 445, 449, 7, 0, 0, 0, 446, 447, 5, 92, 0, 0, 447, 449, 7, 1, 0, 0, 448, 445, 1, 0, 0, 0, 448, 446, 1, 0, 0, 0, 449, 82, 1, 0, 0, 0, 450, 454, 7, 2, 0, 0, 451, 452, 5, 92, 0, 0, 452, 454, 7, 3, 0, 0, 453, 450, 1, 0, 0, 0, 453, 451, 1, 0, 0, 0, 454, 84, 1, 0, 0, 0, 455, 456, 7, 4, 0, 0, 456, 86, 1, 0, 0, 0, 457, 458, 7, 5, 0, 0, 458, 88, 1, 0, 0, 0, 459, 460, 7, 6, 0, 0, 460, 90, 1, 0, 0, 0, 461, 462, 7, 7, 0, 0, 462, 92, 1, 0, 0, 0, 463, 464, 7, 8, 0, 0, 464, 94, 1, 0, 0, 0, 465, 466, 7, 9, 0, 0, 466, 96, 1, 0, 0, 0, 467, 472, 3, 93, 46, 0, 468, 472, 3, 95, 47, 0, 469, 472, 3, 91, 45, 0, 470, 472, 5, 95, 0, 0, 471, 467, 1, 0, 0, 0, 471, 468, 1, 0, 0, 0, 471, 469, 1, 0, 0, 0, 471, 470, 1, 0, 0, 0, 472, 98, 1, 0, 0, 0, 473, 474, 5, 124, 0, 0, 474, 100, 1, 0, 0, 0, 475, 476, 5, 38, 0, 0, 476, 102, 1, 0, 0, 0, 477, 478, 5, 60, 0, 0, 478, 479, 5, 61, 0, 0, 479, 480, 5, 62, 0, 0, 480, 104, 1, 0, 0, 0, 481, 482, 5, 61, 0, 0, 482, 483, 5, 62, 0, 0, 483, 106, 1, 0, 0, 0, 484, 485, 5, 60, 0, 0, 485, 486, 5, 61, 0, 0, 486, 108, 1, 0, 0, 0, 487, 488, 5, 60, 0, 0, 488, 489, 5, 126, 0, 0, 489, 490, 5, 62, 0, 0, 490, 110, 1, 0, 0, 0, 491, 492, 5, 126, 0, 0, 492, 493, 5, 124, 0, 0, 493, 112, 1, 0, 0, 0, 494, 495, 5, 126, 0, 0, 495, 496, 5, 38, 0, 0, 496, 114, 1, 0, 0, 0, 497, 498, 5, 126, 0, 0, 498, 116, 1, 0, 0, 0, 499, 500, 5, 33, 0, 0, 500, 501, 5, 33, 0, 0, 501, 118, 1, 0, 0, 0, 502, 503, 5, 33, 0, 0, 503, 504, 5, 62, 0, 0, 504, 120, 1, 0, 0, 0, 505, 506, 5, 33, 0, 0, 506, 507, 5, 61, 0, 0, 507, 122, 1, 0, 0, 0, 508, 509, 5, 61, 0, 0, 509, 124, 1, 0, 0, 0, 510, 511, 5, 33, 0, 0, 511, 126, 1, 0, 0, 0, 512, 513, 5, 63, 0, 0, 513, 514, 5, 63, 0, 0, 514, 128, 1, 0, 0, 0, 515, 516, 5, 63, 0, 0, 516, 517, 5, 42, 0, 0, 517, 130, 1, 0, 0, 0, 518, 519, 5, 63, 0, 0, 519, 132, 1, 0, 0, 0, 520, 521, 5, 94, 0, 0, 521, 134, 1, 0, 0, 0, 522, 523, 5, 64, 0, 0, 523, 524, 5, 64, 0, 0, 524, 525, 5, 43, 0, 0, 525, 136, 1, 0, 0, 0, 526, 527, 5, 64, 0, 0, 527, 528, 5, 43, 0, 0, 528, 138, 1, 0, 0, 0, 529, 530, 5, 64, 0, 0, 530, 531, 5, 64, 0, 0, 531, 532, 5, 45, 0, 0, 532, 140, 1, 0, 0, 0, 533, 534, 5, 64, 0, 0, 534, 535, 5, 45, 0, 0, 535, 142, 1, 0, 0, 0, 536, 537, 5, 64, 0, 0, 537, 538, 5, 61, 0, 0, 538, 144, 1, 0, 0, 0, 539, 540, 5, 64, 0, 0, 540, 146, 1, 0, 0, 0, 541, 542, 5, 58, 0, 0, 542, 543, 5, 61, 0, 0, 543, 148, 1, 0, 0, 0, 544, 545, 5, 61, 0, 0, 545, 546, 5, 61, 0, 0, 546, 150, 1, 0, 0, 0, 547, 548, 5, 62, 0, 0, 548, 152, 1, 0, 0, 0, 549, 550, 5, 42, 0, 0, 550, 154, 1, 0, 0, 0, 551, 552, 5, 43, 0, 0, 552, 156, 1, 0, 0, 0, 553, 554, 5, 35, 0, 0, 554, 158, 1, 0, 0, 0, 555, 556, 5, 60, 0, 0, 556, 557, 5, 60, 0, 0, 557, 160, 1, 0, 0, 0, 558, 559, 5, 45, 0, 0, 559, 560, 5, 45, 0, 0, 560, 561, 5, 62, 0, 0, 561, 162, 1, 0, 0, 0, 562, 565, 3, 165, 82, 0, 563, 565, 3, 167, 83, 0, 564, 562, 1, 0, 0, 0, 564, 563, 1, 0, 0, 0, 565, 164, 1, 0, 0, 0, 566, 567, 3, 85, 42, 0, 567, 568, 3, 167, 83, 0, 568, 166, 1, 0, 0, 0, 569, 572, 3, 187, 93, 0, 570, 572, 3, 185, 92, 0, 571, 569, 1, 0, 0, 0, 571, 570, 1, 0, 0, 0, 572, 168, 1, 0, 0, 0, 573, 576, 3, 171, 85, 0, 574, 576, 3, 173, 86, 0, 575, 573, 1, 0, 0, 0, 575, 574, 1, 0, 0, 0, 576, 170, 1, 0, 0, 0, 577, 578, 3, 85, 42, 0, 578, 579, 3, 173, 86, 0, 579, 172, 1, 0, 0, 0, 580, 581, 3, 181, 90, 0, 581, 582, 5, 47, 0, 0, 582, 583, 3, 183, 91, 0, 583, 174, 1, 0, 0, 0, 584, 587, 3, 177, 88, 0, 585, 587, 3, 179, 89, 0, 586, 584, 1, 0, 0, 0, 586, 585, 1, 0, 0, 0, 587, 176, 1, 0, 0, 0, 588, 589, 3, 85, 42, 0, 589, 590, 3, 179, 89, 0, 590, 178, 1, 0, 0, 0, 591, 592, 3, 181, 90, 0, 592, 180, 1, 0, 0, 0, 593, 596, 5, 48, 0, 0, 594, 596, 3, 183, 91, 0, 595, 593, 1, 0, 0, 0, 595, 594, 1, 0, 0, 0, 596, 182, 1, 0, 0, 0, 597, 601, 3, 89, 44, 0, 598, 600, 3, 91, 45, 0, 599, 598, 1, 0, 0, 0, 600, 603, 1, 0, 0, 0, 601, 599, 1, 0, 0, 0, 601, 602, 1, 0, 0, 0, 602, 184, 1, 0, 0, 0, 603, 601, 1, 0, 0, 0, 604, 607, 3, 181, 90, 0, 605, 607, 3, 187, 93, 0, 606, 604, 1, 0, 0, 0, 606, 605, 1, 0, 0, 0, 607, 608, 1, 0, 0, 0, 608, 609, 3, 87, 43, 0, 609, 610, 3, 191, 95, 0, 610, 186, 1, 0, 0, 0, 611, 612, 3, 181, 90, 0, 612, 613, 3, 189, 94, 0, 613, 188, 1, 0, 0, 0, 614, 615, 5, 46, 0, 0, 615, 619, 3, 91, 45, 0, 616, 618, 3, 91, 45, 0, 617, 616, 1, 0, 0, 0, 618, 621, 1, 0, 0, 0, 619, 617, 1, 0, 0, 0, 619, 620, 1, 0, 0, 0, 620, 190, 1, 0, 0, 0, 621, 619, 1, 0, 0, 0, 622, 625, 3, 193, 96, 0, 623, 625, 3, 195, 97, 0, 624, 622, 1, 0, 0, 0, 624, 623, 1, 0, 0, 0, 625, 192, 1, 0, 0, 0, 626, 627, 3, 85, 42, 0, 627, 628, 3, 195, 97, 0, 628, 194, 1, 0, 0, 0, 629, 633, 3, 91, 45, 0, 630, 632, 3, 91, 45, 0, 631, 630, 1, 0, 0, 0, 632, 635, 1, 0, 0, 0, 633, 631, 1, 0, 0, 0, 633, 634, 1, 0, 0, 0, 634, 196, 1, 0, 0, 0, 635, 633, 1, 0, 0, 0, 636, 637, 5, 36, 0, 0, 637, 638, 3, 203, 101, 0, 638, 198, 1, 0, 0, 0, 639, 640, 5, 36, 0, 0, 640, 641, 5, 36, 0, 0, 641, 642, 1, 0, 0, 0, 642, 643, 3, 203, 101, 0, 643, 200, 1, 0, 0, 0, 644, 648, 3, 95, 47, 0, 645, 647, 3, 97, 48, 0, 646, 645, 1, 0, 0, 0, 647, 650, 1, 0, 0, 0, 648, 646, 1, 0, 0, 0, 648, 649, 1, 0, 0, 0, 649, 202, 1, 0, 0, 0, 650, 648, 1, 0, 0, 0, 651, 655, 3, 93, 46, 0, 652, 654, 3, 97, 48, 0, 653, 652, 1, 0, 0, 0, 654, 657, 1, 0, 0, 0, 655, 653, 1, 0, 0, 0, 655, 656, 1, 0, 0, 0, 656, 204, 1, 0, 0, 0, 657, 655, 1, 0, 0, 0, 658, 660, 5, 39, 0, 0, 659, 661, 3, 83, 41, 0, 660, 659, 1, 0, 0, 0, 661, 662, 1, 0, 0, 0, 662, 660, 1, 0, 0, 0, 662, 663, 1, 0, 0, 0, 663, 664, 1, 0, 0, 0, 664, 665, 5, 39, 0, 0, 665, 206, 1, 0, 0, 0, 666, 668, 5, 34, 0, 0, 667, 669, 3, 81, 40, 0, 668, 667, 1, 0, 0, 0, 669, 670, 1, 0, 0, 0, 670, 668, 1, 0, 0, 0, 670, 671, 1, 0, 0, 0, 671, 672, 1, 0, 0, 0, 672, 673, 5, 34, 0, 0, 673, 208, 1, 0, 0, 0, 674, 676, 7, 10, 0, 0, 675, 674, 1, 0, 0, 0, 676, 677, 1, 0, 0, 0, 677, 675, 1, 0, 0, 0, 677, 678, 1, 0, 0, 0, 678, 679, 1, 0, 0, 0, 679, 680, 6, 104, 0, 0, 680, 210, 1, 0, 0, 0, 681, 685, 5, 37, 0, 0, 682, 684, 8, 11, 0, 0, 683, 682, 1, 0, 0, 0, 684, 687, 1, 0, 0, 0, 685, 683, 1, 0, 0, 0, 685, 686, 1, 0, 0, 0, 686, 688, 1, 0, 0, 0, 687, 685, 1, 0, 0, 0, 688, 689, 6, 105, 0, 0, 689, 212, 1, 0, 0, 0, 690, 691, 5, 47, 0, 0, 691, 692, 5, 42, 0, 0, 692, 696, 1, 0, 0, 0, 693, 695, 9, 0, 0, 0, 694, 693, 1, 0, 0, 0, 695, 698, 1, 0, 0, 0, 696, 697, 1, 0, 0, 0, 696, 694, 1, 0, 0, 0, 697, 699, 1, 0, 0, 0, 698, 696, 1, 0, 0, 0, 699, 700, 5, 42, 0, 0, 700, 701, 5, 47, 0, 0, 701, 702, 1, 0, 0, 0, 702, 703, 6, 106, 0, 0, 703, 214, 1, 0, 0, 0, 21, 0, 448, 453, 471, 564, 571, 575, 586, 595, 601, 606, 619, 624, 633, 648, 655, 662, 670, 677, 685, 696, 1, 6, 0, 0];\nvar atn = new _antlr[\"default\"].atn.ATNDeserializer().deserialize(serializedATN);\nvar decisionsToDFA = atn.decisionToState.map(function (ds, index) {\n  return new _antlr[\"default\"].dfa.DFA(ds, index);\n});\n\nvar TPTPLexer = /*#__PURE__*/function (_antlr4$Lexer) {\n  _inherits(TPTPLexer, _antlr4$Lexer);\n\n  var _super = _createSuper(TPTPLexer);\n\n  function TPTPLexer(input) {\n    var _this;\n\n    _classCallCheck(this, TPTPLexer);\n\n    _this = _super.call(this, input);\n    _this._interp = new _antlr[\"default\"].atn.LexerATNSimulator(_assertThisInitialized(_this), atn, decisionsToDFA, new _antlr[\"default\"].PredictionContextCache());\n    return _this;\n  }\n\n  _createClass(TPTPLexer, [{\n    key: \"atn\",\n    get: function get() {\n      return atn;\n    }\n  }]);\n\n  return TPTPLexer;\n}(_antlr[\"default\"].Lexer);\n\nexports[\"default\"] = TPTPLexer;\n\n_defineProperty(TPTPLexer, \"grammarFileName\", \"TPTP.g4\");\n\n_defineProperty(TPTPLexer, \"channelNames\", [\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"]);\n\n_defineProperty(TPTPLexer, \"modeNames\", [\"DEFAULT_MODE\"]);\n\n_defineProperty(TPTPLexer, \"literalNames\", [null, \"'tpi('\", \"','\", \"').'\", \"'thf('\", \"'tff('\", \"'tcf('\", \"'fof('\", \"'cnf('\", \"'('\", \"')'\", \"'['\", \"']'\", \"':'\", \"'$let('\", \"'[]'\", \"'[.]'\", \"'<.>'\", \"'{.}'\", \"'<'\", \"'{'\", \"'}'\", \"')}'\", \"'{}'\", \"'inference('\", \"'introduced('\", \"'file('\", \"'theory('\", \"'creator('\", \"'description('\", \"'iquote('\", \"'status('\", \"'assumptions('\", \"'refutation('\", \"'new_symbols('\", \"'include('\", \"'$thf('\", \"'$tff('\", \"'$fof('\", \"'$cnf('\", \"'$fot('\", \"'|'\", \"'&'\", \"'<=>'\", \"'=>'\", \"'<='\", \"'<~>'\", \"'~|'\", \"'~&'\", \"'~'\", \"'!!'\", \"'!>'\", \"'!='\", \"'='\", \"'!'\", \"'??'\", \"'?*'\", \"'?'\", \"'^'\", \"'@@+'\", \"'@+'\", \"'@@-'\", \"'@-'\", \"'@='\", \"'@'\", \"':='\", \"'=='\", \"'>'\", \"'*'\", \"'+'\", \"'#'\", \"'<<'\", \"'-->'\"]);\n\n_defineProperty(TPTPLexer, \"symbolicNames\", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, \"Or\", \"And\", \"Iff\", \"Impl\", \"If\", \"Niff\", \"Nor\", \"Nand\", \"Not\", \"ForallComb\", \"TyForall\", \"Infix_inequality\", \"Infix_equality\", \"Forall\", \"ExistsComb\", \"TyExists\", \"Exists\", \"Lambda\", \"ChoiceComb\", \"Choice\", \"DescriptionComb\", \"Description\", \"EqComb\", \"App\", \"Assignment\", \"Identical\", \"Arrow\", \"Star\", \"Plus\", \"Hash\", \"Subtype_sign\", \"Gentzen_arrow\", \"Real\", \"Signed_real\", \"Unsigned_real\", \"Rational\", \"Signed_rational\", \"Unsigned_rational\", \"Integer\", \"Signed_integer\", \"Unsigned_integer\", \"Decimal\", \"Positive_decimal\", \"Decimal_exponent\", \"Decimal_fraction\", \"Dot_decimal\", \"Exp_integer\", \"Signed_exp_integer\", \"Unsigned_exp_integer\", \"Dollar_word\", \"Dollar_dollar_word\", \"Upper_word\", \"Lower_word\", \"Single_quoted\", \"Distinct_object\", \"WS\", \"Line_comment\", \"Block_comment\"]);\n\n_defineProperty(TPTPLexer, \"ruleNames\", [\"T__0\", \"T__1\", \"T__2\", \"T__3\", \"T__4\", \"T__5\", \"T__6\", \"T__7\", \"T__8\", \"T__9\", \"T__10\", \"T__11\", \"T__12\", \"T__13\", \"T__14\", \"T__15\", \"T__16\", \"T__17\", \"T__18\", \"T__19\", \"T__20\", \"T__21\", \"T__22\", \"T__23\", \"T__24\", \"T__25\", \"T__26\", \"T__27\", \"T__28\", \"T__29\", \"T__30\", \"T__31\", \"T__32\", \"T__33\", \"T__34\", \"T__35\", \"T__36\", \"T__37\", \"T__38\", \"T__39\", \"Do_char\", \"Sq_char\", \"Sign\", \"Exponent\", \"Non_zero_numeric\", \"Numeric\", \"Lower_alpha\", \"Upper_alpha\", \"Alpha_numeric\", \"Or\", \"And\", \"Iff\", \"Impl\", \"If\", \"Niff\", \"Nor\", \"Nand\", \"Not\", \"ForallComb\", \"TyForall\", \"Infix_inequality\", \"Infix_equality\", \"Forall\", \"ExistsComb\", \"TyExists\", \"Exists\", \"Lambda\", \"ChoiceComb\", \"Choice\", \"DescriptionComb\", \"Description\", \"EqComb\", \"App\", \"Assignment\", \"Identical\", \"Arrow\", \"Star\", \"Plus\", \"Hash\", \"Subtype_sign\", \"Gentzen_arrow\", \"Real\", \"Signed_real\", \"Unsigned_real\", \"Rational\", \"Signed_rational\", \"Unsigned_rational\", \"Integer\", \"Signed_integer\", \"Unsigned_integer\", \"Decimal\", \"Positive_decimal\", \"Decimal_exponent\", \"Decimal_fraction\", \"Dot_decimal\", \"Exp_integer\", \"Signed_exp_integer\", \"Unsigned_exp_integer\", \"Dollar_word\", \"Dollar_dollar_word\", \"Upper_word\", \"Lower_word\", \"Single_quoted\", \"Distinct_object\", \"WS\", \"Line_comment\", \"Block_comment\"]);\n\nTPTPLexer.EOF = _antlr[\"default\"].Token.EOF;\nTPTPLexer.T__0 = 1;\nTPTPLexer.T__1 = 2;\nTPTPLexer.T__2 = 3;\nTPTPLexer.T__3 = 4;\nTPTPLexer.T__4 = 5;\nTPTPLexer.T__5 = 6;\nTPTPLexer.T__6 = 7;\nTPTPLexer.T__7 = 8;\nTPTPLexer.T__8 = 9;\nTPTPLexer.T__9 = 10;\nTPTPLexer.T__10 = 11;\nTPTPLexer.T__11 = 12;\nTPTPLexer.T__12 = 13;\nTPTPLexer.T__13 = 14;\nTPTPLexer.T__14 = 15;\nTPTPLexer.T__15 = 16;\nTPTPLexer.T__16 = 17;\nTPTPLexer.T__17 = 18;\nTPTPLexer.T__18 = 19;\nTPTPLexer.T__19 = 20;\nTPTPLexer.T__20 = 21;\nTPTPLexer.T__21 = 22;\nTPTPLexer.T__22 = 23;\nTPTPLexer.T__23 = 24;\nTPTPLexer.T__24 = 25;\nTPTPLexer.T__25 = 26;\nTPTPLexer.T__26 = 27;\nTPTPLexer.T__27 = 28;\nTPTPLexer.T__28 = 29;\nTPTPLexer.T__29 = 30;\nTPTPLexer.T__30 = 31;\nTPTPLexer.T__31 = 32;\nTPTPLexer.T__32 = 33;\nTPTPLexer.T__33 = 34;\nTPTPLexer.T__34 = 35;\nTPTPLexer.T__35 = 36;\nTPTPLexer.T__36 = 37;\nTPTPLexer.T__37 = 38;\nTPTPLexer.T__38 = 39;\nTPTPLexer.T__39 = 40;\nTPTPLexer.Or = 41;\nTPTPLexer.And = 42;\nTPTPLexer.Iff = 43;\nTPTPLexer.Impl = 44;\nTPTPLexer.If = 45;\nTPTPLexer.Niff = 46;\nTPTPLexer.Nor = 47;\nTPTPLexer.Nand = 48;\nTPTPLexer.Not = 49;\nTPTPLexer.ForallComb = 50;\nTPTPLexer.TyForall = 51;\nTPTPLexer.Infix_inequality = 52;\nTPTPLexer.Infix_equality = 53;\nTPTPLexer.Forall = 54;\nTPTPLexer.ExistsComb = 55;\nTPTPLexer.TyExists = 56;\nTPTPLexer.Exists = 57;\nTPTPLexer.Lambda = 58;\nTPTPLexer.ChoiceComb = 59;\nTPTPLexer.Choice = 60;\nTPTPLexer.DescriptionComb = 61;\nTPTPLexer.Description = 62;\nTPTPLexer.EqComb = 63;\nTPTPLexer.App = 64;\nTPTPLexer.Assignment = 65;\nTPTPLexer.Identical = 66;\nTPTPLexer.Arrow = 67;\nTPTPLexer.Star = 68;\nTPTPLexer.Plus = 69;\nTPTPLexer.Hash = 70;\nTPTPLexer.Subtype_sign = 71;\nTPTPLexer.Gentzen_arrow = 72;\nTPTPLexer.Real = 73;\nTPTPLexer.Signed_real = 74;\nTPTPLexer.Unsigned_real = 75;\nTPTPLexer.Rational = 76;\nTPTPLexer.Signed_rational = 77;\nTPTPLexer.Unsigned_rational = 78;\nTPTPLexer.Integer = 79;\nTPTPLexer.Signed_integer = 80;\nTPTPLexer.Unsigned_integer = 81;\nTPTPLexer.Decimal = 82;\nTPTPLexer.Positive_decimal = 83;\nTPTPLexer.Decimal_exponent = 84;\nTPTPLexer.Decimal_fraction = 85;\nTPTPLexer.Dot_decimal = 86;\nTPTPLexer.Exp_integer = 87;\nTPTPLexer.Signed_exp_integer = 88;\nTPTPLexer.Unsigned_exp_integer = 89;\nTPTPLexer.Dollar_word = 90;\nTPTPLexer.Dollar_dollar_word = 91;\nTPTPLexer.Upper_word = 92;\nTPTPLexer.Lower_word = 93;\nTPTPLexer.Single_quoted = 94;\nTPTPLexer.Distinct_object = 95;\nTPTPLexer.WS = 96;\nTPTPLexer.Line_comment = 97;\nTPTPLexer.Block_comment = 98;\n\n//# sourceURL=webpack://idvjs/./TPTP-ANTLR4-Grammar/TPTPLexer.js?");

/***/ }),

/***/ "./TPTP-ANTLR4-Grammar/TPTPListener.js":
/*!*********************************************!*\
  !*** ./TPTP-ANTLR4-Grammar/TPTPListener.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports[\"default\"] = void 0;\n\nvar _antlr = _interopRequireDefault(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\n// This class defines a complete listener for a parse tree produced by TPTPParser.\nvar TPTPListener = /*#__PURE__*/function (_antlr4$tree$ParseTre) {\n  _inherits(TPTPListener, _antlr4$tree$ParseTre);\n\n  var _super = _createSuper(TPTPListener);\n\n  function TPTPListener() {\n    _classCallCheck(this, TPTPListener);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TPTPListener, [{\n    key: \"enterTptp_file\",\n    value: // Enter a parse tree produced by TPTPParser#tptp_file.\n    function enterTptp_file(ctx) {} // Exit a parse tree produced by TPTPParser#tptp_file.\n\n  }, {\n    key: \"exitTptp_file\",\n    value: function exitTptp_file(ctx) {} // Enter a parse tree produced by TPTPParser#tptp_input.\n\n  }, {\n    key: \"enterTptp_input\",\n    value: function enterTptp_input(ctx) {} // Exit a parse tree produced by TPTPParser#tptp_input.\n\n  }, {\n    key: \"exitTptp_input\",\n    value: function exitTptp_input(ctx) {} // Enter a parse tree produced by TPTPParser#annotated_formula.\n\n  }, {\n    key: \"enterAnnotated_formula\",\n    value: function enterAnnotated_formula(ctx) {} // Exit a parse tree produced by TPTPParser#annotated_formula.\n\n  }, {\n    key: \"exitAnnotated_formula\",\n    value: function exitAnnotated_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tpi_annotated.\n\n  }, {\n    key: \"enterTpi_annotated\",\n    value: function enterTpi_annotated(ctx) {} // Exit a parse tree produced by TPTPParser#tpi_annotated.\n\n  }, {\n    key: \"exitTpi_annotated\",\n    value: function exitTpi_annotated(ctx) {} // Enter a parse tree produced by TPTPParser#tpi_formula.\n\n  }, {\n    key: \"enterTpi_formula\",\n    value: function enterTpi_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tpi_formula.\n\n  }, {\n    key: \"exitTpi_formula\",\n    value: function exitTpi_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_annotated.\n\n  }, {\n    key: \"enterThf_annotated\",\n    value: function enterThf_annotated(ctx) {} // Exit a parse tree produced by TPTPParser#thf_annotated.\n\n  }, {\n    key: \"exitThf_annotated\",\n    value: function exitThf_annotated(ctx) {} // Enter a parse tree produced by TPTPParser#tff_annotated.\n\n  }, {\n    key: \"enterTff_annotated\",\n    value: function enterTff_annotated(ctx) {} // Exit a parse tree produced by TPTPParser#tff_annotated.\n\n  }, {\n    key: \"exitTff_annotated\",\n    value: function exitTff_annotated(ctx) {} // Enter a parse tree produced by TPTPParser#tcf_annotated.\n\n  }, {\n    key: \"enterTcf_annotated\",\n    value: function enterTcf_annotated(ctx) {} // Exit a parse tree produced by TPTPParser#tcf_annotated.\n\n  }, {\n    key: \"exitTcf_annotated\",\n    value: function exitTcf_annotated(ctx) {} // Enter a parse tree produced by TPTPParser#fof_annotated.\n\n  }, {\n    key: \"enterFof_annotated\",\n    value: function enterFof_annotated(ctx) {} // Exit a parse tree produced by TPTPParser#fof_annotated.\n\n  }, {\n    key: \"exitFof_annotated\",\n    value: function exitFof_annotated(ctx) {} // Enter a parse tree produced by TPTPParser#cnf_annotated.\n\n  }, {\n    key: \"enterCnf_annotated\",\n    value: function enterCnf_annotated(ctx) {} // Exit a parse tree produced by TPTPParser#cnf_annotated.\n\n  }, {\n    key: \"exitCnf_annotated\",\n    value: function exitCnf_annotated(ctx) {} // Enter a parse tree produced by TPTPParser#annotations.\n\n  }, {\n    key: \"enterAnnotations\",\n    value: function enterAnnotations(ctx) {} // Exit a parse tree produced by TPTPParser#annotations.\n\n  }, {\n    key: \"exitAnnotations\",\n    value: function exitAnnotations(ctx) {} // Enter a parse tree produced by TPTPParser#formula_role.\n\n  }, {\n    key: \"enterFormula_role\",\n    value: function enterFormula_role(ctx) {} // Exit a parse tree produced by TPTPParser#formula_role.\n\n  }, {\n    key: \"exitFormula_role\",\n    value: function exitFormula_role(ctx) {} // Enter a parse tree produced by TPTPParser#thf_formula.\n\n  }, {\n    key: \"enterThf_formula\",\n    value: function enterThf_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_formula.\n\n  }, {\n    key: \"exitThf_formula\",\n    value: function exitThf_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_logic_formula.\n\n  }, {\n    key: \"enterThf_logic_formula\",\n    value: function enterThf_logic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_logic_formula.\n\n  }, {\n    key: \"exitThf_logic_formula\",\n    value: function exitThf_logic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_binary_formula.\n\n  }, {\n    key: \"enterThf_binary_formula\",\n    value: function enterThf_binary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_binary_formula.\n\n  }, {\n    key: \"exitThf_binary_formula\",\n    value: function exitThf_binary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_binary_nonassoc.\n\n  }, {\n    key: \"enterThf_binary_nonassoc\",\n    value: function enterThf_binary_nonassoc(ctx) {} // Exit a parse tree produced by TPTPParser#thf_binary_nonassoc.\n\n  }, {\n    key: \"exitThf_binary_nonassoc\",\n    value: function exitThf_binary_nonassoc(ctx) {} // Enter a parse tree produced by TPTPParser#thf_binary_assoc.\n\n  }, {\n    key: \"enterThf_binary_assoc\",\n    value: function enterThf_binary_assoc(ctx) {} // Exit a parse tree produced by TPTPParser#thf_binary_assoc.\n\n  }, {\n    key: \"exitThf_binary_assoc\",\n    value: function exitThf_binary_assoc(ctx) {} // Enter a parse tree produced by TPTPParser#thf_or_formula.\n\n  }, {\n    key: \"enterThf_or_formula\",\n    value: function enterThf_or_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_or_formula.\n\n  }, {\n    key: \"exitThf_or_formula\",\n    value: function exitThf_or_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_and_formula.\n\n  }, {\n    key: \"enterThf_and_formula\",\n    value: function enterThf_and_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_and_formula.\n\n  }, {\n    key: \"exitThf_and_formula\",\n    value: function exitThf_and_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_apply_formula.\n\n  }, {\n    key: \"enterThf_apply_formula\",\n    value: function enterThf_apply_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_apply_formula.\n\n  }, {\n    key: \"exitThf_apply_formula\",\n    value: function exitThf_apply_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_unit_formula.\n\n  }, {\n    key: \"enterThf_unit_formula\",\n    value: function enterThf_unit_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_unit_formula.\n\n  }, {\n    key: \"exitThf_unit_formula\",\n    value: function exitThf_unit_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_preunit_formula.\n\n  }, {\n    key: \"enterThf_preunit_formula\",\n    value: function enterThf_preunit_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_preunit_formula.\n\n  }, {\n    key: \"exitThf_preunit_formula\",\n    value: function exitThf_preunit_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_unitary_formula.\n\n  }, {\n    key: \"enterThf_unitary_formula\",\n    value: function enterThf_unitary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_unitary_formula.\n\n  }, {\n    key: \"exitThf_unitary_formula\",\n    value: function exitThf_unitary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_quantified_formula.\n\n  }, {\n    key: \"enterThf_quantified_formula\",\n    value: function enterThf_quantified_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_quantified_formula.\n\n  }, {\n    key: \"exitThf_quantified_formula\",\n    value: function exitThf_quantified_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_quantification.\n\n  }, {\n    key: \"enterThf_quantification\",\n    value: function enterThf_quantification(ctx) {} // Exit a parse tree produced by TPTPParser#thf_quantification.\n\n  }, {\n    key: \"exitThf_quantification\",\n    value: function exitThf_quantification(ctx) {} // Enter a parse tree produced by TPTPParser#thf_variable_list.\n\n  }, {\n    key: \"enterThf_variable_list\",\n    value: function enterThf_variable_list(ctx) {} // Exit a parse tree produced by TPTPParser#thf_variable_list.\n\n  }, {\n    key: \"exitThf_variable_list\",\n    value: function exitThf_variable_list(ctx) {} // Enter a parse tree produced by TPTPParser#thf_variable.\n\n  }, {\n    key: \"enterThf_variable\",\n    value: function enterThf_variable(ctx) {} // Exit a parse tree produced by TPTPParser#thf_variable.\n\n  }, {\n    key: \"exitThf_variable\",\n    value: function exitThf_variable(ctx) {} // Enter a parse tree produced by TPTPParser#thf_typed_variable.\n\n  }, {\n    key: \"enterThf_typed_variable\",\n    value: function enterThf_typed_variable(ctx) {} // Exit a parse tree produced by TPTPParser#thf_typed_variable.\n\n  }, {\n    key: \"exitThf_typed_variable\",\n    value: function exitThf_typed_variable(ctx) {} // Enter a parse tree produced by TPTPParser#thf_unary_formula.\n\n  }, {\n    key: \"enterThf_unary_formula\",\n    value: function enterThf_unary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_unary_formula.\n\n  }, {\n    key: \"exitThf_unary_formula\",\n    value: function exitThf_unary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_prefix_unary.\n\n  }, {\n    key: \"enterThf_prefix_unary\",\n    value: function enterThf_prefix_unary(ctx) {} // Exit a parse tree produced by TPTPParser#thf_prefix_unary.\n\n  }, {\n    key: \"exitThf_prefix_unary\",\n    value: function exitThf_prefix_unary(ctx) {} // Enter a parse tree produced by TPTPParser#thf_infix_unary.\n\n  }, {\n    key: \"enterThf_infix_unary\",\n    value: function enterThf_infix_unary(ctx) {} // Exit a parse tree produced by TPTPParser#thf_infix_unary.\n\n  }, {\n    key: \"exitThf_infix_unary\",\n    value: function exitThf_infix_unary(ctx) {} // Enter a parse tree produced by TPTPParser#thf_atomic_formula.\n\n  }, {\n    key: \"enterThf_atomic_formula\",\n    value: function enterThf_atomic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#thf_atomic_formula.\n\n  }, {\n    key: \"exitThf_atomic_formula\",\n    value: function exitThf_atomic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#thf_plain_atomic.\n\n  }, {\n    key: \"enterThf_plain_atomic\",\n    value: function enterThf_plain_atomic(ctx) {} // Exit a parse tree produced by TPTPParser#thf_plain_atomic.\n\n  }, {\n    key: \"exitThf_plain_atomic\",\n    value: function exitThf_plain_atomic(ctx) {} // Enter a parse tree produced by TPTPParser#thf_defined_atomic.\n\n  }, {\n    key: \"enterThf_defined_atomic\",\n    value: function enterThf_defined_atomic(ctx) {} // Exit a parse tree produced by TPTPParser#thf_defined_atomic.\n\n  }, {\n    key: \"exitThf_defined_atomic\",\n    value: function exitThf_defined_atomic(ctx) {} // Enter a parse tree produced by TPTPParser#thf_defined_term.\n\n  }, {\n    key: \"enterThf_defined_term\",\n    value: function enterThf_defined_term(ctx) {} // Exit a parse tree produced by TPTPParser#thf_defined_term.\n\n  }, {\n    key: \"exitThf_defined_term\",\n    value: function exitThf_defined_term(ctx) {} // Enter a parse tree produced by TPTPParser#thf_defined_infix.\n\n  }, {\n    key: \"enterThf_defined_infix\",\n    value: function enterThf_defined_infix(ctx) {} // Exit a parse tree produced by TPTPParser#thf_defined_infix.\n\n  }, {\n    key: \"exitThf_defined_infix\",\n    value: function exitThf_defined_infix(ctx) {} // Enter a parse tree produced by TPTPParser#thf_system_atomic.\n\n  }, {\n    key: \"enterThf_system_atomic\",\n    value: function enterThf_system_atomic(ctx) {} // Exit a parse tree produced by TPTPParser#thf_system_atomic.\n\n  }, {\n    key: \"exitThf_system_atomic\",\n    value: function exitThf_system_atomic(ctx) {} // Enter a parse tree produced by TPTPParser#thf_let.\n\n  }, {\n    key: \"enterThf_let\",\n    value: function enterThf_let(ctx) {} // Exit a parse tree produced by TPTPParser#thf_let.\n\n  }, {\n    key: \"exitThf_let\",\n    value: function exitThf_let(ctx) {} // Enter a parse tree produced by TPTPParser#thf_let_types.\n\n  }, {\n    key: \"enterThf_let_types\",\n    value: function enterThf_let_types(ctx) {} // Exit a parse tree produced by TPTPParser#thf_let_types.\n\n  }, {\n    key: \"exitThf_let_types\",\n    value: function exitThf_let_types(ctx) {} // Enter a parse tree produced by TPTPParser#thf_atom_typing_list.\n\n  }, {\n    key: \"enterThf_atom_typing_list\",\n    value: function enterThf_atom_typing_list(ctx) {} // Exit a parse tree produced by TPTPParser#thf_atom_typing_list.\n\n  }, {\n    key: \"exitThf_atom_typing_list\",\n    value: function exitThf_atom_typing_list(ctx) {} // Enter a parse tree produced by TPTPParser#thf_let_defns.\n\n  }, {\n    key: \"enterThf_let_defns\",\n    value: function enterThf_let_defns(ctx) {} // Exit a parse tree produced by TPTPParser#thf_let_defns.\n\n  }, {\n    key: \"exitThf_let_defns\",\n    value: function exitThf_let_defns(ctx) {} // Enter a parse tree produced by TPTPParser#thf_let_defn.\n\n  }, {\n    key: \"enterThf_let_defn\",\n    value: function enterThf_let_defn(ctx) {} // Exit a parse tree produced by TPTPParser#thf_let_defn.\n\n  }, {\n    key: \"exitThf_let_defn\",\n    value: function exitThf_let_defn(ctx) {} // Enter a parse tree produced by TPTPParser#thf_let_defn_list.\n\n  }, {\n    key: \"enterThf_let_defn_list\",\n    value: function enterThf_let_defn_list(ctx) {} // Exit a parse tree produced by TPTPParser#thf_let_defn_list.\n\n  }, {\n    key: \"exitThf_let_defn_list\",\n    value: function exitThf_let_defn_list(ctx) {} // Enter a parse tree produced by TPTPParser#thf_unitary_term.\n\n  }, {\n    key: \"enterThf_unitary_term\",\n    value: function enterThf_unitary_term(ctx) {} // Exit a parse tree produced by TPTPParser#thf_unitary_term.\n\n  }, {\n    key: \"exitThf_unitary_term\",\n    value: function exitThf_unitary_term(ctx) {} // Enter a parse tree produced by TPTPParser#thf_conn_term.\n\n  }, {\n    key: \"enterThf_conn_term\",\n    value: function enterThf_conn_term(ctx) {} // Exit a parse tree produced by TPTPParser#thf_conn_term.\n\n  }, {\n    key: \"exitThf_conn_term\",\n    value: function exitThf_conn_term(ctx) {} // Enter a parse tree produced by TPTPParser#thf_tuple.\n\n  }, {\n    key: \"enterThf_tuple\",\n    value: function enterThf_tuple(ctx) {} // Exit a parse tree produced by TPTPParser#thf_tuple.\n\n  }, {\n    key: \"exitThf_tuple\",\n    value: function exitThf_tuple(ctx) {} // Enter a parse tree produced by TPTPParser#thf_fof_function.\n\n  }, {\n    key: \"enterThf_fof_function\",\n    value: function enterThf_fof_function(ctx) {} // Exit a parse tree produced by TPTPParser#thf_fof_function.\n\n  }, {\n    key: \"exitThf_fof_function\",\n    value: function exitThf_fof_function(ctx) {} // Enter a parse tree produced by TPTPParser#thf_arguments.\n\n  }, {\n    key: \"enterThf_arguments\",\n    value: function enterThf_arguments(ctx) {} // Exit a parse tree produced by TPTPParser#thf_arguments.\n\n  }, {\n    key: \"exitThf_arguments\",\n    value: function exitThf_arguments(ctx) {} // Enter a parse tree produced by TPTPParser#thf_formula_list.\n\n  }, {\n    key: \"enterThf_formula_list\",\n    value: function enterThf_formula_list(ctx) {} // Exit a parse tree produced by TPTPParser#thf_formula_list.\n\n  }, {\n    key: \"exitThf_formula_list\",\n    value: function exitThf_formula_list(ctx) {} // Enter a parse tree produced by TPTPParser#thf_atom_typing.\n\n  }, {\n    key: \"enterThf_atom_typing\",\n    value: function enterThf_atom_typing(ctx) {} // Exit a parse tree produced by TPTPParser#thf_atom_typing.\n\n  }, {\n    key: \"exitThf_atom_typing\",\n    value: function exitThf_atom_typing(ctx) {} // Enter a parse tree produced by TPTPParser#thf_top_level_type.\n\n  }, {\n    key: \"enterThf_top_level_type\",\n    value: function enterThf_top_level_type(ctx) {} // Exit a parse tree produced by TPTPParser#thf_top_level_type.\n\n  }, {\n    key: \"exitThf_top_level_type\",\n    value: function exitThf_top_level_type(ctx) {} // Enter a parse tree produced by TPTPParser#thf_unitary_type.\n\n  }, {\n    key: \"enterThf_unitary_type\",\n    value: function enterThf_unitary_type(ctx) {} // Exit a parse tree produced by TPTPParser#thf_unitary_type.\n\n  }, {\n    key: \"exitThf_unitary_type\",\n    value: function exitThf_unitary_type(ctx) {} // Enter a parse tree produced by TPTPParser#thf_apply_type.\n\n  }, {\n    key: \"enterThf_apply_type\",\n    value: function enterThf_apply_type(ctx) {} // Exit a parse tree produced by TPTPParser#thf_apply_type.\n\n  }, {\n    key: \"exitThf_apply_type\",\n    value: function exitThf_apply_type(ctx) {} // Enter a parse tree produced by TPTPParser#thf_binary_type.\n\n  }, {\n    key: \"enterThf_binary_type\",\n    value: function enterThf_binary_type(ctx) {} // Exit a parse tree produced by TPTPParser#thf_binary_type.\n\n  }, {\n    key: \"exitThf_binary_type\",\n    value: function exitThf_binary_type(ctx) {} // Enter a parse tree produced by TPTPParser#thf_mapping_type.\n\n  }, {\n    key: \"enterThf_mapping_type\",\n    value: function enterThf_mapping_type(ctx) {} // Exit a parse tree produced by TPTPParser#thf_mapping_type.\n\n  }, {\n    key: \"exitThf_mapping_type\",\n    value: function exitThf_mapping_type(ctx) {} // Enter a parse tree produced by TPTPParser#thf_xprod_type.\n\n  }, {\n    key: \"enterThf_xprod_type\",\n    value: function enterThf_xprod_type(ctx) {} // Exit a parse tree produced by TPTPParser#thf_xprod_type.\n\n  }, {\n    key: \"exitThf_xprod_type\",\n    value: function exitThf_xprod_type(ctx) {} // Enter a parse tree produced by TPTPParser#thf_union_type.\n\n  }, {\n    key: \"enterThf_union_type\",\n    value: function enterThf_union_type(ctx) {} // Exit a parse tree produced by TPTPParser#thf_union_type.\n\n  }, {\n    key: \"exitThf_union_type\",\n    value: function exitThf_union_type(ctx) {} // Enter a parse tree produced by TPTPParser#thf_subtype.\n\n  }, {\n    key: \"enterThf_subtype\",\n    value: function enterThf_subtype(ctx) {} // Exit a parse tree produced by TPTPParser#thf_subtype.\n\n  }, {\n    key: \"exitThf_subtype\",\n    value: function exitThf_subtype(ctx) {} // Enter a parse tree produced by TPTPParser#thf_definition.\n\n  }, {\n    key: \"enterThf_definition\",\n    value: function enterThf_definition(ctx) {} // Exit a parse tree produced by TPTPParser#thf_definition.\n\n  }, {\n    key: \"exitThf_definition\",\n    value: function exitThf_definition(ctx) {} // Enter a parse tree produced by TPTPParser#thf_sequent.\n\n  }, {\n    key: \"enterThf_sequent\",\n    value: function enterThf_sequent(ctx) {} // Exit a parse tree produced by TPTPParser#thf_sequent.\n\n  }, {\n    key: \"exitThf_sequent\",\n    value: function exitThf_sequent(ctx) {} // Enter a parse tree produced by TPTPParser#tff_formula.\n\n  }, {\n    key: \"enterTff_formula\",\n    value: function enterTff_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_formula.\n\n  }, {\n    key: \"exitTff_formula\",\n    value: function exitTff_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_logic_formula.\n\n  }, {\n    key: \"enterTff_logic_formula\",\n    value: function enterTff_logic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_logic_formula.\n\n  }, {\n    key: \"exitTff_logic_formula\",\n    value: function exitTff_logic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_binary_formula.\n\n  }, {\n    key: \"enterTff_binary_formula\",\n    value: function enterTff_binary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_binary_formula.\n\n  }, {\n    key: \"exitTff_binary_formula\",\n    value: function exitTff_binary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_binary_nonassoc.\n\n  }, {\n    key: \"enterTff_binary_nonassoc\",\n    value: function enterTff_binary_nonassoc(ctx) {} // Exit a parse tree produced by TPTPParser#tff_binary_nonassoc.\n\n  }, {\n    key: \"exitTff_binary_nonassoc\",\n    value: function exitTff_binary_nonassoc(ctx) {} // Enter a parse tree produced by TPTPParser#tff_binary_assoc.\n\n  }, {\n    key: \"enterTff_binary_assoc\",\n    value: function enterTff_binary_assoc(ctx) {} // Exit a parse tree produced by TPTPParser#tff_binary_assoc.\n\n  }, {\n    key: \"exitTff_binary_assoc\",\n    value: function exitTff_binary_assoc(ctx) {} // Enter a parse tree produced by TPTPParser#tff_or_formula.\n\n  }, {\n    key: \"enterTff_or_formula\",\n    value: function enterTff_or_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_or_formula.\n\n  }, {\n    key: \"exitTff_or_formula\",\n    value: function exitTff_or_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_and_formula.\n\n  }, {\n    key: \"enterTff_and_formula\",\n    value: function enterTff_and_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_and_formula.\n\n  }, {\n    key: \"exitTff_and_formula\",\n    value: function exitTff_and_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_unit_formula.\n\n  }, {\n    key: \"enterTff_unit_formula\",\n    value: function enterTff_unit_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_unit_formula.\n\n  }, {\n    key: \"exitTff_unit_formula\",\n    value: function exitTff_unit_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_preunit_formula.\n\n  }, {\n    key: \"enterTff_preunit_formula\",\n    value: function enterTff_preunit_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_preunit_formula.\n\n  }, {\n    key: \"exitTff_preunit_formula\",\n    value: function exitTff_preunit_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_unitary_formula.\n\n  }, {\n    key: \"enterTff_unitary_formula\",\n    value: function enterTff_unitary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_unitary_formula.\n\n  }, {\n    key: \"exitTff_unitary_formula\",\n    value: function exitTff_unitary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#txf_unitary_formula.\n\n  }, {\n    key: \"enterTxf_unitary_formula\",\n    value: function enterTxf_unitary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#txf_unitary_formula.\n\n  }, {\n    key: \"exitTxf_unitary_formula\",\n    value: function exitTxf_unitary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_quantified_formula.\n\n  }, {\n    key: \"enterTff_quantified_formula\",\n    value: function enterTff_quantified_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_quantified_formula.\n\n  }, {\n    key: \"exitTff_quantified_formula\",\n    value: function exitTff_quantified_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_variable_list.\n\n  }, {\n    key: \"enterTff_variable_list\",\n    value: function enterTff_variable_list(ctx) {} // Exit a parse tree produced by TPTPParser#tff_variable_list.\n\n  }, {\n    key: \"exitTff_variable_list\",\n    value: function exitTff_variable_list(ctx) {} // Enter a parse tree produced by TPTPParser#tff_variable.\n\n  }, {\n    key: \"enterTff_variable\",\n    value: function enterTff_variable(ctx) {} // Exit a parse tree produced by TPTPParser#tff_variable.\n\n  }, {\n    key: \"exitTff_variable\",\n    value: function exitTff_variable(ctx) {} // Enter a parse tree produced by TPTPParser#tff_typed_variable.\n\n  }, {\n    key: \"enterTff_typed_variable\",\n    value: function enterTff_typed_variable(ctx) {} // Exit a parse tree produced by TPTPParser#tff_typed_variable.\n\n  }, {\n    key: \"exitTff_typed_variable\",\n    value: function exitTff_typed_variable(ctx) {} // Enter a parse tree produced by TPTPParser#tff_unary_formula.\n\n  }, {\n    key: \"enterTff_unary_formula\",\n    value: function enterTff_unary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_unary_formula.\n\n  }, {\n    key: \"exitTff_unary_formula\",\n    value: function exitTff_unary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_prefix_unary.\n\n  }, {\n    key: \"enterTff_prefix_unary\",\n    value: function enterTff_prefix_unary(ctx) {} // Exit a parse tree produced by TPTPParser#tff_prefix_unary.\n\n  }, {\n    key: \"exitTff_prefix_unary\",\n    value: function exitTff_prefix_unary(ctx) {} // Enter a parse tree produced by TPTPParser#tff_infix_unary.\n\n  }, {\n    key: \"enterTff_infix_unary\",\n    value: function enterTff_infix_unary(ctx) {} // Exit a parse tree produced by TPTPParser#tff_infix_unary.\n\n  }, {\n    key: \"exitTff_infix_unary\",\n    value: function exitTff_infix_unary(ctx) {} // Enter a parse tree produced by TPTPParser#tff_atomic_formula.\n\n  }, {\n    key: \"enterTff_atomic_formula\",\n    value: function enterTff_atomic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tff_atomic_formula.\n\n  }, {\n    key: \"exitTff_atomic_formula\",\n    value: function exitTff_atomic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tff_plain_atomic.\n\n  }, {\n    key: \"enterTff_plain_atomic\",\n    value: function enterTff_plain_atomic(ctx) {} // Exit a parse tree produced by TPTPParser#tff_plain_atomic.\n\n  }, {\n    key: \"exitTff_plain_atomic\",\n    value: function exitTff_plain_atomic(ctx) {} // Enter a parse tree produced by TPTPParser#tff_defined_atomic.\n\n  }, {\n    key: \"enterTff_defined_atomic\",\n    value: function enterTff_defined_atomic(ctx) {} // Exit a parse tree produced by TPTPParser#tff_defined_atomic.\n\n  }, {\n    key: \"exitTff_defined_atomic\",\n    value: function exitTff_defined_atomic(ctx) {} // Enter a parse tree produced by TPTPParser#tff_defined_plain.\n\n  }, {\n    key: \"enterTff_defined_plain\",\n    value: function enterTff_defined_plain(ctx) {} // Exit a parse tree produced by TPTPParser#tff_defined_plain.\n\n  }, {\n    key: \"exitTff_defined_plain\",\n    value: function exitTff_defined_plain(ctx) {} // Enter a parse tree produced by TPTPParser#tff_defined_infix.\n\n  }, {\n    key: \"enterTff_defined_infix\",\n    value: function enterTff_defined_infix(ctx) {} // Exit a parse tree produced by TPTPParser#tff_defined_infix.\n\n  }, {\n    key: \"exitTff_defined_infix\",\n    value: function exitTff_defined_infix(ctx) {} // Enter a parse tree produced by TPTPParser#tff_system_atomic.\n\n  }, {\n    key: \"enterTff_system_atomic\",\n    value: function enterTff_system_atomic(ctx) {} // Exit a parse tree produced by TPTPParser#tff_system_atomic.\n\n  }, {\n    key: \"exitTff_system_atomic\",\n    value: function exitTff_system_atomic(ctx) {} // Enter a parse tree produced by TPTPParser#txf_let.\n\n  }, {\n    key: \"enterTxf_let\",\n    value: function enterTxf_let(ctx) {} // Exit a parse tree produced by TPTPParser#txf_let.\n\n  }, {\n    key: \"exitTxf_let\",\n    value: function exitTxf_let(ctx) {} // Enter a parse tree produced by TPTPParser#txf_let_types.\n\n  }, {\n    key: \"enterTxf_let_types\",\n    value: function enterTxf_let_types(ctx) {} // Exit a parse tree produced by TPTPParser#txf_let_types.\n\n  }, {\n    key: \"exitTxf_let_types\",\n    value: function exitTxf_let_types(ctx) {} // Enter a parse tree produced by TPTPParser#tff_atom_typing_list.\n\n  }, {\n    key: \"enterTff_atom_typing_list\",\n    value: function enterTff_atom_typing_list(ctx) {} // Exit a parse tree produced by TPTPParser#tff_atom_typing_list.\n\n  }, {\n    key: \"exitTff_atom_typing_list\",\n    value: function exitTff_atom_typing_list(ctx) {} // Enter a parse tree produced by TPTPParser#txf_let_defns.\n\n  }, {\n    key: \"enterTxf_let_defns\",\n    value: function enterTxf_let_defns(ctx) {} // Exit a parse tree produced by TPTPParser#txf_let_defns.\n\n  }, {\n    key: \"exitTxf_let_defns\",\n    value: function exitTxf_let_defns(ctx) {} // Enter a parse tree produced by TPTPParser#txf_let_defn.\n\n  }, {\n    key: \"enterTxf_let_defn\",\n    value: function enterTxf_let_defn(ctx) {} // Exit a parse tree produced by TPTPParser#txf_let_defn.\n\n  }, {\n    key: \"exitTxf_let_defn\",\n    value: function exitTxf_let_defn(ctx) {} // Enter a parse tree produced by TPTPParser#txf_let_LHS.\n\n  }, {\n    key: \"enterTxf_let_LHS\",\n    value: function enterTxf_let_LHS(ctx) {} // Exit a parse tree produced by TPTPParser#txf_let_LHS.\n\n  }, {\n    key: \"exitTxf_let_LHS\",\n    value: function exitTxf_let_LHS(ctx) {} // Enter a parse tree produced by TPTPParser#txf_let_defn_list.\n\n  }, {\n    key: \"enterTxf_let_defn_list\",\n    value: function enterTxf_let_defn_list(ctx) {} // Exit a parse tree produced by TPTPParser#txf_let_defn_list.\n\n  }, {\n    key: \"exitTxf_let_defn_list\",\n    value: function exitTxf_let_defn_list(ctx) {} // Enter a parse tree produced by TPTPParser#txf_ntf_atom.\n\n  }, {\n    key: \"enterTxf_ntf_atom\",\n    value: function enterTxf_ntf_atom(ctx) {} // Exit a parse tree produced by TPTPParser#txf_ntf_atom.\n\n  }, {\n    key: \"exitTxf_ntf_atom\",\n    value: function exitTxf_ntf_atom(ctx) {} // Enter a parse tree produced by TPTPParser#tff_term.\n\n  }, {\n    key: \"enterTff_term\",\n    value: function enterTff_term(ctx) {} // Exit a parse tree produced by TPTPParser#tff_term.\n\n  }, {\n    key: \"exitTff_term\",\n    value: function exitTff_term(ctx) {} // Enter a parse tree produced by TPTPParser#tff_unitary_term.\n\n  }, {\n    key: \"enterTff_unitary_term\",\n    value: function enterTff_unitary_term(ctx) {} // Exit a parse tree produced by TPTPParser#tff_unitary_term.\n\n  }, {\n    key: \"exitTff_unitary_term\",\n    value: function exitTff_unitary_term(ctx) {} // Enter a parse tree produced by TPTPParser#txf_tuple.\n\n  }, {\n    key: \"enterTxf_tuple\",\n    value: function enterTxf_tuple(ctx) {} // Exit a parse tree produced by TPTPParser#txf_tuple.\n\n  }, {\n    key: \"exitTxf_tuple\",\n    value: function exitTxf_tuple(ctx) {} // Enter a parse tree produced by TPTPParser#tff_arguments.\n\n  }, {\n    key: \"enterTff_arguments\",\n    value: function enterTff_arguments(ctx) {} // Exit a parse tree produced by TPTPParser#tff_arguments.\n\n  }, {\n    key: \"exitTff_arguments\",\n    value: function exitTff_arguments(ctx) {} // Enter a parse tree produced by TPTPParser#tff_atom_typing.\n\n  }, {\n    key: \"enterTff_atom_typing\",\n    value: function enterTff_atom_typing(ctx) {} // Exit a parse tree produced by TPTPParser#tff_atom_typing.\n\n  }, {\n    key: \"exitTff_atom_typing\",\n    value: function exitTff_atom_typing(ctx) {} // Enter a parse tree produced by TPTPParser#tff_top_level_type.\n\n  }, {\n    key: \"enterTff_top_level_type\",\n    value: function enterTff_top_level_type(ctx) {} // Exit a parse tree produced by TPTPParser#tff_top_level_type.\n\n  }, {\n    key: \"exitTff_top_level_type\",\n    value: function exitTff_top_level_type(ctx) {} // Enter a parse tree produced by TPTPParser#tff_non_atomic_type.\n\n  }, {\n    key: \"enterTff_non_atomic_type\",\n    value: function enterTff_non_atomic_type(ctx) {} // Exit a parse tree produced by TPTPParser#tff_non_atomic_type.\n\n  }, {\n    key: \"exitTff_non_atomic_type\",\n    value: function exitTff_non_atomic_type(ctx) {} // Enter a parse tree produced by TPTPParser#tf1_quantified_type.\n\n  }, {\n    key: \"enterTf1_quantified_type\",\n    value: function enterTf1_quantified_type(ctx) {} // Exit a parse tree produced by TPTPParser#tf1_quantified_type.\n\n  }, {\n    key: \"exitTf1_quantified_type\",\n    value: function exitTf1_quantified_type(ctx) {} // Enter a parse tree produced by TPTPParser#tff_monotype.\n\n  }, {\n    key: \"enterTff_monotype\",\n    value: function enterTff_monotype(ctx) {} // Exit a parse tree produced by TPTPParser#tff_monotype.\n\n  }, {\n    key: \"exitTff_monotype\",\n    value: function exitTff_monotype(ctx) {} // Enter a parse tree produced by TPTPParser#tff_unitary_type.\n\n  }, {\n    key: \"enterTff_unitary_type\",\n    value: function enterTff_unitary_type(ctx) {} // Exit a parse tree produced by TPTPParser#tff_unitary_type.\n\n  }, {\n    key: \"exitTff_unitary_type\",\n    value: function exitTff_unitary_type(ctx) {} // Enter a parse tree produced by TPTPParser#tff_atomic_type.\n\n  }, {\n    key: \"enterTff_atomic_type\",\n    value: function enterTff_atomic_type(ctx) {} // Exit a parse tree produced by TPTPParser#tff_atomic_type.\n\n  }, {\n    key: \"exitTff_atomic_type\",\n    value: function exitTff_atomic_type(ctx) {} // Enter a parse tree produced by TPTPParser#tff_type_arguments.\n\n  }, {\n    key: \"enterTff_type_arguments\",\n    value: function enterTff_type_arguments(ctx) {} // Exit a parse tree produced by TPTPParser#tff_type_arguments.\n\n  }, {\n    key: \"exitTff_type_arguments\",\n    value: function exitTff_type_arguments(ctx) {} // Enter a parse tree produced by TPTPParser#tff_mapping_type.\n\n  }, {\n    key: \"enterTff_mapping_type\",\n    value: function enterTff_mapping_type(ctx) {} // Exit a parse tree produced by TPTPParser#tff_mapping_type.\n\n  }, {\n    key: \"exitTff_mapping_type\",\n    value: function exitTff_mapping_type(ctx) {} // Enter a parse tree produced by TPTPParser#tff_xprod_type.\n\n  }, {\n    key: \"enterTff_xprod_type\",\n    value: function enterTff_xprod_type(ctx) {} // Exit a parse tree produced by TPTPParser#tff_xprod_type.\n\n  }, {\n    key: \"exitTff_xprod_type\",\n    value: function exitTff_xprod_type(ctx) {} // Enter a parse tree produced by TPTPParser#txf_tuple_type.\n\n  }, {\n    key: \"enterTxf_tuple_type\",\n    value: function enterTxf_tuple_type(ctx) {} // Exit a parse tree produced by TPTPParser#txf_tuple_type.\n\n  }, {\n    key: \"exitTxf_tuple_type\",\n    value: function exitTxf_tuple_type(ctx) {} // Enter a parse tree produced by TPTPParser#tff_type_list.\n\n  }, {\n    key: \"enterTff_type_list\",\n    value: function enterTff_type_list(ctx) {} // Exit a parse tree produced by TPTPParser#tff_type_list.\n\n  }, {\n    key: \"exitTff_type_list\",\n    value: function exitTff_type_list(ctx) {} // Enter a parse tree produced by TPTPParser#tff_subtype.\n\n  }, {\n    key: \"enterTff_subtype\",\n    value: function enterTff_subtype(ctx) {} // Exit a parse tree produced by TPTPParser#tff_subtype.\n\n  }, {\n    key: \"exitTff_subtype\",\n    value: function exitTff_subtype(ctx) {} // Enter a parse tree produced by TPTPParser#txf_definition.\n\n  }, {\n    key: \"enterTxf_definition\",\n    value: function enterTxf_definition(ctx) {} // Exit a parse tree produced by TPTPParser#txf_definition.\n\n  }, {\n    key: \"exitTxf_definition\",\n    value: function exitTxf_definition(ctx) {} // Enter a parse tree produced by TPTPParser#txf_sequent.\n\n  }, {\n    key: \"enterTxf_sequent\",\n    value: function enterTxf_sequent(ctx) {} // Exit a parse tree produced by TPTPParser#txf_sequent.\n\n  }, {\n    key: \"exitTxf_sequent\",\n    value: function exitTxf_sequent(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_connective.\n\n  }, {\n    key: \"enterNtf_connective\",\n    value: function enterNtf_connective(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_connective.\n\n  }, {\n    key: \"exitNtf_connective\",\n    value: function exitNtf_connective(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_short_connective.\n\n  }, {\n    key: \"enterNtf_short_connective\",\n    value: function enterNtf_short_connective(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_short_connective.\n\n  }, {\n    key: \"exitNtf_short_connective\",\n    value: function exitNtf_short_connective(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_long_connective.\n\n  }, {\n    key: \"enterNtf_long_connective\",\n    value: function enterNtf_long_connective(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_long_connective.\n\n  }, {\n    key: \"exitNtf_long_connective\",\n    value: function exitNtf_long_connective(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_connective_name.\n\n  }, {\n    key: \"enterNtf_connective_name\",\n    value: function enterNtf_connective_name(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_connective_name.\n\n  }, {\n    key: \"exitNtf_connective_name\",\n    value: function exitNtf_connective_name(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_parameter_list.\n\n  }, {\n    key: \"enterNtf_parameter_list\",\n    value: function enterNtf_parameter_list(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_parameter_list.\n\n  }, {\n    key: \"exitNtf_parameter_list\",\n    value: function exitNtf_parameter_list(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_parameter.\n\n  }, {\n    key: \"enterNtf_parameter\",\n    value: function enterNtf_parameter(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_parameter.\n\n  }, {\n    key: \"exitNtf_parameter\",\n    value: function exitNtf_parameter(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_index.\n\n  }, {\n    key: \"enterNtf_index\",\n    value: function enterNtf_index(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_index.\n\n  }, {\n    key: \"exitNtf_index\",\n    value: function exitNtf_index(ctx) {} // Enter a parse tree produced by TPTPParser#ntf_key_pair.\n\n  }, {\n    key: \"enterNtf_key_pair\",\n    value: function enterNtf_key_pair(ctx) {} // Exit a parse tree produced by TPTPParser#ntf_key_pair.\n\n  }, {\n    key: \"exitNtf_key_pair\",\n    value: function exitNtf_key_pair(ctx) {} // Enter a parse tree produced by TPTPParser#logic_defn_rule.\n\n  }, {\n    key: \"enterLogic_defn_rule\",\n    value: function enterLogic_defn_rule(ctx) {} // Exit a parse tree produced by TPTPParser#logic_defn_rule.\n\n  }, {\n    key: \"exitLogic_defn_rule\",\n    value: function exitLogic_defn_rule(ctx) {} // Enter a parse tree produced by TPTPParser#logic_defn_LHS.\n\n  }, {\n    key: \"enterLogic_defn_LHS\",\n    value: function enterLogic_defn_LHS(ctx) {} // Exit a parse tree produced by TPTPParser#logic_defn_LHS.\n\n  }, {\n    key: \"exitLogic_defn_LHS\",\n    value: function exitLogic_defn_LHS(ctx) {} // Enter a parse tree produced by TPTPParser#logic_defn_RHS.\n\n  }, {\n    key: \"enterLogic_defn_RHS\",\n    value: function enterLogic_defn_RHS(ctx) {} // Exit a parse tree produced by TPTPParser#logic_defn_RHS.\n\n  }, {\n    key: \"exitLogic_defn_RHS\",\n    value: function exitLogic_defn_RHS(ctx) {} // Enter a parse tree produced by TPTPParser#tcf_formula.\n\n  }, {\n    key: \"enterTcf_formula\",\n    value: function enterTcf_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tcf_formula.\n\n  }, {\n    key: \"exitTcf_formula\",\n    value: function exitTcf_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tcf_logic_formula.\n\n  }, {\n    key: \"enterTcf_logic_formula\",\n    value: function enterTcf_logic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tcf_logic_formula.\n\n  }, {\n    key: \"exitTcf_logic_formula\",\n    value: function exitTcf_logic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#tcf_quantified_formula.\n\n  }, {\n    key: \"enterTcf_quantified_formula\",\n    value: function enterTcf_quantified_formula(ctx) {} // Exit a parse tree produced by TPTPParser#tcf_quantified_formula.\n\n  }, {\n    key: \"exitTcf_quantified_formula\",\n    value: function exitTcf_quantified_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_formula.\n\n  }, {\n    key: \"enterFof_formula\",\n    value: function enterFof_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_formula.\n\n  }, {\n    key: \"exitFof_formula\",\n    value: function exitFof_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_logic_formula.\n\n  }, {\n    key: \"enterFof_logic_formula\",\n    value: function enterFof_logic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_logic_formula.\n\n  }, {\n    key: \"exitFof_logic_formula\",\n    value: function exitFof_logic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_binary_formula.\n\n  }, {\n    key: \"enterFof_binary_formula\",\n    value: function enterFof_binary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_binary_formula.\n\n  }, {\n    key: \"exitFof_binary_formula\",\n    value: function exitFof_binary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_binary_nonassoc.\n\n  }, {\n    key: \"enterFof_binary_nonassoc\",\n    value: function enterFof_binary_nonassoc(ctx) {} // Exit a parse tree produced by TPTPParser#fof_binary_nonassoc.\n\n  }, {\n    key: \"exitFof_binary_nonassoc\",\n    value: function exitFof_binary_nonassoc(ctx) {} // Enter a parse tree produced by TPTPParser#fof_binary_assoc.\n\n  }, {\n    key: \"enterFof_binary_assoc\",\n    value: function enterFof_binary_assoc(ctx) {} // Exit a parse tree produced by TPTPParser#fof_binary_assoc.\n\n  }, {\n    key: \"exitFof_binary_assoc\",\n    value: function exitFof_binary_assoc(ctx) {} // Enter a parse tree produced by TPTPParser#fof_or_formula.\n\n  }, {\n    key: \"enterFof_or_formula\",\n    value: function enterFof_or_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_or_formula.\n\n  }, {\n    key: \"exitFof_or_formula\",\n    value: function exitFof_or_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_and_formula.\n\n  }, {\n    key: \"enterFof_and_formula\",\n    value: function enterFof_and_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_and_formula.\n\n  }, {\n    key: \"exitFof_and_formula\",\n    value: function exitFof_and_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_unary_formula.\n\n  }, {\n    key: \"enterFof_unary_formula\",\n    value: function enterFof_unary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_unary_formula.\n\n  }, {\n    key: \"exitFof_unary_formula\",\n    value: function exitFof_unary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_infix_unary.\n\n  }, {\n    key: \"enterFof_infix_unary\",\n    value: function enterFof_infix_unary(ctx) {} // Exit a parse tree produced by TPTPParser#fof_infix_unary.\n\n  }, {\n    key: \"exitFof_infix_unary\",\n    value: function exitFof_infix_unary(ctx) {} // Enter a parse tree produced by TPTPParser#fof_unit_formula.\n\n  }, {\n    key: \"enterFof_unit_formula\",\n    value: function enterFof_unit_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_unit_formula.\n\n  }, {\n    key: \"exitFof_unit_formula\",\n    value: function exitFof_unit_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_unitary_formula.\n\n  }, {\n    key: \"enterFof_unitary_formula\",\n    value: function enterFof_unitary_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_unitary_formula.\n\n  }, {\n    key: \"exitFof_unitary_formula\",\n    value: function exitFof_unitary_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_quantified_formula.\n\n  }, {\n    key: \"enterFof_quantified_formula\",\n    value: function enterFof_quantified_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_quantified_formula.\n\n  }, {\n    key: \"exitFof_quantified_formula\",\n    value: function exitFof_quantified_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_variable_list.\n\n  }, {\n    key: \"enterFof_variable_list\",\n    value: function enterFof_variable_list(ctx) {} // Exit a parse tree produced by TPTPParser#fof_variable_list.\n\n  }, {\n    key: \"exitFof_variable_list\",\n    value: function exitFof_variable_list(ctx) {} // Enter a parse tree produced by TPTPParser#fof_atomic_formula.\n\n  }, {\n    key: \"enterFof_atomic_formula\",\n    value: function enterFof_atomic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_atomic_formula.\n\n  }, {\n    key: \"exitFof_atomic_formula\",\n    value: function exitFof_atomic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_plain_atomic_formula.\n\n  }, {\n    key: \"enterFof_plain_atomic_formula\",\n    value: function enterFof_plain_atomic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_plain_atomic_formula.\n\n  }, {\n    key: \"exitFof_plain_atomic_formula\",\n    value: function exitFof_plain_atomic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_defined_atomic_formula.\n\n  }, {\n    key: \"enterFof_defined_atomic_formula\",\n    value: function enterFof_defined_atomic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_defined_atomic_formula.\n\n  }, {\n    key: \"exitFof_defined_atomic_formula\",\n    value: function exitFof_defined_atomic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_defined_plain_formula.\n\n  }, {\n    key: \"enterFof_defined_plain_formula\",\n    value: function enterFof_defined_plain_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_defined_plain_formula.\n\n  }, {\n    key: \"exitFof_defined_plain_formula\",\n    value: function exitFof_defined_plain_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_defined_infix_formula.\n\n  }, {\n    key: \"enterFof_defined_infix_formula\",\n    value: function enterFof_defined_infix_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_defined_infix_formula.\n\n  }, {\n    key: \"exitFof_defined_infix_formula\",\n    value: function exitFof_defined_infix_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_system_atomic_formula.\n\n  }, {\n    key: \"enterFof_system_atomic_formula\",\n    value: function enterFof_system_atomic_formula(ctx) {} // Exit a parse tree produced by TPTPParser#fof_system_atomic_formula.\n\n  }, {\n    key: \"exitFof_system_atomic_formula\",\n    value: function exitFof_system_atomic_formula(ctx) {} // Enter a parse tree produced by TPTPParser#fof_plain_term.\n\n  }, {\n    key: \"enterFof_plain_term\",\n    value: function enterFof_plain_term(ctx) {} // Exit a parse tree produced by TPTPParser#fof_plain_term.\n\n  }, {\n    key: \"exitFof_plain_term\",\n    value: function exitFof_plain_term(ctx) {} // Enter a parse tree produced by TPTPParser#fof_defined_term.\n\n  }, {\n    key: \"enterFof_defined_term\",\n    value: function enterFof_defined_term(ctx) {} // Exit a parse tree produced by TPTPParser#fof_defined_term.\n\n  }, {\n    key: \"exitFof_defined_term\",\n    value: function exitFof_defined_term(ctx) {} // Enter a parse tree produced by TPTPParser#fof_defined_atomic_term.\n\n  }, {\n    key: \"enterFof_defined_atomic_term\",\n    value: function enterFof_defined_atomic_term(ctx) {} // Exit a parse tree produced by TPTPParser#fof_defined_atomic_term.\n\n  }, {\n    key: \"exitFof_defined_atomic_term\",\n    value: function exitFof_defined_atomic_term(ctx) {} // Enter a parse tree produced by TPTPParser#fof_defined_plain_term.\n\n  }, {\n    key: \"enterFof_defined_plain_term\",\n    value: function enterFof_defined_plain_term(ctx) {} // Exit a parse tree produced by TPTPParser#fof_defined_plain_term.\n\n  }, {\n    key: \"exitFof_defined_plain_term\",\n    value: function exitFof_defined_plain_term(ctx) {} // Enter a parse tree produced by TPTPParser#fof_system_term.\n\n  }, {\n    key: \"enterFof_system_term\",\n    value: function enterFof_system_term(ctx) {} // Exit a parse tree produced by TPTPParser#fof_system_term.\n\n  }, {\n    key: \"exitFof_system_term\",\n    value: function exitFof_system_term(ctx) {} // Enter a parse tree produced by TPTPParser#fof_arguments.\n\n  }, {\n    key: \"enterFof_arguments\",\n    value: function enterFof_arguments(ctx) {} // Exit a parse tree produced by TPTPParser#fof_arguments.\n\n  }, {\n    key: \"exitFof_arguments\",\n    value: function exitFof_arguments(ctx) {} // Enter a parse tree produced by TPTPParser#fof_term.\n\n  }, {\n    key: \"enterFof_term\",\n    value: function enterFof_term(ctx) {} // Exit a parse tree produced by TPTPParser#fof_term.\n\n  }, {\n    key: \"exitFof_term\",\n    value: function exitFof_term(ctx) {} // Enter a parse tree produced by TPTPParser#fof_function_term.\n\n  }, {\n    key: \"enterFof_function_term\",\n    value: function enterFof_function_term(ctx) {} // Exit a parse tree produced by TPTPParser#fof_function_term.\n\n  }, {\n    key: \"exitFof_function_term\",\n    value: function exitFof_function_term(ctx) {} // Enter a parse tree produced by TPTPParser#fof_sequent.\n\n  }, {\n    key: \"enterFof_sequent\",\n    value: function enterFof_sequent(ctx) {} // Exit a parse tree produced by TPTPParser#fof_sequent.\n\n  }, {\n    key: \"exitFof_sequent\",\n    value: function exitFof_sequent(ctx) {} // Enter a parse tree produced by TPTPParser#fof_formula_tuple.\n\n  }, {\n    key: \"enterFof_formula_tuple\",\n    value: function enterFof_formula_tuple(ctx) {} // Exit a parse tree produced by TPTPParser#fof_formula_tuple.\n\n  }, {\n    key: \"exitFof_formula_tuple\",\n    value: function exitFof_formula_tuple(ctx) {} // Enter a parse tree produced by TPTPParser#fof_formula_tuple_list.\n\n  }, {\n    key: \"enterFof_formula_tuple_list\",\n    value: function enterFof_formula_tuple_list(ctx) {} // Exit a parse tree produced by TPTPParser#fof_formula_tuple_list.\n\n  }, {\n    key: \"exitFof_formula_tuple_list\",\n    value: function exitFof_formula_tuple_list(ctx) {} // Enter a parse tree produced by TPTPParser#cnf_formula.\n\n  }, {\n    key: \"enterCnf_formula\",\n    value: function enterCnf_formula(ctx) {} // Exit a parse tree produced by TPTPParser#cnf_formula.\n\n  }, {\n    key: \"exitCnf_formula\",\n    value: function exitCnf_formula(ctx) {} // Enter a parse tree produced by TPTPParser#cnf_disjunction.\n\n  }, {\n    key: \"enterCnf_disjunction\",\n    value: function enterCnf_disjunction(ctx) {} // Exit a parse tree produced by TPTPParser#cnf_disjunction.\n\n  }, {\n    key: \"exitCnf_disjunction\",\n    value: function exitCnf_disjunction(ctx) {} // Enter a parse tree produced by TPTPParser#cnf_literal.\n\n  }, {\n    key: \"enterCnf_literal\",\n    value: function enterCnf_literal(ctx) {} // Exit a parse tree produced by TPTPParser#cnf_literal.\n\n  }, {\n    key: \"exitCnf_literal\",\n    value: function exitCnf_literal(ctx) {} // Enter a parse tree produced by TPTPParser#thf_quantifier.\n\n  }, {\n    key: \"enterThf_quantifier\",\n    value: function enterThf_quantifier(ctx) {} // Exit a parse tree produced by TPTPParser#thf_quantifier.\n\n  }, {\n    key: \"exitThf_quantifier\",\n    value: function exitThf_quantifier(ctx) {} // Enter a parse tree produced by TPTPParser#th1_quantifier.\n\n  }, {\n    key: \"enterTh1_quantifier\",\n    value: function enterTh1_quantifier(ctx) {} // Exit a parse tree produced by TPTPParser#th1_quantifier.\n\n  }, {\n    key: \"exitTh1_quantifier\",\n    value: function exitTh1_quantifier(ctx) {} // Enter a parse tree produced by TPTPParser#th0_quantifier.\n\n  }, {\n    key: \"enterTh0_quantifier\",\n    value: function enterTh0_quantifier(ctx) {} // Exit a parse tree produced by TPTPParser#th0_quantifier.\n\n  }, {\n    key: \"exitTh0_quantifier\",\n    value: function exitTh0_quantifier(ctx) {} // Enter a parse tree produced by TPTPParser#fof_quantifier.\n\n  }, {\n    key: \"enterFof_quantifier\",\n    value: function enterFof_quantifier(ctx) {} // Exit a parse tree produced by TPTPParser#fof_quantifier.\n\n  }, {\n    key: \"exitFof_quantifier\",\n    value: function exitFof_quantifier(ctx) {} // Enter a parse tree produced by TPTPParser#nonassoc_connective.\n\n  }, {\n    key: \"enterNonassoc_connective\",\n    value: function enterNonassoc_connective(ctx) {} // Exit a parse tree produced by TPTPParser#nonassoc_connective.\n\n  }, {\n    key: \"exitNonassoc_connective\",\n    value: function exitNonassoc_connective(ctx) {} // Enter a parse tree produced by TPTPParser#assoc_connective.\n\n  }, {\n    key: \"enterAssoc_connective\",\n    value: function enterAssoc_connective(ctx) {} // Exit a parse tree produced by TPTPParser#assoc_connective.\n\n  }, {\n    key: \"exitAssoc_connective\",\n    value: function exitAssoc_connective(ctx) {} // Enter a parse tree produced by TPTPParser#unary_connective.\n\n  }, {\n    key: \"enterUnary_connective\",\n    value: function enterUnary_connective(ctx) {} // Exit a parse tree produced by TPTPParser#unary_connective.\n\n  }, {\n    key: \"exitUnary_connective\",\n    value: function exitUnary_connective(ctx) {} // Enter a parse tree produced by TPTPParser#type_constant.\n\n  }, {\n    key: \"enterType_constant\",\n    value: function enterType_constant(ctx) {} // Exit a parse tree produced by TPTPParser#type_constant.\n\n  }, {\n    key: \"exitType_constant\",\n    value: function exitType_constant(ctx) {} // Enter a parse tree produced by TPTPParser#type_functor.\n\n  }, {\n    key: \"enterType_functor\",\n    value: function enterType_functor(ctx) {} // Exit a parse tree produced by TPTPParser#type_functor.\n\n  }, {\n    key: \"exitType_functor\",\n    value: function exitType_functor(ctx) {} // Enter a parse tree produced by TPTPParser#defined_type.\n\n  }, {\n    key: \"enterDefined_type\",\n    value: function enterDefined_type(ctx) {} // Exit a parse tree produced by TPTPParser#defined_type.\n\n  }, {\n    key: \"exitDefined_type\",\n    value: function exitDefined_type(ctx) {} // Enter a parse tree produced by TPTPParser#system_type.\n\n  }, {\n    key: \"enterSystem_type\",\n    value: function enterSystem_type(ctx) {} // Exit a parse tree produced by TPTPParser#system_type.\n\n  }, {\n    key: \"exitSystem_type\",\n    value: function exitSystem_type(ctx) {} // Enter a parse tree produced by TPTPParser#atom.\n\n  }, {\n    key: \"enterAtom\",\n    value: function enterAtom(ctx) {} // Exit a parse tree produced by TPTPParser#atom.\n\n  }, {\n    key: \"exitAtom\",\n    value: function exitAtom(ctx) {} // Enter a parse tree produced by TPTPParser#untyped_atom.\n\n  }, {\n    key: \"enterUntyped_atom\",\n    value: function enterUntyped_atom(ctx) {} // Exit a parse tree produced by TPTPParser#untyped_atom.\n\n  }, {\n    key: \"exitUntyped_atom\",\n    value: function exitUntyped_atom(ctx) {} // Enter a parse tree produced by TPTPParser#defined_proposition.\n\n  }, {\n    key: \"enterDefined_proposition\",\n    value: function enterDefined_proposition(ctx) {} // Exit a parse tree produced by TPTPParser#defined_proposition.\n\n  }, {\n    key: \"exitDefined_proposition\",\n    value: function exitDefined_proposition(ctx) {} // Enter a parse tree produced by TPTPParser#defined_predicate.\n\n  }, {\n    key: \"enterDefined_predicate\",\n    value: function enterDefined_predicate(ctx) {} // Exit a parse tree produced by TPTPParser#defined_predicate.\n\n  }, {\n    key: \"exitDefined_predicate\",\n    value: function exitDefined_predicate(ctx) {} // Enter a parse tree produced by TPTPParser#defined_infix_pred.\n\n  }, {\n    key: \"enterDefined_infix_pred\",\n    value: function enterDefined_infix_pred(ctx) {} // Exit a parse tree produced by TPTPParser#defined_infix_pred.\n\n  }, {\n    key: \"exitDefined_infix_pred\",\n    value: function exitDefined_infix_pred(ctx) {} // Enter a parse tree produced by TPTPParser#constant.\n\n  }, {\n    key: \"enterConstant\",\n    value: function enterConstant(ctx) {} // Exit a parse tree produced by TPTPParser#constant.\n\n  }, {\n    key: \"exitConstant\",\n    value: function exitConstant(ctx) {} // Enter a parse tree produced by TPTPParser#functor.\n\n  }, {\n    key: \"enterFunctor\",\n    value: function enterFunctor(ctx) {} // Exit a parse tree produced by TPTPParser#functor.\n\n  }, {\n    key: \"exitFunctor\",\n    value: function exitFunctor(ctx) {} // Enter a parse tree produced by TPTPParser#defined_constant.\n\n  }, {\n    key: \"enterDefined_constant\",\n    value: function enterDefined_constant(ctx) {} // Exit a parse tree produced by TPTPParser#defined_constant.\n\n  }, {\n    key: \"exitDefined_constant\",\n    value: function exitDefined_constant(ctx) {} // Enter a parse tree produced by TPTPParser#defined_functor.\n\n  }, {\n    key: \"enterDefined_functor\",\n    value: function enterDefined_functor(ctx) {} // Exit a parse tree produced by TPTPParser#defined_functor.\n\n  }, {\n    key: \"exitDefined_functor\",\n    value: function exitDefined_functor(ctx) {} // Enter a parse tree produced by TPTPParser#system_constant.\n\n  }, {\n    key: \"enterSystem_constant\",\n    value: function enterSystem_constant(ctx) {} // Exit a parse tree produced by TPTPParser#system_constant.\n\n  }, {\n    key: \"exitSystem_constant\",\n    value: function exitSystem_constant(ctx) {} // Enter a parse tree produced by TPTPParser#system_functor.\n\n  }, {\n    key: \"enterSystem_functor\",\n    value: function enterSystem_functor(ctx) {} // Exit a parse tree produced by TPTPParser#system_functor.\n\n  }, {\n    key: \"exitSystem_functor\",\n    value: function exitSystem_functor(ctx) {} // Enter a parse tree produced by TPTPParser#def_or_sys_constant.\n\n  }, {\n    key: \"enterDef_or_sys_constant\",\n    value: function enterDef_or_sys_constant(ctx) {} // Exit a parse tree produced by TPTPParser#def_or_sys_constant.\n\n  }, {\n    key: \"exitDef_or_sys_constant\",\n    value: function exitDef_or_sys_constant(ctx) {} // Enter a parse tree produced by TPTPParser#th1_defined_term.\n\n  }, {\n    key: \"enterTh1_defined_term\",\n    value: function enterTh1_defined_term(ctx) {} // Exit a parse tree produced by TPTPParser#th1_defined_term.\n\n  }, {\n    key: \"exitTh1_defined_term\",\n    value: function exitTh1_defined_term(ctx) {} // Enter a parse tree produced by TPTPParser#defined_term.\n\n  }, {\n    key: \"enterDefined_term\",\n    value: function enterDefined_term(ctx) {} // Exit a parse tree produced by TPTPParser#defined_term.\n\n  }, {\n    key: \"exitDefined_term\",\n    value: function exitDefined_term(ctx) {} // Enter a parse tree produced by TPTPParser#variable.\n\n  }, {\n    key: \"enterVariable\",\n    value: function enterVariable(ctx) {} // Exit a parse tree produced by TPTPParser#variable.\n\n  }, {\n    key: \"exitVariable\",\n    value: function exitVariable(ctx) {} // Enter a parse tree produced by TPTPParser#source.\n\n  }, {\n    key: \"enterSource\",\n    value: function enterSource(ctx) {} // Exit a parse tree produced by TPTPParser#source.\n\n  }, {\n    key: \"exitSource\",\n    value: function exitSource(ctx) {} // Enter a parse tree produced by TPTPParser#sources.\n\n  }, {\n    key: \"enterSources\",\n    value: function enterSources(ctx) {} // Exit a parse tree produced by TPTPParser#sources.\n\n  }, {\n    key: \"exitSources\",\n    value: function exitSources(ctx) {} // Enter a parse tree produced by TPTPParser#dag_source.\n\n  }, {\n    key: \"enterDag_source\",\n    value: function enterDag_source(ctx) {} // Exit a parse tree produced by TPTPParser#dag_source.\n\n  }, {\n    key: \"exitDag_source\",\n    value: function exitDag_source(ctx) {} // Enter a parse tree produced by TPTPParser#inference_record.\n\n  }, {\n    key: \"enterInference_record\",\n    value: function enterInference_record(ctx) {} // Exit a parse tree produced by TPTPParser#inference_record.\n\n  }, {\n    key: \"exitInference_record\",\n    value: function exitInference_record(ctx) {} // Enter a parse tree produced by TPTPParser#inference_rule.\n\n  }, {\n    key: \"enterInference_rule\",\n    value: function enterInference_rule(ctx) {} // Exit a parse tree produced by TPTPParser#inference_rule.\n\n  }, {\n    key: \"exitInference_rule\",\n    value: function exitInference_rule(ctx) {} // Enter a parse tree produced by TPTPParser#inference_parents.\n\n  }, {\n    key: \"enterInference_parents\",\n    value: function enterInference_parents(ctx) {} // Exit a parse tree produced by TPTPParser#inference_parents.\n\n  }, {\n    key: \"exitInference_parents\",\n    value: function exitInference_parents(ctx) {} // Enter a parse tree produced by TPTPParser#parent_list.\n\n  }, {\n    key: \"enterParent_list\",\n    value: function enterParent_list(ctx) {} // Exit a parse tree produced by TPTPParser#parent_list.\n\n  }, {\n    key: \"exitParent_list\",\n    value: function exitParent_list(ctx) {} // Enter a parse tree produced by TPTPParser#parent_info.\n\n  }, {\n    key: \"enterParent_info\",\n    value: function enterParent_info(ctx) {} // Exit a parse tree produced by TPTPParser#parent_info.\n\n  }, {\n    key: \"exitParent_info\",\n    value: function exitParent_info(ctx) {} // Enter a parse tree produced by TPTPParser#parent_details.\n\n  }, {\n    key: \"enterParent_details\",\n    value: function enterParent_details(ctx) {} // Exit a parse tree produced by TPTPParser#parent_details.\n\n  }, {\n    key: \"exitParent_details\",\n    value: function exitParent_details(ctx) {} // Enter a parse tree produced by TPTPParser#internal_source.\n\n  }, {\n    key: \"enterInternal_source\",\n    value: function enterInternal_source(ctx) {} // Exit a parse tree produced by TPTPParser#internal_source.\n\n  }, {\n    key: \"exitInternal_source\",\n    value: function exitInternal_source(ctx) {} // Enter a parse tree produced by TPTPParser#intro_type.\n\n  }, {\n    key: \"enterIntro_type\",\n    value: function enterIntro_type(ctx) {} // Exit a parse tree produced by TPTPParser#intro_type.\n\n  }, {\n    key: \"exitIntro_type\",\n    value: function exitIntro_type(ctx) {} // Enter a parse tree produced by TPTPParser#external_source.\n\n  }, {\n    key: \"enterExternal_source\",\n    value: function enterExternal_source(ctx) {} // Exit a parse tree produced by TPTPParser#external_source.\n\n  }, {\n    key: \"exitExternal_source\",\n    value: function exitExternal_source(ctx) {} // Enter a parse tree produced by TPTPParser#file_source.\n\n  }, {\n    key: \"enterFile_source\",\n    value: function enterFile_source(ctx) {} // Exit a parse tree produced by TPTPParser#file_source.\n\n  }, {\n    key: \"exitFile_source\",\n    value: function exitFile_source(ctx) {} // Enter a parse tree produced by TPTPParser#file_info.\n\n  }, {\n    key: \"enterFile_info\",\n    value: function enterFile_info(ctx) {} // Exit a parse tree produced by TPTPParser#file_info.\n\n  }, {\n    key: \"exitFile_info\",\n    value: function exitFile_info(ctx) {} // Enter a parse tree produced by TPTPParser#theory.\n\n  }, {\n    key: \"enterTheory\",\n    value: function enterTheory(ctx) {} // Exit a parse tree produced by TPTPParser#theory.\n\n  }, {\n    key: \"exitTheory\",\n    value: function exitTheory(ctx) {} // Enter a parse tree produced by TPTPParser#theory_name.\n\n  }, {\n    key: \"enterTheory_name\",\n    value: function enterTheory_name(ctx) {} // Exit a parse tree produced by TPTPParser#theory_name.\n\n  }, {\n    key: \"exitTheory_name\",\n    value: function exitTheory_name(ctx) {} // Enter a parse tree produced by TPTPParser#creator_source.\n\n  }, {\n    key: \"enterCreator_source\",\n    value: function enterCreator_source(ctx) {} // Exit a parse tree produced by TPTPParser#creator_source.\n\n  }, {\n    key: \"exitCreator_source\",\n    value: function exitCreator_source(ctx) {} // Enter a parse tree produced by TPTPParser#creator_name.\n\n  }, {\n    key: \"enterCreator_name\",\n    value: function enterCreator_name(ctx) {} // Exit a parse tree produced by TPTPParser#creator_name.\n\n  }, {\n    key: \"exitCreator_name\",\n    value: function exitCreator_name(ctx) {} // Enter a parse tree produced by TPTPParser#optional_info.\n\n  }, {\n    key: \"enterOptional_info\",\n    value: function enterOptional_info(ctx) {} // Exit a parse tree produced by TPTPParser#optional_info.\n\n  }, {\n    key: \"exitOptional_info\",\n    value: function exitOptional_info(ctx) {} // Enter a parse tree produced by TPTPParser#useful_info.\n\n  }, {\n    key: \"enterUseful_info\",\n    value: function enterUseful_info(ctx) {} // Exit a parse tree produced by TPTPParser#useful_info.\n\n  }, {\n    key: \"exitUseful_info\",\n    value: function exitUseful_info(ctx) {} // Enter a parse tree produced by TPTPParser#info_items.\n\n  }, {\n    key: \"enterInfo_items\",\n    value: function enterInfo_items(ctx) {} // Exit a parse tree produced by TPTPParser#info_items.\n\n  }, {\n    key: \"exitInfo_items\",\n    value: function exitInfo_items(ctx) {} // Enter a parse tree produced by TPTPParser#info_item.\n\n  }, {\n    key: \"enterInfo_item\",\n    value: function enterInfo_item(ctx) {} // Exit a parse tree produced by TPTPParser#info_item.\n\n  }, {\n    key: \"exitInfo_item\",\n    value: function exitInfo_item(ctx) {} // Enter a parse tree produced by TPTPParser#formula_item.\n\n  }, {\n    key: \"enterFormula_item\",\n    value: function enterFormula_item(ctx) {} // Exit a parse tree produced by TPTPParser#formula_item.\n\n  }, {\n    key: \"exitFormula_item\",\n    value: function exitFormula_item(ctx) {} // Enter a parse tree produced by TPTPParser#description_item.\n\n  }, {\n    key: \"enterDescription_item\",\n    value: function enterDescription_item(ctx) {} // Exit a parse tree produced by TPTPParser#description_item.\n\n  }, {\n    key: \"exitDescription_item\",\n    value: function exitDescription_item(ctx) {} // Enter a parse tree produced by TPTPParser#iquote_item.\n\n  }, {\n    key: \"enterIquote_item\",\n    value: function enterIquote_item(ctx) {} // Exit a parse tree produced by TPTPParser#iquote_item.\n\n  }, {\n    key: \"exitIquote_item\",\n    value: function exitIquote_item(ctx) {} // Enter a parse tree produced by TPTPParser#inference_item.\n\n  }, {\n    key: \"enterInference_item\",\n    value: function enterInference_item(ctx) {} // Exit a parse tree produced by TPTPParser#inference_item.\n\n  }, {\n    key: \"exitInference_item\",\n    value: function exitInference_item(ctx) {} // Enter a parse tree produced by TPTPParser#inference_status.\n\n  }, {\n    key: \"enterInference_status\",\n    value: function enterInference_status(ctx) {} // Exit a parse tree produced by TPTPParser#inference_status.\n\n  }, {\n    key: \"exitInference_status\",\n    value: function exitInference_status(ctx) {} // Enter a parse tree produced by TPTPParser#status_value.\n\n  }, {\n    key: \"enterStatus_value\",\n    value: function enterStatus_value(ctx) {} // Exit a parse tree produced by TPTPParser#status_value.\n\n  }, {\n    key: \"exitStatus_value\",\n    value: function exitStatus_value(ctx) {} // Enter a parse tree produced by TPTPParser#inference_info.\n\n  }, {\n    key: \"enterInference_info\",\n    value: function enterInference_info(ctx) {} // Exit a parse tree produced by TPTPParser#inference_info.\n\n  }, {\n    key: \"exitInference_info\",\n    value: function exitInference_info(ctx) {} // Enter a parse tree produced by TPTPParser#assumptions_record.\n\n  }, {\n    key: \"enterAssumptions_record\",\n    value: function enterAssumptions_record(ctx) {} // Exit a parse tree produced by TPTPParser#assumptions_record.\n\n  }, {\n    key: \"exitAssumptions_record\",\n    value: function exitAssumptions_record(ctx) {} // Enter a parse tree produced by TPTPParser#refutation.\n\n  }, {\n    key: \"enterRefutation\",\n    value: function enterRefutation(ctx) {} // Exit a parse tree produced by TPTPParser#refutation.\n\n  }, {\n    key: \"exitRefutation\",\n    value: function exitRefutation(ctx) {} // Enter a parse tree produced by TPTPParser#new_symbol_record.\n\n  }, {\n    key: \"enterNew_symbol_record\",\n    value: function enterNew_symbol_record(ctx) {} // Exit a parse tree produced by TPTPParser#new_symbol_record.\n\n  }, {\n    key: \"exitNew_symbol_record\",\n    value: function exitNew_symbol_record(ctx) {} // Enter a parse tree produced by TPTPParser#new_symbol_list.\n\n  }, {\n    key: \"enterNew_symbol_list\",\n    value: function enterNew_symbol_list(ctx) {} // Exit a parse tree produced by TPTPParser#new_symbol_list.\n\n  }, {\n    key: \"exitNew_symbol_list\",\n    value: function exitNew_symbol_list(ctx) {} // Enter a parse tree produced by TPTPParser#principal_symbol.\n\n  }, {\n    key: \"enterPrincipal_symbol\",\n    value: function enterPrincipal_symbol(ctx) {} // Exit a parse tree produced by TPTPParser#principal_symbol.\n\n  }, {\n    key: \"exitPrincipal_symbol\",\n    value: function exitPrincipal_symbol(ctx) {} // Enter a parse tree produced by TPTPParser#include.\n\n  }, {\n    key: \"enterInclude\",\n    value: function enterInclude(ctx) {} // Exit a parse tree produced by TPTPParser#include.\n\n  }, {\n    key: \"exitInclude\",\n    value: function exitInclude(ctx) {} // Enter a parse tree produced by TPTPParser#formula_selection.\n\n  }, {\n    key: \"enterFormula_selection\",\n    value: function enterFormula_selection(ctx) {} // Exit a parse tree produced by TPTPParser#formula_selection.\n\n  }, {\n    key: \"exitFormula_selection\",\n    value: function exitFormula_selection(ctx) {} // Enter a parse tree produced by TPTPParser#name_list.\n\n  }, {\n    key: \"enterName_list\",\n    value: function enterName_list(ctx) {} // Exit a parse tree produced by TPTPParser#name_list.\n\n  }, {\n    key: \"exitName_list\",\n    value: function exitName_list(ctx) {} // Enter a parse tree produced by TPTPParser#general_term.\n\n  }, {\n    key: \"enterGeneral_term\",\n    value: function enterGeneral_term(ctx) {} // Exit a parse tree produced by TPTPParser#general_term.\n\n  }, {\n    key: \"exitGeneral_term\",\n    value: function exitGeneral_term(ctx) {} // Enter a parse tree produced by TPTPParser#general_data.\n\n  }, {\n    key: \"enterGeneral_data\",\n    value: function enterGeneral_data(ctx) {} // Exit a parse tree produced by TPTPParser#general_data.\n\n  }, {\n    key: \"exitGeneral_data\",\n    value: function exitGeneral_data(ctx) {} // Enter a parse tree produced by TPTPParser#general_function.\n\n  }, {\n    key: \"enterGeneral_function\",\n    value: function enterGeneral_function(ctx) {} // Exit a parse tree produced by TPTPParser#general_function.\n\n  }, {\n    key: \"exitGeneral_function\",\n    value: function exitGeneral_function(ctx) {} // Enter a parse tree produced by TPTPParser#formula_data.\n\n  }, {\n    key: \"enterFormula_data\",\n    value: function enterFormula_data(ctx) {} // Exit a parse tree produced by TPTPParser#formula_data.\n\n  }, {\n    key: \"exitFormula_data\",\n    value: function exitFormula_data(ctx) {} // Enter a parse tree produced by TPTPParser#general_list.\n\n  }, {\n    key: \"enterGeneral_list\",\n    value: function enterGeneral_list(ctx) {} // Exit a parse tree produced by TPTPParser#general_list.\n\n  }, {\n    key: \"exitGeneral_list\",\n    value: function exitGeneral_list(ctx) {} // Enter a parse tree produced by TPTPParser#general_terms.\n\n  }, {\n    key: \"enterGeneral_terms\",\n    value: function enterGeneral_terms(ctx) {} // Exit a parse tree produced by TPTPParser#general_terms.\n\n  }, {\n    key: \"exitGeneral_terms\",\n    value: function exitGeneral_terms(ctx) {} // Enter a parse tree produced by TPTPParser#name.\n\n  }, {\n    key: \"enterName\",\n    value: function enterName(ctx) {} // Exit a parse tree produced by TPTPParser#name.\n\n  }, {\n    key: \"exitName\",\n    value: function exitName(ctx) {} // Enter a parse tree produced by TPTPParser#atomic_word.\n\n  }, {\n    key: \"enterAtomic_word\",\n    value: function enterAtomic_word(ctx) {} // Exit a parse tree produced by TPTPParser#atomic_word.\n\n  }, {\n    key: \"exitAtomic_word\",\n    value: function exitAtomic_word(ctx) {} // Enter a parse tree produced by TPTPParser#atomic_defined_word.\n\n  }, {\n    key: \"enterAtomic_defined_word\",\n    value: function enterAtomic_defined_word(ctx) {} // Exit a parse tree produced by TPTPParser#atomic_defined_word.\n\n  }, {\n    key: \"exitAtomic_defined_word\",\n    value: function exitAtomic_defined_word(ctx) {} // Enter a parse tree produced by TPTPParser#atomic_system_word.\n\n  }, {\n    key: \"enterAtomic_system_word\",\n    value: function enterAtomic_system_word(ctx) {} // Exit a parse tree produced by TPTPParser#atomic_system_word.\n\n  }, {\n    key: \"exitAtomic_system_word\",\n    value: function exitAtomic_system_word(ctx) {} // Enter a parse tree produced by TPTPParser#number.\n\n  }, {\n    key: \"enterNumber\",\n    value: function enterNumber(ctx) {} // Exit a parse tree produced by TPTPParser#number.\n\n  }, {\n    key: \"exitNumber\",\n    value: function exitNumber(ctx) {} // Enter a parse tree produced by TPTPParser#file_name.\n\n  }, {\n    key: \"enterFile_name\",\n    value: function enterFile_name(ctx) {} // Exit a parse tree produced by TPTPParser#file_name.\n\n  }, {\n    key: \"exitFile_name\",\n    value: function exitFile_name(ctx) {}\n  }]);\n\n  return TPTPListener;\n}(_antlr[\"default\"].tree.ParseTreeListener);\n\nexports[\"default\"] = TPTPListener;\n\n//# sourceURL=webpack://idvjs/./TPTP-ANTLR4-Grammar/TPTPListener.js?");

/***/ }),

/***/ "./TPTP-ANTLR4-Grammar/TPTPParser.js":
/*!*******************************************!*\
  !*** ./TPTP-ANTLR4-Grammar/TPTPParser.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("function _typeof(obj){\"@babel/helpers - typeof\";if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}Object.defineProperty(exports, \"__esModule\", ({value:true}));exports[\"default\"]=void 0;var _antlr=_interopRequireDefault(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));var _TPTPListener=_interopRequireDefault(__webpack_require__(/*! ./TPTPListener.js */ \"./TPTP-ANTLR4-Grammar/TPTPListener.js\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{\"default\":obj};}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}function _createClass(Constructor,protoProps,staticProps){if(protoProps)_defineProperties(Constructor.prototype,protoProps);if(staticProps)_defineProperties(Constructor,staticProps);return Constructor;}function _inherits(subClass,superClass){if(typeof superClass!==\"function\"&&superClass!==null){throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,writable:true,configurable:true}});if(superClass)_setPrototypeOf(subClass,superClass);}function _setPrototypeOf(o,p){_setPrototypeOf=Object.setPrototypeOf||function _setPrototypeOf(o,p){o.__proto__=p;return o;};return _setPrototypeOf(o,p);}function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _possibleConstructorReturn(self,call){if(call&&(_typeof(call)===\"object\"||typeof call===\"function\")){return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self){if(self===void 0){throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){}));return true;}catch(e){return false;}}function _getPrototypeOf(o){_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function _getPrototypeOf(o){return o.__proto__||Object.getPrototypeOf(o);};return _getPrototypeOf(o);}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}var serializedATN=[4,1,98,1819,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,2,232,7,232,1,0,5,0,468,8,0,10,0,12,0,471,9,0,1,0,1,0,1,1,1,1,3,1,477,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,485,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,494,8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,507,8,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,518,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,529,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,540,8,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,551,8,9,1,9,1,9,1,10,1,10,1,10,3,10,558,8,10,1,11,1,11,1,12,1,12,1,12,3,12,565,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,573,8,13,1,14,1,14,1,14,3,14,578,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,3,16,587,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,597,8,17,10,17,12,17,600,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,610,8,18,10,18,12,18,613,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,623,8,19,10,19,12,19,626,9,19,1,20,1,20,1,20,3,20,631,8,20,1,21,1,21,3,21,635,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,644,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,5,25,658,8,25,10,25,12,25,661,9,25,1,26,1,26,3,26,665,8,26,1,27,1,27,1,27,1,27,1,28,1,28,3,28,673,8,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,686,8,31,1,32,1,32,3,32,690,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,700,8,33,1,34,1,34,3,34,704,8,34,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,3,38,725,8,38,1,39,1,39,1,39,1,39,1,39,3,39,732,8,39,1,40,1,40,1,40,1,40,1,40,3,40,739,8,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,42,750,8,42,1,43,1,43,1,43,1,43,1,43,1,43,3,43,758,8,43,1,44,1,44,1,44,1,44,1,44,3,44,765,8,44,1,45,1,45,1,45,1,45,1,45,3,45,772,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,789,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,798,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,808,8,49,1,50,1,50,1,50,3,50,813,8,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,3,53,822,8,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,832,8,54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,842,8,55,10,55,12,55,845,9,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,5,56,855,8,56,10,56,12,56,858,9,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,60,875,8,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,883,8,61,1,62,1,62,3,62,887,8,62,1,63,1,63,1,63,1,63,1,64,1,64,3,64,895,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,65,905,8,65,10,65,12,65,908,9,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,918,8,66,10,66,12,66,921,9,66,1,67,1,67,1,67,3,67,926,8,67,1,68,1,68,3,68,930,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,939,8,69,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,955,8,72,1,73,1,73,3,73,959,8,73,1,74,1,74,1,74,1,74,1,75,1,75,3,75,967,8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,979,8,78,1,79,1,79,1,79,1,79,1,79,1,79,3,79,987,8,79,1,80,1,80,3,80,991,8,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1001,8,81,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,83,3,83,1013,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,1,85,3,85,1028,8,85,1,86,1,86,1,86,1,86,1,86,3,86,1035,8,86,1,87,1,87,1,87,1,87,1,87,3,87,1042,8,87,1,88,1,88,1,88,1,88,1,89,1,89,3,89,1050,8,89,1,90,1,90,1,90,1,90,1,90,3,90,1057,8,90,1,91,1,91,1,91,1,91,1,91,1,91,1,92,1,92,1,92,1,92,3,92,1069,8,92,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,1079,8,93,1,94,1,94,1,94,1,94,1,94,3,94,1086,8,94,1,95,1,95,1,95,1,95,1,95,3,95,1093,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1103,8,96,1,97,1,97,3,97,1107,8,97,1,98,1,98,1,98,1,98,1,98,1,98,3,98,1115,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,1,100,1,100,1,100,3,100,1130,8,100,1,101,1,101,1,101,1,101,1,101,3,101,1137,8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,3,102,1152,8,102,1,103,1,103,1,103,1,103,1,103,3,103,1159,8,103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,5,105,1173,8,105,10,105,12,105,1176,9,105,1,106,1,106,1,106,1,106,1,107,1,107,1,107,1,107,1,107,3,107,1187,8,107,1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,3,111,1203,8,111,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,3,112,1220,8,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,3,113,1232,8,113,1,114,1,114,1,115,1,115,1,115,1,115,1,115,3,115,1241,8,115,1,116,1,116,3,116,1245,8,116,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,120,1,120,1,121,1,121,3,121,1262,8,121,1,122,1,122,3,122,1266,8,122,1,123,1,123,3,123,1270,8,123,1,124,1,124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,3,125,1281,8,125,1,126,1,126,1,126,3,126,1286,8,126,1,127,1,127,3,127,1290,8,127,1,128,1,128,1,128,1,128,1,129,1,129,3,129,1298,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,130,1,130,5,130,1308,8,130,10,130,12,130,1311,9,130,1,131,1,131,1,131,1,131,1,131,1,131,1,131,1,131,5,131,1321,8,131,10,131,12,131,1324,9,131,1,132,1,132,1,132,1,132,3,132,1330,8,132,1,133,1,133,1,133,1,133,1,134,1,134,3,134,1338,8,134,1,135,1,135,1,135,1,135,1,135,1,135,3,135,1346,8,135,1,136,1,136,1,136,1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,3,137,1360,8,137,1,138,1,138,1,138,3,138,1365,8,138,1,139,1,139,1,140,1,140,3,140,1371,8,140,1,141,1,141,1,142,1,142,1,142,1,142,1,143,1,143,1,144,1,144,1,144,1,144,1,144,1,144,3,144,1387,8,144,1,145,1,145,3,145,1391,8,145,1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,3,147,1401,8,147,1,148,1,148,1,148,1,148,1,148,1,148,3,148,1409,8,148,1,149,1,149,1,149,1,149,1,149,3,149,1416,8,149,1,150,1,150,3,150,1420,8,150,1,151,1,151,1,151,3,151,1425,8,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,1435,8,152,1,153,1,153,1,153,1,153,1,153,3,153,1442,8,153,1,154,1,154,1,154,1,154,1,154,3,154,1449,8,154,1,155,1,155,1,155,1,155,1,155,3,155,1456,8,155,1,156,1,156,1,156,1,156,1,156,1,156,5,156,1464,8,156,10,156,12,156,1467,9,156,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,1478,8,157,1,158,1,158,1,158,3,158,1483,8,158,1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,1,167,1,167,1,168,1,168,1,169,1,169,3,169,1507,8,169,1,170,1,170,3,170,1511,8,170,1,171,1,171,1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,1,177,1,177,1,178,1,178,1,179,1,179,1,180,1,180,3,180,1533,8,180,1,181,1,181,1,182,1,182,3,182,1539,8,182,1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,1,184,3,184,1551,8,184,1,185,1,185,1,185,5,185,1556,8,185,10,185,12,185,1559,9,185,1,186,1,186,3,186,1563,8,186,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,187,1,188,1,188,1,189,1,189,1,189,1,189,1,189,3,189,1580,8,189,1,190,1,190,1,190,5,190,1585,8,190,10,190,12,190,1588,9,190,1,191,1,191,3,191,1592,8,191,1,192,1,192,1,192,1,193,1,193,1,193,3,193,1600,8,193,1,193,1,193,1,194,1,194,1,195,1,195,1,195,3,195,1609,8,195,1,196,1,196,1,196,3,196,1614,8,196,1,196,1,196,1,197,1,197,1,197,1,198,1,198,1,198,3,198,1624,8,198,1,198,1,198,1,199,1,199,1,200,1,200,1,200,3,200,1633,8,200,1,200,1,200,1,201,1,201,1,202,1,202,1,202,1,203,1,203,1,203,1,203,1,203,1,203,3,203,1648,8,203,1,204,1,204,1,204,5,204,1653,8,204,10,204,12,204,1656,9,204,1,205,1,205,1,205,3,205,1661,8,205,1,206,1,206,3,206,1665,8,206,1,207,1,207,1,207,1,207,1,208,1,208,1,208,1,208,1,209,1,209,1,209,1,209,3,209,1679,8,209,1,210,1,210,1,210,1,210,1,210,3,210,1686,8,210,1,211,1,211,1,212,1,212,1,212,1,212,1,212,1,212,1,212,1,213,1,213,1,213,1,213,1,213,1,213,1,214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,216,1,216,1,216,5,216,1718,8,216,10,216,12,216,1721,9,216,1,217,1,217,3,217,1725,8,217,1,218,1,218,1,218,3,218,1730,8,218,1,218,1,218,1,219,1,219,1,219,1,219,1,219,1,220,1,220,1,220,5,220,1742,8,220,10,220,12,220,1745,9,220,1,221,1,221,1,221,1,221,1,221,1,221,3,221,1753,8,221,1,222,1,222,1,222,1,222,1,222,1,222,3,222,1761,8,222,1,223,1,223,1,223,1,223,1,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,1788,8,224,1,225,1,225,1,225,1,225,1,225,3,225,1795,8,225,1,226,1,226,1,226,5,226,1800,8,226,10,226,12,226,1803,9,226,1,227,1,227,3,227,1807,8,227,1,228,1,228,1,229,1,229,1,230,1,230,1,231,1,231,1,232,1,232,1,232,0,11,34,36,38,110,112,130,132,210,260,262,312,233,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,0,9,2,0,51,51,56,56,3,0,58,58,60,60,62,62,2,0,54,54,57,57,1,0,43,48,1,0,41,42,2,0,53,53,65,65,5,0,50,50,55,55,59,59,61,61,63,63,1,0,93,94,3,0,73,73,76,76,79,79,1802,0,469,1,0,0,0,2,476,1,0,0,0,4,484,1,0,0,0,6,486,1,0,0,0,8,497,1,0,0,0,10,499,1,0,0,0,12,510,1,0,0,0,14,521,1,0,0,0,16,532,1,0,0,0,18,543,1,0,0,0,20,554,1,0,0,0,22,559,1,0,0,0,24,564,1,0,0,0,26,572,1,0,0,0,28,577,1,0,0,0,30,579,1,0,0,0,32,586,1,0,0,0,34,588,1,0,0,0,36,601,1,0,0,0,38,614,1,0,0,0,40,630,1,0,0,0,42,634,1,0,0,0,44,643,1,0,0,0,46,645,1,0,0,0,48,648,1,0,0,0,50,654,1,0,0,0,52,664,1,0,0,0,54,666,1,0,0,0,56,672,1,0,0,0,58,674,1,0,0,0,60,677,1,0,0,0,62,685,1,0,0,0,64,689,1,0,0,0,66,699,1,0,0,0,68,703,1,0,0,0,70,705,1,0,0,0,72,709,1,0,0,0,74,711,1,0,0,0,76,724,1,0,0,0,78,731,1,0,0,0,80,738,1,0,0,0,82,740,1,0,0,0,84,749,1,0,0,0,86,757,1,0,0,0,88,764,1,0,0,0,90,771,1,0,0,0,92,788,1,0,0,0,94,790,1,0,0,0,96,797,1,0,0,0,98,807,1,0,0,0,100,812,1,0,0,0,102,814,1,0,0,0,104,816,1,0,0,0,106,821,1,0,0,0,108,831,1,0,0,0,110,833,1,0,0,0,112,846,1,0,0,0,114,859,1,0,0,0,116,863,1,0,0,0,118,867,1,0,0,0,120,874,1,0,0,0,122,882,1,0,0,0,124,886,1,0,0,0,126,888,1,0,0,0,128,894,1,0,0,0,130,896,1,0,0,0,132,909,1,0,0,0,134,925,1,0,0,0,136,929,1,0,0,0,138,938,1,0,0,0,140,940,1,0,0,0,142,942,1,0,0,0,144,954,1,0,0,0,146,958,1,0,0,0,148,960,1,0,0,0,150,966,1,0,0,0,152,968,1,0,0,0,154,971,1,0,0,0,156,978,1,0,0,0,158,986,1,0,0,0,160,990,1,0,0,0,162,1000,1,0,0,0,164,1002,1,0,0,0,166,1012,1,0,0,0,168,1014,1,0,0,0,170,1027,1,0,0,0,172,1034,1,0,0,0,174,1041,1,0,0,0,176,1043,1,0,0,0,178,1049,1,0,0,0,180,1056,1,0,0,0,182,1058,1,0,0,0,184,1068,1,0,0,0,186,1078,1,0,0,0,188,1085,1,0,0,0,190,1092,1,0,0,0,192,1102,1,0,0,0,194,1106,1,0,0,0,196,1114,1,0,0,0,198,1116,1,0,0,0,200,1129,1,0,0,0,202,1136,1,0,0,0,204,1151,1,0,0,0,206,1158,1,0,0,0,208,1160,1,0,0,0,210,1164,1,0,0,0,212,1177,1,0,0,0,214,1186,1,0,0,0,216,1188,1,0,0,0,218,1192,1,0,0,0,220,1196,1,0,0,0,222,1202,1,0,0,0,224,1219,1,0,0,0,226,1231,1,0,0,0,228,1233,1,0,0,0,230,1240,1,0,0,0,232,1244,1,0,0,0,234,1246,1,0,0,0,236,1249,1,0,0,0,238,1253,1,0,0,0,240,1257,1,0,0,0,242,1261,1,0,0,0,244,1265,1,0,0,0,246,1269,1,0,0,0,248,1271,1,0,0,0,250,1280,1,0,0,0,252,1285,1,0,0,0,254,1289,1,0,0,0,256,1291,1,0,0,0,258,1297,1,0,0,0,260,1299,1,0,0,0,262,1312,1,0,0,0,264,1329,1,0,0,0,266,1331,1,0,0,0,268,1337,1,0,0,0,270,1345,1,0,0,0,272,1347,1,0,0,0,274,1359,1,0,0,0,276,1364,1,0,0,0,278,1366,1,0,0,0,280,1370,1,0,0,0,282,1372,1,0,0,0,284,1374,1,0,0,0,286,1378,1,0,0,0,288,1386,1,0,0,0,290,1390,1,0,0,0,292,1392,1,0,0,0,294,1400,1,0,0,0,296,1408,1,0,0,0,298,1415,1,0,0,0,300,1419,1,0,0,0,302,1424,1,0,0,0,304,1434,1,0,0,0,306,1441,1,0,0,0,308,1448,1,0,0,0,310,1455,1,0,0,0,312,1457,1,0,0,0,314,1477,1,0,0,0,316,1482,1,0,0,0,318,1484,1,0,0,0,320,1486,1,0,0,0,322,1488,1,0,0,0,324,1490,1,0,0,0,326,1492,1,0,0,0,328,1494,1,0,0,0,330,1496,1,0,0,0,332,1498,1,0,0,0,334,1500,1,0,0,0,336,1502,1,0,0,0,338,1506,1,0,0,0,340,1510,1,0,0,0,342,1512,1,0,0,0,344,1514,1,0,0,0,346,1516,1,0,0,0,348,1518,1,0,0,0,350,1520,1,0,0,0,352,1522,1,0,0,0,354,1524,1,0,0,0,356,1526,1,0,0,0,358,1528,1,0,0,0,360,1532,1,0,0,0,362,1534,1,0,0,0,364,1538,1,0,0,0,366,1540,1,0,0,0,368,1550,1,0,0,0,370,1552,1,0,0,0,372,1562,1,0,0,0,374,1564,1,0,0,0,376,1572,1,0,0,0,378,1579,1,0,0,0,380,1581,1,0,0,0,382,1589,1,0,0,0,384,1593,1,0,0,0,386,1596,1,0,0,0,388,1603,1,0,0,0,390,1608,1,0,0,0,392,1610,1,0,0,0,394,1617,1,0,0,0,396,1620,1,0,0,0,398,1627,1,0,0,0,400,1629,1,0,0,0,402,1636,1,0,0,0,404,1638,1,0,0,0,406,1647,1,0,0,0,408,1649,1,0,0,0,410,1660,1,0,0,0,412,1664,1,0,0,0,414,1666,1,0,0,0,416,1670,1,0,0,0,418,1678,1,0,0,0,420,1685,1,0,0,0,422,1687,1,0,0,0,424,1689,1,0,0,0,426,1696,1,0,0,0,428,1702,1,0,0,0,430,1706,1,0,0,0,432,1714,1,0,0,0,434,1724,1,0,0,0,436,1726,1,0,0,0,438,1733,1,0,0,0,440,1738,1,0,0,0,442,1752,1,0,0,0,444,1760,1,0,0,0,446,1762,1,0,0,0,448,1787,1,0,0,0,450,1794,1,0,0,0,452,1796,1,0,0,0,454,1806,1,0,0,0,456,1808,1,0,0,0,458,1810,1,0,0,0,460,1812,1,0,0,0,462,1814,1,0,0,0,464,1816,1,0,0,0,466,468,3,2,1,0,467,466,1,0,0,0,468,471,1,0,0,0,469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,0,0,472,473,5,0,0,1,473,1,1,0,0,0,474,477,3,4,2,0,475,477,3,436,218,0,476,474,1,0,0,0,476,475,1,0,0,0,477,3,1,0,0,0,478,485,3,10,5,0,479,485,3,12,6,0,480,485,3,14,7,0,481,485,3,16,8,0,482,485,3,18,9,0,483,485,3,6,3,0,484,478,1,0,0,0,484,479,1,0,0,0,484,480,1,0,0,0,484,481,1,0,0,0,484,482,1,0,0,0,484,483,1,0,0,0,485,5,1,0,0,0,486,487,5,1,0,0,487,488,3,454,227,0,488,489,5,2,0,0,489,490,3,22,11,0,490,491,5,2,0,0,491,493,3,8,4,0,492,494,3,20,10,0,493,492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,496,5,3,0,0,496,7,1,0,0,0,497,498,3,250,125,0,498,9,1,0,0,0,499,500,5,4,0,0,500,501,3,454,227,0,501,502,5,2,0,0,502,503,3,22,11,0,503,504,5,2,0,0,504,506,3,24,12,0,505,507,3,20,10,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,5,3,0,0,509,11,1,0,0,0,510,511,5,5,0,0,511,512,3,454,227,0,512,513,5,2,0,0,513,514,3,22,11,0,514,515,5,2,0,0,515,517,3,120,60,0,516,518,3,20,10,0,517,516,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,5,3,0,0,520,13,1,0,0,0,521,522,5,6,0,0,522,523,3,454,227,0,523,524,5,2,0,0,524,525,3,22,11,0,525,526,5,2,0,0,526,528,3,244,122,0,527,529,3,20,10,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,531,5,3,0,0,531,15,1,0,0,0,532,533,5,7,0,0,533,534,3,454,227,0,534,535,5,2,0,0,535,536,3,22,11,0,536,537,5,2,0,0,537,539,3,250,125,0,538,540,3,20,10,0,539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,542,5,3,0,0,542,17,1,0,0,0,543,544,5,8,0,0,544,545,3,454,227,0,545,546,5,2,0,0,546,547,3,22,11,0,547,548,5,2,0,0,548,550,3,310,155,0,549,551,3,20,10,0,550,549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,553,5,3,0,0,553,19,1,0,0,0,554,555,5,2,0,0,555,557,3,368,184,0,556,558,3,404,202,0,557,556,1,0,0,0,557,558,1,0,0,0,558,21,1,0,0,0,559,560,5,93,0,0,560,23,1,0,0,0,561,565,3,26,13,0,562,565,3,98,49,0,563,565,3,114,57,0,564,561,1,0,0,0,564,562,1,0,0,0,564,563,1,0,0,0,565,25,1,0,0,0,566,573,3,44,22,0,567,573,3,56,28,0,568,573,3,28,14,0,569,573,3,70,35,0,570,573,3,116,58,0,571,573,3,118,59,0,572,566,1,0,0,0,572,567,1,0,0,0,572,568,1,0,0,0,572,569,1,0,0,0,572,570,1,0,0,0,572,571,1,0,0,0,573,27,1,0,0,0,574,578,3,30,15,0,575,578,3,32,16,0,576,578,3,106,53,0,577,574,1,0,0,0,577,575,1,0,0,0,577,576,1,0,0,0,578,29,1,0,0,0,579,580,3,40,20,0,580,581,3,324,162,0,581,582,3,40,20,0,582,31,1,0,0,0,583,587,3,34,17,0,584,587,3,36,18,0,585,587,3,38,19,0,586,583,1,0,0,0,586,584,1,0,0,0,586,585,1,0,0,0,587,33,1,0,0,0,588,589,6,17,-1,0,589,590,3,40,20,0,590,591,5,41,0,0,591,592,3,40,20,0,592,598,1,0,0,0,593,594,10,1,0,0,594,595,5,41,0,0,595,597,3,40,20,0,596,593,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,35,1,0,0,0,600,598,1,0,0,0,601,602,6,18,-1,0,602,603,3,40,20,0,603,604,5,42,0,0,604,605,3,40,20,0,605,611,1,0,0,0,606,607,10,1,0,0,607,608,5,42,0,0,608,610,3,40,20,0,609,606,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,0,612,37,1,0,0,0,613,611,1,0,0,0,614,615,6,19,-1,0,615,616,3,40,20,0,616,617,5,64,0,0,617,618,3,40,20,0,618,624,1,0,0,0,619,620,10,1,0,0,620,621,5,64,0,0,621,623,3,40,20,0,622,619,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,39,1,0,0,0,626,624,1,0,0,0,627,631,3,44,22,0,628,631,3,56,28,0,629,631,3,70,35,0,630,627,1,0,0,0,630,628,1,0,0,0,630,629,1,0,0,0,631,41,1,0,0,0,632,635,3,44,22,0,633,635,3,58,29,0,634,632,1,0,0,0,634,633,1,0,0,0,635,43,1,0,0,0,636,644,3,46,23,0,637,644,3,62,31,0,638,644,3,366,183,0,639,640,5,9,0,0,640,641,3,26,13,0,641,642,5,10,0,0,642,644,1,0,0,0,643,636,1,0,0,0,643,637,1,0,0,0,643,638,1,0,0,0,643,639,1,0,0,0,644,45,1,0,0,0,645,646,3,48,24,0,646,647,3,40,20,0,647,47,1,0,0,0,648,649,3,316,158,0,649,650,5,11,0,0,650,651,3,50,25,0,651,652,5,12,0,0,652,653,5,13,0,0,653,49,1,0,0,0,654,659,3,52,26,0,655,656,5,2,0,0,656,658,3,52,26,0,657,655,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,51,1,0,0,0,661,659,1,0,0,0,662,665,3,54,27,0,663,665,3,366,183,0,664,662,1,0,0,0,664,663,1,0,0,0,665,53,1,0,0,0,666,667,3,366,183,0,667,668,5,13,0,0,668,669,3,100,50,0,669,55,1,0,0,0,670,673,3,58,29,0,671,673,3,60,30,0,672,670,1,0,0,0,672,671,1,0,0,0,673,57,1,0,0,0,674,675,3,328,164,0,675,676,3,42,21,0,676,59,1,0,0,0,677,678,3,86,43,0,678,679,5,52,0,0,679,680,3,86,43,0,680,61,1,0,0,0,681,686,3,64,32,0,682,686,3,66,33,0,683,686,3,72,36,0,684,686,3,92,46,0,685,681,1,0,0,0,685,682,1,0,0,0,685,683,1,0,0,0,685,684,1,0,0,0,686,63,1,0,0,0,687,690,3,348,174,0,688,690,3,90,45,0,689,687,1,0,0,0,689,688,1,0,0,0,690,65,1,0,0,0,691,700,3,352,176,0,692,700,3,68,34,0,693,694,5,9,0,0,694,695,3,88,44,0,695,696,5,10,0,0,696,700,1,0,0,0,697,700,3,222,111,0,698,700,3,74,37,0,699,691,1,0,0,0,699,692,1,0,0,0,699,693,1,0,0,0,699,697,1,0,0,0,699,698,1,0,0,0,700,67,1,0,0,0,701,704,3,364,182,0,702,704,3,362,181,0,703,701,1,0,0,0,703,702,1,0,0,0,704,69,1,0,0,0,705,706,3,86,43,0,706,707,3,346,173,0,707,708,3,86,43,0,708,71,1,0,0,0,709,710,3,356,178,0,710,73,1,0,0,0,711,712,5,14,0,0,712,713,3,76,38,0,713,714,5,2,0,0,714,715,3,80,40,0,715,716,5,2,0,0,716,717,3,26,13,0,717,718,5,10,0,0,718,75,1,0,0,0,719,725,3,98,49,0,720,721,5,11,0,0,721,722,3,78,39,0,722,723,5,12,0,0,723,725,1,0,0,0,724,719,1,0,0,0,724,720,1,0,0,0,725,77,1,0,0,0,726,732,3,98,49,0,727,728,3,98,49,0,728,729,5,2,0,0,729,730,3,78,39,0,730,732,1,0,0,0,731,726,1,0,0,0,731,727,1,0,0,0,732,79,1,0,0,0,733,739,3,82,41,0,734,735,5,11,0,0,735,736,3,84,42,0,736,737,5,12,0,0,737,739,1,0,0,0,738,733,1,0,0,0,738,734,1,0,0,0,739,81,1,0,0,0,740,741,3,26,13,0,741,742,5,65,0,0,742,743,3,26,13,0,743,83,1,0,0,0,744,750,3,82,41,0,745,746,3,82,41,0,746,747,5,2,0,0,747,748,3,84,42,0,748,750,1,0,0,0,749,744,1,0,0,0,749,745,1,0,0,0,750,85,1,0,0,0,751,758,3,62,31,0,752,758,3,366,183,0,753,754,5,9,0,0,754,755,3,26,13,0,755,756,5,10,0,0,756,758,1,0,0,0,757,751,1,0,0,0,757,752,1,0,0,0,757,753,1,0,0,0,758,87,1,0,0,0,759,765,3,324,162,0,760,765,3,326,163,0,761,765,5,53,0,0,762,765,5,52,0,0,763,765,3,328,164,0,764,759,1,0,0,0,764,760,1,0,0,0,764,761,1,0,0,0,764,762,1,0,0,0,764,763,1,0,0,0,765,89,1,0,0,0,766,772,5,15,0,0,767,768,5,11,0,0,768,769,3,96,48,0,769,770,5,12,0,0,770,772,1,0,0,0,771,766,1,0,0,0,771,767,1,0,0,0,772,91,1,0,0,0,773,774,3,350,175,0,774,775,5,9,0,0,775,776,3,94,47,0,776,777,5,10,0,0,777,789,1,0,0,0,778,779,3,354,177,0,779,780,5,9,0,0,780,781,3,94,47,0,781,782,5,10,0,0,782,789,1,0,0,0,783,784,3,358,179,0,784,785,5,9,0,0,785,786,3,94,47,0,786,787,5,10,0,0,787,789,1,0,0,0,788,773,1,0,0,0,788,778,1,0,0,0,788,783,1,0,0,0,789,93,1,0,0,0,790,791,3,96,48,0,791,95,1,0,0,0,792,798,3,26,13,0,793,794,3,26,13,0,794,795,5,2,0,0,795,796,3,96,48,0,796,798,1,0,0,0,797,792,1,0,0,0,797,793,1,0,0,0,798,97,1,0,0,0,799,800,3,340,170,0,800,801,5,13,0,0,801,802,3,100,50,0,802,808,1,0,0,0,803,804,5,9,0,0,804,805,3,98,49,0,805,806,5,10,0,0,806,808,1,0,0,0,807,799,1,0,0,0,807,803,1,0,0,0,808,99,1,0,0,0,809,813,3,102,51,0,810,813,3,108,54,0,811,813,3,104,52,0,812,809,1,0,0,0,812,810,1,0,0,0,812,811,1,0,0,0,813,101,1,0,0,0,814,815,3,44,22,0,815,103,1,0,0,0,816,817,3,38,19,0,817,105,1,0,0,0,818,822,3,108,54,0,819,822,3,110,55,0,820,822,3,112,56,0,821,818,1,0,0,0,821,819,1,0,0,0,821,820,1,0,0,0,822,107,1,0,0,0,823,824,3,102,51,0,824,825,5,67,0,0,825,826,3,102,51,0,826,832,1,0,0,0,827,828,3,102,51,0,828,829,5,67,0,0,829,830,3,108,54,0,830,832,1,0,0,0,831,823,1,0,0,0,831,827,1,0,0,0,832,109,1,0,0,0,833,834,6,55,-1,0,834,835,3,102,51,0,835,836,5,68,0,0,836,837,3,102,51,0,837,843,1,0,0,0,838,839,10,1,0,0,839,840,5,68,0,0,840,842,3,102,51,0,841,838,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,844,1,0,0,0,844,111,1,0,0,0,845,843,1,0,0,0,846,847,6,56,-1,0,847,848,3,102,51,0,848,849,5,69,0,0,849,850,3,102,51,0,850,856,1,0,0,0,851,852,10,1,0,0,852,853,5,69,0,0,853,855,3,102,51,0,854,851,1,0,0,0,855,858,1,0,0,0,856,854,1,0,0,0,856,857,1,0,0,0,857,113,1,0,0,0,858,856,1,0,0,0,859,860,3,340,170,0,860,861,5,71,0,0,861,862,3,338,169,0,862,115,1,0,0,0,863,864,3,62,31,0,864,865,5,66,0,0,865,866,3,26,13,0,866,117,1,0,0,0,867,868,3,90,45,0,868,869,5,72,0,0,869,870,3,90,45,0,870,119,1,0,0,0,871,875,3,122,61,0,872,875,3,192,96,0,873,875,3,216,108,0,874,871,1,0,0,0,874,872,1,0,0,0,874,873,1,0,0,0,875,121,1,0,0,0,876,883,3,138,69,0,877,883,3,150,75,0,878,883,3,124,62,0,879,883,3,164,82,0,880,883,3,218,109,0,881,883,3,220,110,0,882,876,1,0,0,0,882,877,1,0,0,0,882,878,1,0,0,0,882,879,1,0,0,0,882,880,1,0,0,0,882,881,1,0,0,0,883,123,1,0,0,0,884,887,3,126,63,0,885,887,3,128,64,0,886,884,1,0,0,0,886,885,1,0,0,0,887,125,1,0,0,0,888,889,3,134,67,0,889,890,3,324,162,0,890,891,3,134,67,0,891,127,1,0,0,0,892,895,3,130,65,0,893,895,3,132,66,0,894,892,1,0,0,0,894,893,1,0,0,0,895,129,1,0,0,0,896,897,6,65,-1,0,897,898,3,134,67,0,898,899,5,41,0,0,899,900,3,134,67,0,900,906,1,0,0,0,901,902,10,1,0,0,902,903,5,41,0,0,903,905,3,134,67,0,904,901,1,0,0,0,905,908,1,0,0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,131,1,0,0,0,908,906,1,0,0,0,909,910,6,66,-1,0,910,911,3,134,67,0,911,912,5,42,0,0,912,913,3,134,67,0,913,919,1,0,0,0,914,915,10,1,0,0,915,916,5,42,0,0,916,918,3,134,67,0,917,914,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,133,1,0,0,0,921,919,1,0,0,0,922,926,3,138,69,0,923,926,3,150,75,0,924,926,3,164,82,0,925,922,1,0,0,0,925,923,1,0,0,0,925,924,1,0,0,0,926,135,1,0,0,0,927,930,3,138,69,0,928,930,3,152,76,0,929,927,1,0,0,0,929,928,1,0,0,0,930,137,1,0,0,0,931,939,3,142,71,0,932,939,3,156,78,0,933,939,3,140,70,0,934,935,5,9,0,0,935,936,3,122,61,0,936,937,5,10,0,0,937,939,1,0,0,0,938,931,1,0,0,0,938,932,1,0,0,0,938,933,1,0,0,0,938,934,1,0,0,0,939,139,1,0,0,0,940,941,3,366,183,0,941,141,1,0,0,0,942,943,3,322,161,0,943,944,5,11,0,0,944,945,3,144,72,0,945,946,5,12,0,0,946,947,5,13,0,0,947,948,3,134,67,0,948,143,1,0,0,0,949,955,3,146,73,0,950,951,3,146,73,0,951,952,5,2,0,0,952,953,3,144,72,0,953,955,1,0,0,0,954,949,1,0,0,0,954,950,1,0,0,0,955,145,1,0,0,0,956,959,3,148,74,0,957,959,3,366,183,0,958,956,1,0,0,0,958,957,1,0,0,0,959,147,1,0,0,0,960,961,3,366,183,0,961,962,5,13,0,0,962,963,3,204,102,0,963,149,1,0,0,0,964,967,3,152,76,0,965,967,3,154,77,0,966,964,1,0,0,0,966,965,1,0,0,0,967,151,1,0,0,0,968,969,3,328,164,0,969,970,3,136,68,0,970,153,1,0,0,0,971,972,3,186,93,0,972,973,5,52,0,0,973,974,3,186,93,0,974,155,1,0,0,0,975,979,3,158,79,0,976,979,3,160,80,0,977,979,3,166,83,0,978,975,1,0,0,0,978,976,1,0,0,0,978,977,1,0,0,0,979,157,1,0,0,0,980,987,3,348,174,0,981,982,3,350,175,0,982,983,5,9,0,0,983,984,3,190,95,0,984,985,5,10,0,0,985,987,1,0,0,0,986,980,1,0,0,0,986,981,1,0,0,0,987,159,1,0,0,0,988,991,3,162,81,0,989,991,3,222,111,0,990,988,1,0,0,0,990,989,1,0,0,0,991,161,1,0,0,0,992,1001,3,352,176,0,993,994,3,354,177,0,994,995,5,9,0,0,995,996,3,190,95,0,996,997,5,10,0,0,997,1001,1,0,0,0,998,1001,3,182,91,0,999,1001,3,168,84,0,1000,992,1,0,0,0,1000,993,1,0,0,0,1000,998,1,0,0,0,1000,999,1,0,0,0,1001,163,1,0,0,0,1002,1003,3,186,93,0,1003,1004,3,346,173,0,1004,1005,3,186,93,0,1005,165,1,0,0,0,1006,1013,3,356,178,0,1007,1008,3,358,179,0,1008,1009,5,9,0,0,1009,1010,3,190,95,0,1010,1011,5,10,0,0,1011,1013,1,0,0,0,1012,1006,1,0,0,0,1012,1007,1,0,0,0,1013,167,1,0,0,0,1014,1015,5,14,0,0,1015,1016,3,170,85,0,1016,1017,5,2,0,0,1017,1018,3,174,87,0,1018,1019,5,2,0,0,1019,1020,3,184,92,0,1020,1021,5,10,0,0,1021,169,1,0,0,0,1022,1028,3,192,96,0,1023,1024,5,11,0,0,1024,1025,3,172,86,0,1025,1026,5,12,0,0,1026,1028,1,0,0,0,1027,1022,1,0,0,0,1027,1023,1,0,0,0,1028,171,1,0,0,0,1029,1035,3,192,96,0,1030,1031,3,192,96,0,1031,1032,5,2,0,0,1032,1033,3,172,86,0,1033,1035,1,0,0,0,1034,1029,1,0,0,0,1034,1030,1,0,0,0,1035,173,1,0,0,0,1036,1042,3,176,88,0,1037,1038,5,11,0,0,1038,1039,3,180,90,0,1039,1040,5,12,0,0,1040,1042,1,0,0,0,1041,1036,1,0,0,0,1041,1037,1,0,0,0,1042,175,1,0,0,0,1043,1044,3,178,89,0,1044,1045,5,65,0,0,1045,1046,3,184,92,0,1046,177,1,0,0,0,1047,1050,3,158,79,0,1048,1050,3,188,94,0,1049,1047,1,0,0,0,1049,1048,1,0,0,0,1050,179,1,0,0,0,1051,1057,3,176,88,0,1052,1053,3,176,88,0,1053,1054,5,2,0,0,1054,1055,3,180,90,0,1055,1057,1,0,0,0,1056,1051,1,0,0,0,1056,1052,1,0,0,0,1057,181,1,0,0,0,1058,1059,3,222,111,0,1059,1060,5,64,0,0,1060,1061,5,9,0,0,1061,1062,3,190,95,0,1062,1063,5,10,0,0,1063,183,1,0,0,0,1064,1069,3,122,61,0,1065,1069,3,364,182,0,1066,1069,3,188,94,0,1067,1069,3,236,118,0,1068,1064,1,0,0,0,1068,1065,1,0,0,0,1068,1066,1,0,0,0,1068,1067,1,0,0,0,1069,185,1,0,0,0,1070,1079,3,156,78,0,1071,1079,3,364,182,0,1072,1079,3,188,94,0,1073,1079,3,366,183,0,1074,1075,5,9,0,0,1075,1076,3,122,61,0,1076,1077,5,10,0,0,1077,1079,1,0,0,0,1078,1070,1,0,0,0,1078,1071,1,0,0,0,1078,1072,1,0,0,0,1078,1073,1,0,0,0,1078,1074,1,0,0,0,1079,187,1,0,0,0,1080,1086,5,15,0,0,1081,1082,5,11,0,0,1082,1083,3,190,95,0,1083,1084,5,12,0,0,1084,1086,1,0,0,0,1085,1080,1,0,0,0,1085,1081,1,0,0,0,1086,189,1,0,0,0,1087,1093,3,184,92,0,1088,1089,3,184,92,0,1089,1090,5,2,0,0,1090,1091,3,190,95,0,1091,1093,1,0,0,0,1092,1087,1,0,0,0,1092,1088,1,0,0,0,1093,191,1,0,0,0,1094,1095,3,340,170,0,1095,1096,5,13,0,0,1096,1097,3,194,97,0,1097,1103,1,0,0,0,1098,1099,5,9,0,0,1099,1100,3,192,96,0,1100,1101,5,10,0,0,1101,1103,1,0,0,0,1102,1094,1,0,0,0,1102,1098,1,0,0,0,1103,193,1,0,0,0,1104,1107,3,204,102,0,1105,1107,3,196,98,0,1106,1104,1,0,0,0,1106,1105,1,0,0,0,1107,195,1,0,0,0,1108,1115,3,208,104,0,1109,1115,1,0,0,0,1110,1111,5,9,0,0,1111,1112,3,196,98,0,1112,1113,5,10,0,0,1113,1115,1,0,0,0,1114,1108,1,0,0,0,1114,1109,1,0,0,0,1114,1110,1,0,0,0,1115,197,1,0,0,0,1116,1117,5,51,0,0,1117,1118,5,11,0,0,1118,1119,3,144,72,0,1119,1120,5,12,0,0,1120,1121,5,13,0,0,1121,1122,3,200,100,0,1122,199,1,0,0,0,1123,1130,3,204,102,0,1124,1125,5,9,0,0,1125,1126,3,208,104,0,1126,1127,5,10,0,0,1127,1130,1,0,0,0,1128,1130,3,198,99,0,1129,1123,1,0,0,0,1129,1124,1,0,0,0,1129,1128,1,0,0,0,1130,201,1,0,0,0,1131,1137,3,204,102,0,1132,1133,5,9,0,0,1133,1134,3,210,105,0,1134,1135,5,10,0,0,1135,1137,1,0,0,0,1136,1131,1,0,0,0,1136,1132,1,0,0,0,1137,203,1,0,0,0,1138,1152,3,330,165,0,1139,1152,3,334,167,0,1140,1152,3,366,183,0,1141,1142,3,332,166,0,1142,1143,5,9,0,0,1143,1144,3,206,103,0,1144,1145,5,10,0,0,1145,1152,1,0,0,0,1146,1147,5,9,0,0,1147,1148,3,204,102,0,1148,1149,5,10,0,0,1149,1152,1,0,0,0,1150,1152,3,212,106,0,1151,1138,1,0,0,0,1151,1139,1,0,0,0,1151,1140,1,0,0,0,1151,1141,1,0,0,0,1151,1146,1,0,0,0,1151,1150,1,0,0,0,1152,205,1,0,0,0,1153,1159,3,204,102,0,1154,1155,3,204,102,0,1155,1156,5,2,0,0,1156,1157,3,206,103,0,1157,1159,1,0,0,0,1158,1153,1,0,0,0,1158,1154,1,0,0,0,1159,207,1,0,0,0,1160,1161,3,202,101,0,1161,1162,5,67,0,0,1162,1163,3,204,102,0,1163,209,1,0,0,0,1164,1165,6,105,-1,0,1165,1166,3,202,101,0,1166,1167,5,68,0,0,1167,1168,3,204,102,0,1168,1174,1,0,0,0,1169,1170,10,1,0,0,1170,1171,5,68,0,0,1171,1173,3,204,102,0,1172,1169,1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,0,0,1174,1175,1,0,0,0,1175,211,1,0,0,0,1176,1174,1,0,0,0,1177,1178,5,11,0,0,1178,1179,3,214,107,0,1179,1180,5,12,0,0,1180,213,1,0,0,0,1181,1187,3,194,97,0,1182,1183,3,194,97,0,1183,1184,5,2,0,0,1184,1185,3,214,107,0,1185,1187,1,0,0,0,1186,1181,1,0,0,0,1186,1182,1,0,0,0,1187,215,1,0,0,0,1188,1189,3,340,170,0,1189,1190,5,71,0,0,1190,1191,3,338,169,0,1191,217,1,0,0,0,1192,1193,3,156,78,0,1193,1194,5,66,0,0,1194,1195,3,184,92,0,1195,219,1,0,0,0,1196,1197,3,188,94,0,1197,1198,5,72,0,0,1198,1199,3,188,94,0,1199,221,1,0,0,0,1200,1203,3,224,112,0,1201,1203,3,226,113,0,1202,1200,1,0,0,0,1202,1201,1,0,0,0,1203,223,1,0,0,0,1204,1220,5,16,0,0,1205,1220,5,17,0,0,1206,1220,5,18,0,0,1207,1208,5,11,0,0,1208,1209,3,234,117,0,1209,1210,5,12,0,0,1210,1220,1,0,0,0,1211,1212,5,19,0,0,1212,1213,3,234,117,0,1213,1214,5,67,0,0,1214,1220,1,0,0,0,1215,1216,5,20,0,0,1216,1217,3,234,117,0,1217,1218,5,21,0,0,1218,1220,1,0,0,0,1219,1204,1,0,0,0,1219,1205,1,0,0,0,1219,1206,1,0,0,0,1219,1207,1,0,0,0,1219,1211,1,0,0,0,1219,1215,1,0,0,0,1220,225,1,0,0,0,1221,1222,5,20,0,0,1222,1223,3,228,114,0,1223,1224,5,21,0,0,1224,1232,1,0,0,0,1225,1226,5,20,0,0,1226,1227,3,228,114,0,1227,1228,5,9,0,0,1228,1229,3,230,115,0,1229,1230,5,22,0,0,1230,1232,1,0,0,0,1231,1221,1,0,0,0,1231,1225,1,0,0,0,1232,227,1,0,0,0,1233,1234,3,360,180,0,1234,229,1,0,0,0,1235,1241,3,232,116,0,1236,1237,3,232,116,0,1237,1238,5,2,0,0,1238,1239,3,230,115,0,1239,1241,1,0,0,0,1240,1235,1,0,0,0,1240,1236,1,0,0,0,1241,231,1,0,0,0,1242,1245,3,234,117,0,1243,1245,3,236,118,0,1244,1242,1,0,0,0,1244,1243,1,0,0,0,1245,233,1,0,0,0,1246,1247,5,70,0,0,1247,1248,3,186,93,0,1248,235,1,0,0,0,1249,1250,3,360,180,0,1250,1251,5,65,0,0,1251,1252,3,186,93,0,1252,237,1,0,0,0,1253,1254,3,240,120,0,1254,1255,5,66,0,0,1255,1256,3,242,121,0,1256,239,1,0,0,0,1257,1258,3,352,176,0,1258,241,1,0,0,0,1259,1262,3,352,176,0,1260,1262,3,188,94,0,1261,1259,1,0,0,0,1261,1260,1,0,0,0,1262,243,1,0,0,0,1263,1266,3,246,123,0,1264,1266,3,192,96,0,1265,1263,1,0,0,0,1265,1264,1,0,0,0,1266,245,1,0,0,0,1267,1270,3,248,124,0,1268,1270,3,310,155,0,1269,1267,1,0,0,0,1269,1268,1,0,0,0,1270,247,1,0,0,0,1271,1272,5,54,0,0,1272,1273,5,11,0,0,1273,1274,3,144,72,0,1274,1275,5,12,0,0,1275,1276,5,13,0,0,1276,1277,3,246,123,0,1277,249,1,0,0,0,1278,1281,3,252,126,0,1279,1281,3,304,152,0,1280,1278,1,0,0,0,1280,1279,1,0,0,0,1281,251,1,0,0,0,1282,1286,3,254,127,0,1283,1286,3,264,132,0,1284,1286,3,270,135,0,1285,1282,1,0,0,0,1285,1283,1,0,0,0,1285,1284,1,0,0,0,1286,253,1,0,0,0,1287,1290,3,256,128,0,1288,1290,3,258,129,0,1289,1287,1,0,0,0,1289,1288,1,0,0,0,1290,255,1,0,0,0,1291,1292,3,268,134,0,1292,1293,3,324,162,0,1293,1294,3,268,134,0,1294,257,1,0,0,0,1295,1298,3,260,130,0,1296,1298,3,262,131,0,1297,1295,1,0,0,0,1297,1296,1,0,0,0,1298,259,1,0,0,0,1299,1300,6,130,-1,0,1300,1301,3,268,134,0,1301,1302,5,41,0,0,1302,1303,3,268,134,0,1303,1309,1,0,0,0,1304,1305,10,1,0,0,1305,1306,5,41,0,0,1306,1308,3,268,134,0,1307,1304,1,0,0,0,1308,1311,1,0,0,0,1309,1307,1,0,0,0,1309,1310,1,0,0,0,1310,261,1,0,0,0,1311,1309,1,0,0,0,1312,1313,6,131,-1,0,1313,1314,3,268,134,0,1314,1315,5,42,0,0,1315,1316,3,268,134,0,1316,1322,1,0,0,0,1317,1318,10,1,0,0,1318,1319,5,42,0,0,1319,1321,3,268,134,0,1320,1317,1,0,0,0,1321,1324,1,0,0,0,1322,1320,1,0,0,0,1322,1323,1,0,0,0,1323,263,1,0,0,0,1324,1322,1,0,0,0,1325,1326,3,328,164,0,1326,1327,3,268,134,0,1327,1330,1,0,0,0,1328,1330,3,266,133,0,1329,1325,1,0,0,0,1329,1328,1,0,0,0,1330,265,1,0,0,0,1331,1332,3,300,150,0,1332,1333,5,52,0,0,1333,1334,3,300,150,0,1334,267,1,0,0,0,1335,1338,3,270,135,0,1336,1338,3,264,132,0,1337,1335,1,0,0,0,1337,1336,1,0,0,0,1338,269,1,0,0,0,1339,1346,3,272,136,0,1340,1346,3,276,138,0,1341,1342,5,9,0,0,1342,1343,3,252,126,0,1343,1344,5,10,0,0,1344,1346,1,0,0,0,1345,1339,1,0,0,0,1345,1340,1,0,0,0,1345,1341,1,0,0,0,1346,271,1,0,0,0,1347,1348,3,322,161,0,1348,1349,5,11,0,0,1349,1350,3,274,137,0,1350,1351,5,12,0,0,1351,1352,5,13,0,0,1352,1353,3,268,134,0,1353,273,1,0,0,0,1354,1360,3,366,183,0,1355,1356,3,366,183,0,1356,1357,5,2,0,0,1357,1358,3,274,137,0,1358,1360,1,0,0,0,1359,1354,1,0,0,0,1359,1355,1,0,0,0,1360,275,1,0,0,0,1361,1365,3,278,139,0,1362,1365,3,280,140,0,1363,1365,3,286,143,0,1364,1361,1,0,0,0,1364,1362,1,0,0,0,1364,1363,1,0,0,0,1365,277,1,0,0,0,1366,1367,3,288,144,0,1367,279,1,0,0,0,1368,1371,3,282,141,0,1369,1371,3,284,142,0,1370,1368,1,0,0,0,1370,1369,1,0,0,0,1371,281,1,0,0,0,1372,1373,3,294,147,0,1373,283,1,0,0,0,1374,1375,3,300,150,0,1375,1376,3,346,173,0,1376,1377,3,300,150,0,1377,285,1,0,0,0,1378,1379,3,296,148,0,1379,287,1,0,0,0,1380,1387,3,348,174,0,1381,1382,3,350,175,0,1382,1383,5,9,0,0,1383,1384,3,298,149,0,1384,1385,5,10,0,0,1385,1387,1,0,0,0,1386,1380,1,0,0,0,1386,1381,1,0,0,0,1387,289,1,0,0,0,1388,1391,3,364,182,0,1389,1391,3,292,146,0,1390,1388,1,0,0,0,1390,1389,1,0,0,0,1391,291,1,0,0,0,1392,1393,3,294,147,0,1393,293,1,0,0,0,1394,1401,3,352,176,0,1395,1396,3,354,177,0,1396,1397,5,9,0,0,1397,1398,3,298,149,0,1398,1399,5,10,0,0,1399,1401,1,0,0,0,1400,1394,1,0,0,0,1400,1395,1,0,0,0,1401,295,1,0,0,0,1402,1409,3,356,178,0,1403,1404,3,358,179,0,1404,1405,5,9,0,0,1405,1406,3,298,149,0,1406,1407,5,10,0,0,1407,1409,1,0,0,0,1408,1402,1,0,0,0,1408,1403,1,0,0,0,1409,297,1,0,0,0,1410,1416,3,300,150,0,1411,1412,3,300,150,0,1412,1413,5,2,0,0,1413,1414,3,298,149,0,1414,1416,1,0,0,0,1415,1410,1,0,0,0,1415,1411,1,0,0,0,1416,299,1,0,0,0,1417,1420,3,302,151,0,1418,1420,3,366,183,0,1419,1417,1,0,0,0,1419,1418,1,0,0,0,1420,301,1,0,0,0,1421,1425,3,288,144,0,1422,1425,3,290,145,0,1423,1425,3,296,148,0,1424,1421,1,0,0,0,1424,1422,1,0,0,0,1424,1423,1,0,0,0,1425,303,1,0,0,0,1426,1427,3,306,153,0,1427,1428,5,72,0,0,1428,1429,3,306,153,0,1429,1435,1,0,0,0,1430,1431,5,9,0,0,1431,1432,3,304,152,0,1432,1433,5,10,0,0,1433,1435,1,0,0,0,1434,1426,1,0,0,0,1434,1430,1,0,0,0,1435,305,1,0,0,0,1436,1442,5,23,0,0,1437,1438,5,20,0,0,1438,1439,3,308,154,0,1439,1440,5,21,0,0,1440,1442,1,0,0,0,1441,1436,1,0,0,0,1441,1437,1,0,0,0,1442,307,1,0,0,0,1443,1449,3,252,126,0,1444,1445,3,252,126,0,1445,1446,5,2,0,0,1446,1447,3,308,154,0,1447,1449,1,0,0,0,1448,1443,1,0,0,0,1448,1444,1,0,0,0,1449,309,1,0,0,0,1450,1456,3,312,156,0,1451,1452,5,9,0,0,1452,1453,3,312,156,0,1453,1454,5,10,0,0,1454,1456,1,0,0,0,1455,1450,1,0,0,0,1455,1451,1,0,0,0,1456,311,1,0,0,0,1457,1458,6,156,-1,0,1458,1459,3,314,157,0,1459,1465,1,0,0,0,1460,1461,10,1,0,0,1461,1462,5,41,0,0,1462,1464,3,314,157,0,1463,1460,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,313,1,0,0,0,1467,1465,1,0,0,0,1468,1478,3,276,138,0,1469,1470,5,49,0,0,1470,1478,3,276,138,0,1471,1472,5,49,0,0,1472,1473,5,9,0,0,1473,1474,3,276,138,0,1474,1475,5,10,0,0,1475,1478,1,0,0,0,1476,1478,3,266,133,0,1477,1468,1,0,0,0,1477,1469,1,0,0,0,1477,1471,1,0,0,0,1477,1476,1,0,0,0,1478,315,1,0,0,0,1479,1483,3,322,161,0,1480,1483,3,320,160,0,1481,1483,3,318,159,0,1482,1479,1,0,0,0,1482,1480,1,0,0,0,1482,1481,1,0,0,0,1483,317,1,0,0,0,1484,1485,7,0,0,0,1485,319,1,0,0,0,1486,1487,7,1,0,0,1487,321,1,0,0,0,1488,1489,7,2,0,0,1489,323,1,0,0,0,1490,1491,7,3,0,0,1491,325,1,0,0,0,1492,1493,7,4,0,0,1493,327,1,0,0,0,1494,1495,5,49,0,0,1495,329,1,0,0,0,1496,1497,3,332,166,0,1497,331,1,0,0,0,1498,1499,3,456,228,0,1499,333,1,0,0,0,1500,1501,5,90,0,0,1501,335,1,0,0,0,1502,1503,3,460,230,0,1503,337,1,0,0,0,1504,1507,3,340,170,0,1505,1507,3,352,176,0,1506,1504,1,0,0,0,1506,1505,1,0,0,0,1507,339,1,0,0,0,1508,1511,3,348,174,0,1509,1511,3,356,178,0,1510,1508,1,0,0,0,1510,1509,1,0,0,0,1511,341,1,0,0,0,1512,1513,5,90,0,0,1513,343,1,0,0,0,1514,1515,5,90,0,0,1515,345,1,0,0,0,1516,1517,7,5,0,0,1517,347,1,0,0,0,1518,1519,3,350,175,0,1519,349,1,0,0,0,1520,1521,3,456,228,0,1521,351,1,0,0,0,1522,1523,3,354,177,0,1523,353,1,0,0,0,1524,1525,3,458,229,0,1525,355,1,0,0,0,1526,1527,3,358,179,0,1527,357,1,0,0,0,1528,1529,3,460,230,0,1529,359,1,0,0,0,1530,1533,3,352,176,0,1531,1533,3,356,178,0,1532,1530,1,0,0,0,1532,1531,1,0,0,0,1533,361,1,0,0,0,1534,1535,7,6,0,0,1535,363,1,0,0,0,1536,1539,3,462,231,0,1537,1539,5,95,0,0,1538,1536,1,0,0,0,1538,1537,1,0,0,0,1539,365,1,0,0,0,1540,1541,5,92,0,0,1541,367,1,0,0,0,1542,1551,3,372,186,0,1543,1551,3,386,193,0,1544,1551,3,390,195,0,1545,1551,5,93,0,0,1546,1547,5,11,0,0,1547,1548,3,370,185,0,1548,1549,5,12,0,0,1549,1551,1,0,0,0,1550,1542,1,0,0,0,1550,1543,1,0,0,0,1550,1544,1,0,0,0,1550,1545,1,0,0,0,1550,1546,1,0,0,0,1551,369,1,0,0,0,1552,1557,3,368,184,0,1553,1554,5,2,0,0,1554,1556,3,368,184,0,1555,1553,1,0,0,0,1556,1559,1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,371,1,0,0,0,1559,1557,1,0,0,0,1560,1563,3,454,227,0,1561,1563,3,374,187,0,1562,1560,1,0,0,0,1562,1561,1,0,0,0,1563,373,1,0,0,0,1564,1565,5,24,0,0,1565,1566,3,376,188,0,1566,1567,5,2,0,0,1567,1568,3,406,203,0,1568,1569,5,2,0,0,1569,1570,3,378,189,0,1570,1571,5,10,0,0,1571,375,1,0,0,0,1572,1573,3,456,228,0,1573,377,1,0,0,0,1574,1580,5,15,0,0,1575,1576,5,11,0,0,1576,1577,3,380,190,0,1577,1578,5,12,0,0,1578,1580,1,0,0,0,1579,1574,1,0,0,0,1579,1575,1,0,0,0,1580,379,1,0,0,0,1581,1586,3,382,191,0,1582,1583,5,2,0,0,1583,1585,3,382,191,0,1584,1582,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,381,1,0,0,0,1588,1586,1,0,0,0,1589,1591,3,368,184,0,1590,1592,3,384,192,0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,383,1,0,0,0,1593,1594,5,13,0,0,1594,1595,3,450,225,0,1595,385,1,0,0,0,1596,1597,5,25,0,0,1597,1599,3,388,194,0,1598,1600,3,404,202,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,1601,1,0,0,0,1601,1602,5,10,0,0,1602,387,1,0,0,0,1603,1604,5,93,0,0,1604,389,1,0,0,0,1605,1609,3,392,196,0,1606,1609,3,396,198,0,1607,1609,3,400,200,0,1608,1605,1,0,0,0,1608,1606,1,0,0,0,1608,1607,1,0,0,0,1609,391,1,0,0,0,1610,1611,5,26,0,0,1611,1613,3,464,232,0,1612,1614,3,394,197,0,1613,1612,1,0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1616,5,10,0,0,1616,393,1,0,0,0,1617,1618,5,2,0,0,1618,1619,3,454,227,0,1619,395,1,0,0,0,1620,1621,5,27,0,0,1621,1623,3,398,199,0,1622,1624,3,404,202,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,1626,5,10,0,0,1626,397,1,0,0,0,1627,1628,5,93,0,0,1628,399,1,0,0,0,1629,1630,5,28,0,0,1630,1632,3,402,201,0,1631,1633,3,404,202,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,1,0,0,0,1634,1635,5,10,0,0,1635,401,1,0,0,0,1636,1637,3,456,228,0,1637,403,1,0,0,0,1638,1639,5,2,0,0,1639,1640,3,406,203,0,1640,405,1,0,0,0,1641,1648,5,15,0,0,1642,1643,5,11,0,0,1643,1644,3,408,204,0,1644,1645,5,12,0,0,1645,1648,1,0,0,0,1646,1648,3,450,225,0,1647,1641,1,0,0,0,1647,1642,1,0,0,0,1647,1646,1,0,0,0,1648,407,1,0,0,0,1649,1654,3,410,205,0,1650,1651,5,2,0,0,1651,1653,3,410,205,0,1652,1650,1,0,0,0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,1655,1,0,0,0,1655,409,1,0,0,0,1656,1654,1,0,0,0,1657,1661,3,412,206,0,1658,1661,3,418,209,0,1659,1661,3,446,223,0,1660,1657,1,0,0,0,1660,1658,1,0,0,0,1660,1659,1,0,0,0,1661,411,1,0,0,0,1662,1665,3,414,207,0,1663,1665,3,416,208,0,1664,1662,1,0,0,0,1664,1663,1,0,0,0,1665,413,1,0,0,0,1666,1667,5,29,0,0,1667,1668,3,456,228,0,1668,1669,5,10,0,0,1669,415,1,0,0,0,1670,1671,5,30,0,0,1671,1672,3,456,228,0,1672,1673,5,10,0,0,1673,417,1,0,0,0,1674,1679,3,420,210,0,1675,1679,3,426,213,0,1676,1679,3,430,215,0,1677,1679,3,428,214,0,1678,1674,1,0,0,0,1678,1675,1,0,0,0,1678,1676,1,0,0,0,1678,1677,1,0,0,0,1679,419,1,0,0,0,1680,1681,5,31,0,0,1681,1682,3,422,211,0,1682,1683,5,10,0,0,1683,1686,1,0,0,0,1684,1686,3,424,212,0,1685,1680,1,0,0,0,1685,1684,1,0,0,0,1686,421,1,0,0,0,1687,1688,5,93,0,0,1688,423,1,0,0,0,1689,1690,3,376,188,0,1690,1691,5,9,0,0,1691,1692,3,456,228,0,1692,1693,5,2,0,0,1693,1694,3,450,225,0,1694,1695,5,10,0,0,1695,425,1,0,0,0,1696,1697,5,32,0,0,1697,1698,5,11,0,0,1698,1699,3,440,220,0,1699,1700,5,12,0,0,1700,1701,5,10,0,0,1701,427,1,0,0,0,1702,1703,5,33,0,0,1703,1704,3,392,196,0,1704,1705,5,10,0,0,1705,429,1,0,0,0,1706,1707,5,34,0,0,1707,1708,3,456,228,0,1708,1709,5,2,0,0,1709,1710,5,11,0,0,1710,1711,3,432,216,0,1711,1712,5,12,0,0,1712,1713,5,10,0,0,1713,431,1,0,0,0,1714,1719,3,434,217,0,1715,1716,5,2,0,0,1716,1718,3,434,217,0,1717,1715,1,0,0,0,1718,1721,1,0,0,0,1719,1717,1,0,0,0,1719,1720,1,0,0,0,1720,433,1,0,0,0,1721,1719,1,0,0,0,1722,1725,3,350,175,0,1723,1725,3,366,183,0,1724,1722,1,0,0,0,1724,1723,1,0,0,0,1725,435,1,0,0,0,1726,1727,5,35,0,0,1727,1729,3,464,232,0,1728,1730,3,438,219,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1732,5,3,0,0,1732,437,1,0,0,0,1733,1734,5,2,0,0,1734,1735,5,11,0,0,1735,1736,3,440,220,0,1736,1737,5,12,0,0,1737,439,1,0,0,0,1738,1743,3,454,227,0,1739,1740,5,2,0,0,1740,1742,3,454,227,0,1741,1739,1,0,0,0,1742,1745,1,0,0,0,1743,1741,1,0,0,0,1743,1744,1,0,0,0,1744,441,1,0,0,0,1745,1743,1,0,0,0,1746,1753,3,444,222,0,1747,1748,3,444,222,0,1748,1749,5,13,0,0,1749,1750,3,442,221,0,1750,1753,1,0,0,0,1751,1753,3,450,225,0,1752,1746,1,0,0,0,1752,1747,1,0,0,0,1752,1751,1,0,0,0,1753,443,1,0,0,0,1754,1761,3,456,228,0,1755,1761,3,446,223,0,1756,1761,3,366,183,0,1757,1761,3,462,231,0,1758,1761,5,95,0,0,1759,1761,3,448,224,0,1760,1754,1,0,0,0,1760,1755,1,0,0,0,1760,1756,1,0,0,0,1760,1757,1,0,0,0,1760,1758,1,0,0,0,1760,1759,1,0,0,0,1761,445,1,0,0,0,1762,1763,3,456,228,0,1763,1764,5,9,0,0,1764,1765,3,452,226,0,1765,1766,5,10,0,0,1766,447,1,0,0,0,1767,1768,5,36,0,0,1768,1769,3,24,12,0,1769,1770,5,10,0,0,1770,1788,1,0,0,0,1771,1772,5,37,0,0,1772,1773,3,120,60,0,1773,1774,5,10,0,0,1774,1788,1,0,0,0,1775,1776,5,38,0,0,1776,1777,3,250,125,0,1777,1778,5,10,0,0,1778,1788,1,0,0,0,1779,1780,5,39,0,0,1780,1781,3,310,155,0,1781,1782,5,10,0,0,1782,1788,1,0,0,0,1783,1784,5,40,0,0,1784,1785,3,300,150,0,1785,1786,5,10,0,0,1786,1788,1,0,0,0,1787,1767,1,0,0,0,1787,1771,1,0,0,0,1787,1775,1,0,0,0,1787,1779,1,0,0,0,1787,1783,1,0,0,0,1788,449,1,0,0,0,1789,1795,5,15,0,0,1790,1791,5,11,0,0,1791,1792,3,452,226,0,1792,1793,5,12,0,0,1793,1795,1,0,0,0,1794,1789,1,0,0,0,1794,1790,1,0,0,0,1795,451,1,0,0,0,1796,1801,3,442,221,0,1797,1798,5,2,0,0,1798,1800,3,442,221,0,1799,1797,1,0,0,0,1800,1803,1,0,0,0,1801,1799,1,0,0,0,1801,1802,1,0,0,0,1802,453,1,0,0,0,1803,1801,1,0,0,0,1804,1807,3,456,228,0,1805,1807,5,79,0,0,1806,1804,1,0,0,0,1806,1805,1,0,0,0,1807,455,1,0,0,0,1808,1809,7,7,0,0,1809,457,1,0,0,0,1810,1811,5,90,0,0,1811,459,1,0,0,0,1812,1813,5,91,0,0,1813,461,1,0,0,0,1814,1815,7,8,0,0,1815,463,1,0,0,0,1816,1817,5,94,0,0,1817,465,1,0,0,0,142,469,476,484,493,506,517,528,539,550,557,564,572,577,586,598,611,624,630,634,643,659,664,672,685,689,699,703,724,731,738,749,757,764,771,788,797,807,812,821,831,843,856,874,882,886,894,906,919,925,929,938,954,958,966,978,986,990,1000,1012,1027,1034,1041,1049,1056,1068,1078,1085,1092,1102,1106,1114,1129,1136,1151,1158,1174,1186,1202,1219,1231,1240,1244,1261,1265,1269,1280,1285,1289,1297,1309,1322,1329,1337,1345,1359,1364,1370,1386,1390,1400,1408,1415,1419,1424,1434,1441,1448,1455,1465,1477,1482,1506,1510,1532,1538,1550,1557,1562,1579,1586,1591,1599,1608,1613,1623,1632,1647,1654,1660,1664,1678,1685,1719,1724,1729,1743,1752,1760,1787,1794,1801,1806];var atn=new _antlr[\"default\"].atn.ATNDeserializer().deserialize(serializedATN);var decisionsToDFA=atn.decisionToState.map(function(ds,index){return new _antlr[\"default\"].dfa.DFA(ds,index);});var sharedContextCache=new _antlr[\"default\"].PredictionContextCache();var TPTPParser=/*#__PURE__*/function(_antlr4$Parser){_inherits(TPTPParser,_antlr4$Parser);var _super=_createSuper(TPTPParser);function TPTPParser(input){var _this;_classCallCheck(this,TPTPParser);_this=_super.call(this,input);_this._interp=new _antlr[\"default\"].atn.ParserATNSimulator(_assertThisInitialized(_this),atn,decisionsToDFA,sharedContextCache);_this.ruleNames=TPTPParser.ruleNames;_this.literalNames=TPTPParser.literalNames;_this.symbolicNames=TPTPParser.symbolicNames;return _this;}_createClass(TPTPParser,[{key:\"atn\",get:function get(){return atn;}},{key:\"sempred\",value:function sempred(localctx,ruleIndex,predIndex){switch(ruleIndex){case 17:return this.thf_or_formula_sempred(localctx,predIndex);case 18:return this.thf_and_formula_sempred(localctx,predIndex);case 19:return this.thf_apply_formula_sempred(localctx,predIndex);case 55:return this.thf_xprod_type_sempred(localctx,predIndex);case 56:return this.thf_union_type_sempred(localctx,predIndex);case 65:return this.tff_or_formula_sempred(localctx,predIndex);case 66:return this.tff_and_formula_sempred(localctx,predIndex);case 105:return this.tff_xprod_type_sempred(localctx,predIndex);case 130:return this.fof_or_formula_sempred(localctx,predIndex);case 131:return this.fof_and_formula_sempred(localctx,predIndex);case 156:return this.cnf_disjunction_sempred(localctx,predIndex);default:throw\"No predicate with index:\"+ruleIndex;}}},{key:\"thf_or_formula_sempred\",value:function thf_or_formula_sempred(localctx,predIndex){switch(predIndex){case 0:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_and_formula_sempred\",value:function thf_and_formula_sempred(localctx,predIndex){switch(predIndex){case 1:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_apply_formula_sempred\",value:function thf_apply_formula_sempred(localctx,predIndex){switch(predIndex){case 2:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_xprod_type_sempred\",value:function thf_xprod_type_sempred(localctx,predIndex){switch(predIndex){case 3:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"thf_union_type_sempred\",value:function thf_union_type_sempred(localctx,predIndex){switch(predIndex){case 4:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tff_or_formula_sempred\",value:function tff_or_formula_sempred(localctx,predIndex){switch(predIndex){case 5:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tff_and_formula_sempred\",value:function tff_and_formula_sempred(localctx,predIndex){switch(predIndex){case 6:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tff_xprod_type_sempred\",value:function tff_xprod_type_sempred(localctx,predIndex){switch(predIndex){case 7:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"fof_or_formula_sempred\",value:function fof_or_formula_sempred(localctx,predIndex){switch(predIndex){case 8:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"fof_and_formula_sempred\",value:function fof_and_formula_sempred(localctx,predIndex){switch(predIndex){case 9:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"cnf_disjunction_sempred\",value:function cnf_disjunction_sempred(localctx,predIndex){switch(predIndex){case 10:return this.precpred(this._ctx,1);default:throw\"No predicate with index:\"+predIndex;}}},{key:\"tptp_file\",value:function tptp_file(){var localctx=new Tptp_fileContext(this,this._ctx,this.state);this.enterRule(localctx,0,TPTPParser.RULE_tptp_file);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=469;this._errHandler.sync(this);_la=this._input.LA(1);while((_la&~0x1f)==0&&(1<<_la&(1<<TPTPParser.T__0|1<<TPTPParser.T__3|1<<TPTPParser.T__4|1<<TPTPParser.T__5|1<<TPTPParser.T__6|1<<TPTPParser.T__7))!==0||_la===TPTPParser.T__34){this.state=466;this.tptp_input();this.state=471;this._errHandler.sync(this);_la=this._input.LA(1);}this.state=472;this.match(TPTPParser.EOF);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tptp_input\",value:function tptp_input(){var localctx=new Tptp_inputContext(this,this._ctx,this.state);this.enterRule(localctx,2,TPTPParser.RULE_tptp_input);try{this.state=476;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__0:case TPTPParser.T__3:case TPTPParser.T__4:case TPTPParser.T__5:case TPTPParser.T__6:case TPTPParser.T__7:this.enterOuterAlt(localctx,1);this.state=474;this.annotated_formula();break;case TPTPParser.T__34:this.enterOuterAlt(localctx,2);this.state=475;this.include();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"annotated_formula\",value:function annotated_formula(){var localctx=new Annotated_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,4,TPTPParser.RULE_annotated_formula);try{this.state=484;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__3:this.enterOuterAlt(localctx,1);this.state=478;this.thf_annotated();break;case TPTPParser.T__4:this.enterOuterAlt(localctx,2);this.state=479;this.tff_annotated();break;case TPTPParser.T__5:this.enterOuterAlt(localctx,3);this.state=480;this.tcf_annotated();break;case TPTPParser.T__6:this.enterOuterAlt(localctx,4);this.state=481;this.fof_annotated();break;case TPTPParser.T__7:this.enterOuterAlt(localctx,5);this.state=482;this.cnf_annotated();break;case TPTPParser.T__0:this.enterOuterAlt(localctx,6);this.state=483;this.tpi_annotated();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tpi_annotated\",value:function tpi_annotated(){var localctx=new Tpi_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,6,TPTPParser.RULE_tpi_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=486;this.match(TPTPParser.T__0);this.state=487;this.name();this.state=488;this.match(TPTPParser.T__1);this.state=489;this.formula_role();this.state=490;this.match(TPTPParser.T__1);this.state=491;this.tpi_formula();this.state=493;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=492;this.annotations();}this.state=495;this.match(TPTPParser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tpi_formula\",value:function tpi_formula(){var localctx=new Tpi_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,8,TPTPParser.RULE_tpi_formula);try{this.enterOuterAlt(localctx,1);this.state=497;this.fof_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_annotated\",value:function thf_annotated(){var localctx=new Thf_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,10,TPTPParser.RULE_thf_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=499;this.match(TPTPParser.T__3);this.state=500;this.name();this.state=501;this.match(TPTPParser.T__1);this.state=502;this.formula_role();this.state=503;this.match(TPTPParser.T__1);this.state=504;this.thf_formula();this.state=506;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=505;this.annotations();}this.state=508;this.match(TPTPParser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_annotated\",value:function tff_annotated(){var localctx=new Tff_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,12,TPTPParser.RULE_tff_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=510;this.match(TPTPParser.T__4);this.state=511;this.name();this.state=512;this.match(TPTPParser.T__1);this.state=513;this.formula_role();this.state=514;this.match(TPTPParser.T__1);this.state=515;this.tff_formula();this.state=517;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=516;this.annotations();}this.state=519;this.match(TPTPParser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tcf_annotated\",value:function tcf_annotated(){var localctx=new Tcf_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,14,TPTPParser.RULE_tcf_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=521;this.match(TPTPParser.T__5);this.state=522;this.name();this.state=523;this.match(TPTPParser.T__1);this.state=524;this.formula_role();this.state=525;this.match(TPTPParser.T__1);this.state=526;this.tcf_formula();this.state=528;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=527;this.annotations();}this.state=530;this.match(TPTPParser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_annotated\",value:function fof_annotated(){var localctx=new Fof_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,16,TPTPParser.RULE_fof_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=532;this.match(TPTPParser.T__6);this.state=533;this.name();this.state=534;this.match(TPTPParser.T__1);this.state=535;this.formula_role();this.state=536;this.match(TPTPParser.T__1);this.state=537;this.fof_formula();this.state=539;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=538;this.annotations();}this.state=541;this.match(TPTPParser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"cnf_annotated\",value:function cnf_annotated(){var localctx=new Cnf_annotatedContext(this,this._ctx,this.state);this.enterRule(localctx,18,TPTPParser.RULE_cnf_annotated);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=543;this.match(TPTPParser.T__7);this.state=544;this.name();this.state=545;this.match(TPTPParser.T__1);this.state=546;this.formula_role();this.state=547;this.match(TPTPParser.T__1);this.state=548;this.cnf_formula();this.state=550;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=549;this.annotations();}this.state=552;this.match(TPTPParser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"annotations\",value:function annotations(){var localctx=new AnnotationsContext(this,this._ctx,this.state);this.enterRule(localctx,20,TPTPParser.RULE_annotations);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=554;this.match(TPTPParser.T__1);this.state=555;this.source();this.state=557;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=556;this.optional_info();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_role\",value:function formula_role(){var localctx=new Formula_roleContext(this,this._ctx,this.state);this.enterRule(localctx,22,TPTPParser.RULE_formula_role);try{this.enterOuterAlt(localctx,1);this.state=559;this.match(TPTPParser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_formula\",value:function thf_formula(){var localctx=new Thf_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,24,TPTPParser.RULE_thf_formula);try{this.state=564;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,10,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=561;this.thf_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=562;this.thf_atom_typing();break;case 3:this.enterOuterAlt(localctx,3);this.state=563;this.thf_subtype();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){var localctx=new Thf_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,26,TPTPParser.RULE_thf_logic_formula);try{this.state=572;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,11,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=566;this.thf_unitary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=567;this.thf_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=568;this.thf_binary_formula();break;case 4:this.enterOuterAlt(localctx,4);this.state=569;this.thf_defined_infix();break;case 5:this.enterOuterAlt(localctx,5);this.state=570;this.thf_definition();break;case 6:this.enterOuterAlt(localctx,6);this.state=571;this.thf_sequent();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_formula\",value:function thf_binary_formula(){var localctx=new Thf_binary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,28,TPTPParser.RULE_thf_binary_formula);try{this.state=577;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,12,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=574;this.thf_binary_nonassoc();break;case 2:this.enterOuterAlt(localctx,2);this.state=575;this.thf_binary_assoc();break;case 3:this.enterOuterAlt(localctx,3);this.state=576;this.thf_binary_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_nonassoc\",value:function thf_binary_nonassoc(){var localctx=new Thf_binary_nonassocContext(this,this._ctx,this.state);this.enterRule(localctx,30,TPTPParser.RULE_thf_binary_nonassoc);try{this.enterOuterAlt(localctx,1);this.state=579;this.thf_unit_formula();this.state=580;this.nonassoc_connective();this.state=581;this.thf_unit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_assoc\",value:function thf_binary_assoc(){var localctx=new Thf_binary_assocContext(this,this._ctx,this.state);this.enterRule(localctx,32,TPTPParser.RULE_thf_binary_assoc);try{this.state=586;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,13,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=583;this.thf_or_formula(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=584;this.thf_and_formula(0);break;case 3:this.enterOuterAlt(localctx,3);this.state=585;this.thf_apply_formula(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_or_formula\",value:function thf_or_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_or_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=34;this.enterRecursionRule(localctx,34,TPTPParser.RULE_thf_or_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=589;this.thf_unit_formula();this.state=590;this.match(TPTPParser.Or);this.state=591;this.thf_unit_formula();this._ctx.stop=this._input.LT(-1);this.state=598;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,14,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_or_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_thf_or_formula);this.state=593;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=594;this.match(TPTPParser.Or);this.state=595;this.thf_unit_formula();}this.state=600;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,14,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_and_formula\",value:function thf_and_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_and_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=36;this.enterRecursionRule(localctx,36,TPTPParser.RULE_thf_and_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=602;this.thf_unit_formula();this.state=603;this.match(TPTPParser.And);this.state=604;this.thf_unit_formula();this._ctx.stop=this._input.LT(-1);this.state=611;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,15,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_and_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_thf_and_formula);this.state=606;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=607;this.match(TPTPParser.And);this.state=608;this.thf_unit_formula();}this.state=613;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,15,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_apply_formula\",value:function thf_apply_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_apply_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=38;this.enterRecursionRule(localctx,38,TPTPParser.RULE_thf_apply_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=615;this.thf_unit_formula();this.state=616;this.match(TPTPParser.App);this.state=617;this.thf_unit_formula();this._ctx.stop=this._input.LT(-1);this.state=624;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,16,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_apply_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_thf_apply_formula);this.state=619;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=620;this.match(TPTPParser.App);this.state=621;this.thf_unit_formula();}this.state=626;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,16,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_unit_formula\",value:function thf_unit_formula(){var localctx=new Thf_unit_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,40,TPTPParser.RULE_thf_unit_formula);try{this.state=630;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,17,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=627;this.thf_unitary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=628;this.thf_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=629;this.thf_defined_infix();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_preunit_formula\",value:function thf_preunit_formula(){var localctx=new Thf_preunit_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,42,TPTPParser.RULE_thf_preunit_formula);try{this.state=634;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__8:case TPTPParser.T__10:case TPTPParser.T__13:case TPTPParser.T__14:case TPTPParser.T__15:case TPTPParser.T__16:case TPTPParser.T__17:case TPTPParser.T__18:case TPTPParser.T__19:case TPTPParser.ForallComb:case TPTPParser.TyForall:case TPTPParser.Forall:case TPTPParser.ExistsComb:case TPTPParser.TyExists:case TPTPParser.Exists:case TPTPParser.Lambda:case TPTPParser.ChoiceComb:case TPTPParser.Choice:case TPTPParser.DescriptionComb:case TPTPParser.Description:case TPTPParser.EqComb:case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=632;this.thf_unitary_formula();break;case TPTPParser.Not:this.enterOuterAlt(localctx,2);this.state=633;this.thf_prefix_unary();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){var localctx=new Thf_unitary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,44,TPTPParser.RULE_thf_unitary_formula);try{this.state=643;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,19,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=636;this.thf_quantified_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=637;this.thf_atomic_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=638;this.variable();break;case 4:this.enterOuterAlt(localctx,4);this.state=639;this.match(TPTPParser.T__8);this.state=640;this.thf_logic_formula();this.state=641;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_quantified_formula\",value:function thf_quantified_formula(){var localctx=new Thf_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,46,TPTPParser.RULE_thf_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=645;this.thf_quantification();this.state=646;this.thf_unit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_quantification\",value:function thf_quantification(){var localctx=new Thf_quantificationContext(this,this._ctx,this.state);this.enterRule(localctx,48,TPTPParser.RULE_thf_quantification);try{this.enterOuterAlt(localctx,1);this.state=648;this.thf_quantifier();this.state=649;this.match(TPTPParser.T__10);this.state=650;this.thf_variable_list();this.state=651;this.match(TPTPParser.T__11);this.state=652;this.match(TPTPParser.T__12);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_variable_list\",value:function thf_variable_list(){var localctx=new Thf_variable_listContext(this,this._ctx,this.state);this.enterRule(localctx,50,TPTPParser.RULE_thf_variable_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=654;this.thf_variable();this.state=659;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===TPTPParser.T__1){this.state=655;this.match(TPTPParser.T__1);this.state=656;this.thf_variable();this.state=661;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_variable\",value:function thf_variable(){var localctx=new Thf_variableContext(this,this._ctx,this.state);this.enterRule(localctx,52,TPTPParser.RULE_thf_variable);try{this.state=664;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,21,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=662;this.thf_typed_variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=663;this.variable();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_typed_variable\",value:function thf_typed_variable(){var localctx=new Thf_typed_variableContext(this,this._ctx,this.state);this.enterRule(localctx,54,TPTPParser.RULE_thf_typed_variable);try{this.enterOuterAlt(localctx,1);this.state=666;this.variable();this.state=667;this.match(TPTPParser.T__12);this.state=668;this.thf_top_level_type();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_unary_formula\",value:function thf_unary_formula(){var localctx=new Thf_unary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,56,TPTPParser.RULE_thf_unary_formula);try{this.state=672;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Not:this.enterOuterAlt(localctx,1);this.state=670;this.thf_prefix_unary();break;case TPTPParser.T__8:case TPTPParser.T__10:case TPTPParser.T__13:case TPTPParser.T__14:case TPTPParser.T__15:case TPTPParser.T__16:case TPTPParser.T__17:case TPTPParser.T__18:case TPTPParser.T__19:case TPTPParser.ForallComb:case TPTPParser.ExistsComb:case TPTPParser.ChoiceComb:case TPTPParser.DescriptionComb:case TPTPParser.EqComb:case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=671;this.thf_infix_unary();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_prefix_unary\",value:function thf_prefix_unary(){var localctx=new Thf_prefix_unaryContext(this,this._ctx,this.state);this.enterRule(localctx,58,TPTPParser.RULE_thf_prefix_unary);try{this.enterOuterAlt(localctx,1);this.state=674;this.unary_connective();this.state=675;this.thf_preunit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_infix_unary\",value:function thf_infix_unary(){var localctx=new Thf_infix_unaryContext(this,this._ctx,this.state);this.enterRule(localctx,60,TPTPParser.RULE_thf_infix_unary);try{this.enterOuterAlt(localctx,1);this.state=677;this.thf_unitary_term();this.state=678;this.match(TPTPParser.Infix_inequality);this.state=679;this.thf_unitary_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_atomic_formula\",value:function thf_atomic_formula(){var localctx=new Thf_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,62,TPTPParser.RULE_thf_atomic_formula);try{this.state=685;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,23,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=681;this.thf_plain_atomic();break;case 2:this.enterOuterAlt(localctx,2);this.state=682;this.thf_defined_atomic();break;case 3:this.enterOuterAlt(localctx,3);this.state=683;this.thf_system_atomic();break;case 4:this.enterOuterAlt(localctx,4);this.state=684;this.thf_fof_function();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_plain_atomic\",value:function thf_plain_atomic(){var localctx=new Thf_plain_atomicContext(this,this._ctx,this.state);this.enterRule(localctx,64,TPTPParser.RULE_thf_plain_atomic);try{this.state=689;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=687;this.constant();break;case TPTPParser.T__10:case TPTPParser.T__14:this.enterOuterAlt(localctx,2);this.state=688;this.thf_tuple();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_defined_atomic\",value:function thf_defined_atomic(){var localctx=new Thf_defined_atomicContext(this,this._ctx,this.state);this.enterRule(localctx,66,TPTPParser.RULE_thf_defined_atomic);try{this.state=699;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Dollar_word:this.enterOuterAlt(localctx,1);this.state=691;this.defined_constant();break;case TPTPParser.ForallComb:case TPTPParser.ExistsComb:case TPTPParser.ChoiceComb:case TPTPParser.DescriptionComb:case TPTPParser.EqComb:case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=692;this.thf_defined_term();break;case TPTPParser.T__8:this.enterOuterAlt(localctx,3);this.state=693;this.match(TPTPParser.T__8);this.state=694;this.thf_conn_term();this.state=695;this.match(TPTPParser.T__9);break;case TPTPParser.T__10:case TPTPParser.T__15:case TPTPParser.T__16:case TPTPParser.T__17:case TPTPParser.T__18:case TPTPParser.T__19:this.enterOuterAlt(localctx,4);this.state=697;this.ntf_connective();break;case TPTPParser.T__13:this.enterOuterAlt(localctx,5);this.state=698;this.thf_let();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_defined_term\",value:function thf_defined_term(){var localctx=new Thf_defined_termContext(this,this._ctx,this.state);this.enterRule(localctx,68,TPTPParser.RULE_thf_defined_term);try{this.state=703;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=701;this.defined_term();break;case TPTPParser.ForallComb:case TPTPParser.ExistsComb:case TPTPParser.ChoiceComb:case TPTPParser.DescriptionComb:case TPTPParser.EqComb:this.enterOuterAlt(localctx,2);this.state=702;this.th1_defined_term();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_defined_infix\",value:function thf_defined_infix(){var localctx=new Thf_defined_infixContext(this,this._ctx,this.state);this.enterRule(localctx,70,TPTPParser.RULE_thf_defined_infix);try{this.enterOuterAlt(localctx,1);this.state=705;this.thf_unitary_term();this.state=706;this.defined_infix_pred();this.state=707;this.thf_unitary_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_system_atomic\",value:function thf_system_atomic(){var localctx=new Thf_system_atomicContext(this,this._ctx,this.state);this.enterRule(localctx,72,TPTPParser.RULE_thf_system_atomic);try{this.enterOuterAlt(localctx,1);this.state=709;this.system_constant();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_let\",value:function thf_let(){var localctx=new Thf_letContext(this,this._ctx,this.state);this.enterRule(localctx,74,TPTPParser.RULE_thf_let);try{this.enterOuterAlt(localctx,1);this.state=711;this.match(TPTPParser.T__13);this.state=712;this.thf_let_types();this.state=713;this.match(TPTPParser.T__1);this.state=714;this.thf_let_defns();this.state=715;this.match(TPTPParser.T__1);this.state=716;this.thf_logic_formula();this.state=717;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_let_types\",value:function thf_let_types(){var localctx=new Thf_let_typesContext(this,this._ctx,this.state);this.enterRule(localctx,76,TPTPParser.RULE_thf_let_types);try{this.state=724;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__8:case TPTPParser.Dollar_dollar_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=719;this.thf_atom_typing();break;case TPTPParser.T__10:this.enterOuterAlt(localctx,2);this.state=720;this.match(TPTPParser.T__10);this.state=721;this.thf_atom_typing_list();this.state=722;this.match(TPTPParser.T__11);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_atom_typing_list\",value:function thf_atom_typing_list(){var localctx=new Thf_atom_typing_listContext(this,this._ctx,this.state);this.enterRule(localctx,78,TPTPParser.RULE_thf_atom_typing_list);try{this.state=731;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,28,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=726;this.thf_atom_typing();break;case 2:this.enterOuterAlt(localctx,2);this.state=727;this.thf_atom_typing();this.state=728;this.match(TPTPParser.T__1);this.state=729;this.thf_atom_typing_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_let_defns\",value:function thf_let_defns(){var localctx=new Thf_let_defnsContext(this,this._ctx,this.state);this.enterRule(localctx,80,TPTPParser.RULE_thf_let_defns);try{this.state=738;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,29,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=733;this.thf_let_defn();break;case 2:this.enterOuterAlt(localctx,2);this.state=734;this.match(TPTPParser.T__10);this.state=735;this.thf_let_defn_list();this.state=736;this.match(TPTPParser.T__11);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_let_defn\",value:function thf_let_defn(){var localctx=new Thf_let_defnContext(this,this._ctx,this.state);this.enterRule(localctx,82,TPTPParser.RULE_thf_let_defn);try{this.enterOuterAlt(localctx,1);this.state=740;this.thf_logic_formula();this.state=741;this.match(TPTPParser.Assignment);this.state=742;this.thf_logic_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_let_defn_list\",value:function thf_let_defn_list(){var localctx=new Thf_let_defn_listContext(this,this._ctx,this.state);this.enterRule(localctx,84,TPTPParser.RULE_thf_let_defn_list);try{this.state=749;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,30,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=744;this.thf_let_defn();break;case 2:this.enterOuterAlt(localctx,2);this.state=745;this.thf_let_defn();this.state=746;this.match(TPTPParser.T__1);this.state=747;this.thf_let_defn_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_unitary_term\",value:function thf_unitary_term(){var localctx=new Thf_unitary_termContext(this,this._ctx,this.state);this.enterRule(localctx,86,TPTPParser.RULE_thf_unitary_term);try{this.state=757;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,31,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=751;this.thf_atomic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=752;this.variable();break;case 3:this.enterOuterAlt(localctx,3);this.state=753;this.match(TPTPParser.T__8);this.state=754;this.thf_logic_formula();this.state=755;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_conn_term\",value:function thf_conn_term(){var localctx=new Thf_conn_termContext(this,this._ctx,this.state);this.enterRule(localctx,88,TPTPParser.RULE_thf_conn_term);try{this.state=764;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Iff:case TPTPParser.Impl:case TPTPParser.If:case TPTPParser.Niff:case TPTPParser.Nor:case TPTPParser.Nand:this.enterOuterAlt(localctx,1);this.state=759;this.nonassoc_connective();break;case TPTPParser.Or:case TPTPParser.And:this.enterOuterAlt(localctx,2);this.state=760;this.assoc_connective();break;case TPTPParser.Infix_equality:this.enterOuterAlt(localctx,3);this.state=761;this.match(TPTPParser.Infix_equality);break;case TPTPParser.Infix_inequality:this.enterOuterAlt(localctx,4);this.state=762;this.match(TPTPParser.Infix_inequality);break;case TPTPParser.Not:this.enterOuterAlt(localctx,5);this.state=763;this.unary_connective();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_tuple\",value:function thf_tuple(){var localctx=new Thf_tupleContext(this,this._ctx,this.state);this.enterRule(localctx,90,TPTPParser.RULE_thf_tuple);try{this.state=771;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__14:this.enterOuterAlt(localctx,1);this.state=766;this.match(TPTPParser.T__14);break;case TPTPParser.T__10:this.enterOuterAlt(localctx,2);this.state=767;this.match(TPTPParser.T__10);this.state=768;this.thf_formula_list();this.state=769;this.match(TPTPParser.T__11);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_fof_function\",value:function thf_fof_function(){var localctx=new Thf_fof_functionContext(this,this._ctx,this.state);this.enterRule(localctx,92,TPTPParser.RULE_thf_fof_function);try{this.state=788;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=773;this.functor();this.state=774;this.match(TPTPParser.T__8);this.state=775;this.thf_arguments();this.state=776;this.match(TPTPParser.T__9);break;case TPTPParser.Dollar_word:this.enterOuterAlt(localctx,2);this.state=778;this.defined_functor();this.state=779;this.match(TPTPParser.T__8);this.state=780;this.thf_arguments();this.state=781;this.match(TPTPParser.T__9);break;case TPTPParser.Dollar_dollar_word:this.enterOuterAlt(localctx,3);this.state=783;this.system_functor();this.state=784;this.match(TPTPParser.T__8);this.state=785;this.thf_arguments();this.state=786;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_arguments\",value:function thf_arguments(){var localctx=new Thf_argumentsContext(this,this._ctx,this.state);this.enterRule(localctx,94,TPTPParser.RULE_thf_arguments);try{this.enterOuterAlt(localctx,1);this.state=790;this.thf_formula_list();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_formula_list\",value:function thf_formula_list(){var localctx=new Thf_formula_listContext(this,this._ctx,this.state);this.enterRule(localctx,96,TPTPParser.RULE_thf_formula_list);try{this.state=797;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,35,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=792;this.thf_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=793;this.thf_logic_formula();this.state=794;this.match(TPTPParser.T__1);this.state=795;this.thf_formula_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_atom_typing\",value:function thf_atom_typing(){var localctx=new Thf_atom_typingContext(this,this._ctx,this.state);this.enterRule(localctx,98,TPTPParser.RULE_thf_atom_typing);try{this.state=807;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Dollar_dollar_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=799;this.untyped_atom();this.state=800;this.match(TPTPParser.T__12);this.state=801;this.thf_top_level_type();break;case TPTPParser.T__8:this.enterOuterAlt(localctx,2);this.state=803;this.match(TPTPParser.T__8);this.state=804;this.thf_atom_typing();this.state=805;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_top_level_type\",value:function thf_top_level_type(){var localctx=new Thf_top_level_typeContext(this,this._ctx,this.state);this.enterRule(localctx,100,TPTPParser.RULE_thf_top_level_type);try{this.state=812;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,37,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=809;this.thf_unitary_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=810;this.thf_mapping_type();break;case 3:this.enterOuterAlt(localctx,3);this.state=811;this.thf_apply_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_unitary_type\",value:function thf_unitary_type(){var localctx=new Thf_unitary_typeContext(this,this._ctx,this.state);this.enterRule(localctx,102,TPTPParser.RULE_thf_unitary_type);try{this.enterOuterAlt(localctx,1);this.state=814;this.thf_unitary_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_apply_type\",value:function thf_apply_type(){var localctx=new Thf_apply_typeContext(this,this._ctx,this.state);this.enterRule(localctx,104,TPTPParser.RULE_thf_apply_type);try{this.enterOuterAlt(localctx,1);this.state=816;this.thf_apply_formula(0);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_binary_type\",value:function thf_binary_type(){var localctx=new Thf_binary_typeContext(this,this._ctx,this.state);this.enterRule(localctx,106,TPTPParser.RULE_thf_binary_type);try{this.state=821;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,38,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=818;this.thf_mapping_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=819;this.thf_xprod_type(0);break;case 3:this.enterOuterAlt(localctx,3);this.state=820;this.thf_union_type(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_mapping_type\",value:function thf_mapping_type(){var localctx=new Thf_mapping_typeContext(this,this._ctx,this.state);this.enterRule(localctx,108,TPTPParser.RULE_thf_mapping_type);try{this.state=831;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,39,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=823;this.thf_unitary_type();this.state=824;this.match(TPTPParser.Arrow);this.state=825;this.thf_unitary_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=827;this.thf_unitary_type();this.state=828;this.match(TPTPParser.Arrow);this.state=829;this.thf_mapping_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_xprod_type\",value:function thf_xprod_type(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_xprod_typeContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=110;this.enterRecursionRule(localctx,110,TPTPParser.RULE_thf_xprod_type,_p);try{this.enterOuterAlt(localctx,1);this.state=834;this.thf_unitary_type();this.state=835;this.match(TPTPParser.Star);this.state=836;this.thf_unitary_type();this._ctx.stop=this._input.LT(-1);this.state=843;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,40,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_xprod_typeContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_thf_xprod_type);this.state=838;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=839;this.match(TPTPParser.Star);this.state=840;this.thf_unitary_type();}this.state=845;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,40,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_union_type\",value:function thf_union_type(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Thf_union_typeContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=112;this.enterRecursionRule(localctx,112,TPTPParser.RULE_thf_union_type,_p);try{this.enterOuterAlt(localctx,1);this.state=847;this.thf_unitary_type();this.state=848;this.match(TPTPParser.Plus);this.state=849;this.thf_unitary_type();this._ctx.stop=this._input.LT(-1);this.state=856;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,41,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Thf_union_typeContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_thf_union_type);this.state=851;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=852;this.match(TPTPParser.Plus);this.state=853;this.thf_unitary_type();}this.state=858;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,41,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"thf_subtype\",value:function thf_subtype(){var localctx=new Thf_subtypeContext(this,this._ctx,this.state);this.enterRule(localctx,114,TPTPParser.RULE_thf_subtype);try{this.enterOuterAlt(localctx,1);this.state=859;this.untyped_atom();this.state=860;this.match(TPTPParser.Subtype_sign);this.state=861;this.atom();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_definition\",value:function thf_definition(){var localctx=new Thf_definitionContext(this,this._ctx,this.state);this.enterRule(localctx,116,TPTPParser.RULE_thf_definition);try{this.enterOuterAlt(localctx,1);this.state=863;this.thf_atomic_formula();this.state=864;this.match(TPTPParser.Identical);this.state=865;this.thf_logic_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_sequent\",value:function thf_sequent(){var localctx=new Thf_sequentContext(this,this._ctx,this.state);this.enterRule(localctx,118,TPTPParser.RULE_thf_sequent);try{this.enterOuterAlt(localctx,1);this.state=867;this.thf_tuple();this.state=868;this.match(TPTPParser.Gentzen_arrow);this.state=869;this.thf_tuple();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_formula\",value:function tff_formula(){var localctx=new Tff_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,120,TPTPParser.RULE_tff_formula);try{this.state=874;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,42,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=871;this.tff_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=872;this.tff_atom_typing();break;case 3:this.enterOuterAlt(localctx,3);this.state=873;this.tff_subtype();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_logic_formula\",value:function tff_logic_formula(){var localctx=new Tff_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,122,TPTPParser.RULE_tff_logic_formula);try{this.state=882;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,43,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=876;this.tff_unitary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=877;this.tff_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=878;this.tff_binary_formula();break;case 4:this.enterOuterAlt(localctx,4);this.state=879;this.tff_defined_infix();break;case 5:this.enterOuterAlt(localctx,5);this.state=880;this.txf_definition();break;case 6:this.enterOuterAlt(localctx,6);this.state=881;this.txf_sequent();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_binary_formula\",value:function tff_binary_formula(){var localctx=new Tff_binary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,124,TPTPParser.RULE_tff_binary_formula);try{this.state=886;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,44,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=884;this.tff_binary_nonassoc();break;case 2:this.enterOuterAlt(localctx,2);this.state=885;this.tff_binary_assoc();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_binary_nonassoc\",value:function tff_binary_nonassoc(){var localctx=new Tff_binary_nonassocContext(this,this._ctx,this.state);this.enterRule(localctx,126,TPTPParser.RULE_tff_binary_nonassoc);try{this.enterOuterAlt(localctx,1);this.state=888;this.tff_unit_formula();this.state=889;this.nonassoc_connective();this.state=890;this.tff_unit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_binary_assoc\",value:function tff_binary_assoc(){var localctx=new Tff_binary_assocContext(this,this._ctx,this.state);this.enterRule(localctx,128,TPTPParser.RULE_tff_binary_assoc);try{this.state=894;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,45,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=892;this.tff_or_formula(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=893;this.tff_and_formula(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_or_formula\",value:function tff_or_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Tff_or_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=130;this.enterRecursionRule(localctx,130,TPTPParser.RULE_tff_or_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=897;this.tff_unit_formula();this.state=898;this.match(TPTPParser.Or);this.state=899;this.tff_unit_formula();this._ctx.stop=this._input.LT(-1);this.state=906;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,46,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Tff_or_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_tff_or_formula);this.state=901;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=902;this.match(TPTPParser.Or);this.state=903;this.tff_unit_formula();}this.state=908;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,46,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"tff_and_formula\",value:function tff_and_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Tff_and_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=132;this.enterRecursionRule(localctx,132,TPTPParser.RULE_tff_and_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=910;this.tff_unit_formula();this.state=911;this.match(TPTPParser.And);this.state=912;this.tff_unit_formula();this._ctx.stop=this._input.LT(-1);this.state=919;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,47,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Tff_and_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_tff_and_formula);this.state=914;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=915;this.match(TPTPParser.And);this.state=916;this.tff_unit_formula();}this.state=921;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,47,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"tff_unit_formula\",value:function tff_unit_formula(){var localctx=new Tff_unit_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,134,TPTPParser.RULE_tff_unit_formula);try{this.state=925;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,48,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=922;this.tff_unitary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=923;this.tff_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=924;this.tff_defined_infix();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_preunit_formula\",value:function tff_preunit_formula(){var localctx=new Tff_preunit_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,136,TPTPParser.RULE_tff_preunit_formula);try{this.state=929;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__8:case TPTPParser.T__10:case TPTPParser.T__13:case TPTPParser.T__15:case TPTPParser.T__16:case TPTPParser.T__17:case TPTPParser.T__18:case TPTPParser.T__19:case TPTPParser.Forall:case TPTPParser.Exists:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=927;this.tff_unitary_formula();break;case TPTPParser.Not:this.enterOuterAlt(localctx,2);this.state=928;this.tff_prefix_unary();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){var localctx=new Tff_unitary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,138,TPTPParser.RULE_tff_unitary_formula);try{this.state=938;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Forall:case TPTPParser.Exists:this.enterOuterAlt(localctx,1);this.state=931;this.tff_quantified_formula();break;case TPTPParser.T__10:case TPTPParser.T__13:case TPTPParser.T__15:case TPTPParser.T__16:case TPTPParser.T__17:case TPTPParser.T__18:case TPTPParser.T__19:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,2);this.state=932;this.tff_atomic_formula();break;case TPTPParser.Upper_word:this.enterOuterAlt(localctx,3);this.state=933;this.txf_unitary_formula();break;case TPTPParser.T__8:this.enterOuterAlt(localctx,4);this.state=934;this.match(TPTPParser.T__8);this.state=935;this.tff_logic_formula();this.state=936;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_unitary_formula\",value:function txf_unitary_formula(){var localctx=new Txf_unitary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,140,TPTPParser.RULE_txf_unitary_formula);try{this.enterOuterAlt(localctx,1);this.state=940;this.variable();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_quantified_formula\",value:function tff_quantified_formula(){var localctx=new Tff_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,142,TPTPParser.RULE_tff_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=942;this.fof_quantifier();this.state=943;this.match(TPTPParser.T__10);this.state=944;this.tff_variable_list();this.state=945;this.match(TPTPParser.T__11);this.state=946;this.match(TPTPParser.T__12);this.state=947;this.tff_unit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_variable_list\",value:function tff_variable_list(){var localctx=new Tff_variable_listContext(this,this._ctx,this.state);this.enterRule(localctx,144,TPTPParser.RULE_tff_variable_list);try{this.state=954;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,51,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=949;this.tff_variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=950;this.tff_variable();this.state=951;this.match(TPTPParser.T__1);this.state=952;this.tff_variable_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_variable\",value:function tff_variable(){var localctx=new Tff_variableContext(this,this._ctx,this.state);this.enterRule(localctx,146,TPTPParser.RULE_tff_variable);try{this.state=958;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,52,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=956;this.tff_typed_variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=957;this.variable();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_typed_variable\",value:function tff_typed_variable(){var localctx=new Tff_typed_variableContext(this,this._ctx,this.state);this.enterRule(localctx,148,TPTPParser.RULE_tff_typed_variable);try{this.enterOuterAlt(localctx,1);this.state=960;this.variable();this.state=961;this.match(TPTPParser.T__12);this.state=962;this.tff_atomic_type();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_unary_formula\",value:function tff_unary_formula(){var localctx=new Tff_unary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,150,TPTPParser.RULE_tff_unary_formula);try{this.state=966;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Not:this.enterOuterAlt(localctx,1);this.state=964;this.tff_prefix_unary();break;case TPTPParser.T__8:case TPTPParser.T__10:case TPTPParser.T__13:case TPTPParser.T__14:case TPTPParser.T__15:case TPTPParser.T__16:case TPTPParser.T__17:case TPTPParser.T__18:case TPTPParser.T__19:case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=965;this.tff_infix_unary();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_prefix_unary\",value:function tff_prefix_unary(){var localctx=new Tff_prefix_unaryContext(this,this._ctx,this.state);this.enterRule(localctx,152,TPTPParser.RULE_tff_prefix_unary);try{this.enterOuterAlt(localctx,1);this.state=968;this.unary_connective();this.state=969;this.tff_preunit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_infix_unary\",value:function tff_infix_unary(){var localctx=new Tff_infix_unaryContext(this,this._ctx,this.state);this.enterRule(localctx,154,TPTPParser.RULE_tff_infix_unary);try{this.enterOuterAlt(localctx,1);this.state=971;this.tff_unitary_term();this.state=972;this.match(TPTPParser.Infix_inequality);this.state=973;this.tff_unitary_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_atomic_formula\",value:function tff_atomic_formula(){var localctx=new Tff_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,156,TPTPParser.RULE_tff_atomic_formula);try{this.state=978;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=975;this.tff_plain_atomic();break;case TPTPParser.T__10:case TPTPParser.T__13:case TPTPParser.T__15:case TPTPParser.T__16:case TPTPParser.T__17:case TPTPParser.T__18:case TPTPParser.T__19:case TPTPParser.Dollar_word:this.enterOuterAlt(localctx,2);this.state=976;this.tff_defined_atomic();break;case TPTPParser.Dollar_dollar_word:this.enterOuterAlt(localctx,3);this.state=977;this.tff_system_atomic();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_plain_atomic\",value:function tff_plain_atomic(){var localctx=new Tff_plain_atomicContext(this,this._ctx,this.state);this.enterRule(localctx,158,TPTPParser.RULE_tff_plain_atomic);try{this.state=986;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,55,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=980;this.constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=981;this.functor();this.state=982;this.match(TPTPParser.T__8);this.state=983;this.tff_arguments();this.state=984;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_defined_atomic\",value:function tff_defined_atomic(){var localctx=new Tff_defined_atomicContext(this,this._ctx,this.state);this.enterRule(localctx,160,TPTPParser.RULE_tff_defined_atomic);try{this.state=990;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,56,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=988;this.tff_defined_plain();break;case 2:this.enterOuterAlt(localctx,2);this.state=989;this.ntf_connective();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_defined_plain\",value:function tff_defined_plain(){var localctx=new Tff_defined_plainContext(this,this._ctx,this.state);this.enterRule(localctx,162,TPTPParser.RULE_tff_defined_plain);try{this.state=1000;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,57,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=992;this.defined_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=993;this.defined_functor();this.state=994;this.match(TPTPParser.T__8);this.state=995;this.tff_arguments();this.state=996;this.match(TPTPParser.T__9);break;case 3:this.enterOuterAlt(localctx,3);this.state=998;this.txf_ntf_atom();break;case 4:this.enterOuterAlt(localctx,4);this.state=999;this.txf_let();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_defined_infix\",value:function tff_defined_infix(){var localctx=new Tff_defined_infixContext(this,this._ctx,this.state);this.enterRule(localctx,164,TPTPParser.RULE_tff_defined_infix);try{this.enterOuterAlt(localctx,1);this.state=1002;this.tff_unitary_term();this.state=1003;this.defined_infix_pred();this.state=1004;this.tff_unitary_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_system_atomic\",value:function tff_system_atomic(){var localctx=new Tff_system_atomicContext(this,this._ctx,this.state);this.enterRule(localctx,166,TPTPParser.RULE_tff_system_atomic);try{this.state=1012;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,58,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1006;this.system_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1007;this.system_functor();this.state=1008;this.match(TPTPParser.T__8);this.state=1009;this.tff_arguments();this.state=1010;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_let\",value:function txf_let(){var localctx=new Txf_letContext(this,this._ctx,this.state);this.enterRule(localctx,168,TPTPParser.RULE_txf_let);try{this.enterOuterAlt(localctx,1);this.state=1014;this.match(TPTPParser.T__13);this.state=1015;this.txf_let_types();this.state=1016;this.match(TPTPParser.T__1);this.state=1017;this.txf_let_defns();this.state=1018;this.match(TPTPParser.T__1);this.state=1019;this.tff_term();this.state=1020;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_let_types\",value:function txf_let_types(){var localctx=new Txf_let_typesContext(this,this._ctx,this.state);this.enterRule(localctx,170,TPTPParser.RULE_txf_let_types);try{this.state=1027;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__8:case TPTPParser.Dollar_dollar_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1022;this.tff_atom_typing();break;case TPTPParser.T__10:this.enterOuterAlt(localctx,2);this.state=1023;this.match(TPTPParser.T__10);this.state=1024;this.tff_atom_typing_list();this.state=1025;this.match(TPTPParser.T__11);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_atom_typing_list\",value:function tff_atom_typing_list(){var localctx=new Tff_atom_typing_listContext(this,this._ctx,this.state);this.enterRule(localctx,172,TPTPParser.RULE_tff_atom_typing_list);try{this.state=1034;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,60,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1029;this.tff_atom_typing();break;case 2:this.enterOuterAlt(localctx,2);this.state=1030;this.tff_atom_typing();this.state=1031;this.match(TPTPParser.T__1);this.state=1032;this.tff_atom_typing_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_let_defns\",value:function txf_let_defns(){var localctx=new Txf_let_defnsContext(this,this._ctx,this.state);this.enterRule(localctx,174,TPTPParser.RULE_txf_let_defns);try{this.state=1041;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,61,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1036;this.txf_let_defn();break;case 2:this.enterOuterAlt(localctx,2);this.state=1037;this.match(TPTPParser.T__10);this.state=1038;this.txf_let_defn_list();this.state=1039;this.match(TPTPParser.T__11);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_let_defn\",value:function txf_let_defn(){var localctx=new Txf_let_defnContext(this,this._ctx,this.state);this.enterRule(localctx,176,TPTPParser.RULE_txf_let_defn);try{this.enterOuterAlt(localctx,1);this.state=1043;this.txf_let_LHS();this.state=1044;this.match(TPTPParser.Assignment);this.state=1045;this.tff_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_let_LHS\",value:function txf_let_LHS(){var localctx=new Txf_let_LHSContext(this,this._ctx,this.state);this.enterRule(localctx,178,TPTPParser.RULE_txf_let_LHS);try{this.state=1049;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1047;this.tff_plain_atomic();break;case TPTPParser.T__10:case TPTPParser.T__14:this.enterOuterAlt(localctx,2);this.state=1048;this.txf_tuple();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_let_defn_list\",value:function txf_let_defn_list(){var localctx=new Txf_let_defn_listContext(this,this._ctx,this.state);this.enterRule(localctx,180,TPTPParser.RULE_txf_let_defn_list);try{this.state=1056;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,63,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1051;this.txf_let_defn();break;case 2:this.enterOuterAlt(localctx,2);this.state=1052;this.txf_let_defn();this.state=1053;this.match(TPTPParser.T__1);this.state=1054;this.txf_let_defn_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_ntf_atom\",value:function txf_ntf_atom(){var localctx=new Txf_ntf_atomContext(this,this._ctx,this.state);this.enterRule(localctx,182,TPTPParser.RULE_txf_ntf_atom);try{this.enterOuterAlt(localctx,1);this.state=1058;this.ntf_connective();this.state=1059;this.match(TPTPParser.App);this.state=1060;this.match(TPTPParser.T__8);this.state=1061;this.tff_arguments();this.state=1062;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_term\",value:function tff_term(){var localctx=new Tff_termContext(this,this._ctx,this.state);this.enterRule(localctx,184,TPTPParser.RULE_tff_term);try{this.state=1068;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,64,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1064;this.tff_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1065;this.defined_term();break;case 3:this.enterOuterAlt(localctx,3);this.state=1066;this.txf_tuple();break;case 4:this.enterOuterAlt(localctx,4);this.state=1067;this.ntf_key_pair();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_unitary_term\",value:function tff_unitary_term(){var localctx=new Tff_unitary_termContext(this,this._ctx,this.state);this.enterRule(localctx,186,TPTPParser.RULE_tff_unitary_term);try{this.state=1078;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,65,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1070;this.tff_atomic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1071;this.defined_term();break;case 3:this.enterOuterAlt(localctx,3);this.state=1072;this.txf_tuple();break;case 4:this.enterOuterAlt(localctx,4);this.state=1073;this.variable();break;case 5:this.enterOuterAlt(localctx,5);this.state=1074;this.match(TPTPParser.T__8);this.state=1075;this.tff_logic_formula();this.state=1076;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_tuple\",value:function txf_tuple(){var localctx=new Txf_tupleContext(this,this._ctx,this.state);this.enterRule(localctx,188,TPTPParser.RULE_txf_tuple);try{this.state=1085;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__14:this.enterOuterAlt(localctx,1);this.state=1080;this.match(TPTPParser.T__14);break;case TPTPParser.T__10:this.enterOuterAlt(localctx,2);this.state=1081;this.match(TPTPParser.T__10);this.state=1082;this.tff_arguments();this.state=1083;this.match(TPTPParser.T__11);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_arguments\",value:function tff_arguments(){var localctx=new Tff_argumentsContext(this,this._ctx,this.state);this.enterRule(localctx,190,TPTPParser.RULE_tff_arguments);try{this.state=1092;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,67,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1087;this.tff_term();break;case 2:this.enterOuterAlt(localctx,2);this.state=1088;this.tff_term();this.state=1089;this.match(TPTPParser.T__1);this.state=1090;this.tff_arguments();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_atom_typing\",value:function tff_atom_typing(){var localctx=new Tff_atom_typingContext(this,this._ctx,this.state);this.enterRule(localctx,192,TPTPParser.RULE_tff_atom_typing);try{this.state=1102;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Dollar_dollar_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1094;this.untyped_atom();this.state=1095;this.match(TPTPParser.T__12);this.state=1096;this.tff_top_level_type();break;case TPTPParser.T__8:this.enterOuterAlt(localctx,2);this.state=1098;this.match(TPTPParser.T__8);this.state=1099;this.tff_atom_typing();this.state=1100;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_top_level_type\",value:function tff_top_level_type(){var localctx=new Tff_top_level_typeContext(this,this._ctx,this.state);this.enterRule(localctx,194,TPTPParser.RULE_tff_top_level_type);try{this.state=1106;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,69,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1104;this.tff_atomic_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=1105;this.tff_non_atomic_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_non_atomic_type\",value:function tff_non_atomic_type(){var localctx=new Tff_non_atomic_typeContext(this,this._ctx,this.state);this.enterRule(localctx,196,TPTPParser.RULE_tff_non_atomic_type);try{this.state=1114;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,70,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1108;this.tff_mapping_type();break;case 2:this.enterOuterAlt(localctx,2);break;case 3:this.enterOuterAlt(localctx,3);this.state=1110;this.match(TPTPParser.T__8);this.state=1111;this.tff_non_atomic_type();this.state=1112;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tf1_quantified_type\",value:function tf1_quantified_type(){var localctx=new Tf1_quantified_typeContext(this,this._ctx,this.state);this.enterRule(localctx,198,TPTPParser.RULE_tf1_quantified_type);try{this.enterOuterAlt(localctx,1);this.state=1116;this.match(TPTPParser.TyForall);this.state=1117;this.match(TPTPParser.T__10);this.state=1118;this.tff_variable_list();this.state=1119;this.match(TPTPParser.T__11);this.state=1120;this.match(TPTPParser.T__12);this.state=1121;this.tff_monotype();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_monotype\",value:function tff_monotype(){var localctx=new Tff_monotypeContext(this,this._ctx,this.state);this.enterRule(localctx,200,TPTPParser.RULE_tff_monotype);try{this.state=1129;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,71,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1123;this.tff_atomic_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=1124;this.match(TPTPParser.T__8);this.state=1125;this.tff_mapping_type();this.state=1126;this.match(TPTPParser.T__9);break;case 3:this.enterOuterAlt(localctx,3);this.state=1128;this.tf1_quantified_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_unitary_type\",value:function tff_unitary_type(){var localctx=new Tff_unitary_typeContext(this,this._ctx,this.state);this.enterRule(localctx,202,TPTPParser.RULE_tff_unitary_type);try{this.state=1136;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,72,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1131;this.tff_atomic_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=1132;this.match(TPTPParser.T__8);this.state=1133;this.tff_xprod_type(0);this.state=1134;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){var localctx=new Tff_atomic_typeContext(this,this._ctx,this.state);this.enterRule(localctx,204,TPTPParser.RULE_tff_atomic_type);try{this.state=1151;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,73,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1138;this.type_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1139;this.defined_type();break;case 3:this.enterOuterAlt(localctx,3);this.state=1140;this.variable();break;case 4:this.enterOuterAlt(localctx,4);this.state=1141;this.type_functor();this.state=1142;this.match(TPTPParser.T__8);this.state=1143;this.tff_type_arguments();this.state=1144;this.match(TPTPParser.T__9);break;case 5:this.enterOuterAlt(localctx,5);this.state=1146;this.match(TPTPParser.T__8);this.state=1147;this.tff_atomic_type();this.state=1148;this.match(TPTPParser.T__9);break;case 6:this.enterOuterAlt(localctx,6);this.state=1150;this.txf_tuple_type();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_type_arguments\",value:function tff_type_arguments(){var localctx=new Tff_type_argumentsContext(this,this._ctx,this.state);this.enterRule(localctx,206,TPTPParser.RULE_tff_type_arguments);try{this.state=1158;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,74,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1153;this.tff_atomic_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=1154;this.tff_atomic_type();this.state=1155;this.match(TPTPParser.T__1);this.state=1156;this.tff_type_arguments();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_mapping_type\",value:function tff_mapping_type(){var localctx=new Tff_mapping_typeContext(this,this._ctx,this.state);this.enterRule(localctx,208,TPTPParser.RULE_tff_mapping_type);try{this.enterOuterAlt(localctx,1);this.state=1160;this.tff_unitary_type();this.state=1161;this.match(TPTPParser.Arrow);this.state=1162;this.tff_atomic_type();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_xprod_type\",value:function tff_xprod_type(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Tff_xprod_typeContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=210;this.enterRecursionRule(localctx,210,TPTPParser.RULE_tff_xprod_type,_p);try{this.enterOuterAlt(localctx,1);this.state=1165;this.tff_unitary_type();this.state=1166;this.match(TPTPParser.Star);this.state=1167;this.tff_atomic_type();this._ctx.stop=this._input.LT(-1);this.state=1174;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,75,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Tff_xprod_typeContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_tff_xprod_type);this.state=1169;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1170;this.match(TPTPParser.Star);this.state=1171;this.tff_atomic_type();}this.state=1176;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,75,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"txf_tuple_type\",value:function txf_tuple_type(){var localctx=new Txf_tuple_typeContext(this,this._ctx,this.state);this.enterRule(localctx,212,TPTPParser.RULE_txf_tuple_type);try{this.enterOuterAlt(localctx,1);this.state=1177;this.match(TPTPParser.T__10);this.state=1178;this.tff_type_list();this.state=1179;this.match(TPTPParser.T__11);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_type_list\",value:function tff_type_list(){var localctx=new Tff_type_listContext(this,this._ctx,this.state);this.enterRule(localctx,214,TPTPParser.RULE_tff_type_list);try{this.state=1186;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,76,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1181;this.tff_top_level_type();break;case 2:this.enterOuterAlt(localctx,2);this.state=1182;this.tff_top_level_type();this.state=1183;this.match(TPTPParser.T__1);this.state=1184;this.tff_type_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tff_subtype\",value:function tff_subtype(){var localctx=new Tff_subtypeContext(this,this._ctx,this.state);this.enterRule(localctx,216,TPTPParser.RULE_tff_subtype);try{this.enterOuterAlt(localctx,1);this.state=1188;this.untyped_atom();this.state=1189;this.match(TPTPParser.Subtype_sign);this.state=1190;this.atom();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_definition\",value:function txf_definition(){var localctx=new Txf_definitionContext(this,this._ctx,this.state);this.enterRule(localctx,218,TPTPParser.RULE_txf_definition);try{this.enterOuterAlt(localctx,1);this.state=1192;this.tff_atomic_formula();this.state=1193;this.match(TPTPParser.Identical);this.state=1194;this.tff_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"txf_sequent\",value:function txf_sequent(){var localctx=new Txf_sequentContext(this,this._ctx,this.state);this.enterRule(localctx,220,TPTPParser.RULE_txf_sequent);try{this.enterOuterAlt(localctx,1);this.state=1196;this.txf_tuple();this.state=1197;this.match(TPTPParser.Gentzen_arrow);this.state=1198;this.txf_tuple();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_connective\",value:function ntf_connective(){var localctx=new Ntf_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,222,TPTPParser.RULE_ntf_connective);try{this.state=1202;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,77,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1200;this.ntf_short_connective();break;case 2:this.enterOuterAlt(localctx,2);this.state=1201;this.ntf_long_connective();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_short_connective\",value:function ntf_short_connective(){var localctx=new Ntf_short_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,224,TPTPParser.RULE_ntf_short_connective);try{this.state=1219;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__15:this.enterOuterAlt(localctx,1);this.state=1204;this.match(TPTPParser.T__15);break;case TPTPParser.T__16:this.enterOuterAlt(localctx,2);this.state=1205;this.match(TPTPParser.T__16);break;case TPTPParser.T__17:this.enterOuterAlt(localctx,3);this.state=1206;this.match(TPTPParser.T__17);break;case TPTPParser.T__10:this.enterOuterAlt(localctx,4);this.state=1207;this.match(TPTPParser.T__10);this.state=1208;this.ntf_index();this.state=1209;this.match(TPTPParser.T__11);break;case TPTPParser.T__18:this.enterOuterAlt(localctx,5);this.state=1211;this.match(TPTPParser.T__18);this.state=1212;this.ntf_index();this.state=1213;this.match(TPTPParser.Arrow);break;case TPTPParser.T__19:this.enterOuterAlt(localctx,6);this.state=1215;this.match(TPTPParser.T__19);this.state=1216;this.ntf_index();this.state=1217;this.match(TPTPParser.T__20);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_long_connective\",value:function ntf_long_connective(){var localctx=new Ntf_long_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,226,TPTPParser.RULE_ntf_long_connective);try{this.state=1231;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,79,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1221;this.match(TPTPParser.T__19);this.state=1222;this.ntf_connective_name();this.state=1223;this.match(TPTPParser.T__20);break;case 2:this.enterOuterAlt(localctx,2);this.state=1225;this.match(TPTPParser.T__19);this.state=1226;this.ntf_connective_name();this.state=1227;this.match(TPTPParser.T__8);this.state=1228;this.ntf_parameter_list();this.state=1229;this.match(TPTPParser.T__21);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_connective_name\",value:function ntf_connective_name(){var localctx=new Ntf_connective_nameContext(this,this._ctx,this.state);this.enterRule(localctx,228,TPTPParser.RULE_ntf_connective_name);try{this.enterOuterAlt(localctx,1);this.state=1233;this.def_or_sys_constant();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_parameter_list\",value:function ntf_parameter_list(){var localctx=new Ntf_parameter_listContext(this,this._ctx,this.state);this.enterRule(localctx,230,TPTPParser.RULE_ntf_parameter_list);try{this.state=1240;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,80,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1235;this.ntf_parameter();break;case 2:this.enterOuterAlt(localctx,2);this.state=1236;this.ntf_parameter();this.state=1237;this.match(TPTPParser.T__1);this.state=1238;this.ntf_parameter_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_parameter\",value:function ntf_parameter(){var localctx=new Ntf_parameterContext(this,this._ctx,this.state);this.enterRule(localctx,232,TPTPParser.RULE_ntf_parameter);try{this.state=1244;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Hash:this.enterOuterAlt(localctx,1);this.state=1242;this.ntf_index();break;case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:this.enterOuterAlt(localctx,2);this.state=1243;this.ntf_key_pair();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_index\",value:function ntf_index(){var localctx=new Ntf_indexContext(this,this._ctx,this.state);this.enterRule(localctx,234,TPTPParser.RULE_ntf_index);try{this.enterOuterAlt(localctx,1);this.state=1246;this.match(TPTPParser.Hash);this.state=1247;this.tff_unitary_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"ntf_key_pair\",value:function ntf_key_pair(){var localctx=new Ntf_key_pairContext(this,this._ctx,this.state);this.enterRule(localctx,236,TPTPParser.RULE_ntf_key_pair);try{this.enterOuterAlt(localctx,1);this.state=1249;this.def_or_sys_constant();this.state=1250;this.match(TPTPParser.Assignment);this.state=1251;this.tff_unitary_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"logic_defn_rule\",value:function logic_defn_rule(){var localctx=new Logic_defn_ruleContext(this,this._ctx,this.state);this.enterRule(localctx,238,TPTPParser.RULE_logic_defn_rule);try{this.enterOuterAlt(localctx,1);this.state=1253;this.logic_defn_LHS();this.state=1254;this.match(TPTPParser.Identical);this.state=1255;this.logic_defn_RHS();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"logic_defn_LHS\",value:function logic_defn_LHS(){var localctx=new Logic_defn_LHSContext(this,this._ctx,this.state);this.enterRule(localctx,240,TPTPParser.RULE_logic_defn_LHS);try{this.enterOuterAlt(localctx,1);this.state=1257;this.defined_constant();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"logic_defn_RHS\",value:function logic_defn_RHS(){var localctx=new Logic_defn_RHSContext(this,this._ctx,this.state);this.enterRule(localctx,242,TPTPParser.RULE_logic_defn_RHS);try{this.state=1261;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Dollar_word:this.enterOuterAlt(localctx,1);this.state=1259;this.defined_constant();break;case TPTPParser.T__10:case TPTPParser.T__14:this.enterOuterAlt(localctx,2);this.state=1260;this.txf_tuple();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tcf_formula\",value:function tcf_formula(){var localctx=new Tcf_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,244,TPTPParser.RULE_tcf_formula);try{this.state=1265;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,83,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1263;this.tcf_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1264;this.tff_atom_typing();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tcf_logic_formula\",value:function tcf_logic_formula(){var localctx=new Tcf_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,246,TPTPParser.RULE_tcf_logic_formula);try{this.state=1269;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Forall:this.enterOuterAlt(localctx,1);this.state=1267;this.tcf_quantified_formula();break;case TPTPParser.T__8:case TPTPParser.Not:case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1268;this.cnf_formula();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"tcf_quantified_formula\",value:function tcf_quantified_formula(){var localctx=new Tcf_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,248,TPTPParser.RULE_tcf_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=1271;this.match(TPTPParser.Forall);this.state=1272;this.match(TPTPParser.T__10);this.state=1273;this.tff_variable_list();this.state=1274;this.match(TPTPParser.T__11);this.state=1275;this.match(TPTPParser.T__12);this.state=1276;this.tcf_logic_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_formula\",value:function fof_formula(){var localctx=new Fof_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,250,TPTPParser.RULE_fof_formula);try{this.state=1280;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,85,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1278;this.fof_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1279;this.fof_sequent();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_logic_formula\",value:function fof_logic_formula(){var localctx=new Fof_logic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,252,TPTPParser.RULE_fof_logic_formula);try{this.state=1285;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,86,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1282;this.fof_binary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1283;this.fof_unary_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=1284;this.fof_unitary_formula();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_binary_formula\",value:function fof_binary_formula(){var localctx=new Fof_binary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,254,TPTPParser.RULE_fof_binary_formula);try{this.state=1289;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,87,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1287;this.fof_binary_nonassoc();break;case 2:this.enterOuterAlt(localctx,2);this.state=1288;this.fof_binary_assoc();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_binary_nonassoc\",value:function fof_binary_nonassoc(){var localctx=new Fof_binary_nonassocContext(this,this._ctx,this.state);this.enterRule(localctx,256,TPTPParser.RULE_fof_binary_nonassoc);try{this.enterOuterAlt(localctx,1);this.state=1291;this.fof_unit_formula();this.state=1292;this.nonassoc_connective();this.state=1293;this.fof_unit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_binary_assoc\",value:function fof_binary_assoc(){var localctx=new Fof_binary_assocContext(this,this._ctx,this.state);this.enterRule(localctx,258,TPTPParser.RULE_fof_binary_assoc);try{this.state=1297;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,88,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1295;this.fof_or_formula(0);break;case 2:this.enterOuterAlt(localctx,2);this.state=1296;this.fof_and_formula(0);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_or_formula\",value:function fof_or_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Fof_or_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=260;this.enterRecursionRule(localctx,260,TPTPParser.RULE_fof_or_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=1300;this.fof_unit_formula();this.state=1301;this.match(TPTPParser.Or);this.state=1302;this.fof_unit_formula();this._ctx.stop=this._input.LT(-1);this.state=1309;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,89,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Fof_or_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_fof_or_formula);this.state=1304;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1305;this.match(TPTPParser.Or);this.state=1306;this.fof_unit_formula();}this.state=1311;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,89,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"fof_and_formula\",value:function fof_and_formula(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Fof_and_formulaContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=262;this.enterRecursionRule(localctx,262,TPTPParser.RULE_fof_and_formula,_p);try{this.enterOuterAlt(localctx,1);this.state=1313;this.fof_unit_formula();this.state=1314;this.match(TPTPParser.And);this.state=1315;this.fof_unit_formula();this._ctx.stop=this._input.LT(-1);this.state=1322;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,90,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Fof_and_formulaContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_fof_and_formula);this.state=1317;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1318;this.match(TPTPParser.And);this.state=1319;this.fof_unit_formula();}this.state=1324;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,90,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"fof_unary_formula\",value:function fof_unary_formula(){var localctx=new Fof_unary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,264,TPTPParser.RULE_fof_unary_formula);try{this.state=1329;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Not:this.enterOuterAlt(localctx,1);this.state=1325;this.unary_connective();this.state=1326;this.fof_unit_formula();break;case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1328;this.fof_infix_unary();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_infix_unary\",value:function fof_infix_unary(){var localctx=new Fof_infix_unaryContext(this,this._ctx,this.state);this.enterRule(localctx,266,TPTPParser.RULE_fof_infix_unary);try{this.enterOuterAlt(localctx,1);this.state=1331;this.fof_term();this.state=1332;this.match(TPTPParser.Infix_inequality);this.state=1333;this.fof_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_unit_formula\",value:function fof_unit_formula(){var localctx=new Fof_unit_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,268,TPTPParser.RULE_fof_unit_formula);try{this.state=1337;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,92,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1335;this.fof_unitary_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1336;this.fof_unary_formula();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_unitary_formula\",value:function fof_unitary_formula(){var localctx=new Fof_unitary_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,270,TPTPParser.RULE_fof_unitary_formula);try{this.state=1345;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Forall:case TPTPParser.Exists:this.enterOuterAlt(localctx,1);this.state=1339;this.fof_quantified_formula();break;case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1340;this.fof_atomic_formula();break;case TPTPParser.T__8:this.enterOuterAlt(localctx,3);this.state=1341;this.match(TPTPParser.T__8);this.state=1342;this.fof_logic_formula();this.state=1343;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_quantified_formula\",value:function fof_quantified_formula(){var localctx=new Fof_quantified_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,272,TPTPParser.RULE_fof_quantified_formula);try{this.enterOuterAlt(localctx,1);this.state=1347;this.fof_quantifier();this.state=1348;this.match(TPTPParser.T__10);this.state=1349;this.fof_variable_list();this.state=1350;this.match(TPTPParser.T__11);this.state=1351;this.match(TPTPParser.T__12);this.state=1352;this.fof_unit_formula();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_variable_list\",value:function fof_variable_list(){var localctx=new Fof_variable_listContext(this,this._ctx,this.state);this.enterRule(localctx,274,TPTPParser.RULE_fof_variable_list);try{this.state=1359;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,94,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1354;this.variable();break;case 2:this.enterOuterAlt(localctx,2);this.state=1355;this.variable();this.state=1356;this.match(TPTPParser.T__1);this.state=1357;this.fof_variable_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_atomic_formula\",value:function fof_atomic_formula(){var localctx=new Fof_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,276,TPTPParser.RULE_fof_atomic_formula);try{this.state=1364;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,95,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1361;this.fof_plain_atomic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1362;this.fof_defined_atomic_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=1363;this.fof_system_atomic_formula();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_plain_atomic_formula\",value:function fof_plain_atomic_formula(){var localctx=new Fof_plain_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,278,TPTPParser.RULE_fof_plain_atomic_formula);try{this.enterOuterAlt(localctx,1);this.state=1366;this.fof_plain_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_atomic_formula\",value:function fof_defined_atomic_formula(){var localctx=new Fof_defined_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,280,TPTPParser.RULE_fof_defined_atomic_formula);try{this.state=1370;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,96,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1368;this.fof_defined_plain_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1369;this.fof_defined_infix_formula();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_plain_formula\",value:function fof_defined_plain_formula(){var localctx=new Fof_defined_plain_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,282,TPTPParser.RULE_fof_defined_plain_formula);try{this.enterOuterAlt(localctx,1);this.state=1372;this.fof_defined_plain_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_infix_formula\",value:function fof_defined_infix_formula(){var localctx=new Fof_defined_infix_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,284,TPTPParser.RULE_fof_defined_infix_formula);try{this.enterOuterAlt(localctx,1);this.state=1374;this.fof_term();this.state=1375;this.defined_infix_pred();this.state=1376;this.fof_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_system_atomic_formula\",value:function fof_system_atomic_formula(){var localctx=new Fof_system_atomic_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,286,TPTPParser.RULE_fof_system_atomic_formula);try{this.enterOuterAlt(localctx,1);this.state=1378;this.fof_system_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_plain_term\",value:function fof_plain_term(){var localctx=new Fof_plain_termContext(this,this._ctx,this.state);this.enterRule(localctx,288,TPTPParser.RULE_fof_plain_term);try{this.state=1386;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,97,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1380;this.constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1381;this.functor();this.state=1382;this.match(TPTPParser.T__8);this.state=1383;this.fof_arguments();this.state=1384;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_term\",value:function fof_defined_term(){var localctx=new Fof_defined_termContext(this,this._ctx,this.state);this.enterRule(localctx,290,TPTPParser.RULE_fof_defined_term);try{this.state=1390;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=1388;this.defined_term();break;case TPTPParser.Dollar_word:this.enterOuterAlt(localctx,2);this.state=1389;this.fof_defined_atomic_term();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_atomic_term\",value:function fof_defined_atomic_term(){var localctx=new Fof_defined_atomic_termContext(this,this._ctx,this.state);this.enterRule(localctx,292,TPTPParser.RULE_fof_defined_atomic_term);try{this.enterOuterAlt(localctx,1);this.state=1392;this.fof_defined_plain_term();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_defined_plain_term\",value:function fof_defined_plain_term(){var localctx=new Fof_defined_plain_termContext(this,this._ctx,this.state);this.enterRule(localctx,294,TPTPParser.RULE_fof_defined_plain_term);try{this.state=1400;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,99,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1394;this.defined_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1395;this.defined_functor();this.state=1396;this.match(TPTPParser.T__8);this.state=1397;this.fof_arguments();this.state=1398;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_system_term\",value:function fof_system_term(){var localctx=new Fof_system_termContext(this,this._ctx,this.state);this.enterRule(localctx,296,TPTPParser.RULE_fof_system_term);try{this.state=1408;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,100,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1402;this.system_constant();break;case 2:this.enterOuterAlt(localctx,2);this.state=1403;this.system_functor();this.state=1404;this.match(TPTPParser.T__8);this.state=1405;this.fof_arguments();this.state=1406;this.match(TPTPParser.T__9);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_arguments\",value:function fof_arguments(){var localctx=new Fof_argumentsContext(this,this._ctx,this.state);this.enterRule(localctx,298,TPTPParser.RULE_fof_arguments);try{this.state=1415;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,101,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1410;this.fof_term();break;case 2:this.enterOuterAlt(localctx,2);this.state=1411;this.fof_term();this.state=1412;this.match(TPTPParser.T__1);this.state=1413;this.fof_arguments();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_term\",value:function fof_term(){var localctx=new Fof_termContext(this,this._ctx,this.state);this.enterRule(localctx,300,TPTPParser.RULE_fof_term);try{this.state=1419;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=1417;this.fof_function_term();break;case TPTPParser.Upper_word:this.enterOuterAlt(localctx,2);this.state=1418;this.variable();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_function_term\",value:function fof_function_term(){var localctx=new Fof_function_termContext(this,this._ctx,this.state);this.enterRule(localctx,302,TPTPParser.RULE_fof_function_term);try{this.state=1424;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1421;this.fof_plain_term();break;case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1422;this.fof_defined_term();break;case TPTPParser.Dollar_dollar_word:this.enterOuterAlt(localctx,3);this.state=1423;this.fof_system_term();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_sequent\",value:function fof_sequent(){var localctx=new Fof_sequentContext(this,this._ctx,this.state);this.enterRule(localctx,304,TPTPParser.RULE_fof_sequent);try{this.state=1434;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__19:case TPTPParser.T__22:this.enterOuterAlt(localctx,1);this.state=1426;this.fof_formula_tuple();this.state=1427;this.match(TPTPParser.Gentzen_arrow);this.state=1428;this.fof_formula_tuple();break;case TPTPParser.T__8:this.enterOuterAlt(localctx,2);this.state=1430;this.match(TPTPParser.T__8);this.state=1431;this.fof_sequent();this.state=1432;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_formula_tuple\",value:function fof_formula_tuple(){var localctx=new Fof_formula_tupleContext(this,this._ctx,this.state);this.enterRule(localctx,306,TPTPParser.RULE_fof_formula_tuple);try{this.state=1441;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__22:this.enterOuterAlt(localctx,1);this.state=1436;this.match(TPTPParser.T__22);break;case TPTPParser.T__19:this.enterOuterAlt(localctx,2);this.state=1437;this.match(TPTPParser.T__19);this.state=1438;this.fof_formula_tuple_list();this.state=1439;this.match(TPTPParser.T__20);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_formula_tuple_list\",value:function fof_formula_tuple_list(){var localctx=new Fof_formula_tuple_listContext(this,this._ctx,this.state);this.enterRule(localctx,308,TPTPParser.RULE_fof_formula_tuple_list);try{this.state=1448;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,106,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1443;this.fof_logic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1444;this.fof_logic_formula();this.state=1445;this.match(TPTPParser.T__1);this.state=1446;this.fof_formula_tuple_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"cnf_formula\",value:function cnf_formula(){var localctx=new Cnf_formulaContext(this,this._ctx,this.state);this.enterRule(localctx,310,TPTPParser.RULE_cnf_formula);try{this.state=1455;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Not:case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:case TPTPParser.Dollar_word:case TPTPParser.Dollar_dollar_word:case TPTPParser.Upper_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,1);this.state=1450;this.cnf_disjunction(0);break;case TPTPParser.T__8:this.enterOuterAlt(localctx,2);this.state=1451;this.match(TPTPParser.T__8);this.state=1452;this.cnf_disjunction(0);this.state=1453;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"cnf_disjunction\",value:function cnf_disjunction(_p){if(_p===undefined){_p=0;}var _parentctx=this._ctx;var _parentState=this.state;var localctx=new Cnf_disjunctionContext(this,this._ctx,_parentState);var _prevctx=localctx;var _startState=312;this.enterRecursionRule(localctx,312,TPTPParser.RULE_cnf_disjunction,_p);try{this.enterOuterAlt(localctx,1);this.state=1458;this.cnf_literal();this._ctx.stop=this._input.LT(-1);this.state=1465;this._errHandler.sync(this);var _alt=this._interp.adaptivePredict(this._input,108,this._ctx);while(_alt!=2&&_alt!=_antlr[\"default\"].atn.ATN.INVALID_ALT_NUMBER){if(_alt===1){if(this._parseListeners!==null){this.triggerExitRuleEvent();}_prevctx=localctx;localctx=new Cnf_disjunctionContext(this,_parentctx,_parentState);this.pushNewRecursionContext(localctx,_startState,TPTPParser.RULE_cnf_disjunction);this.state=1460;if(!this.precpred(this._ctx,1)){throw new _antlr[\"default\"].error.FailedPredicateException(this,\"this.precpred(this._ctx, 1)\");}this.state=1461;this.match(TPTPParser.Or);this.state=1462;this.cnf_literal();}this.state=1467;this._errHandler.sync(this);_alt=this._interp.adaptivePredict(this._input,108,this._ctx);}}catch(error){if(error instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=error;this._errHandler.reportError(this,error);this._errHandler.recover(this,error);}else{throw error;}}finally{this.unrollRecursionContexts(_parentctx);}return localctx;}},{key:\"cnf_literal\",value:function cnf_literal(){var localctx=new Cnf_literalContext(this,this._ctx,this.state);this.enterRule(localctx,314,TPTPParser.RULE_cnf_literal);try{this.state=1477;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,109,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1468;this.fof_atomic_formula();break;case 2:this.enterOuterAlt(localctx,2);this.state=1469;this.match(TPTPParser.Not);this.state=1470;this.fof_atomic_formula();break;case 3:this.enterOuterAlt(localctx,3);this.state=1471;this.match(TPTPParser.Not);this.state=1472;this.match(TPTPParser.T__8);this.state=1473;this.fof_atomic_formula();this.state=1474;this.match(TPTPParser.T__9);break;case 4:this.enterOuterAlt(localctx,4);this.state=1476;this.fof_infix_unary();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"thf_quantifier\",value:function thf_quantifier(){var localctx=new Thf_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,316,TPTPParser.RULE_thf_quantifier);try{this.state=1482;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Forall:case TPTPParser.Exists:this.enterOuterAlt(localctx,1);this.state=1479;this.fof_quantifier();break;case TPTPParser.Lambda:case TPTPParser.Choice:case TPTPParser.Description:this.enterOuterAlt(localctx,2);this.state=1480;this.th0_quantifier();break;case TPTPParser.TyForall:case TPTPParser.TyExists:this.enterOuterAlt(localctx,3);this.state=1481;this.th1_quantifier();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"th1_quantifier\",value:function th1_quantifier(){var localctx=new Th1_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,318,TPTPParser.RULE_th1_quantifier);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1484;_la=this._input.LA(1);if(!(_la===TPTPParser.TyForall||_la===TPTPParser.TyExists)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"th0_quantifier\",value:function th0_quantifier(){var localctx=new Th0_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,320,TPTPParser.RULE_th0_quantifier);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1486;_la=this._input.LA(1);if(!((_la-58&~0x1f)==0&&(1<<_la-58&(1<<TPTPParser.Lambda-58|1<<TPTPParser.Choice-58|1<<TPTPParser.Description-58))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"fof_quantifier\",value:function fof_quantifier(){var localctx=new Fof_quantifierContext(this,this._ctx,this.state);this.enterRule(localctx,322,TPTPParser.RULE_fof_quantifier);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1488;_la=this._input.LA(1);if(!(_la===TPTPParser.Forall||_la===TPTPParser.Exists)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"nonassoc_connective\",value:function nonassoc_connective(){var localctx=new Nonassoc_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,324,TPTPParser.RULE_nonassoc_connective);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1490;_la=this._input.LA(1);if(!((_la-43&~0x1f)==0&&(1<<_la-43&(1<<TPTPParser.Iff-43|1<<TPTPParser.Impl-43|1<<TPTPParser.If-43|1<<TPTPParser.Niff-43|1<<TPTPParser.Nor-43|1<<TPTPParser.Nand-43))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"assoc_connective\",value:function assoc_connective(){var localctx=new Assoc_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,326,TPTPParser.RULE_assoc_connective);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1492;_la=this._input.LA(1);if(!(_la===TPTPParser.Or||_la===TPTPParser.And)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"unary_connective\",value:function unary_connective(){var localctx=new Unary_connectiveContext(this,this._ctx,this.state);this.enterRule(localctx,328,TPTPParser.RULE_unary_connective);try{this.enterOuterAlt(localctx,1);this.state=1494;this.match(TPTPParser.Not);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"type_constant\",value:function type_constant(){var localctx=new Type_constantContext(this,this._ctx,this.state);this.enterRule(localctx,330,TPTPParser.RULE_type_constant);try{this.enterOuterAlt(localctx,1);this.state=1496;this.type_functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"type_functor\",value:function type_functor(){var localctx=new Type_functorContext(this,this._ctx,this.state);this.enterRule(localctx,332,TPTPParser.RULE_type_functor);try{this.enterOuterAlt(localctx,1);this.state=1498;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_type\",value:function defined_type(){var localctx=new Defined_typeContext(this,this._ctx,this.state);this.enterRule(localctx,334,TPTPParser.RULE_defined_type);try{this.enterOuterAlt(localctx,1);this.state=1500;this.match(TPTPParser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"system_type\",value:function system_type(){var localctx=new System_typeContext(this,this._ctx,this.state);this.enterRule(localctx,336,TPTPParser.RULE_system_type);try{this.enterOuterAlt(localctx,1);this.state=1502;this.atomic_system_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atom\",value:function atom(){var localctx=new AtomContext(this,this._ctx,this.state);this.enterRule(localctx,338,TPTPParser.RULE_atom);try{this.state=1506;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Dollar_dollar_word:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1504;this.untyped_atom();break;case TPTPParser.Dollar_word:this.enterOuterAlt(localctx,2);this.state=1505;this.defined_constant();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"untyped_atom\",value:function untyped_atom(){var localctx=new Untyped_atomContext(this,this._ctx,this.state);this.enterRule(localctx,340,TPTPParser.RULE_untyped_atom);try{this.state=1510;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1508;this.constant();break;case TPTPParser.Dollar_dollar_word:this.enterOuterAlt(localctx,2);this.state=1509;this.system_constant();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_proposition\",value:function defined_proposition(){var localctx=new Defined_propositionContext(this,this._ctx,this.state);this.enterRule(localctx,342,TPTPParser.RULE_defined_proposition);try{this.enterOuterAlt(localctx,1);this.state=1512;this.match(TPTPParser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_predicate\",value:function defined_predicate(){var localctx=new Defined_predicateContext(this,this._ctx,this.state);this.enterRule(localctx,344,TPTPParser.RULE_defined_predicate);try{this.enterOuterAlt(localctx,1);this.state=1514;this.match(TPTPParser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_infix_pred\",value:function defined_infix_pred(){var localctx=new Defined_infix_predContext(this,this._ctx,this.state);this.enterRule(localctx,346,TPTPParser.RULE_defined_infix_pred);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1516;_la=this._input.LA(1);if(!(_la===TPTPParser.Infix_equality||_la===TPTPParser.Assignment)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"constant\",value:function constant(){var localctx=new ConstantContext(this,this._ctx,this.state);this.enterRule(localctx,348,TPTPParser.RULE_constant);try{this.enterOuterAlt(localctx,1);this.state=1518;this.functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"functor\",value:function functor(){var localctx=new FunctorContext(this,this._ctx,this.state);this.enterRule(localctx,350,TPTPParser.RULE_functor);try{this.enterOuterAlt(localctx,1);this.state=1520;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_constant\",value:function defined_constant(){var localctx=new Defined_constantContext(this,this._ctx,this.state);this.enterRule(localctx,352,TPTPParser.RULE_defined_constant);try{this.enterOuterAlt(localctx,1);this.state=1522;this.defined_functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_functor\",value:function defined_functor(){var localctx=new Defined_functorContext(this,this._ctx,this.state);this.enterRule(localctx,354,TPTPParser.RULE_defined_functor);try{this.enterOuterAlt(localctx,1);this.state=1524;this.atomic_defined_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"system_constant\",value:function system_constant(){var localctx=new System_constantContext(this,this._ctx,this.state);this.enterRule(localctx,356,TPTPParser.RULE_system_constant);try{this.enterOuterAlt(localctx,1);this.state=1526;this.system_functor();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"system_functor\",value:function system_functor(){var localctx=new System_functorContext(this,this._ctx,this.state);this.enterRule(localctx,358,TPTPParser.RULE_system_functor);try{this.enterOuterAlt(localctx,1);this.state=1528;this.atomic_system_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"def_or_sys_constant\",value:function def_or_sys_constant(){var localctx=new Def_or_sys_constantContext(this,this._ctx,this.state);this.enterRule(localctx,360,TPTPParser.RULE_def_or_sys_constant);try{this.state=1532;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Dollar_word:this.enterOuterAlt(localctx,1);this.state=1530;this.defined_constant();break;case TPTPParser.Dollar_dollar_word:this.enterOuterAlt(localctx,2);this.state=1531;this.system_constant();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"th1_defined_term\",value:function th1_defined_term(){var localctx=new Th1_defined_termContext(this,this._ctx,this.state);this.enterRule(localctx,362,TPTPParser.RULE_th1_defined_term);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1534;_la=this._input.LA(1);if(!((_la-50&~0x1f)==0&&(1<<_la-50&(1<<TPTPParser.ForallComb-50|1<<TPTPParser.ExistsComb-50|1<<TPTPParser.ChoiceComb-50|1<<TPTPParser.DescriptionComb-50|1<<TPTPParser.EqComb-50))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"defined_term\",value:function defined_term(){var localctx=new Defined_termContext(this,this._ctx,this.state);this.enterRule(localctx,364,TPTPParser.RULE_defined_term);try{this.state=1538;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Real:case TPTPParser.Rational:case TPTPParser.Integer:this.enterOuterAlt(localctx,1);this.state=1536;this.number();break;case TPTPParser.Distinct_object:this.enterOuterAlt(localctx,2);this.state=1537;this.match(TPTPParser.Distinct_object);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"variable\",value:function variable(){var localctx=new VariableContext(this,this._ctx,this.state);this.enterRule(localctx,366,TPTPParser.RULE_variable);try{this.enterOuterAlt(localctx,1);this.state=1540;this.match(TPTPParser.Upper_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"source\",value:function source(){var localctx=new SourceContext(this,this._ctx,this.state);this.enterRule(localctx,368,TPTPParser.RULE_source);try{this.state=1550;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,115,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1542;this.dag_source();break;case 2:this.enterOuterAlt(localctx,2);this.state=1543;this.internal_source();break;case 3:this.enterOuterAlt(localctx,3);this.state=1544;this.external_source();break;case 4:this.enterOuterAlt(localctx,4);this.state=1545;this.match(TPTPParser.Lower_word);break;case 5:this.enterOuterAlt(localctx,5);this.state=1546;this.match(TPTPParser.T__10);this.state=1547;this.sources();this.state=1548;this.match(TPTPParser.T__11);break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"sources\",value:function sources(){var localctx=new SourcesContext(this,this._ctx,this.state);this.enterRule(localctx,370,TPTPParser.RULE_sources);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1552;this.source();this.state=1557;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===TPTPParser.T__1){this.state=1553;this.match(TPTPParser.T__1);this.state=1554;this.source();this.state=1559;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"dag_source\",value:function dag_source(){var localctx=new Dag_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,372,TPTPParser.RULE_dag_source);try{this.state=1562;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Integer:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1560;this.name();break;case TPTPParser.T__23:this.enterOuterAlt(localctx,2);this.state=1561;this.inference_record();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_record\",value:function inference_record(){var localctx=new Inference_recordContext(this,this._ctx,this.state);this.enterRule(localctx,374,TPTPParser.RULE_inference_record);try{this.enterOuterAlt(localctx,1);this.state=1564;this.match(TPTPParser.T__23);this.state=1565;this.inference_rule();this.state=1566;this.match(TPTPParser.T__1);this.state=1567;this.useful_info();this.state=1568;this.match(TPTPParser.T__1);this.state=1569;this.inference_parents();this.state=1570;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_rule\",value:function inference_rule(){var localctx=new Inference_ruleContext(this,this._ctx,this.state);this.enterRule(localctx,376,TPTPParser.RULE_inference_rule);try{this.enterOuterAlt(localctx,1);this.state=1572;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_parents\",value:function inference_parents(){var localctx=new Inference_parentsContext(this,this._ctx,this.state);this.enterRule(localctx,378,TPTPParser.RULE_inference_parents);try{this.state=1579;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__14:this.enterOuterAlt(localctx,1);this.state=1574;this.match(TPTPParser.T__14);break;case TPTPParser.T__10:this.enterOuterAlt(localctx,2);this.state=1575;this.match(TPTPParser.T__10);this.state=1576;this.parent_list();this.state=1577;this.match(TPTPParser.T__11);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"parent_list\",value:function parent_list(){var localctx=new Parent_listContext(this,this._ctx,this.state);this.enterRule(localctx,380,TPTPParser.RULE_parent_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1581;this.parent_info();this.state=1586;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===TPTPParser.T__1){this.state=1582;this.match(TPTPParser.T__1);this.state=1583;this.parent_info();this.state=1588;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"parent_info\",value:function parent_info(){var localctx=new Parent_infoContext(this,this._ctx,this.state);this.enterRule(localctx,382,TPTPParser.RULE_parent_info);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1589;this.source();this.state=1591;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__12){this.state=1590;this.parent_details();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"parent_details\",value:function parent_details(){var localctx=new Parent_detailsContext(this,this._ctx,this.state);this.enterRule(localctx,384,TPTPParser.RULE_parent_details);try{this.enterOuterAlt(localctx,1);this.state=1593;this.match(TPTPParser.T__12);this.state=1594;this.general_list();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"internal_source\",value:function internal_source(){var localctx=new Internal_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,386,TPTPParser.RULE_internal_source);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1596;this.match(TPTPParser.T__24);this.state=1597;this.intro_type();this.state=1599;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=1598;this.optional_info();}this.state=1601;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"intro_type\",value:function intro_type(){var localctx=new Intro_typeContext(this,this._ctx,this.state);this.enterRule(localctx,388,TPTPParser.RULE_intro_type);try{this.enterOuterAlt(localctx,1);this.state=1603;this.match(TPTPParser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"external_source\",value:function external_source(){var localctx=new External_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,390,TPTPParser.RULE_external_source);try{this.state=1608;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__25:this.enterOuterAlt(localctx,1);this.state=1605;this.file_source();break;case TPTPParser.T__26:this.enterOuterAlt(localctx,2);this.state=1606;this.theory();break;case TPTPParser.T__27:this.enterOuterAlt(localctx,3);this.state=1607;this.creator_source();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"file_source\",value:function file_source(){var localctx=new File_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,392,TPTPParser.RULE_file_source);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1610;this.match(TPTPParser.T__25);this.state=1611;this.file_name();this.state=1613;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=1612;this.file_info();}this.state=1615;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"file_info\",value:function file_info(){var localctx=new File_infoContext(this,this._ctx,this.state);this.enterRule(localctx,394,TPTPParser.RULE_file_info);try{this.enterOuterAlt(localctx,1);this.state=1617;this.match(TPTPParser.T__1);this.state=1618;this.name();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"theory\",value:function theory(){var localctx=new TheoryContext(this,this._ctx,this.state);this.enterRule(localctx,396,TPTPParser.RULE_theory);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1620;this.match(TPTPParser.T__26);this.state=1621;this.theory_name();this.state=1623;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=1622;this.optional_info();}this.state=1625;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"theory_name\",value:function theory_name(){var localctx=new Theory_nameContext(this,this._ctx,this.state);this.enterRule(localctx,398,TPTPParser.RULE_theory_name);try{this.enterOuterAlt(localctx,1);this.state=1627;this.match(TPTPParser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"creator_source\",value:function creator_source(){var localctx=new Creator_sourceContext(this,this._ctx,this.state);this.enterRule(localctx,400,TPTPParser.RULE_creator_source);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1629;this.match(TPTPParser.T__27);this.state=1630;this.creator_name();this.state=1632;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=1631;this.optional_info();}this.state=1634;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"creator_name\",value:function creator_name(){var localctx=new Creator_nameContext(this,this._ctx,this.state);this.enterRule(localctx,402,TPTPParser.RULE_creator_name);try{this.enterOuterAlt(localctx,1);this.state=1636;this.atomic_word();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"optional_info\",value:function optional_info(){var localctx=new Optional_infoContext(this,this._ctx,this.state);this.enterRule(localctx,404,TPTPParser.RULE_optional_info);try{this.enterOuterAlt(localctx,1);this.state=1638;this.match(TPTPParser.T__1);this.state=1639;this.useful_info();}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"useful_info\",value:function useful_info(){var localctx=new Useful_infoContext(this,this._ctx,this.state);this.enterRule(localctx,406,TPTPParser.RULE_useful_info);try{this.state=1647;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,126,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1641;this.match(TPTPParser.T__14);break;case 2:this.enterOuterAlt(localctx,2);this.state=1642;this.match(TPTPParser.T__10);this.state=1643;this.info_items();this.state=1644;this.match(TPTPParser.T__11);break;case 3:this.enterOuterAlt(localctx,3);this.state=1646;this.general_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"info_items\",value:function info_items(){var localctx=new Info_itemsContext(this,this._ctx,this.state);this.enterRule(localctx,408,TPTPParser.RULE_info_items);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1649;this.info_item();this.state=1654;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===TPTPParser.T__1){this.state=1650;this.match(TPTPParser.T__1);this.state=1651;this.info_item();this.state=1656;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"info_item\",value:function info_item(){var localctx=new Info_itemContext(this,this._ctx,this.state);this.enterRule(localctx,410,TPTPParser.RULE_info_item);try{this.state=1660;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,128,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1657;this.formula_item();break;case 2:this.enterOuterAlt(localctx,2);this.state=1658;this.inference_item();break;case 3:this.enterOuterAlt(localctx,3);this.state=1659;this.general_function();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_item\",value:function formula_item(){var localctx=new Formula_itemContext(this,this._ctx,this.state);this.enterRule(localctx,412,TPTPParser.RULE_formula_item);try{this.state=1664;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__28:this.enterOuterAlt(localctx,1);this.state=1662;this.description_item();break;case TPTPParser.T__29:this.enterOuterAlt(localctx,2);this.state=1663;this.iquote_item();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"description_item\",value:function description_item(){var localctx=new Description_itemContext(this,this._ctx,this.state);this.enterRule(localctx,414,TPTPParser.RULE_description_item);try{this.enterOuterAlt(localctx,1);this.state=1666;this.match(TPTPParser.T__28);this.state=1667;this.atomic_word();this.state=1668;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"iquote_item\",value:function iquote_item(){var localctx=new Iquote_itemContext(this,this._ctx,this.state);this.enterRule(localctx,416,TPTPParser.RULE_iquote_item);try{this.enterOuterAlt(localctx,1);this.state=1670;this.match(TPTPParser.T__29);this.state=1671;this.atomic_word();this.state=1672;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_item\",value:function inference_item(){var localctx=new Inference_itemContext(this,this._ctx,this.state);this.enterRule(localctx,418,TPTPParser.RULE_inference_item);try{this.state=1678;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__30:case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1674;this.inference_status();break;case TPTPParser.T__31:this.enterOuterAlt(localctx,2);this.state=1675;this.assumptions_record();break;case TPTPParser.T__33:this.enterOuterAlt(localctx,3);this.state=1676;this.new_symbol_record();break;case TPTPParser.T__32:this.enterOuterAlt(localctx,4);this.state=1677;this.refutation();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_status\",value:function inference_status(){var localctx=new Inference_statusContext(this,this._ctx,this.state);this.enterRule(localctx,420,TPTPParser.RULE_inference_status);try{this.state=1685;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__30:this.enterOuterAlt(localctx,1);this.state=1680;this.match(TPTPParser.T__30);this.state=1681;this.status_value();this.state=1682;this.match(TPTPParser.T__9);break;case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,2);this.state=1684;this.inference_info();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"status_value\",value:function status_value(){var localctx=new Status_valueContext(this,this._ctx,this.state);this.enterRule(localctx,422,TPTPParser.RULE_status_value);try{this.enterOuterAlt(localctx,1);this.state=1687;this.match(TPTPParser.Lower_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"inference_info\",value:function inference_info(){var localctx=new Inference_infoContext(this,this._ctx,this.state);this.enterRule(localctx,424,TPTPParser.RULE_inference_info);try{this.enterOuterAlt(localctx,1);this.state=1689;this.inference_rule();this.state=1690;this.match(TPTPParser.T__8);this.state=1691;this.atomic_word();this.state=1692;this.match(TPTPParser.T__1);this.state=1693;this.general_list();this.state=1694;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"assumptions_record\",value:function assumptions_record(){var localctx=new Assumptions_recordContext(this,this._ctx,this.state);this.enterRule(localctx,426,TPTPParser.RULE_assumptions_record);try{this.enterOuterAlt(localctx,1);this.state=1696;this.match(TPTPParser.T__31);this.state=1697;this.match(TPTPParser.T__10);this.state=1698;this.name_list();this.state=1699;this.match(TPTPParser.T__11);this.state=1700;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"refutation\",value:function refutation(){var localctx=new RefutationContext(this,this._ctx,this.state);this.enterRule(localctx,428,TPTPParser.RULE_refutation);try{this.enterOuterAlt(localctx,1);this.state=1702;this.match(TPTPParser.T__32);this.state=1703;this.file_source();this.state=1704;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"new_symbol_record\",value:function new_symbol_record(){var localctx=new New_symbol_recordContext(this,this._ctx,this.state);this.enterRule(localctx,430,TPTPParser.RULE_new_symbol_record);try{this.enterOuterAlt(localctx,1);this.state=1706;this.match(TPTPParser.T__33);this.state=1707;this.atomic_word();this.state=1708;this.match(TPTPParser.T__1);this.state=1709;this.match(TPTPParser.T__10);this.state=1710;this.new_symbol_list();this.state=1711;this.match(TPTPParser.T__11);this.state=1712;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"new_symbol_list\",value:function new_symbol_list(){var localctx=new New_symbol_listContext(this,this._ctx,this.state);this.enterRule(localctx,432,TPTPParser.RULE_new_symbol_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1714;this.principal_symbol();this.state=1719;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===TPTPParser.T__1){this.state=1715;this.match(TPTPParser.T__1);this.state=1716;this.principal_symbol();this.state=1721;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"principal_symbol\",value:function principal_symbol(){var localctx=new Principal_symbolContext(this,this._ctx,this.state);this.enterRule(localctx,434,TPTPParser.RULE_principal_symbol);try{this.state=1724;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1722;this.functor();break;case TPTPParser.Upper_word:this.enterOuterAlt(localctx,2);this.state=1723;this.variable();break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"include\",value:function include(){var localctx=new IncludeContext(this,this._ctx,this.state);this.enterRule(localctx,436,TPTPParser.RULE_include);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1726;this.match(TPTPParser.T__34);this.state=1727;this.file_name();this.state=1729;this._errHandler.sync(this);_la=this._input.LA(1);if(_la===TPTPParser.T__1){this.state=1728;this.formula_selection();}this.state=1731;this.match(TPTPParser.T__2);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_selection\",value:function formula_selection(){var localctx=new Formula_selectionContext(this,this._ctx,this.state);this.enterRule(localctx,438,TPTPParser.RULE_formula_selection);try{this.enterOuterAlt(localctx,1);this.state=1733;this.match(TPTPParser.T__1);this.state=1734;this.match(TPTPParser.T__10);this.state=1735;this.name_list();this.state=1736;this.match(TPTPParser.T__11);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"name_list\",value:function name_list(){var localctx=new Name_listContext(this,this._ctx,this.state);this.enterRule(localctx,440,TPTPParser.RULE_name_list);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1738;this.name();this.state=1743;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===TPTPParser.T__1){this.state=1739;this.match(TPTPParser.T__1);this.state=1740;this.name();this.state=1745;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_term\",value:function general_term(){var localctx=new General_termContext(this,this._ctx,this.state);this.enterRule(localctx,442,TPTPParser.RULE_general_term);try{this.state=1752;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,136,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1746;this.general_data();break;case 2:this.enterOuterAlt(localctx,2);this.state=1747;this.general_data();this.state=1748;this.match(TPTPParser.T__12);this.state=1749;this.general_term();break;case 3:this.enterOuterAlt(localctx,3);this.state=1751;this.general_list();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_data\",value:function general_data(){var localctx=new General_dataContext(this,this._ctx,this.state);this.enterRule(localctx,444,TPTPParser.RULE_general_data);try{this.state=1760;this._errHandler.sync(this);var la_=this._interp.adaptivePredict(this._input,137,this._ctx);switch(la_){case 1:this.enterOuterAlt(localctx,1);this.state=1754;this.atomic_word();break;case 2:this.enterOuterAlt(localctx,2);this.state=1755;this.general_function();break;case 3:this.enterOuterAlt(localctx,3);this.state=1756;this.variable();break;case 4:this.enterOuterAlt(localctx,4);this.state=1757;this.number();break;case 5:this.enterOuterAlt(localctx,5);this.state=1758;this.match(TPTPParser.Distinct_object);break;case 6:this.enterOuterAlt(localctx,6);this.state=1759;this.formula_data();break;}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_function\",value:function general_function(){var localctx=new General_functionContext(this,this._ctx,this.state);this.enterRule(localctx,446,TPTPParser.RULE_general_function);try{this.enterOuterAlt(localctx,1);this.state=1762;this.atomic_word();this.state=1763;this.match(TPTPParser.T__8);this.state=1764;this.general_terms();this.state=1765;this.match(TPTPParser.T__9);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"formula_data\",value:function formula_data(){var localctx=new Formula_dataContext(this,this._ctx,this.state);this.enterRule(localctx,448,TPTPParser.RULE_formula_data);try{this.state=1787;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__35:this.enterOuterAlt(localctx,1);this.state=1767;this.match(TPTPParser.T__35);this.state=1768;this.thf_formula();this.state=1769;this.match(TPTPParser.T__9);break;case TPTPParser.T__36:this.enterOuterAlt(localctx,2);this.state=1771;this.match(TPTPParser.T__36);this.state=1772;this.tff_formula();this.state=1773;this.match(TPTPParser.T__9);break;case TPTPParser.T__37:this.enterOuterAlt(localctx,3);this.state=1775;this.match(TPTPParser.T__37);this.state=1776;this.fof_formula();this.state=1777;this.match(TPTPParser.T__9);break;case TPTPParser.T__38:this.enterOuterAlt(localctx,4);this.state=1779;this.match(TPTPParser.T__38);this.state=1780;this.cnf_formula();this.state=1781;this.match(TPTPParser.T__9);break;case TPTPParser.T__39:this.enterOuterAlt(localctx,5);this.state=1783;this.match(TPTPParser.T__39);this.state=1784;this.fof_term();this.state=1785;this.match(TPTPParser.T__9);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_list\",value:function general_list(){var localctx=new General_listContext(this,this._ctx,this.state);this.enterRule(localctx,450,TPTPParser.RULE_general_list);try{this.state=1794;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.T__14:this.enterOuterAlt(localctx,1);this.state=1789;this.match(TPTPParser.T__14);break;case TPTPParser.T__10:this.enterOuterAlt(localctx,2);this.state=1790;this.match(TPTPParser.T__10);this.state=1791;this.general_terms();this.state=1792;this.match(TPTPParser.T__11);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"general_terms\",value:function general_terms(){var localctx=new General_termsContext(this,this._ctx,this.state);this.enterRule(localctx,452,TPTPParser.RULE_general_terms);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1796;this.general_term();this.state=1801;this._errHandler.sync(this);_la=this._input.LA(1);while(_la===TPTPParser.T__1){this.state=1797;this.match(TPTPParser.T__1);this.state=1798;this.general_term();this.state=1803;this._errHandler.sync(this);_la=this._input.LA(1);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"name\",value:function name(){var localctx=new NameContext(this,this._ctx,this.state);this.enterRule(localctx,454,TPTPParser.RULE_name);try{this.state=1806;this._errHandler.sync(this);switch(this._input.LA(1)){case TPTPParser.Lower_word:case TPTPParser.Single_quoted:this.enterOuterAlt(localctx,1);this.state=1804;this.atomic_word();break;case TPTPParser.Integer:this.enterOuterAlt(localctx,2);this.state=1805;this.match(TPTPParser.Integer);break;default:throw new _antlr[\"default\"].error.NoViableAltException(this);}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atomic_word\",value:function atomic_word(){var localctx=new Atomic_wordContext(this,this._ctx,this.state);this.enterRule(localctx,456,TPTPParser.RULE_atomic_word);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1808;_la=this._input.LA(1);if(!(_la===TPTPParser.Lower_word||_la===TPTPParser.Single_quoted)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atomic_defined_word\",value:function atomic_defined_word(){var localctx=new Atomic_defined_wordContext(this,this._ctx,this.state);this.enterRule(localctx,458,TPTPParser.RULE_atomic_defined_word);try{this.enterOuterAlt(localctx,1);this.state=1810;this.match(TPTPParser.Dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"atomic_system_word\",value:function atomic_system_word(){var localctx=new Atomic_system_wordContext(this,this._ctx,this.state);this.enterRule(localctx,460,TPTPParser.RULE_atomic_system_word);try{this.enterOuterAlt(localctx,1);this.state=1812;this.match(TPTPParser.Dollar_dollar_word);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"number\",value:function number(){var localctx=new NumberContext(this,this._ctx,this.state);this.enterRule(localctx,462,TPTPParser.RULE_number);var _la=0;// Token type\ntry{this.enterOuterAlt(localctx,1);this.state=1814;_la=this._input.LA(1);if(!((_la-73&~0x1f)==0&&(1<<_la-73&(1<<TPTPParser.Real-73|1<<TPTPParser.Rational-73|1<<TPTPParser.Integer-73))!==0)){this._errHandler.recoverInline(this);}else{this._errHandler.reportMatch(this);this.consume();}}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}},{key:\"file_name\",value:function file_name(){var localctx=new File_nameContext(this,this._ctx,this.state);this.enterRule(localctx,464,TPTPParser.RULE_file_name);try{this.enterOuterAlt(localctx,1);this.state=1816;this.match(TPTPParser.Single_quoted);}catch(re){if(re instanceof _antlr[\"default\"].error.RecognitionException){localctx.exception=re;this._errHandler.reportError(this,re);this._errHandler.recover(this,re);}else{throw re;}}finally{this.exitRule();}return localctx;}}]);return TPTPParser;}(_antlr[\"default\"].Parser);exports[\"default\"]=TPTPParser;_defineProperty(TPTPParser,\"grammarFileName\",\"TPTP.g4\");_defineProperty(TPTPParser,\"literalNames\",[null,\"'tpi('\",\"','\",\"').'\",\"'thf('\",\"'tff('\",\"'tcf('\",\"'fof('\",\"'cnf('\",\"'('\",\"')'\",\"'['\",\"']'\",\"':'\",\"'$let('\",\"'[]'\",\"'[.]'\",\"'<.>'\",\"'{.}'\",\"'<'\",\"'{'\",\"'}'\",\"')}'\",\"'{}'\",\"'inference('\",\"'introduced('\",\"'file('\",\"'theory('\",\"'creator('\",\"'description('\",\"'iquote('\",\"'status('\",\"'assumptions('\",\"'refutation('\",\"'new_symbols('\",\"'include('\",\"'$thf('\",\"'$tff('\",\"'$fof('\",\"'$cnf('\",\"'$fot('\",\"'|'\",\"'&'\",\"'<=>'\",\"'=>'\",\"'<='\",\"'<~>'\",\"'~|'\",\"'~&'\",\"'~'\",\"'!!'\",\"'!>'\",\"'!='\",\"'='\",\"'!'\",\"'??'\",\"'?*'\",\"'?'\",\"'^'\",\"'@@+'\",\"'@+'\",\"'@@-'\",\"'@-'\",\"'@='\",\"'@'\",\"':='\",\"'=='\",\"'>'\",\"'*'\",\"'+'\",\"'#'\",\"'<<'\",\"'-->'\"]);_defineProperty(TPTPParser,\"symbolicNames\",[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,\"Or\",\"And\",\"Iff\",\"Impl\",\"If\",\"Niff\",\"Nor\",\"Nand\",\"Not\",\"ForallComb\",\"TyForall\",\"Infix_inequality\",\"Infix_equality\",\"Forall\",\"ExistsComb\",\"TyExists\",\"Exists\",\"Lambda\",\"ChoiceComb\",\"Choice\",\"DescriptionComb\",\"Description\",\"EqComb\",\"App\",\"Assignment\",\"Identical\",\"Arrow\",\"Star\",\"Plus\",\"Hash\",\"Subtype_sign\",\"Gentzen_arrow\",\"Real\",\"Signed_real\",\"Unsigned_real\",\"Rational\",\"Signed_rational\",\"Unsigned_rational\",\"Integer\",\"Signed_integer\",\"Unsigned_integer\",\"Decimal\",\"Positive_decimal\",\"Decimal_exponent\",\"Decimal_fraction\",\"Dot_decimal\",\"Exp_integer\",\"Signed_exp_integer\",\"Unsigned_exp_integer\",\"Dollar_word\",\"Dollar_dollar_word\",\"Upper_word\",\"Lower_word\",\"Single_quoted\",\"Distinct_object\",\"WS\",\"Line_comment\",\"Block_comment\"]);_defineProperty(TPTPParser,\"ruleNames\",[\"tptp_file\",\"tptp_input\",\"annotated_formula\",\"tpi_annotated\",\"tpi_formula\",\"thf_annotated\",\"tff_annotated\",\"tcf_annotated\",\"fof_annotated\",\"cnf_annotated\",\"annotations\",\"formula_role\",\"thf_formula\",\"thf_logic_formula\",\"thf_binary_formula\",\"thf_binary_nonassoc\",\"thf_binary_assoc\",\"thf_or_formula\",\"thf_and_formula\",\"thf_apply_formula\",\"thf_unit_formula\",\"thf_preunit_formula\",\"thf_unitary_formula\",\"thf_quantified_formula\",\"thf_quantification\",\"thf_variable_list\",\"thf_variable\",\"thf_typed_variable\",\"thf_unary_formula\",\"thf_prefix_unary\",\"thf_infix_unary\",\"thf_atomic_formula\",\"thf_plain_atomic\",\"thf_defined_atomic\",\"thf_defined_term\",\"thf_defined_infix\",\"thf_system_atomic\",\"thf_let\",\"thf_let_types\",\"thf_atom_typing_list\",\"thf_let_defns\",\"thf_let_defn\",\"thf_let_defn_list\",\"thf_unitary_term\",\"thf_conn_term\",\"thf_tuple\",\"thf_fof_function\",\"thf_arguments\",\"thf_formula_list\",\"thf_atom_typing\",\"thf_top_level_type\",\"thf_unitary_type\",\"thf_apply_type\",\"thf_binary_type\",\"thf_mapping_type\",\"thf_xprod_type\",\"thf_union_type\",\"thf_subtype\",\"thf_definition\",\"thf_sequent\",\"tff_formula\",\"tff_logic_formula\",\"tff_binary_formula\",\"tff_binary_nonassoc\",\"tff_binary_assoc\",\"tff_or_formula\",\"tff_and_formula\",\"tff_unit_formula\",\"tff_preunit_formula\",\"tff_unitary_formula\",\"txf_unitary_formula\",\"tff_quantified_formula\",\"tff_variable_list\",\"tff_variable\",\"tff_typed_variable\",\"tff_unary_formula\",\"tff_prefix_unary\",\"tff_infix_unary\",\"tff_atomic_formula\",\"tff_plain_atomic\",\"tff_defined_atomic\",\"tff_defined_plain\",\"tff_defined_infix\",\"tff_system_atomic\",\"txf_let\",\"txf_let_types\",\"tff_atom_typing_list\",\"txf_let_defns\",\"txf_let_defn\",\"txf_let_LHS\",\"txf_let_defn_list\",\"txf_ntf_atom\",\"tff_term\",\"tff_unitary_term\",\"txf_tuple\",\"tff_arguments\",\"tff_atom_typing\",\"tff_top_level_type\",\"tff_non_atomic_type\",\"tf1_quantified_type\",\"tff_monotype\",\"tff_unitary_type\",\"tff_atomic_type\",\"tff_type_arguments\",\"tff_mapping_type\",\"tff_xprod_type\",\"txf_tuple_type\",\"tff_type_list\",\"tff_subtype\",\"txf_definition\",\"txf_sequent\",\"ntf_connective\",\"ntf_short_connective\",\"ntf_long_connective\",\"ntf_connective_name\",\"ntf_parameter_list\",\"ntf_parameter\",\"ntf_index\",\"ntf_key_pair\",\"logic_defn_rule\",\"logic_defn_LHS\",\"logic_defn_RHS\",\"tcf_formula\",\"tcf_logic_formula\",\"tcf_quantified_formula\",\"fof_formula\",\"fof_logic_formula\",\"fof_binary_formula\",\"fof_binary_nonassoc\",\"fof_binary_assoc\",\"fof_or_formula\",\"fof_and_formula\",\"fof_unary_formula\",\"fof_infix_unary\",\"fof_unit_formula\",\"fof_unitary_formula\",\"fof_quantified_formula\",\"fof_variable_list\",\"fof_atomic_formula\",\"fof_plain_atomic_formula\",\"fof_defined_atomic_formula\",\"fof_defined_plain_formula\",\"fof_defined_infix_formula\",\"fof_system_atomic_formula\",\"fof_plain_term\",\"fof_defined_term\",\"fof_defined_atomic_term\",\"fof_defined_plain_term\",\"fof_system_term\",\"fof_arguments\",\"fof_term\",\"fof_function_term\",\"fof_sequent\",\"fof_formula_tuple\",\"fof_formula_tuple_list\",\"cnf_formula\",\"cnf_disjunction\",\"cnf_literal\",\"thf_quantifier\",\"th1_quantifier\",\"th0_quantifier\",\"fof_quantifier\",\"nonassoc_connective\",\"assoc_connective\",\"unary_connective\",\"type_constant\",\"type_functor\",\"defined_type\",\"system_type\",\"atom\",\"untyped_atom\",\"defined_proposition\",\"defined_predicate\",\"defined_infix_pred\",\"constant\",\"functor\",\"defined_constant\",\"defined_functor\",\"system_constant\",\"system_functor\",\"def_or_sys_constant\",\"th1_defined_term\",\"defined_term\",\"variable\",\"source\",\"sources\",\"dag_source\",\"inference_record\",\"inference_rule\",\"inference_parents\",\"parent_list\",\"parent_info\",\"parent_details\",\"internal_source\",\"intro_type\",\"external_source\",\"file_source\",\"file_info\",\"theory\",\"theory_name\",\"creator_source\",\"creator_name\",\"optional_info\",\"useful_info\",\"info_items\",\"info_item\",\"formula_item\",\"description_item\",\"iquote_item\",\"inference_item\",\"inference_status\",\"status_value\",\"inference_info\",\"assumptions_record\",\"refutation\",\"new_symbol_record\",\"new_symbol_list\",\"principal_symbol\",\"include\",\"formula_selection\",\"name_list\",\"general_term\",\"general_data\",\"general_function\",\"formula_data\",\"general_list\",\"general_terms\",\"name\",\"atomic_word\",\"atomic_defined_word\",\"atomic_system_word\",\"number\",\"file_name\"]);TPTPParser.EOF=_antlr[\"default\"].Token.EOF;TPTPParser.T__0=1;TPTPParser.T__1=2;TPTPParser.T__2=3;TPTPParser.T__3=4;TPTPParser.T__4=5;TPTPParser.T__5=6;TPTPParser.T__6=7;TPTPParser.T__7=8;TPTPParser.T__8=9;TPTPParser.T__9=10;TPTPParser.T__10=11;TPTPParser.T__11=12;TPTPParser.T__12=13;TPTPParser.T__13=14;TPTPParser.T__14=15;TPTPParser.T__15=16;TPTPParser.T__16=17;TPTPParser.T__17=18;TPTPParser.T__18=19;TPTPParser.T__19=20;TPTPParser.T__20=21;TPTPParser.T__21=22;TPTPParser.T__22=23;TPTPParser.T__23=24;TPTPParser.T__24=25;TPTPParser.T__25=26;TPTPParser.T__26=27;TPTPParser.T__27=28;TPTPParser.T__28=29;TPTPParser.T__29=30;TPTPParser.T__30=31;TPTPParser.T__31=32;TPTPParser.T__32=33;TPTPParser.T__33=34;TPTPParser.T__34=35;TPTPParser.T__35=36;TPTPParser.T__36=37;TPTPParser.T__37=38;TPTPParser.T__38=39;TPTPParser.T__39=40;TPTPParser.Or=41;TPTPParser.And=42;TPTPParser.Iff=43;TPTPParser.Impl=44;TPTPParser.If=45;TPTPParser.Niff=46;TPTPParser.Nor=47;TPTPParser.Nand=48;TPTPParser.Not=49;TPTPParser.ForallComb=50;TPTPParser.TyForall=51;TPTPParser.Infix_inequality=52;TPTPParser.Infix_equality=53;TPTPParser.Forall=54;TPTPParser.ExistsComb=55;TPTPParser.TyExists=56;TPTPParser.Exists=57;TPTPParser.Lambda=58;TPTPParser.ChoiceComb=59;TPTPParser.Choice=60;TPTPParser.DescriptionComb=61;TPTPParser.Description=62;TPTPParser.EqComb=63;TPTPParser.App=64;TPTPParser.Assignment=65;TPTPParser.Identical=66;TPTPParser.Arrow=67;TPTPParser.Star=68;TPTPParser.Plus=69;TPTPParser.Hash=70;TPTPParser.Subtype_sign=71;TPTPParser.Gentzen_arrow=72;TPTPParser.Real=73;TPTPParser.Signed_real=74;TPTPParser.Unsigned_real=75;TPTPParser.Rational=76;TPTPParser.Signed_rational=77;TPTPParser.Unsigned_rational=78;TPTPParser.Integer=79;TPTPParser.Signed_integer=80;TPTPParser.Unsigned_integer=81;TPTPParser.Decimal=82;TPTPParser.Positive_decimal=83;TPTPParser.Decimal_exponent=84;TPTPParser.Decimal_fraction=85;TPTPParser.Dot_decimal=86;TPTPParser.Exp_integer=87;TPTPParser.Signed_exp_integer=88;TPTPParser.Unsigned_exp_integer=89;TPTPParser.Dollar_word=90;TPTPParser.Dollar_dollar_word=91;TPTPParser.Upper_word=92;TPTPParser.Lower_word=93;TPTPParser.Single_quoted=94;TPTPParser.Distinct_object=95;TPTPParser.WS=96;TPTPParser.Line_comment=97;TPTPParser.Block_comment=98;TPTPParser.RULE_tptp_file=0;TPTPParser.RULE_tptp_input=1;TPTPParser.RULE_annotated_formula=2;TPTPParser.RULE_tpi_annotated=3;TPTPParser.RULE_tpi_formula=4;TPTPParser.RULE_thf_annotated=5;TPTPParser.RULE_tff_annotated=6;TPTPParser.RULE_tcf_annotated=7;TPTPParser.RULE_fof_annotated=8;TPTPParser.RULE_cnf_annotated=9;TPTPParser.RULE_annotations=10;TPTPParser.RULE_formula_role=11;TPTPParser.RULE_thf_formula=12;TPTPParser.RULE_thf_logic_formula=13;TPTPParser.RULE_thf_binary_formula=14;TPTPParser.RULE_thf_binary_nonassoc=15;TPTPParser.RULE_thf_binary_assoc=16;TPTPParser.RULE_thf_or_formula=17;TPTPParser.RULE_thf_and_formula=18;TPTPParser.RULE_thf_apply_formula=19;TPTPParser.RULE_thf_unit_formula=20;TPTPParser.RULE_thf_preunit_formula=21;TPTPParser.RULE_thf_unitary_formula=22;TPTPParser.RULE_thf_quantified_formula=23;TPTPParser.RULE_thf_quantification=24;TPTPParser.RULE_thf_variable_list=25;TPTPParser.RULE_thf_variable=26;TPTPParser.RULE_thf_typed_variable=27;TPTPParser.RULE_thf_unary_formula=28;TPTPParser.RULE_thf_prefix_unary=29;TPTPParser.RULE_thf_infix_unary=30;TPTPParser.RULE_thf_atomic_formula=31;TPTPParser.RULE_thf_plain_atomic=32;TPTPParser.RULE_thf_defined_atomic=33;TPTPParser.RULE_thf_defined_term=34;TPTPParser.RULE_thf_defined_infix=35;TPTPParser.RULE_thf_system_atomic=36;TPTPParser.RULE_thf_let=37;TPTPParser.RULE_thf_let_types=38;TPTPParser.RULE_thf_atom_typing_list=39;TPTPParser.RULE_thf_let_defns=40;TPTPParser.RULE_thf_let_defn=41;TPTPParser.RULE_thf_let_defn_list=42;TPTPParser.RULE_thf_unitary_term=43;TPTPParser.RULE_thf_conn_term=44;TPTPParser.RULE_thf_tuple=45;TPTPParser.RULE_thf_fof_function=46;TPTPParser.RULE_thf_arguments=47;TPTPParser.RULE_thf_formula_list=48;TPTPParser.RULE_thf_atom_typing=49;TPTPParser.RULE_thf_top_level_type=50;TPTPParser.RULE_thf_unitary_type=51;TPTPParser.RULE_thf_apply_type=52;TPTPParser.RULE_thf_binary_type=53;TPTPParser.RULE_thf_mapping_type=54;TPTPParser.RULE_thf_xprod_type=55;TPTPParser.RULE_thf_union_type=56;TPTPParser.RULE_thf_subtype=57;TPTPParser.RULE_thf_definition=58;TPTPParser.RULE_thf_sequent=59;TPTPParser.RULE_tff_formula=60;TPTPParser.RULE_tff_logic_formula=61;TPTPParser.RULE_tff_binary_formula=62;TPTPParser.RULE_tff_binary_nonassoc=63;TPTPParser.RULE_tff_binary_assoc=64;TPTPParser.RULE_tff_or_formula=65;TPTPParser.RULE_tff_and_formula=66;TPTPParser.RULE_tff_unit_formula=67;TPTPParser.RULE_tff_preunit_formula=68;TPTPParser.RULE_tff_unitary_formula=69;TPTPParser.RULE_txf_unitary_formula=70;TPTPParser.RULE_tff_quantified_formula=71;TPTPParser.RULE_tff_variable_list=72;TPTPParser.RULE_tff_variable=73;TPTPParser.RULE_tff_typed_variable=74;TPTPParser.RULE_tff_unary_formula=75;TPTPParser.RULE_tff_prefix_unary=76;TPTPParser.RULE_tff_infix_unary=77;TPTPParser.RULE_tff_atomic_formula=78;TPTPParser.RULE_tff_plain_atomic=79;TPTPParser.RULE_tff_defined_atomic=80;TPTPParser.RULE_tff_defined_plain=81;TPTPParser.RULE_tff_defined_infix=82;TPTPParser.RULE_tff_system_atomic=83;TPTPParser.RULE_txf_let=84;TPTPParser.RULE_txf_let_types=85;TPTPParser.RULE_tff_atom_typing_list=86;TPTPParser.RULE_txf_let_defns=87;TPTPParser.RULE_txf_let_defn=88;TPTPParser.RULE_txf_let_LHS=89;TPTPParser.RULE_txf_let_defn_list=90;TPTPParser.RULE_txf_ntf_atom=91;TPTPParser.RULE_tff_term=92;TPTPParser.RULE_tff_unitary_term=93;TPTPParser.RULE_txf_tuple=94;TPTPParser.RULE_tff_arguments=95;TPTPParser.RULE_tff_atom_typing=96;TPTPParser.RULE_tff_top_level_type=97;TPTPParser.RULE_tff_non_atomic_type=98;TPTPParser.RULE_tf1_quantified_type=99;TPTPParser.RULE_tff_monotype=100;TPTPParser.RULE_tff_unitary_type=101;TPTPParser.RULE_tff_atomic_type=102;TPTPParser.RULE_tff_type_arguments=103;TPTPParser.RULE_tff_mapping_type=104;TPTPParser.RULE_tff_xprod_type=105;TPTPParser.RULE_txf_tuple_type=106;TPTPParser.RULE_tff_type_list=107;TPTPParser.RULE_tff_subtype=108;TPTPParser.RULE_txf_definition=109;TPTPParser.RULE_txf_sequent=110;TPTPParser.RULE_ntf_connective=111;TPTPParser.RULE_ntf_short_connective=112;TPTPParser.RULE_ntf_long_connective=113;TPTPParser.RULE_ntf_connective_name=114;TPTPParser.RULE_ntf_parameter_list=115;TPTPParser.RULE_ntf_parameter=116;TPTPParser.RULE_ntf_index=117;TPTPParser.RULE_ntf_key_pair=118;TPTPParser.RULE_logic_defn_rule=119;TPTPParser.RULE_logic_defn_LHS=120;TPTPParser.RULE_logic_defn_RHS=121;TPTPParser.RULE_tcf_formula=122;TPTPParser.RULE_tcf_logic_formula=123;TPTPParser.RULE_tcf_quantified_formula=124;TPTPParser.RULE_fof_formula=125;TPTPParser.RULE_fof_logic_formula=126;TPTPParser.RULE_fof_binary_formula=127;TPTPParser.RULE_fof_binary_nonassoc=128;TPTPParser.RULE_fof_binary_assoc=129;TPTPParser.RULE_fof_or_formula=130;TPTPParser.RULE_fof_and_formula=131;TPTPParser.RULE_fof_unary_formula=132;TPTPParser.RULE_fof_infix_unary=133;TPTPParser.RULE_fof_unit_formula=134;TPTPParser.RULE_fof_unitary_formula=135;TPTPParser.RULE_fof_quantified_formula=136;TPTPParser.RULE_fof_variable_list=137;TPTPParser.RULE_fof_atomic_formula=138;TPTPParser.RULE_fof_plain_atomic_formula=139;TPTPParser.RULE_fof_defined_atomic_formula=140;TPTPParser.RULE_fof_defined_plain_formula=141;TPTPParser.RULE_fof_defined_infix_formula=142;TPTPParser.RULE_fof_system_atomic_formula=143;TPTPParser.RULE_fof_plain_term=144;TPTPParser.RULE_fof_defined_term=145;TPTPParser.RULE_fof_defined_atomic_term=146;TPTPParser.RULE_fof_defined_plain_term=147;TPTPParser.RULE_fof_system_term=148;TPTPParser.RULE_fof_arguments=149;TPTPParser.RULE_fof_term=150;TPTPParser.RULE_fof_function_term=151;TPTPParser.RULE_fof_sequent=152;TPTPParser.RULE_fof_formula_tuple=153;TPTPParser.RULE_fof_formula_tuple_list=154;TPTPParser.RULE_cnf_formula=155;TPTPParser.RULE_cnf_disjunction=156;TPTPParser.RULE_cnf_literal=157;TPTPParser.RULE_thf_quantifier=158;TPTPParser.RULE_th1_quantifier=159;TPTPParser.RULE_th0_quantifier=160;TPTPParser.RULE_fof_quantifier=161;TPTPParser.RULE_nonassoc_connective=162;TPTPParser.RULE_assoc_connective=163;TPTPParser.RULE_unary_connective=164;TPTPParser.RULE_type_constant=165;TPTPParser.RULE_type_functor=166;TPTPParser.RULE_defined_type=167;TPTPParser.RULE_system_type=168;TPTPParser.RULE_atom=169;TPTPParser.RULE_untyped_atom=170;TPTPParser.RULE_defined_proposition=171;TPTPParser.RULE_defined_predicate=172;TPTPParser.RULE_defined_infix_pred=173;TPTPParser.RULE_constant=174;TPTPParser.RULE_functor=175;TPTPParser.RULE_defined_constant=176;TPTPParser.RULE_defined_functor=177;TPTPParser.RULE_system_constant=178;TPTPParser.RULE_system_functor=179;TPTPParser.RULE_def_or_sys_constant=180;TPTPParser.RULE_th1_defined_term=181;TPTPParser.RULE_defined_term=182;TPTPParser.RULE_variable=183;TPTPParser.RULE_source=184;TPTPParser.RULE_sources=185;TPTPParser.RULE_dag_source=186;TPTPParser.RULE_inference_record=187;TPTPParser.RULE_inference_rule=188;TPTPParser.RULE_inference_parents=189;TPTPParser.RULE_parent_list=190;TPTPParser.RULE_parent_info=191;TPTPParser.RULE_parent_details=192;TPTPParser.RULE_internal_source=193;TPTPParser.RULE_intro_type=194;TPTPParser.RULE_external_source=195;TPTPParser.RULE_file_source=196;TPTPParser.RULE_file_info=197;TPTPParser.RULE_theory=198;TPTPParser.RULE_theory_name=199;TPTPParser.RULE_creator_source=200;TPTPParser.RULE_creator_name=201;TPTPParser.RULE_optional_info=202;TPTPParser.RULE_useful_info=203;TPTPParser.RULE_info_items=204;TPTPParser.RULE_info_item=205;TPTPParser.RULE_formula_item=206;TPTPParser.RULE_description_item=207;TPTPParser.RULE_iquote_item=208;TPTPParser.RULE_inference_item=209;TPTPParser.RULE_inference_status=210;TPTPParser.RULE_status_value=211;TPTPParser.RULE_inference_info=212;TPTPParser.RULE_assumptions_record=213;TPTPParser.RULE_refutation=214;TPTPParser.RULE_new_symbol_record=215;TPTPParser.RULE_new_symbol_list=216;TPTPParser.RULE_principal_symbol=217;TPTPParser.RULE_include=218;TPTPParser.RULE_formula_selection=219;TPTPParser.RULE_name_list=220;TPTPParser.RULE_general_term=221;TPTPParser.RULE_general_data=222;TPTPParser.RULE_general_function=223;TPTPParser.RULE_formula_data=224;TPTPParser.RULE_general_list=225;TPTPParser.RULE_general_terms=226;TPTPParser.RULE_name=227;TPTPParser.RULE_atomic_word=228;TPTPParser.RULE_atomic_defined_word=229;TPTPParser.RULE_atomic_system_word=230;TPTPParser.RULE_number=231;TPTPParser.RULE_file_name=232;var Tptp_fileContext=/*#__PURE__*/function(_antlr4$ParserRuleCon){_inherits(Tptp_fileContext,_antlr4$ParserRuleCon);var _super2=_createSuper(Tptp_fileContext);function Tptp_fileContext(parser,parent,invokingState){var _this2;_classCallCheck(this,Tptp_fileContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this2=_super2.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this2),\"tptp_input\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tptp_inputContext);}else{return this.getTypedRuleContext(Tptp_inputContext,i);}});_this2.parser=parser;_this2.ruleIndex=TPTPParser.RULE_tptp_file;return _this2;}_createClass(Tptp_fileContext,[{key:\"EOF\",value:function EOF(){return this.getToken(TPTPParser.EOF,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTptp_file(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTptp_file(this);}}}]);return Tptp_fileContext;}(_antlr[\"default\"].ParserRuleContext);var Tptp_inputContext=/*#__PURE__*/function(_antlr4$ParserRuleCon2){_inherits(Tptp_inputContext,_antlr4$ParserRuleCon2);var _super3=_createSuper(Tptp_inputContext);function Tptp_inputContext(parser,parent,invokingState){var _this3;_classCallCheck(this,Tptp_inputContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this3=_super3.call(this,parent,invokingState);_this3.parser=parser;_this3.ruleIndex=TPTPParser.RULE_tptp_input;return _this3;}_createClass(Tptp_inputContext,[{key:\"annotated_formula\",value:function annotated_formula(){return this.getTypedRuleContext(Annotated_formulaContext,0);}},{key:\"include\",value:function include(){return this.getTypedRuleContext(IncludeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTptp_input(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTptp_input(this);}}}]);return Tptp_inputContext;}(_antlr[\"default\"].ParserRuleContext);var Annotated_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon3){_inherits(Annotated_formulaContext,_antlr4$ParserRuleCon3);var _super4=_createSuper(Annotated_formulaContext);function Annotated_formulaContext(parser,parent,invokingState){var _this4;_classCallCheck(this,Annotated_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this4=_super4.call(this,parent,invokingState);_this4.parser=parser;_this4.ruleIndex=TPTPParser.RULE_annotated_formula;return _this4;}_createClass(Annotated_formulaContext,[{key:\"thf_annotated\",value:function thf_annotated(){return this.getTypedRuleContext(Thf_annotatedContext,0);}},{key:\"tff_annotated\",value:function tff_annotated(){return this.getTypedRuleContext(Tff_annotatedContext,0);}},{key:\"tcf_annotated\",value:function tcf_annotated(){return this.getTypedRuleContext(Tcf_annotatedContext,0);}},{key:\"fof_annotated\",value:function fof_annotated(){return this.getTypedRuleContext(Fof_annotatedContext,0);}},{key:\"cnf_annotated\",value:function cnf_annotated(){return this.getTypedRuleContext(Cnf_annotatedContext,0);}},{key:\"tpi_annotated\",value:function tpi_annotated(){return this.getTypedRuleContext(Tpi_annotatedContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAnnotated_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAnnotated_formula(this);}}}]);return Annotated_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tpi_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon4){_inherits(Tpi_annotatedContext,_antlr4$ParserRuleCon4);var _super5=_createSuper(Tpi_annotatedContext);function Tpi_annotatedContext(parser,parent,invokingState){var _this5;_classCallCheck(this,Tpi_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this5=_super5.call(this,parent,invokingState);_this5.parser=parser;_this5.ruleIndex=TPTPParser.RULE_tpi_annotated;return _this5;}_createClass(Tpi_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"tpi_formula\",value:function tpi_formula(){return this.getTypedRuleContext(Tpi_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTpi_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTpi_annotated(this);}}}]);return Tpi_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Tpi_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon5){_inherits(Tpi_formulaContext,_antlr4$ParserRuleCon5);var _super6=_createSuper(Tpi_formulaContext);function Tpi_formulaContext(parser,parent,invokingState){var _this6;_classCallCheck(this,Tpi_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this6=_super6.call(this,parent,invokingState);_this6.parser=parser;_this6.ruleIndex=TPTPParser.RULE_tpi_formula;return _this6;}_createClass(Tpi_formulaContext,[{key:\"fof_formula\",value:function fof_formula(){return this.getTypedRuleContext(Fof_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTpi_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTpi_formula(this);}}}]);return Tpi_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon6){_inherits(Thf_annotatedContext,_antlr4$ParserRuleCon6);var _super7=_createSuper(Thf_annotatedContext);function Thf_annotatedContext(parser,parent,invokingState){var _this7;_classCallCheck(this,Thf_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this7=_super7.call(this,parent,invokingState);_this7.parser=parser;_this7.ruleIndex=TPTPParser.RULE_thf_annotated;return _this7;}_createClass(Thf_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"thf_formula\",value:function thf_formula(){return this.getTypedRuleContext(Thf_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_annotated(this);}}}]);return Thf_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon7){_inherits(Tff_annotatedContext,_antlr4$ParserRuleCon7);var _super8=_createSuper(Tff_annotatedContext);function Tff_annotatedContext(parser,parent,invokingState){var _this8;_classCallCheck(this,Tff_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this8=_super8.call(this,parent,invokingState);_this8.parser=parser;_this8.ruleIndex=TPTPParser.RULE_tff_annotated;return _this8;}_createClass(Tff_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"tff_formula\",value:function tff_formula(){return this.getTypedRuleContext(Tff_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_annotated(this);}}}]);return Tff_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon8){_inherits(Tcf_annotatedContext,_antlr4$ParserRuleCon8);var _super9=_createSuper(Tcf_annotatedContext);function Tcf_annotatedContext(parser,parent,invokingState){var _this9;_classCallCheck(this,Tcf_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this9=_super9.call(this,parent,invokingState);_this9.parser=parser;_this9.ruleIndex=TPTPParser.RULE_tcf_annotated;return _this9;}_createClass(Tcf_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"tcf_formula\",value:function tcf_formula(){return this.getTypedRuleContext(Tcf_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTcf_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTcf_annotated(this);}}}]);return Tcf_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon9){_inherits(Fof_annotatedContext,_antlr4$ParserRuleCon9);var _super10=_createSuper(Fof_annotatedContext);function Fof_annotatedContext(parser,parent,invokingState){var _this10;_classCallCheck(this,Fof_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this10=_super10.call(this,parent,invokingState);_this10.parser=parser;_this10.ruleIndex=TPTPParser.RULE_fof_annotated;return _this10;}_createClass(Fof_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"fof_formula\",value:function fof_formula(){return this.getTypedRuleContext(Fof_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_annotated(this);}}}]);return Fof_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_annotatedContext=/*#__PURE__*/function(_antlr4$ParserRuleCon10){_inherits(Cnf_annotatedContext,_antlr4$ParserRuleCon10);var _super11=_createSuper(Cnf_annotatedContext);function Cnf_annotatedContext(parser,parent,invokingState){var _this11;_classCallCheck(this,Cnf_annotatedContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this11=_super11.call(this,parent,invokingState);_this11.parser=parser;_this11.ruleIndex=TPTPParser.RULE_cnf_annotated;return _this11;}_createClass(Cnf_annotatedContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"formula_role\",value:function formula_role(){return this.getTypedRuleContext(Formula_roleContext,0);}},{key:\"cnf_formula\",value:function cnf_formula(){return this.getTypedRuleContext(Cnf_formulaContext,0);}},{key:\"annotations\",value:function annotations(){return this.getTypedRuleContext(AnnotationsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterCnf_annotated(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitCnf_annotated(this);}}}]);return Cnf_annotatedContext;}(_antlr[\"default\"].ParserRuleContext);var AnnotationsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon11){_inherits(AnnotationsContext,_antlr4$ParserRuleCon11);var _super12=_createSuper(AnnotationsContext);function AnnotationsContext(parser,parent,invokingState){var _this12;_classCallCheck(this,AnnotationsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this12=_super12.call(this,parent,invokingState);_this12.parser=parser;_this12.ruleIndex=TPTPParser.RULE_annotations;return _this12;}_createClass(AnnotationsContext,[{key:\"source\",value:function source(){return this.getTypedRuleContext(SourceContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAnnotations(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAnnotations(this);}}}]);return AnnotationsContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_roleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon12){_inherits(Formula_roleContext,_antlr4$ParserRuleCon12);var _super13=_createSuper(Formula_roleContext);function Formula_roleContext(parser,parent,invokingState){var _this13;_classCallCheck(this,Formula_roleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this13=_super13.call(this,parent,invokingState);_this13.parser=parser;_this13.ruleIndex=TPTPParser.RULE_formula_role;return _this13;}_createClass(Formula_roleContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(TPTPParser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFormula_role(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFormula_role(this);}}}]);return Formula_roleContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon13){_inherits(Thf_formulaContext,_antlr4$ParserRuleCon13);var _super14=_createSuper(Thf_formulaContext);function Thf_formulaContext(parser,parent,invokingState){var _this14;_classCallCheck(this,Thf_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this14=_super14.call(this,parent,invokingState);_this14.parser=parser;_this14.ruleIndex=TPTPParser.RULE_thf_formula;return _this14;}_createClass(Thf_formulaContext,[{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"thf_atom_typing\",value:function thf_atom_typing(){return this.getTypedRuleContext(Thf_atom_typingContext,0);}},{key:\"thf_subtype\",value:function thf_subtype(){return this.getTypedRuleContext(Thf_subtypeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_formula(this);}}}]);return Thf_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon14){_inherits(Thf_logic_formulaContext,_antlr4$ParserRuleCon14);var _super15=_createSuper(Thf_logic_formulaContext);function Thf_logic_formulaContext(parser,parent,invokingState){var _this15;_classCallCheck(this,Thf_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this15=_super15.call(this,parent,invokingState);_this15.parser=parser;_this15.ruleIndex=TPTPParser.RULE_thf_logic_formula;return _this15;}_createClass(Thf_logic_formulaContext,[{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"thf_unary_formula\",value:function thf_unary_formula(){return this.getTypedRuleContext(Thf_unary_formulaContext,0);}},{key:\"thf_binary_formula\",value:function thf_binary_formula(){return this.getTypedRuleContext(Thf_binary_formulaContext,0);}},{key:\"thf_defined_infix\",value:function thf_defined_infix(){return this.getTypedRuleContext(Thf_defined_infixContext,0);}},{key:\"thf_definition\",value:function thf_definition(){return this.getTypedRuleContext(Thf_definitionContext,0);}},{key:\"thf_sequent\",value:function thf_sequent(){return this.getTypedRuleContext(Thf_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_logic_formula(this);}}}]);return Thf_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon15){_inherits(Thf_binary_formulaContext,_antlr4$ParserRuleCon15);var _super16=_createSuper(Thf_binary_formulaContext);function Thf_binary_formulaContext(parser,parent,invokingState){var _this16;_classCallCheck(this,Thf_binary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this16=_super16.call(this,parent,invokingState);_this16.parser=parser;_this16.ruleIndex=TPTPParser.RULE_thf_binary_formula;return _this16;}_createClass(Thf_binary_formulaContext,[{key:\"thf_binary_nonassoc\",value:function thf_binary_nonassoc(){return this.getTypedRuleContext(Thf_binary_nonassocContext,0);}},{key:\"thf_binary_assoc\",value:function thf_binary_assoc(){return this.getTypedRuleContext(Thf_binary_assocContext,0);}},{key:\"thf_binary_type\",value:function thf_binary_type(){return this.getTypedRuleContext(Thf_binary_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_binary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_binary_formula(this);}}}]);return Thf_binary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_nonassocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon16){_inherits(Thf_binary_nonassocContext,_antlr4$ParserRuleCon16);var _super17=_createSuper(Thf_binary_nonassocContext);function Thf_binary_nonassocContext(parser,parent,invokingState){var _this17;_classCallCheck(this,Thf_binary_nonassocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this17=_super17.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this17),\"thf_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unit_formulaContext);}else{return this.getTypedRuleContext(Thf_unit_formulaContext,i);}});_this17.parser=parser;_this17.ruleIndex=TPTPParser.RULE_thf_binary_nonassoc;return _this17;}_createClass(Thf_binary_nonassocContext,[{key:\"nonassoc_connective\",value:function nonassoc_connective(){return this.getTypedRuleContext(Nonassoc_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_binary_nonassoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_binary_nonassoc(this);}}}]);return Thf_binary_nonassocContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_assocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon17){_inherits(Thf_binary_assocContext,_antlr4$ParserRuleCon17);var _super18=_createSuper(Thf_binary_assocContext);function Thf_binary_assocContext(parser,parent,invokingState){var _this18;_classCallCheck(this,Thf_binary_assocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this18=_super18.call(this,parent,invokingState);_this18.parser=parser;_this18.ruleIndex=TPTPParser.RULE_thf_binary_assoc;return _this18;}_createClass(Thf_binary_assocContext,[{key:\"thf_or_formula\",value:function thf_or_formula(){return this.getTypedRuleContext(Thf_or_formulaContext,0);}},{key:\"thf_and_formula\",value:function thf_and_formula(){return this.getTypedRuleContext(Thf_and_formulaContext,0);}},{key:\"thf_apply_formula\",value:function thf_apply_formula(){return this.getTypedRuleContext(Thf_apply_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_binary_assoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_binary_assoc(this);}}}]);return Thf_binary_assocContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_or_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon18){_inherits(Thf_or_formulaContext,_antlr4$ParserRuleCon18);var _super19=_createSuper(Thf_or_formulaContext);function Thf_or_formulaContext(parser,parent,invokingState){var _this19;_classCallCheck(this,Thf_or_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this19=_super19.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this19),\"thf_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unit_formulaContext);}else{return this.getTypedRuleContext(Thf_unit_formulaContext,i);}});_this19.parser=parser;_this19.ruleIndex=TPTPParser.RULE_thf_or_formula;return _this19;}_createClass(Thf_or_formulaContext,[{key:\"Or\",value:function Or(){return this.getToken(TPTPParser.Or,0);}},{key:\"thf_or_formula\",value:function thf_or_formula(){return this.getTypedRuleContext(Thf_or_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_or_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_or_formula(this);}}}]);return Thf_or_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_and_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon19){_inherits(Thf_and_formulaContext,_antlr4$ParserRuleCon19);var _super20=_createSuper(Thf_and_formulaContext);function Thf_and_formulaContext(parser,parent,invokingState){var _this20;_classCallCheck(this,Thf_and_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this20=_super20.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this20),\"thf_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unit_formulaContext);}else{return this.getTypedRuleContext(Thf_unit_formulaContext,i);}});_this20.parser=parser;_this20.ruleIndex=TPTPParser.RULE_thf_and_formula;return _this20;}_createClass(Thf_and_formulaContext,[{key:\"And\",value:function And(){return this.getToken(TPTPParser.And,0);}},{key:\"thf_and_formula\",value:function thf_and_formula(){return this.getTypedRuleContext(Thf_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_and_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_and_formula(this);}}}]);return Thf_and_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_apply_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon20){_inherits(Thf_apply_formulaContext,_antlr4$ParserRuleCon20);var _super21=_createSuper(Thf_apply_formulaContext);function Thf_apply_formulaContext(parser,parent,invokingState){var _this21;_classCallCheck(this,Thf_apply_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this21=_super21.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this21),\"thf_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unit_formulaContext);}else{return this.getTypedRuleContext(Thf_unit_formulaContext,i);}});_this21.parser=parser;_this21.ruleIndex=TPTPParser.RULE_thf_apply_formula;return _this21;}_createClass(Thf_apply_formulaContext,[{key:\"App\",value:function App(){return this.getToken(TPTPParser.App,0);}},{key:\"thf_apply_formula\",value:function thf_apply_formula(){return this.getTypedRuleContext(Thf_apply_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_apply_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_apply_formula(this);}}}]);return Thf_apply_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unit_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon21){_inherits(Thf_unit_formulaContext,_antlr4$ParserRuleCon21);var _super22=_createSuper(Thf_unit_formulaContext);function Thf_unit_formulaContext(parser,parent,invokingState){var _this22;_classCallCheck(this,Thf_unit_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this22=_super22.call(this,parent,invokingState);_this22.parser=parser;_this22.ruleIndex=TPTPParser.RULE_thf_unit_formula;return _this22;}_createClass(Thf_unit_formulaContext,[{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"thf_unary_formula\",value:function thf_unary_formula(){return this.getTypedRuleContext(Thf_unary_formulaContext,0);}},{key:\"thf_defined_infix\",value:function thf_defined_infix(){return this.getTypedRuleContext(Thf_defined_infixContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_unit_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_unit_formula(this);}}}]);return Thf_unit_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_preunit_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon22){_inherits(Thf_preunit_formulaContext,_antlr4$ParserRuleCon22);var _super23=_createSuper(Thf_preunit_formulaContext);function Thf_preunit_formulaContext(parser,parent,invokingState){var _this23;_classCallCheck(this,Thf_preunit_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this23=_super23.call(this,parent,invokingState);_this23.parser=parser;_this23.ruleIndex=TPTPParser.RULE_thf_preunit_formula;return _this23;}_createClass(Thf_preunit_formulaContext,[{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"thf_prefix_unary\",value:function thf_prefix_unary(){return this.getTypedRuleContext(Thf_prefix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_preunit_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_preunit_formula(this);}}}]);return Thf_preunit_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unitary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon23){_inherits(Thf_unitary_formulaContext,_antlr4$ParserRuleCon23);var _super24=_createSuper(Thf_unitary_formulaContext);function Thf_unitary_formulaContext(parser,parent,invokingState){var _this24;_classCallCheck(this,Thf_unitary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this24=_super24.call(this,parent,invokingState);_this24.parser=parser;_this24.ruleIndex=TPTPParser.RULE_thf_unitary_formula;return _this24;}_createClass(Thf_unitary_formulaContext,[{key:\"thf_quantified_formula\",value:function thf_quantified_formula(){return this.getTypedRuleContext(Thf_quantified_formulaContext,0);}},{key:\"thf_atomic_formula\",value:function thf_atomic_formula(){return this.getTypedRuleContext(Thf_atomic_formulaContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_unitary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_unitary_formula(this);}}}]);return Thf_unitary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon24){_inherits(Thf_quantified_formulaContext,_antlr4$ParserRuleCon24);var _super25=_createSuper(Thf_quantified_formulaContext);function Thf_quantified_formulaContext(parser,parent,invokingState){var _this25;_classCallCheck(this,Thf_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this25=_super25.call(this,parent,invokingState);_this25.parser=parser;_this25.ruleIndex=TPTPParser.RULE_thf_quantified_formula;return _this25;}_createClass(Thf_quantified_formulaContext,[{key:\"thf_quantification\",value:function thf_quantification(){return this.getTypedRuleContext(Thf_quantificationContext,0);}},{key:\"thf_unit_formula\",value:function thf_unit_formula(){return this.getTypedRuleContext(Thf_unit_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_quantified_formula(this);}}}]);return Thf_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_quantificationContext=/*#__PURE__*/function(_antlr4$ParserRuleCon25){_inherits(Thf_quantificationContext,_antlr4$ParserRuleCon25);var _super26=_createSuper(Thf_quantificationContext);function Thf_quantificationContext(parser,parent,invokingState){var _this26;_classCallCheck(this,Thf_quantificationContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this26=_super26.call(this,parent,invokingState);_this26.parser=parser;_this26.ruleIndex=TPTPParser.RULE_thf_quantification;return _this26;}_createClass(Thf_quantificationContext,[{key:\"thf_quantifier\",value:function thf_quantifier(){return this.getTypedRuleContext(Thf_quantifierContext,0);}},{key:\"thf_variable_list\",value:function thf_variable_list(){return this.getTypedRuleContext(Thf_variable_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_quantification(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_quantification(this);}}}]);return Thf_quantificationContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_variable_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon26){_inherits(Thf_variable_listContext,_antlr4$ParserRuleCon26);var _super27=_createSuper(Thf_variable_listContext);function Thf_variable_listContext(parser,parent,invokingState){var _this27;_classCallCheck(this,Thf_variable_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this27=_super27.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this27),\"thf_variable\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_variableContext);}else{return this.getTypedRuleContext(Thf_variableContext,i);}});_this27.parser=parser;_this27.ruleIndex=TPTPParser.RULE_thf_variable_list;return _this27;}_createClass(Thf_variable_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_variable_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_variable_list(this);}}}]);return Thf_variable_listContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon27){_inherits(Thf_variableContext,_antlr4$ParserRuleCon27);var _super28=_createSuper(Thf_variableContext);function Thf_variableContext(parser,parent,invokingState){var _this28;_classCallCheck(this,Thf_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this28=_super28.call(this,parent,invokingState);_this28.parser=parser;_this28.ruleIndex=TPTPParser.RULE_thf_variable;return _this28;}_createClass(Thf_variableContext,[{key:\"thf_typed_variable\",value:function thf_typed_variable(){return this.getTypedRuleContext(Thf_typed_variableContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_variable(this);}}}]);return Thf_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_typed_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon28){_inherits(Thf_typed_variableContext,_antlr4$ParserRuleCon28);var _super29=_createSuper(Thf_typed_variableContext);function Thf_typed_variableContext(parser,parent,invokingState){var _this29;_classCallCheck(this,Thf_typed_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this29=_super29.call(this,parent,invokingState);_this29.parser=parser;_this29.ruleIndex=TPTPParser.RULE_thf_typed_variable;return _this29;}_createClass(Thf_typed_variableContext,[{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"thf_top_level_type\",value:function thf_top_level_type(){return this.getTypedRuleContext(Thf_top_level_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_typed_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_typed_variable(this);}}}]);return Thf_typed_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon29){_inherits(Thf_unary_formulaContext,_antlr4$ParserRuleCon29);var _super30=_createSuper(Thf_unary_formulaContext);function Thf_unary_formulaContext(parser,parent,invokingState){var _this30;_classCallCheck(this,Thf_unary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this30=_super30.call(this,parent,invokingState);_this30.parser=parser;_this30.ruleIndex=TPTPParser.RULE_thf_unary_formula;return _this30;}_createClass(Thf_unary_formulaContext,[{key:\"thf_prefix_unary\",value:function thf_prefix_unary(){return this.getTypedRuleContext(Thf_prefix_unaryContext,0);}},{key:\"thf_infix_unary\",value:function thf_infix_unary(){return this.getTypedRuleContext(Thf_infix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_unary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_unary_formula(this);}}}]);return Thf_unary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_prefix_unaryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon30){_inherits(Thf_prefix_unaryContext,_antlr4$ParserRuleCon30);var _super31=_createSuper(Thf_prefix_unaryContext);function Thf_prefix_unaryContext(parser,parent,invokingState){var _this31;_classCallCheck(this,Thf_prefix_unaryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this31=_super31.call(this,parent,invokingState);_this31.parser=parser;_this31.ruleIndex=TPTPParser.RULE_thf_prefix_unary;return _this31;}_createClass(Thf_prefix_unaryContext,[{key:\"unary_connective\",value:function unary_connective(){return this.getTypedRuleContext(Unary_connectiveContext,0);}},{key:\"thf_preunit_formula\",value:function thf_preunit_formula(){return this.getTypedRuleContext(Thf_preunit_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_prefix_unary(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_prefix_unary(this);}}}]);return Thf_prefix_unaryContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_infix_unaryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon31){_inherits(Thf_infix_unaryContext,_antlr4$ParserRuleCon31);var _super32=_createSuper(Thf_infix_unaryContext);function Thf_infix_unaryContext(parser,parent,invokingState){var _this32;_classCallCheck(this,Thf_infix_unaryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this32=_super32.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this32),\"thf_unitary_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_termContext);}else{return this.getTypedRuleContext(Thf_unitary_termContext,i);}});_this32.parser=parser;_this32.ruleIndex=TPTPParser.RULE_thf_infix_unary;return _this32;}_createClass(Thf_infix_unaryContext,[{key:\"Infix_inequality\",value:function Infix_inequality(){return this.getToken(TPTPParser.Infix_inequality,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_infix_unary(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_infix_unary(this);}}}]);return Thf_infix_unaryContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon32){_inherits(Thf_atomic_formulaContext,_antlr4$ParserRuleCon32);var _super33=_createSuper(Thf_atomic_formulaContext);function Thf_atomic_formulaContext(parser,parent,invokingState){var _this33;_classCallCheck(this,Thf_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this33=_super33.call(this,parent,invokingState);_this33.parser=parser;_this33.ruleIndex=TPTPParser.RULE_thf_atomic_formula;return _this33;}_createClass(Thf_atomic_formulaContext,[{key:\"thf_plain_atomic\",value:function thf_plain_atomic(){return this.getTypedRuleContext(Thf_plain_atomicContext,0);}},{key:\"thf_defined_atomic\",value:function thf_defined_atomic(){return this.getTypedRuleContext(Thf_defined_atomicContext,0);}},{key:\"thf_system_atomic\",value:function thf_system_atomic(){return this.getTypedRuleContext(Thf_system_atomicContext,0);}},{key:\"thf_fof_function\",value:function thf_fof_function(){return this.getTypedRuleContext(Thf_fof_functionContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_atomic_formula(this);}}}]);return Thf_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_plain_atomicContext=/*#__PURE__*/function(_antlr4$ParserRuleCon33){_inherits(Thf_plain_atomicContext,_antlr4$ParserRuleCon33);var _super34=_createSuper(Thf_plain_atomicContext);function Thf_plain_atomicContext(parser,parent,invokingState){var _this34;_classCallCheck(this,Thf_plain_atomicContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this34=_super34.call(this,parent,invokingState);_this34.parser=parser;_this34.ruleIndex=TPTPParser.RULE_thf_plain_atomic;return _this34;}_createClass(Thf_plain_atomicContext,[{key:\"constant\",value:function constant(){return this.getTypedRuleContext(ConstantContext,0);}},{key:\"thf_tuple\",value:function thf_tuple(){return this.getTypedRuleContext(Thf_tupleContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_plain_atomic(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_plain_atomic(this);}}}]);return Thf_plain_atomicContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_defined_atomicContext=/*#__PURE__*/function(_antlr4$ParserRuleCon34){_inherits(Thf_defined_atomicContext,_antlr4$ParserRuleCon34);var _super35=_createSuper(Thf_defined_atomicContext);function Thf_defined_atomicContext(parser,parent,invokingState){var _this35;_classCallCheck(this,Thf_defined_atomicContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this35=_super35.call(this,parent,invokingState);_this35.parser=parser;_this35.ruleIndex=TPTPParser.RULE_thf_defined_atomic;return _this35;}_createClass(Thf_defined_atomicContext,[{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"thf_defined_term\",value:function thf_defined_term(){return this.getTypedRuleContext(Thf_defined_termContext,0);}},{key:\"thf_conn_term\",value:function thf_conn_term(){return this.getTypedRuleContext(Thf_conn_termContext,0);}},{key:\"ntf_connective\",value:function ntf_connective(){return this.getTypedRuleContext(Ntf_connectiveContext,0);}},{key:\"thf_let\",value:function thf_let(){return this.getTypedRuleContext(Thf_letContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_defined_atomic(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_defined_atomic(this);}}}]);return Thf_defined_atomicContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_defined_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon35){_inherits(Thf_defined_termContext,_antlr4$ParserRuleCon35);var _super36=_createSuper(Thf_defined_termContext);function Thf_defined_termContext(parser,parent,invokingState){var _this36;_classCallCheck(this,Thf_defined_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this36=_super36.call(this,parent,invokingState);_this36.parser=parser;_this36.ruleIndex=TPTPParser.RULE_thf_defined_term;return _this36;}_createClass(Thf_defined_termContext,[{key:\"defined_term\",value:function defined_term(){return this.getTypedRuleContext(Defined_termContext,0);}},{key:\"th1_defined_term\",value:function th1_defined_term(){return this.getTypedRuleContext(Th1_defined_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_defined_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_defined_term(this);}}}]);return Thf_defined_termContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_defined_infixContext=/*#__PURE__*/function(_antlr4$ParserRuleCon36){_inherits(Thf_defined_infixContext,_antlr4$ParserRuleCon36);var _super37=_createSuper(Thf_defined_infixContext);function Thf_defined_infixContext(parser,parent,invokingState){var _this37;_classCallCheck(this,Thf_defined_infixContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this37=_super37.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this37),\"thf_unitary_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_termContext);}else{return this.getTypedRuleContext(Thf_unitary_termContext,i);}});_this37.parser=parser;_this37.ruleIndex=TPTPParser.RULE_thf_defined_infix;return _this37;}_createClass(Thf_defined_infixContext,[{key:\"defined_infix_pred\",value:function defined_infix_pred(){return this.getTypedRuleContext(Defined_infix_predContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_defined_infix(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_defined_infix(this);}}}]);return Thf_defined_infixContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_system_atomicContext=/*#__PURE__*/function(_antlr4$ParserRuleCon37){_inherits(Thf_system_atomicContext,_antlr4$ParserRuleCon37);var _super38=_createSuper(Thf_system_atomicContext);function Thf_system_atomicContext(parser,parent,invokingState){var _this38;_classCallCheck(this,Thf_system_atomicContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this38=_super38.call(this,parent,invokingState);_this38.parser=parser;_this38.ruleIndex=TPTPParser.RULE_thf_system_atomic;return _this38;}_createClass(Thf_system_atomicContext,[{key:\"system_constant\",value:function system_constant(){return this.getTypedRuleContext(System_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_system_atomic(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_system_atomic(this);}}}]);return Thf_system_atomicContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_letContext=/*#__PURE__*/function(_antlr4$ParserRuleCon38){_inherits(Thf_letContext,_antlr4$ParserRuleCon38);var _super39=_createSuper(Thf_letContext);function Thf_letContext(parser,parent,invokingState){var _this39;_classCallCheck(this,Thf_letContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this39=_super39.call(this,parent,invokingState);_this39.parser=parser;_this39.ruleIndex=TPTPParser.RULE_thf_let;return _this39;}_createClass(Thf_letContext,[{key:\"thf_let_types\",value:function thf_let_types(){return this.getTypedRuleContext(Thf_let_typesContext,0);}},{key:\"thf_let_defns\",value:function thf_let_defns(){return this.getTypedRuleContext(Thf_let_defnsContext,0);}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_let(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_let(this);}}}]);return Thf_letContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_let_typesContext=/*#__PURE__*/function(_antlr4$ParserRuleCon39){_inherits(Thf_let_typesContext,_antlr4$ParserRuleCon39);var _super40=_createSuper(Thf_let_typesContext);function Thf_let_typesContext(parser,parent,invokingState){var _this40;_classCallCheck(this,Thf_let_typesContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this40=_super40.call(this,parent,invokingState);_this40.parser=parser;_this40.ruleIndex=TPTPParser.RULE_thf_let_types;return _this40;}_createClass(Thf_let_typesContext,[{key:\"thf_atom_typing\",value:function thf_atom_typing(){return this.getTypedRuleContext(Thf_atom_typingContext,0);}},{key:\"thf_atom_typing_list\",value:function thf_atom_typing_list(){return this.getTypedRuleContext(Thf_atom_typing_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_let_types(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_let_types(this);}}}]);return Thf_let_typesContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_atom_typing_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon40){_inherits(Thf_atom_typing_listContext,_antlr4$ParserRuleCon40);var _super41=_createSuper(Thf_atom_typing_listContext);function Thf_atom_typing_listContext(parser,parent,invokingState){var _this41;_classCallCheck(this,Thf_atom_typing_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this41=_super41.call(this,parent,invokingState);_this41.parser=parser;_this41.ruleIndex=TPTPParser.RULE_thf_atom_typing_list;return _this41;}_createClass(Thf_atom_typing_listContext,[{key:\"thf_atom_typing\",value:function thf_atom_typing(){return this.getTypedRuleContext(Thf_atom_typingContext,0);}},{key:\"thf_atom_typing_list\",value:function thf_atom_typing_list(){return this.getTypedRuleContext(Thf_atom_typing_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_atom_typing_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_atom_typing_list(this);}}}]);return Thf_atom_typing_listContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_let_defnsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon41){_inherits(Thf_let_defnsContext,_antlr4$ParserRuleCon41);var _super42=_createSuper(Thf_let_defnsContext);function Thf_let_defnsContext(parser,parent,invokingState){var _this42;_classCallCheck(this,Thf_let_defnsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this42=_super42.call(this,parent,invokingState);_this42.parser=parser;_this42.ruleIndex=TPTPParser.RULE_thf_let_defns;return _this42;}_createClass(Thf_let_defnsContext,[{key:\"thf_let_defn\",value:function thf_let_defn(){return this.getTypedRuleContext(Thf_let_defnContext,0);}},{key:\"thf_let_defn_list\",value:function thf_let_defn_list(){return this.getTypedRuleContext(Thf_let_defn_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_let_defns(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_let_defns(this);}}}]);return Thf_let_defnsContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_let_defnContext=/*#__PURE__*/function(_antlr4$ParserRuleCon42){_inherits(Thf_let_defnContext,_antlr4$ParserRuleCon42);var _super43=_createSuper(Thf_let_defnContext);function Thf_let_defnContext(parser,parent,invokingState){var _this43;_classCallCheck(this,Thf_let_defnContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this43=_super43.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this43),\"thf_logic_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_logic_formulaContext);}else{return this.getTypedRuleContext(Thf_logic_formulaContext,i);}});_this43.parser=parser;_this43.ruleIndex=TPTPParser.RULE_thf_let_defn;return _this43;}_createClass(Thf_let_defnContext,[{key:\"Assignment\",value:function Assignment(){return this.getToken(TPTPParser.Assignment,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_let_defn(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_let_defn(this);}}}]);return Thf_let_defnContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_let_defn_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon43){_inherits(Thf_let_defn_listContext,_antlr4$ParserRuleCon43);var _super44=_createSuper(Thf_let_defn_listContext);function Thf_let_defn_listContext(parser,parent,invokingState){var _this44;_classCallCheck(this,Thf_let_defn_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this44=_super44.call(this,parent,invokingState);_this44.parser=parser;_this44.ruleIndex=TPTPParser.RULE_thf_let_defn_list;return _this44;}_createClass(Thf_let_defn_listContext,[{key:\"thf_let_defn\",value:function thf_let_defn(){return this.getTypedRuleContext(Thf_let_defnContext,0);}},{key:\"thf_let_defn_list\",value:function thf_let_defn_list(){return this.getTypedRuleContext(Thf_let_defn_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_let_defn_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_let_defn_list(this);}}}]);return Thf_let_defn_listContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unitary_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon44){_inherits(Thf_unitary_termContext,_antlr4$ParserRuleCon44);var _super45=_createSuper(Thf_unitary_termContext);function Thf_unitary_termContext(parser,parent,invokingState){var _this45;_classCallCheck(this,Thf_unitary_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this45=_super45.call(this,parent,invokingState);_this45.parser=parser;_this45.ruleIndex=TPTPParser.RULE_thf_unitary_term;return _this45;}_createClass(Thf_unitary_termContext,[{key:\"thf_atomic_formula\",value:function thf_atomic_formula(){return this.getTypedRuleContext(Thf_atomic_formulaContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_unitary_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_unitary_term(this);}}}]);return Thf_unitary_termContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_conn_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon45){_inherits(Thf_conn_termContext,_antlr4$ParserRuleCon45);var _super46=_createSuper(Thf_conn_termContext);function Thf_conn_termContext(parser,parent,invokingState){var _this46;_classCallCheck(this,Thf_conn_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this46=_super46.call(this,parent,invokingState);_this46.parser=parser;_this46.ruleIndex=TPTPParser.RULE_thf_conn_term;return _this46;}_createClass(Thf_conn_termContext,[{key:\"nonassoc_connective\",value:function nonassoc_connective(){return this.getTypedRuleContext(Nonassoc_connectiveContext,0);}},{key:\"assoc_connective\",value:function assoc_connective(){return this.getTypedRuleContext(Assoc_connectiveContext,0);}},{key:\"Infix_equality\",value:function Infix_equality(){return this.getToken(TPTPParser.Infix_equality,0);}},{key:\"Infix_inequality\",value:function Infix_inequality(){return this.getToken(TPTPParser.Infix_inequality,0);}},{key:\"unary_connective\",value:function unary_connective(){return this.getTypedRuleContext(Unary_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_conn_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_conn_term(this);}}}]);return Thf_conn_termContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_tupleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon46){_inherits(Thf_tupleContext,_antlr4$ParserRuleCon46);var _super47=_createSuper(Thf_tupleContext);function Thf_tupleContext(parser,parent,invokingState){var _this47;_classCallCheck(this,Thf_tupleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this47=_super47.call(this,parent,invokingState);_this47.parser=parser;_this47.ruleIndex=TPTPParser.RULE_thf_tuple;return _this47;}_createClass(Thf_tupleContext,[{key:\"thf_formula_list\",value:function thf_formula_list(){return this.getTypedRuleContext(Thf_formula_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_tuple(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_tuple(this);}}}]);return Thf_tupleContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_fof_functionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon47){_inherits(Thf_fof_functionContext,_antlr4$ParserRuleCon47);var _super48=_createSuper(Thf_fof_functionContext);function Thf_fof_functionContext(parser,parent,invokingState){var _this48;_classCallCheck(this,Thf_fof_functionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this48=_super48.call(this,parent,invokingState);_this48.parser=parser;_this48.ruleIndex=TPTPParser.RULE_thf_fof_function;return _this48;}_createClass(Thf_fof_functionContext,[{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"thf_arguments\",value:function thf_arguments(){return this.getTypedRuleContext(Thf_argumentsContext,0);}},{key:\"defined_functor\",value:function defined_functor(){return this.getTypedRuleContext(Defined_functorContext,0);}},{key:\"system_functor\",value:function system_functor(){return this.getTypedRuleContext(System_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_fof_function(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_fof_function(this);}}}]);return Thf_fof_functionContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_argumentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon48){_inherits(Thf_argumentsContext,_antlr4$ParserRuleCon48);var _super49=_createSuper(Thf_argumentsContext);function Thf_argumentsContext(parser,parent,invokingState){var _this49;_classCallCheck(this,Thf_argumentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this49=_super49.call(this,parent,invokingState);_this49.parser=parser;_this49.ruleIndex=TPTPParser.RULE_thf_arguments;return _this49;}_createClass(Thf_argumentsContext,[{key:\"thf_formula_list\",value:function thf_formula_list(){return this.getTypedRuleContext(Thf_formula_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_arguments(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_arguments(this);}}}]);return Thf_argumentsContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_formula_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon49){_inherits(Thf_formula_listContext,_antlr4$ParserRuleCon49);var _super50=_createSuper(Thf_formula_listContext);function Thf_formula_listContext(parser,parent,invokingState){var _this50;_classCallCheck(this,Thf_formula_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this50=_super50.call(this,parent,invokingState);_this50.parser=parser;_this50.ruleIndex=TPTPParser.RULE_thf_formula_list;return _this50;}_createClass(Thf_formula_listContext,[{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"thf_formula_list\",value:function thf_formula_list(){return this.getTypedRuleContext(Thf_formula_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_formula_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_formula_list(this);}}}]);return Thf_formula_listContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_atom_typingContext=/*#__PURE__*/function(_antlr4$ParserRuleCon50){_inherits(Thf_atom_typingContext,_antlr4$ParserRuleCon50);var _super51=_createSuper(Thf_atom_typingContext);function Thf_atom_typingContext(parser,parent,invokingState){var _this51;_classCallCheck(this,Thf_atom_typingContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this51=_super51.call(this,parent,invokingState);_this51.parser=parser;_this51.ruleIndex=TPTPParser.RULE_thf_atom_typing;return _this51;}_createClass(Thf_atom_typingContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"thf_top_level_type\",value:function thf_top_level_type(){return this.getTypedRuleContext(Thf_top_level_typeContext,0);}},{key:\"thf_atom_typing\",value:function thf_atom_typing(){return this.getTypedRuleContext(Thf_atom_typingContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_atom_typing(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_atom_typing(this);}}}]);return Thf_atom_typingContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_top_level_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon51){_inherits(Thf_top_level_typeContext,_antlr4$ParserRuleCon51);var _super52=_createSuper(Thf_top_level_typeContext);function Thf_top_level_typeContext(parser,parent,invokingState){var _this52;_classCallCheck(this,Thf_top_level_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this52=_super52.call(this,parent,invokingState);_this52.parser=parser;_this52.ruleIndex=TPTPParser.RULE_thf_top_level_type;return _this52;}_createClass(Thf_top_level_typeContext,[{key:\"thf_unitary_type\",value:function thf_unitary_type(){return this.getTypedRuleContext(Thf_unitary_typeContext,0);}},{key:\"thf_mapping_type\",value:function thf_mapping_type(){return this.getTypedRuleContext(Thf_mapping_typeContext,0);}},{key:\"thf_apply_type\",value:function thf_apply_type(){return this.getTypedRuleContext(Thf_apply_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_top_level_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_top_level_type(this);}}}]);return Thf_top_level_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_unitary_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon52){_inherits(Thf_unitary_typeContext,_antlr4$ParserRuleCon52);var _super53=_createSuper(Thf_unitary_typeContext);function Thf_unitary_typeContext(parser,parent,invokingState){var _this53;_classCallCheck(this,Thf_unitary_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this53=_super53.call(this,parent,invokingState);_this53.parser=parser;_this53.ruleIndex=TPTPParser.RULE_thf_unitary_type;return _this53;}_createClass(Thf_unitary_typeContext,[{key:\"thf_unitary_formula\",value:function thf_unitary_formula(){return this.getTypedRuleContext(Thf_unitary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_unitary_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_unitary_type(this);}}}]);return Thf_unitary_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_apply_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon53){_inherits(Thf_apply_typeContext,_antlr4$ParserRuleCon53);var _super54=_createSuper(Thf_apply_typeContext);function Thf_apply_typeContext(parser,parent,invokingState){var _this54;_classCallCheck(this,Thf_apply_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this54=_super54.call(this,parent,invokingState);_this54.parser=parser;_this54.ruleIndex=TPTPParser.RULE_thf_apply_type;return _this54;}_createClass(Thf_apply_typeContext,[{key:\"thf_apply_formula\",value:function thf_apply_formula(){return this.getTypedRuleContext(Thf_apply_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_apply_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_apply_type(this);}}}]);return Thf_apply_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_binary_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon54){_inherits(Thf_binary_typeContext,_antlr4$ParserRuleCon54);var _super55=_createSuper(Thf_binary_typeContext);function Thf_binary_typeContext(parser,parent,invokingState){var _this55;_classCallCheck(this,Thf_binary_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this55=_super55.call(this,parent,invokingState);_this55.parser=parser;_this55.ruleIndex=TPTPParser.RULE_thf_binary_type;return _this55;}_createClass(Thf_binary_typeContext,[{key:\"thf_mapping_type\",value:function thf_mapping_type(){return this.getTypedRuleContext(Thf_mapping_typeContext,0);}},{key:\"thf_xprod_type\",value:function thf_xprod_type(){return this.getTypedRuleContext(Thf_xprod_typeContext,0);}},{key:\"thf_union_type\",value:function thf_union_type(){return this.getTypedRuleContext(Thf_union_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_binary_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_binary_type(this);}}}]);return Thf_binary_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_mapping_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon55){_inherits(Thf_mapping_typeContext,_antlr4$ParserRuleCon55);var _super56=_createSuper(Thf_mapping_typeContext);function Thf_mapping_typeContext(parser,parent,invokingState){var _this56;_classCallCheck(this,Thf_mapping_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this56=_super56.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this56),\"thf_unitary_type\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_typeContext);}else{return this.getTypedRuleContext(Thf_unitary_typeContext,i);}});_this56.parser=parser;_this56.ruleIndex=TPTPParser.RULE_thf_mapping_type;return _this56;}_createClass(Thf_mapping_typeContext,[{key:\"Arrow\",value:function Arrow(){return this.getToken(TPTPParser.Arrow,0);}},{key:\"thf_mapping_type\",value:function thf_mapping_type(){return this.getTypedRuleContext(Thf_mapping_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_mapping_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_mapping_type(this);}}}]);return Thf_mapping_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_xprod_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon56){_inherits(Thf_xprod_typeContext,_antlr4$ParserRuleCon56);var _super57=_createSuper(Thf_xprod_typeContext);function Thf_xprod_typeContext(parser,parent,invokingState){var _this57;_classCallCheck(this,Thf_xprod_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this57=_super57.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this57),\"thf_unitary_type\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_typeContext);}else{return this.getTypedRuleContext(Thf_unitary_typeContext,i);}});_this57.parser=parser;_this57.ruleIndex=TPTPParser.RULE_thf_xprod_type;return _this57;}_createClass(Thf_xprod_typeContext,[{key:\"Star\",value:function Star(){return this.getToken(TPTPParser.Star,0);}},{key:\"thf_xprod_type\",value:function thf_xprod_type(){return this.getTypedRuleContext(Thf_xprod_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_xprod_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_xprod_type(this);}}}]);return Thf_xprod_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_union_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon57){_inherits(Thf_union_typeContext,_antlr4$ParserRuleCon57);var _super58=_createSuper(Thf_union_typeContext);function Thf_union_typeContext(parser,parent,invokingState){var _this58;_classCallCheck(this,Thf_union_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this58=_super58.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this58),\"thf_unitary_type\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_unitary_typeContext);}else{return this.getTypedRuleContext(Thf_unitary_typeContext,i);}});_this58.parser=parser;_this58.ruleIndex=TPTPParser.RULE_thf_union_type;return _this58;}_createClass(Thf_union_typeContext,[{key:\"Plus\",value:function Plus(){return this.getToken(TPTPParser.Plus,0);}},{key:\"thf_union_type\",value:function thf_union_type(){return this.getTypedRuleContext(Thf_union_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_union_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_union_type(this);}}}]);return Thf_union_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_subtypeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon58){_inherits(Thf_subtypeContext,_antlr4$ParserRuleCon58);var _super59=_createSuper(Thf_subtypeContext);function Thf_subtypeContext(parser,parent,invokingState){var _this59;_classCallCheck(this,Thf_subtypeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this59=_super59.call(this,parent,invokingState);_this59.parser=parser;_this59.ruleIndex=TPTPParser.RULE_thf_subtype;return _this59;}_createClass(Thf_subtypeContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"Subtype_sign\",value:function Subtype_sign(){return this.getToken(TPTPParser.Subtype_sign,0);}},{key:\"atom\",value:function atom(){return this.getTypedRuleContext(AtomContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_subtype(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_subtype(this);}}}]);return Thf_subtypeContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_definitionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon59){_inherits(Thf_definitionContext,_antlr4$ParserRuleCon59);var _super60=_createSuper(Thf_definitionContext);function Thf_definitionContext(parser,parent,invokingState){var _this60;_classCallCheck(this,Thf_definitionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this60=_super60.call(this,parent,invokingState);_this60.parser=parser;_this60.ruleIndex=TPTPParser.RULE_thf_definition;return _this60;}_createClass(Thf_definitionContext,[{key:\"thf_atomic_formula\",value:function thf_atomic_formula(){return this.getTypedRuleContext(Thf_atomic_formulaContext,0);}},{key:\"Identical\",value:function Identical(){return this.getToken(TPTPParser.Identical,0);}},{key:\"thf_logic_formula\",value:function thf_logic_formula(){return this.getTypedRuleContext(Thf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_definition(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_definition(this);}}}]);return Thf_definitionContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_sequentContext=/*#__PURE__*/function(_antlr4$ParserRuleCon60){_inherits(Thf_sequentContext,_antlr4$ParserRuleCon60);var _super61=_createSuper(Thf_sequentContext);function Thf_sequentContext(parser,parent,invokingState){var _this61;_classCallCheck(this,Thf_sequentContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this61=_super61.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this61),\"thf_tuple\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Thf_tupleContext);}else{return this.getTypedRuleContext(Thf_tupleContext,i);}});_this61.parser=parser;_this61.ruleIndex=TPTPParser.RULE_thf_sequent;return _this61;}_createClass(Thf_sequentContext,[{key:\"Gentzen_arrow\",value:function Gentzen_arrow(){return this.getToken(TPTPParser.Gentzen_arrow,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_sequent(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_sequent(this);}}}]);return Thf_sequentContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon61){_inherits(Tff_formulaContext,_antlr4$ParserRuleCon61);var _super62=_createSuper(Tff_formulaContext);function Tff_formulaContext(parser,parent,invokingState){var _this62;_classCallCheck(this,Tff_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this62=_super62.call(this,parent,invokingState);_this62.parser=parser;_this62.ruleIndex=TPTPParser.RULE_tff_formula;return _this62;}_createClass(Tff_formulaContext,[{key:\"tff_logic_formula\",value:function tff_logic_formula(){return this.getTypedRuleContext(Tff_logic_formulaContext,0);}},{key:\"tff_atom_typing\",value:function tff_atom_typing(){return this.getTypedRuleContext(Tff_atom_typingContext,0);}},{key:\"tff_subtype\",value:function tff_subtype(){return this.getTypedRuleContext(Tff_subtypeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_formula(this);}}}]);return Tff_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon62){_inherits(Tff_logic_formulaContext,_antlr4$ParserRuleCon62);var _super63=_createSuper(Tff_logic_formulaContext);function Tff_logic_formulaContext(parser,parent,invokingState){var _this63;_classCallCheck(this,Tff_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this63=_super63.call(this,parent,invokingState);_this63.parser=parser;_this63.ruleIndex=TPTPParser.RULE_tff_logic_formula;return _this63;}_createClass(Tff_logic_formulaContext,[{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){return this.getTypedRuleContext(Tff_unitary_formulaContext,0);}},{key:\"tff_unary_formula\",value:function tff_unary_formula(){return this.getTypedRuleContext(Tff_unary_formulaContext,0);}},{key:\"tff_binary_formula\",value:function tff_binary_formula(){return this.getTypedRuleContext(Tff_binary_formulaContext,0);}},{key:\"tff_defined_infix\",value:function tff_defined_infix(){return this.getTypedRuleContext(Tff_defined_infixContext,0);}},{key:\"txf_definition\",value:function txf_definition(){return this.getTypedRuleContext(Txf_definitionContext,0);}},{key:\"txf_sequent\",value:function txf_sequent(){return this.getTypedRuleContext(Txf_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_logic_formula(this);}}}]);return Tff_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_binary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon63){_inherits(Tff_binary_formulaContext,_antlr4$ParserRuleCon63);var _super64=_createSuper(Tff_binary_formulaContext);function Tff_binary_formulaContext(parser,parent,invokingState){var _this64;_classCallCheck(this,Tff_binary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this64=_super64.call(this,parent,invokingState);_this64.parser=parser;_this64.ruleIndex=TPTPParser.RULE_tff_binary_formula;return _this64;}_createClass(Tff_binary_formulaContext,[{key:\"tff_binary_nonassoc\",value:function tff_binary_nonassoc(){return this.getTypedRuleContext(Tff_binary_nonassocContext,0);}},{key:\"tff_binary_assoc\",value:function tff_binary_assoc(){return this.getTypedRuleContext(Tff_binary_assocContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_binary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_binary_formula(this);}}}]);return Tff_binary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_binary_nonassocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon64){_inherits(Tff_binary_nonassocContext,_antlr4$ParserRuleCon64);var _super65=_createSuper(Tff_binary_nonassocContext);function Tff_binary_nonassocContext(parser,parent,invokingState){var _this65;_classCallCheck(this,Tff_binary_nonassocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this65=_super65.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this65),\"tff_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unit_formulaContext);}else{return this.getTypedRuleContext(Tff_unit_formulaContext,i);}});_this65.parser=parser;_this65.ruleIndex=TPTPParser.RULE_tff_binary_nonassoc;return _this65;}_createClass(Tff_binary_nonassocContext,[{key:\"nonassoc_connective\",value:function nonassoc_connective(){return this.getTypedRuleContext(Nonassoc_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_binary_nonassoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_binary_nonassoc(this);}}}]);return Tff_binary_nonassocContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_binary_assocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon65){_inherits(Tff_binary_assocContext,_antlr4$ParserRuleCon65);var _super66=_createSuper(Tff_binary_assocContext);function Tff_binary_assocContext(parser,parent,invokingState){var _this66;_classCallCheck(this,Tff_binary_assocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this66=_super66.call(this,parent,invokingState);_this66.parser=parser;_this66.ruleIndex=TPTPParser.RULE_tff_binary_assoc;return _this66;}_createClass(Tff_binary_assocContext,[{key:\"tff_or_formula\",value:function tff_or_formula(){return this.getTypedRuleContext(Tff_or_formulaContext,0);}},{key:\"tff_and_formula\",value:function tff_and_formula(){return this.getTypedRuleContext(Tff_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_binary_assoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_binary_assoc(this);}}}]);return Tff_binary_assocContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_or_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon66){_inherits(Tff_or_formulaContext,_antlr4$ParserRuleCon66);var _super67=_createSuper(Tff_or_formulaContext);function Tff_or_formulaContext(parser,parent,invokingState){var _this67;_classCallCheck(this,Tff_or_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this67=_super67.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this67),\"tff_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unit_formulaContext);}else{return this.getTypedRuleContext(Tff_unit_formulaContext,i);}});_this67.parser=parser;_this67.ruleIndex=TPTPParser.RULE_tff_or_formula;return _this67;}_createClass(Tff_or_formulaContext,[{key:\"Or\",value:function Or(){return this.getToken(TPTPParser.Or,0);}},{key:\"tff_or_formula\",value:function tff_or_formula(){return this.getTypedRuleContext(Tff_or_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_or_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_or_formula(this);}}}]);return Tff_or_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_and_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon67){_inherits(Tff_and_formulaContext,_antlr4$ParserRuleCon67);var _super68=_createSuper(Tff_and_formulaContext);function Tff_and_formulaContext(parser,parent,invokingState){var _this68;_classCallCheck(this,Tff_and_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this68=_super68.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this68),\"tff_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unit_formulaContext);}else{return this.getTypedRuleContext(Tff_unit_formulaContext,i);}});_this68.parser=parser;_this68.ruleIndex=TPTPParser.RULE_tff_and_formula;return _this68;}_createClass(Tff_and_formulaContext,[{key:\"And\",value:function And(){return this.getToken(TPTPParser.And,0);}},{key:\"tff_and_formula\",value:function tff_and_formula(){return this.getTypedRuleContext(Tff_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_and_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_and_formula(this);}}}]);return Tff_and_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unit_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon68){_inherits(Tff_unit_formulaContext,_antlr4$ParserRuleCon68);var _super69=_createSuper(Tff_unit_formulaContext);function Tff_unit_formulaContext(parser,parent,invokingState){var _this69;_classCallCheck(this,Tff_unit_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this69=_super69.call(this,parent,invokingState);_this69.parser=parser;_this69.ruleIndex=TPTPParser.RULE_tff_unit_formula;return _this69;}_createClass(Tff_unit_formulaContext,[{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){return this.getTypedRuleContext(Tff_unitary_formulaContext,0);}},{key:\"tff_unary_formula\",value:function tff_unary_formula(){return this.getTypedRuleContext(Tff_unary_formulaContext,0);}},{key:\"tff_defined_infix\",value:function tff_defined_infix(){return this.getTypedRuleContext(Tff_defined_infixContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_unit_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_unit_formula(this);}}}]);return Tff_unit_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_preunit_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon69){_inherits(Tff_preunit_formulaContext,_antlr4$ParserRuleCon69);var _super70=_createSuper(Tff_preunit_formulaContext);function Tff_preunit_formulaContext(parser,parent,invokingState){var _this70;_classCallCheck(this,Tff_preunit_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this70=_super70.call(this,parent,invokingState);_this70.parser=parser;_this70.ruleIndex=TPTPParser.RULE_tff_preunit_formula;return _this70;}_createClass(Tff_preunit_formulaContext,[{key:\"tff_unitary_formula\",value:function tff_unitary_formula(){return this.getTypedRuleContext(Tff_unitary_formulaContext,0);}},{key:\"tff_prefix_unary\",value:function tff_prefix_unary(){return this.getTypedRuleContext(Tff_prefix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_preunit_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_preunit_formula(this);}}}]);return Tff_preunit_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unitary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon70){_inherits(Tff_unitary_formulaContext,_antlr4$ParserRuleCon70);var _super71=_createSuper(Tff_unitary_formulaContext);function Tff_unitary_formulaContext(parser,parent,invokingState){var _this71;_classCallCheck(this,Tff_unitary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this71=_super71.call(this,parent,invokingState);_this71.parser=parser;_this71.ruleIndex=TPTPParser.RULE_tff_unitary_formula;return _this71;}_createClass(Tff_unitary_formulaContext,[{key:\"tff_quantified_formula\",value:function tff_quantified_formula(){return this.getTypedRuleContext(Tff_quantified_formulaContext,0);}},{key:\"tff_atomic_formula\",value:function tff_atomic_formula(){return this.getTypedRuleContext(Tff_atomic_formulaContext,0);}},{key:\"txf_unitary_formula\",value:function txf_unitary_formula(){return this.getTypedRuleContext(Txf_unitary_formulaContext,0);}},{key:\"tff_logic_formula\",value:function tff_logic_formula(){return this.getTypedRuleContext(Tff_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_unitary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_unitary_formula(this);}}}]);return Tff_unitary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_unitary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon71){_inherits(Txf_unitary_formulaContext,_antlr4$ParserRuleCon71);var _super72=_createSuper(Txf_unitary_formulaContext);function Txf_unitary_formulaContext(parser,parent,invokingState){var _this72;_classCallCheck(this,Txf_unitary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this72=_super72.call(this,parent,invokingState);_this72.parser=parser;_this72.ruleIndex=TPTPParser.RULE_txf_unitary_formula;return _this72;}_createClass(Txf_unitary_formulaContext,[{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_unitary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_unitary_formula(this);}}}]);return Txf_unitary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon72){_inherits(Tff_quantified_formulaContext,_antlr4$ParserRuleCon72);var _super73=_createSuper(Tff_quantified_formulaContext);function Tff_quantified_formulaContext(parser,parent,invokingState){var _this73;_classCallCheck(this,Tff_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this73=_super73.call(this,parent,invokingState);_this73.parser=parser;_this73.ruleIndex=TPTPParser.RULE_tff_quantified_formula;return _this73;}_createClass(Tff_quantified_formulaContext,[{key:\"fof_quantifier\",value:function fof_quantifier(){return this.getTypedRuleContext(Fof_quantifierContext,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"tff_unit_formula\",value:function tff_unit_formula(){return this.getTypedRuleContext(Tff_unit_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_quantified_formula(this);}}}]);return Tff_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_variable_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon73){_inherits(Tff_variable_listContext,_antlr4$ParserRuleCon73);var _super74=_createSuper(Tff_variable_listContext);function Tff_variable_listContext(parser,parent,invokingState){var _this74;_classCallCheck(this,Tff_variable_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this74=_super74.call(this,parent,invokingState);_this74.parser=parser;_this74.ruleIndex=TPTPParser.RULE_tff_variable_list;return _this74;}_createClass(Tff_variable_listContext,[{key:\"tff_variable\",value:function tff_variable(){return this.getTypedRuleContext(Tff_variableContext,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_variable_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_variable_list(this);}}}]);return Tff_variable_listContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon74){_inherits(Tff_variableContext,_antlr4$ParserRuleCon74);var _super75=_createSuper(Tff_variableContext);function Tff_variableContext(parser,parent,invokingState){var _this75;_classCallCheck(this,Tff_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this75=_super75.call(this,parent,invokingState);_this75.parser=parser;_this75.ruleIndex=TPTPParser.RULE_tff_variable;return _this75;}_createClass(Tff_variableContext,[{key:\"tff_typed_variable\",value:function tff_typed_variable(){return this.getTypedRuleContext(Tff_typed_variableContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_variable(this);}}}]);return Tff_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_typed_variableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon75){_inherits(Tff_typed_variableContext,_antlr4$ParserRuleCon75);var _super76=_createSuper(Tff_typed_variableContext);function Tff_typed_variableContext(parser,parent,invokingState){var _this76;_classCallCheck(this,Tff_typed_variableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this76=_super76.call(this,parent,invokingState);_this76.parser=parser;_this76.ruleIndex=TPTPParser.RULE_tff_typed_variable;return _this76;}_createClass(Tff_typed_variableContext,[{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_typed_variable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_typed_variable(this);}}}]);return Tff_typed_variableContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon76){_inherits(Tff_unary_formulaContext,_antlr4$ParserRuleCon76);var _super77=_createSuper(Tff_unary_formulaContext);function Tff_unary_formulaContext(parser,parent,invokingState){var _this77;_classCallCheck(this,Tff_unary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this77=_super77.call(this,parent,invokingState);_this77.parser=parser;_this77.ruleIndex=TPTPParser.RULE_tff_unary_formula;return _this77;}_createClass(Tff_unary_formulaContext,[{key:\"tff_prefix_unary\",value:function tff_prefix_unary(){return this.getTypedRuleContext(Tff_prefix_unaryContext,0);}},{key:\"tff_infix_unary\",value:function tff_infix_unary(){return this.getTypedRuleContext(Tff_infix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_unary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_unary_formula(this);}}}]);return Tff_unary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_prefix_unaryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon77){_inherits(Tff_prefix_unaryContext,_antlr4$ParserRuleCon77);var _super78=_createSuper(Tff_prefix_unaryContext);function Tff_prefix_unaryContext(parser,parent,invokingState){var _this78;_classCallCheck(this,Tff_prefix_unaryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this78=_super78.call(this,parent,invokingState);_this78.parser=parser;_this78.ruleIndex=TPTPParser.RULE_tff_prefix_unary;return _this78;}_createClass(Tff_prefix_unaryContext,[{key:\"unary_connective\",value:function unary_connective(){return this.getTypedRuleContext(Unary_connectiveContext,0);}},{key:\"tff_preunit_formula\",value:function tff_preunit_formula(){return this.getTypedRuleContext(Tff_preunit_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_prefix_unary(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_prefix_unary(this);}}}]);return Tff_prefix_unaryContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_infix_unaryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon78){_inherits(Tff_infix_unaryContext,_antlr4$ParserRuleCon78);var _super79=_createSuper(Tff_infix_unaryContext);function Tff_infix_unaryContext(parser,parent,invokingState){var _this79;_classCallCheck(this,Tff_infix_unaryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this79=_super79.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this79),\"tff_unitary_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unitary_termContext);}else{return this.getTypedRuleContext(Tff_unitary_termContext,i);}});_this79.parser=parser;_this79.ruleIndex=TPTPParser.RULE_tff_infix_unary;return _this79;}_createClass(Tff_infix_unaryContext,[{key:\"Infix_inequality\",value:function Infix_inequality(){return this.getToken(TPTPParser.Infix_inequality,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_infix_unary(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_infix_unary(this);}}}]);return Tff_infix_unaryContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon79){_inherits(Tff_atomic_formulaContext,_antlr4$ParserRuleCon79);var _super80=_createSuper(Tff_atomic_formulaContext);function Tff_atomic_formulaContext(parser,parent,invokingState){var _this80;_classCallCheck(this,Tff_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this80=_super80.call(this,parent,invokingState);_this80.parser=parser;_this80.ruleIndex=TPTPParser.RULE_tff_atomic_formula;return _this80;}_createClass(Tff_atomic_formulaContext,[{key:\"tff_plain_atomic\",value:function tff_plain_atomic(){return this.getTypedRuleContext(Tff_plain_atomicContext,0);}},{key:\"tff_defined_atomic\",value:function tff_defined_atomic(){return this.getTypedRuleContext(Tff_defined_atomicContext,0);}},{key:\"tff_system_atomic\",value:function tff_system_atomic(){return this.getTypedRuleContext(Tff_system_atomicContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_atomic_formula(this);}}}]);return Tff_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_plain_atomicContext=/*#__PURE__*/function(_antlr4$ParserRuleCon80){_inherits(Tff_plain_atomicContext,_antlr4$ParserRuleCon80);var _super81=_createSuper(Tff_plain_atomicContext);function Tff_plain_atomicContext(parser,parent,invokingState){var _this81;_classCallCheck(this,Tff_plain_atomicContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this81=_super81.call(this,parent,invokingState);_this81.parser=parser;_this81.ruleIndex=TPTPParser.RULE_tff_plain_atomic;return _this81;}_createClass(Tff_plain_atomicContext,[{key:\"constant\",value:function constant(){return this.getTypedRuleContext(ConstantContext,0);}},{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"tff_arguments\",value:function tff_arguments(){return this.getTypedRuleContext(Tff_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_plain_atomic(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_plain_atomic(this);}}}]);return Tff_plain_atomicContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_defined_atomicContext=/*#__PURE__*/function(_antlr4$ParserRuleCon81){_inherits(Tff_defined_atomicContext,_antlr4$ParserRuleCon81);var _super82=_createSuper(Tff_defined_atomicContext);function Tff_defined_atomicContext(parser,parent,invokingState){var _this82;_classCallCheck(this,Tff_defined_atomicContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this82=_super82.call(this,parent,invokingState);_this82.parser=parser;_this82.ruleIndex=TPTPParser.RULE_tff_defined_atomic;return _this82;}_createClass(Tff_defined_atomicContext,[{key:\"tff_defined_plain\",value:function tff_defined_plain(){return this.getTypedRuleContext(Tff_defined_plainContext,0);}},{key:\"ntf_connective\",value:function ntf_connective(){return this.getTypedRuleContext(Ntf_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_defined_atomic(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_defined_atomic(this);}}}]);return Tff_defined_atomicContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_defined_plainContext=/*#__PURE__*/function(_antlr4$ParserRuleCon82){_inherits(Tff_defined_plainContext,_antlr4$ParserRuleCon82);var _super83=_createSuper(Tff_defined_plainContext);function Tff_defined_plainContext(parser,parent,invokingState){var _this83;_classCallCheck(this,Tff_defined_plainContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this83=_super83.call(this,parent,invokingState);_this83.parser=parser;_this83.ruleIndex=TPTPParser.RULE_tff_defined_plain;return _this83;}_createClass(Tff_defined_plainContext,[{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"defined_functor\",value:function defined_functor(){return this.getTypedRuleContext(Defined_functorContext,0);}},{key:\"tff_arguments\",value:function tff_arguments(){return this.getTypedRuleContext(Tff_argumentsContext,0);}},{key:\"txf_ntf_atom\",value:function txf_ntf_atom(){return this.getTypedRuleContext(Txf_ntf_atomContext,0);}},{key:\"txf_let\",value:function txf_let(){return this.getTypedRuleContext(Txf_letContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_defined_plain(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_defined_plain(this);}}}]);return Tff_defined_plainContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_defined_infixContext=/*#__PURE__*/function(_antlr4$ParserRuleCon83){_inherits(Tff_defined_infixContext,_antlr4$ParserRuleCon83);var _super84=_createSuper(Tff_defined_infixContext);function Tff_defined_infixContext(parser,parent,invokingState){var _this84;_classCallCheck(this,Tff_defined_infixContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this84=_super84.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this84),\"tff_unitary_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Tff_unitary_termContext);}else{return this.getTypedRuleContext(Tff_unitary_termContext,i);}});_this84.parser=parser;_this84.ruleIndex=TPTPParser.RULE_tff_defined_infix;return _this84;}_createClass(Tff_defined_infixContext,[{key:\"defined_infix_pred\",value:function defined_infix_pred(){return this.getTypedRuleContext(Defined_infix_predContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_defined_infix(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_defined_infix(this);}}}]);return Tff_defined_infixContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_system_atomicContext=/*#__PURE__*/function(_antlr4$ParserRuleCon84){_inherits(Tff_system_atomicContext,_antlr4$ParserRuleCon84);var _super85=_createSuper(Tff_system_atomicContext);function Tff_system_atomicContext(parser,parent,invokingState){var _this85;_classCallCheck(this,Tff_system_atomicContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this85=_super85.call(this,parent,invokingState);_this85.parser=parser;_this85.ruleIndex=TPTPParser.RULE_tff_system_atomic;return _this85;}_createClass(Tff_system_atomicContext,[{key:\"system_constant\",value:function system_constant(){return this.getTypedRuleContext(System_constantContext,0);}},{key:\"system_functor\",value:function system_functor(){return this.getTypedRuleContext(System_functorContext,0);}},{key:\"tff_arguments\",value:function tff_arguments(){return this.getTypedRuleContext(Tff_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_system_atomic(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_system_atomic(this);}}}]);return Tff_system_atomicContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_letContext=/*#__PURE__*/function(_antlr4$ParserRuleCon85){_inherits(Txf_letContext,_antlr4$ParserRuleCon85);var _super86=_createSuper(Txf_letContext);function Txf_letContext(parser,parent,invokingState){var _this86;_classCallCheck(this,Txf_letContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this86=_super86.call(this,parent,invokingState);_this86.parser=parser;_this86.ruleIndex=TPTPParser.RULE_txf_let;return _this86;}_createClass(Txf_letContext,[{key:\"txf_let_types\",value:function txf_let_types(){return this.getTypedRuleContext(Txf_let_typesContext,0);}},{key:\"txf_let_defns\",value:function txf_let_defns(){return this.getTypedRuleContext(Txf_let_defnsContext,0);}},{key:\"tff_term\",value:function tff_term(){return this.getTypedRuleContext(Tff_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_let(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_let(this);}}}]);return Txf_letContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_let_typesContext=/*#__PURE__*/function(_antlr4$ParserRuleCon86){_inherits(Txf_let_typesContext,_antlr4$ParserRuleCon86);var _super87=_createSuper(Txf_let_typesContext);function Txf_let_typesContext(parser,parent,invokingState){var _this87;_classCallCheck(this,Txf_let_typesContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this87=_super87.call(this,parent,invokingState);_this87.parser=parser;_this87.ruleIndex=TPTPParser.RULE_txf_let_types;return _this87;}_createClass(Txf_let_typesContext,[{key:\"tff_atom_typing\",value:function tff_atom_typing(){return this.getTypedRuleContext(Tff_atom_typingContext,0);}},{key:\"tff_atom_typing_list\",value:function tff_atom_typing_list(){return this.getTypedRuleContext(Tff_atom_typing_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_let_types(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_let_types(this);}}}]);return Txf_let_typesContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_atom_typing_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon87){_inherits(Tff_atom_typing_listContext,_antlr4$ParserRuleCon87);var _super88=_createSuper(Tff_atom_typing_listContext);function Tff_atom_typing_listContext(parser,parent,invokingState){var _this88;_classCallCheck(this,Tff_atom_typing_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this88=_super88.call(this,parent,invokingState);_this88.parser=parser;_this88.ruleIndex=TPTPParser.RULE_tff_atom_typing_list;return _this88;}_createClass(Tff_atom_typing_listContext,[{key:\"tff_atom_typing\",value:function tff_atom_typing(){return this.getTypedRuleContext(Tff_atom_typingContext,0);}},{key:\"tff_atom_typing_list\",value:function tff_atom_typing_list(){return this.getTypedRuleContext(Tff_atom_typing_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_atom_typing_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_atom_typing_list(this);}}}]);return Tff_atom_typing_listContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_let_defnsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon88){_inherits(Txf_let_defnsContext,_antlr4$ParserRuleCon88);var _super89=_createSuper(Txf_let_defnsContext);function Txf_let_defnsContext(parser,parent,invokingState){var _this89;_classCallCheck(this,Txf_let_defnsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this89=_super89.call(this,parent,invokingState);_this89.parser=parser;_this89.ruleIndex=TPTPParser.RULE_txf_let_defns;return _this89;}_createClass(Txf_let_defnsContext,[{key:\"txf_let_defn\",value:function txf_let_defn(){return this.getTypedRuleContext(Txf_let_defnContext,0);}},{key:\"txf_let_defn_list\",value:function txf_let_defn_list(){return this.getTypedRuleContext(Txf_let_defn_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_let_defns(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_let_defns(this);}}}]);return Txf_let_defnsContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_let_defnContext=/*#__PURE__*/function(_antlr4$ParserRuleCon89){_inherits(Txf_let_defnContext,_antlr4$ParserRuleCon89);var _super90=_createSuper(Txf_let_defnContext);function Txf_let_defnContext(parser,parent,invokingState){var _this90;_classCallCheck(this,Txf_let_defnContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this90=_super90.call(this,parent,invokingState);_this90.parser=parser;_this90.ruleIndex=TPTPParser.RULE_txf_let_defn;return _this90;}_createClass(Txf_let_defnContext,[{key:\"txf_let_LHS\",value:function txf_let_LHS(){return this.getTypedRuleContext(Txf_let_LHSContext,0);}},{key:\"Assignment\",value:function Assignment(){return this.getToken(TPTPParser.Assignment,0);}},{key:\"tff_term\",value:function tff_term(){return this.getTypedRuleContext(Tff_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_let_defn(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_let_defn(this);}}}]);return Txf_let_defnContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_let_LHSContext=/*#__PURE__*/function(_antlr4$ParserRuleCon90){_inherits(Txf_let_LHSContext,_antlr4$ParserRuleCon90);var _super91=_createSuper(Txf_let_LHSContext);function Txf_let_LHSContext(parser,parent,invokingState){var _this91;_classCallCheck(this,Txf_let_LHSContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this91=_super91.call(this,parent,invokingState);_this91.parser=parser;_this91.ruleIndex=TPTPParser.RULE_txf_let_LHS;return _this91;}_createClass(Txf_let_LHSContext,[{key:\"tff_plain_atomic\",value:function tff_plain_atomic(){return this.getTypedRuleContext(Tff_plain_atomicContext,0);}},{key:\"txf_tuple\",value:function txf_tuple(){return this.getTypedRuleContext(Txf_tupleContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_let_LHS(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_let_LHS(this);}}}]);return Txf_let_LHSContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_let_defn_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon91){_inherits(Txf_let_defn_listContext,_antlr4$ParserRuleCon91);var _super92=_createSuper(Txf_let_defn_listContext);function Txf_let_defn_listContext(parser,parent,invokingState){var _this92;_classCallCheck(this,Txf_let_defn_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this92=_super92.call(this,parent,invokingState);_this92.parser=parser;_this92.ruleIndex=TPTPParser.RULE_txf_let_defn_list;return _this92;}_createClass(Txf_let_defn_listContext,[{key:\"txf_let_defn\",value:function txf_let_defn(){return this.getTypedRuleContext(Txf_let_defnContext,0);}},{key:\"txf_let_defn_list\",value:function txf_let_defn_list(){return this.getTypedRuleContext(Txf_let_defn_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_let_defn_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_let_defn_list(this);}}}]);return Txf_let_defn_listContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_ntf_atomContext=/*#__PURE__*/function(_antlr4$ParserRuleCon92){_inherits(Txf_ntf_atomContext,_antlr4$ParserRuleCon92);var _super93=_createSuper(Txf_ntf_atomContext);function Txf_ntf_atomContext(parser,parent,invokingState){var _this93;_classCallCheck(this,Txf_ntf_atomContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this93=_super93.call(this,parent,invokingState);_this93.parser=parser;_this93.ruleIndex=TPTPParser.RULE_txf_ntf_atom;return _this93;}_createClass(Txf_ntf_atomContext,[{key:\"ntf_connective\",value:function ntf_connective(){return this.getTypedRuleContext(Ntf_connectiveContext,0);}},{key:\"App\",value:function App(){return this.getToken(TPTPParser.App,0);}},{key:\"tff_arguments\",value:function tff_arguments(){return this.getTypedRuleContext(Tff_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_ntf_atom(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_ntf_atom(this);}}}]);return Txf_ntf_atomContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon93){_inherits(Tff_termContext,_antlr4$ParserRuleCon93);var _super94=_createSuper(Tff_termContext);function Tff_termContext(parser,parent,invokingState){var _this94;_classCallCheck(this,Tff_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this94=_super94.call(this,parent,invokingState);_this94.parser=parser;_this94.ruleIndex=TPTPParser.RULE_tff_term;return _this94;}_createClass(Tff_termContext,[{key:\"tff_logic_formula\",value:function tff_logic_formula(){return this.getTypedRuleContext(Tff_logic_formulaContext,0);}},{key:\"defined_term\",value:function defined_term(){return this.getTypedRuleContext(Defined_termContext,0);}},{key:\"txf_tuple\",value:function txf_tuple(){return this.getTypedRuleContext(Txf_tupleContext,0);}},{key:\"ntf_key_pair\",value:function ntf_key_pair(){return this.getTypedRuleContext(Ntf_key_pairContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_term(this);}}}]);return Tff_termContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unitary_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon94){_inherits(Tff_unitary_termContext,_antlr4$ParserRuleCon94);var _super95=_createSuper(Tff_unitary_termContext);function Tff_unitary_termContext(parser,parent,invokingState){var _this95;_classCallCheck(this,Tff_unitary_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this95=_super95.call(this,parent,invokingState);_this95.parser=parser;_this95.ruleIndex=TPTPParser.RULE_tff_unitary_term;return _this95;}_createClass(Tff_unitary_termContext,[{key:\"tff_atomic_formula\",value:function tff_atomic_formula(){return this.getTypedRuleContext(Tff_atomic_formulaContext,0);}},{key:\"defined_term\",value:function defined_term(){return this.getTypedRuleContext(Defined_termContext,0);}},{key:\"txf_tuple\",value:function txf_tuple(){return this.getTypedRuleContext(Txf_tupleContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"tff_logic_formula\",value:function tff_logic_formula(){return this.getTypedRuleContext(Tff_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_unitary_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_unitary_term(this);}}}]);return Tff_unitary_termContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_tupleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon95){_inherits(Txf_tupleContext,_antlr4$ParserRuleCon95);var _super96=_createSuper(Txf_tupleContext);function Txf_tupleContext(parser,parent,invokingState){var _this96;_classCallCheck(this,Txf_tupleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this96=_super96.call(this,parent,invokingState);_this96.parser=parser;_this96.ruleIndex=TPTPParser.RULE_txf_tuple;return _this96;}_createClass(Txf_tupleContext,[{key:\"tff_arguments\",value:function tff_arguments(){return this.getTypedRuleContext(Tff_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_tuple(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_tuple(this);}}}]);return Txf_tupleContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_argumentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon96){_inherits(Tff_argumentsContext,_antlr4$ParserRuleCon96);var _super97=_createSuper(Tff_argumentsContext);function Tff_argumentsContext(parser,parent,invokingState){var _this97;_classCallCheck(this,Tff_argumentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this97=_super97.call(this,parent,invokingState);_this97.parser=parser;_this97.ruleIndex=TPTPParser.RULE_tff_arguments;return _this97;}_createClass(Tff_argumentsContext,[{key:\"tff_term\",value:function tff_term(){return this.getTypedRuleContext(Tff_termContext,0);}},{key:\"tff_arguments\",value:function tff_arguments(){return this.getTypedRuleContext(Tff_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_arguments(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_arguments(this);}}}]);return Tff_argumentsContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_atom_typingContext=/*#__PURE__*/function(_antlr4$ParserRuleCon97){_inherits(Tff_atom_typingContext,_antlr4$ParserRuleCon97);var _super98=_createSuper(Tff_atom_typingContext);function Tff_atom_typingContext(parser,parent,invokingState){var _this98;_classCallCheck(this,Tff_atom_typingContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this98=_super98.call(this,parent,invokingState);_this98.parser=parser;_this98.ruleIndex=TPTPParser.RULE_tff_atom_typing;return _this98;}_createClass(Tff_atom_typingContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"tff_top_level_type\",value:function tff_top_level_type(){return this.getTypedRuleContext(Tff_top_level_typeContext,0);}},{key:\"tff_atom_typing\",value:function tff_atom_typing(){return this.getTypedRuleContext(Tff_atom_typingContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_atom_typing(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_atom_typing(this);}}}]);return Tff_atom_typingContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_top_level_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon98){_inherits(Tff_top_level_typeContext,_antlr4$ParserRuleCon98);var _super99=_createSuper(Tff_top_level_typeContext);function Tff_top_level_typeContext(parser,parent,invokingState){var _this99;_classCallCheck(this,Tff_top_level_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this99=_super99.call(this,parent,invokingState);_this99.parser=parser;_this99.ruleIndex=TPTPParser.RULE_tff_top_level_type;return _this99;}_createClass(Tff_top_level_typeContext,[{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_non_atomic_type\",value:function tff_non_atomic_type(){return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_top_level_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_top_level_type(this);}}}]);return Tff_top_level_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_non_atomic_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon99){_inherits(Tff_non_atomic_typeContext,_antlr4$ParserRuleCon99);var _super100=_createSuper(Tff_non_atomic_typeContext);function Tff_non_atomic_typeContext(parser,parent,invokingState){var _this100;_classCallCheck(this,Tff_non_atomic_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this100=_super100.call(this,parent,invokingState);_this100.parser=parser;_this100.ruleIndex=TPTPParser.RULE_tff_non_atomic_type;return _this100;}_createClass(Tff_non_atomic_typeContext,[{key:\"tff_mapping_type\",value:function tff_mapping_type(){return this.getTypedRuleContext(Tff_mapping_typeContext,0);}},{key:\"tff_non_atomic_type\",value:function tff_non_atomic_type(){return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_non_atomic_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_non_atomic_type(this);}}}]);return Tff_non_atomic_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tf1_quantified_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon100){_inherits(Tf1_quantified_typeContext,_antlr4$ParserRuleCon100);var _super101=_createSuper(Tf1_quantified_typeContext);function Tf1_quantified_typeContext(parser,parent,invokingState){var _this101;_classCallCheck(this,Tf1_quantified_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this101=_super101.call(this,parent,invokingState);_this101.parser=parser;_this101.ruleIndex=TPTPParser.RULE_tf1_quantified_type;return _this101;}_createClass(Tf1_quantified_typeContext,[{key:\"TyForall\",value:function TyForall(){return this.getToken(TPTPParser.TyForall,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"tff_monotype\",value:function tff_monotype(){return this.getTypedRuleContext(Tff_monotypeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTf1_quantified_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTf1_quantified_type(this);}}}]);return Tf1_quantified_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_monotypeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon101){_inherits(Tff_monotypeContext,_antlr4$ParserRuleCon101);var _super102=_createSuper(Tff_monotypeContext);function Tff_monotypeContext(parser,parent,invokingState){var _this102;_classCallCheck(this,Tff_monotypeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this102=_super102.call(this,parent,invokingState);_this102.parser=parser;_this102.ruleIndex=TPTPParser.RULE_tff_monotype;return _this102;}_createClass(Tff_monotypeContext,[{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_mapping_type\",value:function tff_mapping_type(){return this.getTypedRuleContext(Tff_mapping_typeContext,0);}},{key:\"tf1_quantified_type\",value:function tf1_quantified_type(){return this.getTypedRuleContext(Tf1_quantified_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_monotype(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_monotype(this);}}}]);return Tff_monotypeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_unitary_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon102){_inherits(Tff_unitary_typeContext,_antlr4$ParserRuleCon102);var _super103=_createSuper(Tff_unitary_typeContext);function Tff_unitary_typeContext(parser,parent,invokingState){var _this103;_classCallCheck(this,Tff_unitary_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this103=_super103.call(this,parent,invokingState);_this103.parser=parser;_this103.ruleIndex=TPTPParser.RULE_tff_unitary_type;return _this103;}_createClass(Tff_unitary_typeContext,[{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_xprod_type\",value:function tff_xprod_type(){return this.getTypedRuleContext(Tff_xprod_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_unitary_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_unitary_type(this);}}}]);return Tff_unitary_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_atomic_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon103){_inherits(Tff_atomic_typeContext,_antlr4$ParserRuleCon103);var _super104=_createSuper(Tff_atomic_typeContext);function Tff_atomic_typeContext(parser,parent,invokingState){var _this104;_classCallCheck(this,Tff_atomic_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this104=_super104.call(this,parent,invokingState);_this104.parser=parser;_this104.ruleIndex=TPTPParser.RULE_tff_atomic_type;return _this104;}_createClass(Tff_atomic_typeContext,[{key:\"type_constant\",value:function type_constant(){return this.getTypedRuleContext(Type_constantContext,0);}},{key:\"defined_type\",value:function defined_type(){return this.getTypedRuleContext(Defined_typeContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"type_functor\",value:function type_functor(){return this.getTypedRuleContext(Type_functorContext,0);}},{key:\"tff_type_arguments\",value:function tff_type_arguments(){return this.getTypedRuleContext(Tff_type_argumentsContext,0);}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"txf_tuple_type\",value:function txf_tuple_type(){return this.getTypedRuleContext(Txf_tuple_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_atomic_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_atomic_type(this);}}}]);return Tff_atomic_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_type_argumentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon104){_inherits(Tff_type_argumentsContext,_antlr4$ParserRuleCon104);var _super105=_createSuper(Tff_type_argumentsContext);function Tff_type_argumentsContext(parser,parent,invokingState){var _this105;_classCallCheck(this,Tff_type_argumentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this105=_super105.call(this,parent,invokingState);_this105.parser=parser;_this105.ruleIndex=TPTPParser.RULE_tff_type_arguments;return _this105;}_createClass(Tff_type_argumentsContext,[{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_type_arguments\",value:function tff_type_arguments(){return this.getTypedRuleContext(Tff_type_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_type_arguments(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_type_arguments(this);}}}]);return Tff_type_argumentsContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_mapping_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon105){_inherits(Tff_mapping_typeContext,_antlr4$ParserRuleCon105);var _super106=_createSuper(Tff_mapping_typeContext);function Tff_mapping_typeContext(parser,parent,invokingState){var _this106;_classCallCheck(this,Tff_mapping_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this106=_super106.call(this,parent,invokingState);_this106.parser=parser;_this106.ruleIndex=TPTPParser.RULE_tff_mapping_type;return _this106;}_createClass(Tff_mapping_typeContext,[{key:\"tff_unitary_type\",value:function tff_unitary_type(){return this.getTypedRuleContext(Tff_unitary_typeContext,0);}},{key:\"Arrow\",value:function Arrow(){return this.getToken(TPTPParser.Arrow,0);}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_mapping_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_mapping_type(this);}}}]);return Tff_mapping_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_xprod_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon106){_inherits(Tff_xprod_typeContext,_antlr4$ParserRuleCon106);var _super107=_createSuper(Tff_xprod_typeContext);function Tff_xprod_typeContext(parser,parent,invokingState){var _this107;_classCallCheck(this,Tff_xprod_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this107=_super107.call(this,parent,invokingState);_this107.parser=parser;_this107.ruleIndex=TPTPParser.RULE_tff_xprod_type;return _this107;}_createClass(Tff_xprod_typeContext,[{key:\"tff_unitary_type\",value:function tff_unitary_type(){return this.getTypedRuleContext(Tff_unitary_typeContext,0);}},{key:\"Star\",value:function Star(){return this.getToken(TPTPParser.Star,0);}},{key:\"tff_atomic_type\",value:function tff_atomic_type(){return this.getTypedRuleContext(Tff_atomic_typeContext,0);}},{key:\"tff_xprod_type\",value:function tff_xprod_type(){return this.getTypedRuleContext(Tff_xprod_typeContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_xprod_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_xprod_type(this);}}}]);return Tff_xprod_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_tuple_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon107){_inherits(Txf_tuple_typeContext,_antlr4$ParserRuleCon107);var _super108=_createSuper(Txf_tuple_typeContext);function Txf_tuple_typeContext(parser,parent,invokingState){var _this108;_classCallCheck(this,Txf_tuple_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this108=_super108.call(this,parent,invokingState);_this108.parser=parser;_this108.ruleIndex=TPTPParser.RULE_txf_tuple_type;return _this108;}_createClass(Txf_tuple_typeContext,[{key:\"tff_type_list\",value:function tff_type_list(){return this.getTypedRuleContext(Tff_type_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_tuple_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_tuple_type(this);}}}]);return Txf_tuple_typeContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_type_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon108){_inherits(Tff_type_listContext,_antlr4$ParserRuleCon108);var _super109=_createSuper(Tff_type_listContext);function Tff_type_listContext(parser,parent,invokingState){var _this109;_classCallCheck(this,Tff_type_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this109=_super109.call(this,parent,invokingState);_this109.parser=parser;_this109.ruleIndex=TPTPParser.RULE_tff_type_list;return _this109;}_createClass(Tff_type_listContext,[{key:\"tff_top_level_type\",value:function tff_top_level_type(){return this.getTypedRuleContext(Tff_top_level_typeContext,0);}},{key:\"tff_type_list\",value:function tff_type_list(){return this.getTypedRuleContext(Tff_type_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_type_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_type_list(this);}}}]);return Tff_type_listContext;}(_antlr[\"default\"].ParserRuleContext);var Tff_subtypeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon109){_inherits(Tff_subtypeContext,_antlr4$ParserRuleCon109);var _super110=_createSuper(Tff_subtypeContext);function Tff_subtypeContext(parser,parent,invokingState){var _this110;_classCallCheck(this,Tff_subtypeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this110=_super110.call(this,parent,invokingState);_this110.parser=parser;_this110.ruleIndex=TPTPParser.RULE_tff_subtype;return _this110;}_createClass(Tff_subtypeContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"Subtype_sign\",value:function Subtype_sign(){return this.getToken(TPTPParser.Subtype_sign,0);}},{key:\"atom\",value:function atom(){return this.getTypedRuleContext(AtomContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTff_subtype(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTff_subtype(this);}}}]);return Tff_subtypeContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_definitionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon110){_inherits(Txf_definitionContext,_antlr4$ParserRuleCon110);var _super111=_createSuper(Txf_definitionContext);function Txf_definitionContext(parser,parent,invokingState){var _this111;_classCallCheck(this,Txf_definitionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this111=_super111.call(this,parent,invokingState);_this111.parser=parser;_this111.ruleIndex=TPTPParser.RULE_txf_definition;return _this111;}_createClass(Txf_definitionContext,[{key:\"tff_atomic_formula\",value:function tff_atomic_formula(){return this.getTypedRuleContext(Tff_atomic_formulaContext,0);}},{key:\"Identical\",value:function Identical(){return this.getToken(TPTPParser.Identical,0);}},{key:\"tff_term\",value:function tff_term(){return this.getTypedRuleContext(Tff_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_definition(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_definition(this);}}}]);return Txf_definitionContext;}(_antlr[\"default\"].ParserRuleContext);var Txf_sequentContext=/*#__PURE__*/function(_antlr4$ParserRuleCon111){_inherits(Txf_sequentContext,_antlr4$ParserRuleCon111);var _super112=_createSuper(Txf_sequentContext);function Txf_sequentContext(parser,parent,invokingState){var _this112;_classCallCheck(this,Txf_sequentContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this112=_super112.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this112),\"txf_tuple\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Txf_tupleContext);}else{return this.getTypedRuleContext(Txf_tupleContext,i);}});_this112.parser=parser;_this112.ruleIndex=TPTPParser.RULE_txf_sequent;return _this112;}_createClass(Txf_sequentContext,[{key:\"Gentzen_arrow\",value:function Gentzen_arrow(){return this.getToken(TPTPParser.Gentzen_arrow,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTxf_sequent(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTxf_sequent(this);}}}]);return Txf_sequentContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon112){_inherits(Ntf_connectiveContext,_antlr4$ParserRuleCon112);var _super113=_createSuper(Ntf_connectiveContext);function Ntf_connectiveContext(parser,parent,invokingState){var _this113;_classCallCheck(this,Ntf_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this113=_super113.call(this,parent,invokingState);_this113.parser=parser;_this113.ruleIndex=TPTPParser.RULE_ntf_connective;return _this113;}_createClass(Ntf_connectiveContext,[{key:\"ntf_short_connective\",value:function ntf_short_connective(){return this.getTypedRuleContext(Ntf_short_connectiveContext,0);}},{key:\"ntf_long_connective\",value:function ntf_long_connective(){return this.getTypedRuleContext(Ntf_long_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_connective(this);}}}]);return Ntf_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_short_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon113){_inherits(Ntf_short_connectiveContext,_antlr4$ParserRuleCon113);var _super114=_createSuper(Ntf_short_connectiveContext);function Ntf_short_connectiveContext(parser,parent,invokingState){var _this114;_classCallCheck(this,Ntf_short_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this114=_super114.call(this,parent,invokingState);_this114.parser=parser;_this114.ruleIndex=TPTPParser.RULE_ntf_short_connective;return _this114;}_createClass(Ntf_short_connectiveContext,[{key:\"ntf_index\",value:function ntf_index(){return this.getTypedRuleContext(Ntf_indexContext,0);}},{key:\"Arrow\",value:function Arrow(){return this.getToken(TPTPParser.Arrow,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_short_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_short_connective(this);}}}]);return Ntf_short_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_long_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon114){_inherits(Ntf_long_connectiveContext,_antlr4$ParserRuleCon114);var _super115=_createSuper(Ntf_long_connectiveContext);function Ntf_long_connectiveContext(parser,parent,invokingState){var _this115;_classCallCheck(this,Ntf_long_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this115=_super115.call(this,parent,invokingState);_this115.parser=parser;_this115.ruleIndex=TPTPParser.RULE_ntf_long_connective;return _this115;}_createClass(Ntf_long_connectiveContext,[{key:\"ntf_connective_name\",value:function ntf_connective_name(){return this.getTypedRuleContext(Ntf_connective_nameContext,0);}},{key:\"ntf_parameter_list\",value:function ntf_parameter_list(){return this.getTypedRuleContext(Ntf_parameter_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_long_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_long_connective(this);}}}]);return Ntf_long_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_connective_nameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon115){_inherits(Ntf_connective_nameContext,_antlr4$ParserRuleCon115);var _super116=_createSuper(Ntf_connective_nameContext);function Ntf_connective_nameContext(parser,parent,invokingState){var _this116;_classCallCheck(this,Ntf_connective_nameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this116=_super116.call(this,parent,invokingState);_this116.parser=parser;_this116.ruleIndex=TPTPParser.RULE_ntf_connective_name;return _this116;}_createClass(Ntf_connective_nameContext,[{key:\"def_or_sys_constant\",value:function def_or_sys_constant(){return this.getTypedRuleContext(Def_or_sys_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_connective_name(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_connective_name(this);}}}]);return Ntf_connective_nameContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_parameter_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon116){_inherits(Ntf_parameter_listContext,_antlr4$ParserRuleCon116);var _super117=_createSuper(Ntf_parameter_listContext);function Ntf_parameter_listContext(parser,parent,invokingState){var _this117;_classCallCheck(this,Ntf_parameter_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this117=_super117.call(this,parent,invokingState);_this117.parser=parser;_this117.ruleIndex=TPTPParser.RULE_ntf_parameter_list;return _this117;}_createClass(Ntf_parameter_listContext,[{key:\"ntf_parameter\",value:function ntf_parameter(){return this.getTypedRuleContext(Ntf_parameterContext,0);}},{key:\"ntf_parameter_list\",value:function ntf_parameter_list(){return this.getTypedRuleContext(Ntf_parameter_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_parameter_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_parameter_list(this);}}}]);return Ntf_parameter_listContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_parameterContext=/*#__PURE__*/function(_antlr4$ParserRuleCon117){_inherits(Ntf_parameterContext,_antlr4$ParserRuleCon117);var _super118=_createSuper(Ntf_parameterContext);function Ntf_parameterContext(parser,parent,invokingState){var _this118;_classCallCheck(this,Ntf_parameterContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this118=_super118.call(this,parent,invokingState);_this118.parser=parser;_this118.ruleIndex=TPTPParser.RULE_ntf_parameter;return _this118;}_createClass(Ntf_parameterContext,[{key:\"ntf_index\",value:function ntf_index(){return this.getTypedRuleContext(Ntf_indexContext,0);}},{key:\"ntf_key_pair\",value:function ntf_key_pair(){return this.getTypedRuleContext(Ntf_key_pairContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_parameter(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_parameter(this);}}}]);return Ntf_parameterContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_indexContext=/*#__PURE__*/function(_antlr4$ParserRuleCon118){_inherits(Ntf_indexContext,_antlr4$ParserRuleCon118);var _super119=_createSuper(Ntf_indexContext);function Ntf_indexContext(parser,parent,invokingState){var _this119;_classCallCheck(this,Ntf_indexContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this119=_super119.call(this,parent,invokingState);_this119.parser=parser;_this119.ruleIndex=TPTPParser.RULE_ntf_index;return _this119;}_createClass(Ntf_indexContext,[{key:\"Hash\",value:function Hash(){return this.getToken(TPTPParser.Hash,0);}},{key:\"tff_unitary_term\",value:function tff_unitary_term(){return this.getTypedRuleContext(Tff_unitary_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_index(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_index(this);}}}]);return Ntf_indexContext;}(_antlr[\"default\"].ParserRuleContext);var Ntf_key_pairContext=/*#__PURE__*/function(_antlr4$ParserRuleCon119){_inherits(Ntf_key_pairContext,_antlr4$ParserRuleCon119);var _super120=_createSuper(Ntf_key_pairContext);function Ntf_key_pairContext(parser,parent,invokingState){var _this120;_classCallCheck(this,Ntf_key_pairContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this120=_super120.call(this,parent,invokingState);_this120.parser=parser;_this120.ruleIndex=TPTPParser.RULE_ntf_key_pair;return _this120;}_createClass(Ntf_key_pairContext,[{key:\"def_or_sys_constant\",value:function def_or_sys_constant(){return this.getTypedRuleContext(Def_or_sys_constantContext,0);}},{key:\"Assignment\",value:function Assignment(){return this.getToken(TPTPParser.Assignment,0);}},{key:\"tff_unitary_term\",value:function tff_unitary_term(){return this.getTypedRuleContext(Tff_unitary_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNtf_key_pair(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNtf_key_pair(this);}}}]);return Ntf_key_pairContext;}(_antlr[\"default\"].ParserRuleContext);var Logic_defn_ruleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon120){_inherits(Logic_defn_ruleContext,_antlr4$ParserRuleCon120);var _super121=_createSuper(Logic_defn_ruleContext);function Logic_defn_ruleContext(parser,parent,invokingState){var _this121;_classCallCheck(this,Logic_defn_ruleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this121=_super121.call(this,parent,invokingState);_this121.parser=parser;_this121.ruleIndex=TPTPParser.RULE_logic_defn_rule;return _this121;}_createClass(Logic_defn_ruleContext,[{key:\"logic_defn_LHS\",value:function logic_defn_LHS(){return this.getTypedRuleContext(Logic_defn_LHSContext,0);}},{key:\"Identical\",value:function Identical(){return this.getToken(TPTPParser.Identical,0);}},{key:\"logic_defn_RHS\",value:function logic_defn_RHS(){return this.getTypedRuleContext(Logic_defn_RHSContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterLogic_defn_rule(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitLogic_defn_rule(this);}}}]);return Logic_defn_ruleContext;}(_antlr[\"default\"].ParserRuleContext);var Logic_defn_LHSContext=/*#__PURE__*/function(_antlr4$ParserRuleCon121){_inherits(Logic_defn_LHSContext,_antlr4$ParserRuleCon121);var _super122=_createSuper(Logic_defn_LHSContext);function Logic_defn_LHSContext(parser,parent,invokingState){var _this122;_classCallCheck(this,Logic_defn_LHSContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this122=_super122.call(this,parent,invokingState);_this122.parser=parser;_this122.ruleIndex=TPTPParser.RULE_logic_defn_LHS;return _this122;}_createClass(Logic_defn_LHSContext,[{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterLogic_defn_LHS(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitLogic_defn_LHS(this);}}}]);return Logic_defn_LHSContext;}(_antlr[\"default\"].ParserRuleContext);var Logic_defn_RHSContext=/*#__PURE__*/function(_antlr4$ParserRuleCon122){_inherits(Logic_defn_RHSContext,_antlr4$ParserRuleCon122);var _super123=_createSuper(Logic_defn_RHSContext);function Logic_defn_RHSContext(parser,parent,invokingState){var _this123;_classCallCheck(this,Logic_defn_RHSContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this123=_super123.call(this,parent,invokingState);_this123.parser=parser;_this123.ruleIndex=TPTPParser.RULE_logic_defn_RHS;return _this123;}_createClass(Logic_defn_RHSContext,[{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"txf_tuple\",value:function txf_tuple(){return this.getTypedRuleContext(Txf_tupleContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterLogic_defn_RHS(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitLogic_defn_RHS(this);}}}]);return Logic_defn_RHSContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon123){_inherits(Tcf_formulaContext,_antlr4$ParserRuleCon123);var _super124=_createSuper(Tcf_formulaContext);function Tcf_formulaContext(parser,parent,invokingState){var _this124;_classCallCheck(this,Tcf_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this124=_super124.call(this,parent,invokingState);_this124.parser=parser;_this124.ruleIndex=TPTPParser.RULE_tcf_formula;return _this124;}_createClass(Tcf_formulaContext,[{key:\"tcf_logic_formula\",value:function tcf_logic_formula(){return this.getTypedRuleContext(Tcf_logic_formulaContext,0);}},{key:\"tff_atom_typing\",value:function tff_atom_typing(){return this.getTypedRuleContext(Tff_atom_typingContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTcf_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTcf_formula(this);}}}]);return Tcf_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon124){_inherits(Tcf_logic_formulaContext,_antlr4$ParserRuleCon124);var _super125=_createSuper(Tcf_logic_formulaContext);function Tcf_logic_formulaContext(parser,parent,invokingState){var _this125;_classCallCheck(this,Tcf_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this125=_super125.call(this,parent,invokingState);_this125.parser=parser;_this125.ruleIndex=TPTPParser.RULE_tcf_logic_formula;return _this125;}_createClass(Tcf_logic_formulaContext,[{key:\"tcf_quantified_formula\",value:function tcf_quantified_formula(){return this.getTypedRuleContext(Tcf_quantified_formulaContext,0);}},{key:\"cnf_formula\",value:function cnf_formula(){return this.getTypedRuleContext(Cnf_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTcf_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTcf_logic_formula(this);}}}]);return Tcf_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Tcf_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon125){_inherits(Tcf_quantified_formulaContext,_antlr4$ParserRuleCon125);var _super126=_createSuper(Tcf_quantified_formulaContext);function Tcf_quantified_formulaContext(parser,parent,invokingState){var _this126;_classCallCheck(this,Tcf_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this126=_super126.call(this,parent,invokingState);_this126.parser=parser;_this126.ruleIndex=TPTPParser.RULE_tcf_quantified_formula;return _this126;}_createClass(Tcf_quantified_formulaContext,[{key:\"Forall\",value:function Forall(){return this.getToken(TPTPParser.Forall,0);}},{key:\"tff_variable_list\",value:function tff_variable_list(){return this.getTypedRuleContext(Tff_variable_listContext,0);}},{key:\"tcf_logic_formula\",value:function tcf_logic_formula(){return this.getTypedRuleContext(Tcf_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTcf_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTcf_quantified_formula(this);}}}]);return Tcf_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon126){_inherits(Fof_formulaContext,_antlr4$ParserRuleCon126);var _super127=_createSuper(Fof_formulaContext);function Fof_formulaContext(parser,parent,invokingState){var _this127;_classCallCheck(this,Fof_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this127=_super127.call(this,parent,invokingState);_this127.parser=parser;_this127.ruleIndex=TPTPParser.RULE_fof_formula;return _this127;}_createClass(Fof_formulaContext,[{key:\"fof_logic_formula\",value:function fof_logic_formula(){return this.getTypedRuleContext(Fof_logic_formulaContext,0);}},{key:\"fof_sequent\",value:function fof_sequent(){return this.getTypedRuleContext(Fof_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_formula(this);}}}]);return Fof_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_logic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon127){_inherits(Fof_logic_formulaContext,_antlr4$ParserRuleCon127);var _super128=_createSuper(Fof_logic_formulaContext);function Fof_logic_formulaContext(parser,parent,invokingState){var _this128;_classCallCheck(this,Fof_logic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this128=_super128.call(this,parent,invokingState);_this128.parser=parser;_this128.ruleIndex=TPTPParser.RULE_fof_logic_formula;return _this128;}_createClass(Fof_logic_formulaContext,[{key:\"fof_binary_formula\",value:function fof_binary_formula(){return this.getTypedRuleContext(Fof_binary_formulaContext,0);}},{key:\"fof_unary_formula\",value:function fof_unary_formula(){return this.getTypedRuleContext(Fof_unary_formulaContext,0);}},{key:\"fof_unitary_formula\",value:function fof_unitary_formula(){return this.getTypedRuleContext(Fof_unitary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_logic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_logic_formula(this);}}}]);return Fof_logic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_binary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon128){_inherits(Fof_binary_formulaContext,_antlr4$ParserRuleCon128);var _super129=_createSuper(Fof_binary_formulaContext);function Fof_binary_formulaContext(parser,parent,invokingState){var _this129;_classCallCheck(this,Fof_binary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this129=_super129.call(this,parent,invokingState);_this129.parser=parser;_this129.ruleIndex=TPTPParser.RULE_fof_binary_formula;return _this129;}_createClass(Fof_binary_formulaContext,[{key:\"fof_binary_nonassoc\",value:function fof_binary_nonassoc(){return this.getTypedRuleContext(Fof_binary_nonassocContext,0);}},{key:\"fof_binary_assoc\",value:function fof_binary_assoc(){return this.getTypedRuleContext(Fof_binary_assocContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_binary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_binary_formula(this);}}}]);return Fof_binary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_binary_nonassocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon129){_inherits(Fof_binary_nonassocContext,_antlr4$ParserRuleCon129);var _super130=_createSuper(Fof_binary_nonassocContext);function Fof_binary_nonassocContext(parser,parent,invokingState){var _this130;_classCallCheck(this,Fof_binary_nonassocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this130=_super130.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this130),\"fof_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_unit_formulaContext);}else{return this.getTypedRuleContext(Fof_unit_formulaContext,i);}});_this130.parser=parser;_this130.ruleIndex=TPTPParser.RULE_fof_binary_nonassoc;return _this130;}_createClass(Fof_binary_nonassocContext,[{key:\"nonassoc_connective\",value:function nonassoc_connective(){return this.getTypedRuleContext(Nonassoc_connectiveContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_binary_nonassoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_binary_nonassoc(this);}}}]);return Fof_binary_nonassocContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_binary_assocContext=/*#__PURE__*/function(_antlr4$ParserRuleCon130){_inherits(Fof_binary_assocContext,_antlr4$ParserRuleCon130);var _super131=_createSuper(Fof_binary_assocContext);function Fof_binary_assocContext(parser,parent,invokingState){var _this131;_classCallCheck(this,Fof_binary_assocContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this131=_super131.call(this,parent,invokingState);_this131.parser=parser;_this131.ruleIndex=TPTPParser.RULE_fof_binary_assoc;return _this131;}_createClass(Fof_binary_assocContext,[{key:\"fof_or_formula\",value:function fof_or_formula(){return this.getTypedRuleContext(Fof_or_formulaContext,0);}},{key:\"fof_and_formula\",value:function fof_and_formula(){return this.getTypedRuleContext(Fof_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_binary_assoc(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_binary_assoc(this);}}}]);return Fof_binary_assocContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_or_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon131){_inherits(Fof_or_formulaContext,_antlr4$ParserRuleCon131);var _super132=_createSuper(Fof_or_formulaContext);function Fof_or_formulaContext(parser,parent,invokingState){var _this132;_classCallCheck(this,Fof_or_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this132=_super132.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this132),\"fof_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_unit_formulaContext);}else{return this.getTypedRuleContext(Fof_unit_formulaContext,i);}});_this132.parser=parser;_this132.ruleIndex=TPTPParser.RULE_fof_or_formula;return _this132;}_createClass(Fof_or_formulaContext,[{key:\"Or\",value:function Or(){return this.getToken(TPTPParser.Or,0);}},{key:\"fof_or_formula\",value:function fof_or_formula(){return this.getTypedRuleContext(Fof_or_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_or_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_or_formula(this);}}}]);return Fof_or_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_and_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon132){_inherits(Fof_and_formulaContext,_antlr4$ParserRuleCon132);var _super133=_createSuper(Fof_and_formulaContext);function Fof_and_formulaContext(parser,parent,invokingState){var _this133;_classCallCheck(this,Fof_and_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this133=_super133.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this133),\"fof_unit_formula\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_unit_formulaContext);}else{return this.getTypedRuleContext(Fof_unit_formulaContext,i);}});_this133.parser=parser;_this133.ruleIndex=TPTPParser.RULE_fof_and_formula;return _this133;}_createClass(Fof_and_formulaContext,[{key:\"And\",value:function And(){return this.getToken(TPTPParser.And,0);}},{key:\"fof_and_formula\",value:function fof_and_formula(){return this.getTypedRuleContext(Fof_and_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_and_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_and_formula(this);}}}]);return Fof_and_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_unary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon133){_inherits(Fof_unary_formulaContext,_antlr4$ParserRuleCon133);var _super134=_createSuper(Fof_unary_formulaContext);function Fof_unary_formulaContext(parser,parent,invokingState){var _this134;_classCallCheck(this,Fof_unary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this134=_super134.call(this,parent,invokingState);_this134.parser=parser;_this134.ruleIndex=TPTPParser.RULE_fof_unary_formula;return _this134;}_createClass(Fof_unary_formulaContext,[{key:\"unary_connective\",value:function unary_connective(){return this.getTypedRuleContext(Unary_connectiveContext,0);}},{key:\"fof_unit_formula\",value:function fof_unit_formula(){return this.getTypedRuleContext(Fof_unit_formulaContext,0);}},{key:\"fof_infix_unary\",value:function fof_infix_unary(){return this.getTypedRuleContext(Fof_infix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_unary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_unary_formula(this);}}}]);return Fof_unary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_infix_unaryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon134){_inherits(Fof_infix_unaryContext,_antlr4$ParserRuleCon134);var _super135=_createSuper(Fof_infix_unaryContext);function Fof_infix_unaryContext(parser,parent,invokingState){var _this135;_classCallCheck(this,Fof_infix_unaryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this135=_super135.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this135),\"fof_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_termContext);}else{return this.getTypedRuleContext(Fof_termContext,i);}});_this135.parser=parser;_this135.ruleIndex=TPTPParser.RULE_fof_infix_unary;return _this135;}_createClass(Fof_infix_unaryContext,[{key:\"Infix_inequality\",value:function Infix_inequality(){return this.getToken(TPTPParser.Infix_inequality,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_infix_unary(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_infix_unary(this);}}}]);return Fof_infix_unaryContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_unit_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon135){_inherits(Fof_unit_formulaContext,_antlr4$ParserRuleCon135);var _super136=_createSuper(Fof_unit_formulaContext);function Fof_unit_formulaContext(parser,parent,invokingState){var _this136;_classCallCheck(this,Fof_unit_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this136=_super136.call(this,parent,invokingState);_this136.parser=parser;_this136.ruleIndex=TPTPParser.RULE_fof_unit_formula;return _this136;}_createClass(Fof_unit_formulaContext,[{key:\"fof_unitary_formula\",value:function fof_unitary_formula(){return this.getTypedRuleContext(Fof_unitary_formulaContext,0);}},{key:\"fof_unary_formula\",value:function fof_unary_formula(){return this.getTypedRuleContext(Fof_unary_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_unit_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_unit_formula(this);}}}]);return Fof_unit_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_unitary_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon136){_inherits(Fof_unitary_formulaContext,_antlr4$ParserRuleCon136);var _super137=_createSuper(Fof_unitary_formulaContext);function Fof_unitary_formulaContext(parser,parent,invokingState){var _this137;_classCallCheck(this,Fof_unitary_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this137=_super137.call(this,parent,invokingState);_this137.parser=parser;_this137.ruleIndex=TPTPParser.RULE_fof_unitary_formula;return _this137;}_createClass(Fof_unitary_formulaContext,[{key:\"fof_quantified_formula\",value:function fof_quantified_formula(){return this.getTypedRuleContext(Fof_quantified_formulaContext,0);}},{key:\"fof_atomic_formula\",value:function fof_atomic_formula(){return this.getTypedRuleContext(Fof_atomic_formulaContext,0);}},{key:\"fof_logic_formula\",value:function fof_logic_formula(){return this.getTypedRuleContext(Fof_logic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_unitary_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_unitary_formula(this);}}}]);return Fof_unitary_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_quantified_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon137){_inherits(Fof_quantified_formulaContext,_antlr4$ParserRuleCon137);var _super138=_createSuper(Fof_quantified_formulaContext);function Fof_quantified_formulaContext(parser,parent,invokingState){var _this138;_classCallCheck(this,Fof_quantified_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this138=_super138.call(this,parent,invokingState);_this138.parser=parser;_this138.ruleIndex=TPTPParser.RULE_fof_quantified_formula;return _this138;}_createClass(Fof_quantified_formulaContext,[{key:\"fof_quantifier\",value:function fof_quantifier(){return this.getTypedRuleContext(Fof_quantifierContext,0);}},{key:\"fof_variable_list\",value:function fof_variable_list(){return this.getTypedRuleContext(Fof_variable_listContext,0);}},{key:\"fof_unit_formula\",value:function fof_unit_formula(){return this.getTypedRuleContext(Fof_unit_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_quantified_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_quantified_formula(this);}}}]);return Fof_quantified_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_variable_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon138){_inherits(Fof_variable_listContext,_antlr4$ParserRuleCon138);var _super139=_createSuper(Fof_variable_listContext);function Fof_variable_listContext(parser,parent,invokingState){var _this139;_classCallCheck(this,Fof_variable_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this139=_super139.call(this,parent,invokingState);_this139.parser=parser;_this139.ruleIndex=TPTPParser.RULE_fof_variable_list;return _this139;}_createClass(Fof_variable_listContext,[{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"fof_variable_list\",value:function fof_variable_list(){return this.getTypedRuleContext(Fof_variable_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_variable_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_variable_list(this);}}}]);return Fof_variable_listContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon139){_inherits(Fof_atomic_formulaContext,_antlr4$ParserRuleCon139);var _super140=_createSuper(Fof_atomic_formulaContext);function Fof_atomic_formulaContext(parser,parent,invokingState){var _this140;_classCallCheck(this,Fof_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this140=_super140.call(this,parent,invokingState);_this140.parser=parser;_this140.ruleIndex=TPTPParser.RULE_fof_atomic_formula;return _this140;}_createClass(Fof_atomic_formulaContext,[{key:\"fof_plain_atomic_formula\",value:function fof_plain_atomic_formula(){return this.getTypedRuleContext(Fof_plain_atomic_formulaContext,0);}},{key:\"fof_defined_atomic_formula\",value:function fof_defined_atomic_formula(){return this.getTypedRuleContext(Fof_defined_atomic_formulaContext,0);}},{key:\"fof_system_atomic_formula\",value:function fof_system_atomic_formula(){return this.getTypedRuleContext(Fof_system_atomic_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_atomic_formula(this);}}}]);return Fof_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_plain_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon140){_inherits(Fof_plain_atomic_formulaContext,_antlr4$ParserRuleCon140);var _super141=_createSuper(Fof_plain_atomic_formulaContext);function Fof_plain_atomic_formulaContext(parser,parent,invokingState){var _this141;_classCallCheck(this,Fof_plain_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this141=_super141.call(this,parent,invokingState);_this141.parser=parser;_this141.ruleIndex=TPTPParser.RULE_fof_plain_atomic_formula;return _this141;}_createClass(Fof_plain_atomic_formulaContext,[{key:\"fof_plain_term\",value:function fof_plain_term(){return this.getTypedRuleContext(Fof_plain_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_plain_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_plain_atomic_formula(this);}}}]);return Fof_plain_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon141){_inherits(Fof_defined_atomic_formulaContext,_antlr4$ParserRuleCon141);var _super142=_createSuper(Fof_defined_atomic_formulaContext);function Fof_defined_atomic_formulaContext(parser,parent,invokingState){var _this142;_classCallCheck(this,Fof_defined_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this142=_super142.call(this,parent,invokingState);_this142.parser=parser;_this142.ruleIndex=TPTPParser.RULE_fof_defined_atomic_formula;return _this142;}_createClass(Fof_defined_atomic_formulaContext,[{key:\"fof_defined_plain_formula\",value:function fof_defined_plain_formula(){return this.getTypedRuleContext(Fof_defined_plain_formulaContext,0);}},{key:\"fof_defined_infix_formula\",value:function fof_defined_infix_formula(){return this.getTypedRuleContext(Fof_defined_infix_formulaContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_defined_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_defined_atomic_formula(this);}}}]);return Fof_defined_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_plain_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon142){_inherits(Fof_defined_plain_formulaContext,_antlr4$ParserRuleCon142);var _super143=_createSuper(Fof_defined_plain_formulaContext);function Fof_defined_plain_formulaContext(parser,parent,invokingState){var _this143;_classCallCheck(this,Fof_defined_plain_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this143=_super143.call(this,parent,invokingState);_this143.parser=parser;_this143.ruleIndex=TPTPParser.RULE_fof_defined_plain_formula;return _this143;}_createClass(Fof_defined_plain_formulaContext,[{key:\"fof_defined_plain_term\",value:function fof_defined_plain_term(){return this.getTypedRuleContext(Fof_defined_plain_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_defined_plain_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_defined_plain_formula(this);}}}]);return Fof_defined_plain_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_infix_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon143){_inherits(Fof_defined_infix_formulaContext,_antlr4$ParserRuleCon143);var _super144=_createSuper(Fof_defined_infix_formulaContext);function Fof_defined_infix_formulaContext(parser,parent,invokingState){var _this144;_classCallCheck(this,Fof_defined_infix_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this144=_super144.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this144),\"fof_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_termContext);}else{return this.getTypedRuleContext(Fof_termContext,i);}});_this144.parser=parser;_this144.ruleIndex=TPTPParser.RULE_fof_defined_infix_formula;return _this144;}_createClass(Fof_defined_infix_formulaContext,[{key:\"defined_infix_pred\",value:function defined_infix_pred(){return this.getTypedRuleContext(Defined_infix_predContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_defined_infix_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_defined_infix_formula(this);}}}]);return Fof_defined_infix_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_system_atomic_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon144){_inherits(Fof_system_atomic_formulaContext,_antlr4$ParserRuleCon144);var _super145=_createSuper(Fof_system_atomic_formulaContext);function Fof_system_atomic_formulaContext(parser,parent,invokingState){var _this145;_classCallCheck(this,Fof_system_atomic_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this145=_super145.call(this,parent,invokingState);_this145.parser=parser;_this145.ruleIndex=TPTPParser.RULE_fof_system_atomic_formula;return _this145;}_createClass(Fof_system_atomic_formulaContext,[{key:\"fof_system_term\",value:function fof_system_term(){return this.getTypedRuleContext(Fof_system_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_system_atomic_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_system_atomic_formula(this);}}}]);return Fof_system_atomic_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_plain_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon145){_inherits(Fof_plain_termContext,_antlr4$ParserRuleCon145);var _super146=_createSuper(Fof_plain_termContext);function Fof_plain_termContext(parser,parent,invokingState){var _this146;_classCallCheck(this,Fof_plain_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this146=_super146.call(this,parent,invokingState);_this146.parser=parser;_this146.ruleIndex=TPTPParser.RULE_fof_plain_term;return _this146;}_createClass(Fof_plain_termContext,[{key:\"constant\",value:function constant(){return this.getTypedRuleContext(ConstantContext,0);}},{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_plain_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_plain_term(this);}}}]);return Fof_plain_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon146){_inherits(Fof_defined_termContext,_antlr4$ParserRuleCon146);var _super147=_createSuper(Fof_defined_termContext);function Fof_defined_termContext(parser,parent,invokingState){var _this147;_classCallCheck(this,Fof_defined_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this147=_super147.call(this,parent,invokingState);_this147.parser=parser;_this147.ruleIndex=TPTPParser.RULE_fof_defined_term;return _this147;}_createClass(Fof_defined_termContext,[{key:\"defined_term\",value:function defined_term(){return this.getTypedRuleContext(Defined_termContext,0);}},{key:\"fof_defined_atomic_term\",value:function fof_defined_atomic_term(){return this.getTypedRuleContext(Fof_defined_atomic_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_defined_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_defined_term(this);}}}]);return Fof_defined_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_atomic_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon147){_inherits(Fof_defined_atomic_termContext,_antlr4$ParserRuleCon147);var _super148=_createSuper(Fof_defined_atomic_termContext);function Fof_defined_atomic_termContext(parser,parent,invokingState){var _this148;_classCallCheck(this,Fof_defined_atomic_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this148=_super148.call(this,parent,invokingState);_this148.parser=parser;_this148.ruleIndex=TPTPParser.RULE_fof_defined_atomic_term;return _this148;}_createClass(Fof_defined_atomic_termContext,[{key:\"fof_defined_plain_term\",value:function fof_defined_plain_term(){return this.getTypedRuleContext(Fof_defined_plain_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_defined_atomic_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_defined_atomic_term(this);}}}]);return Fof_defined_atomic_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_defined_plain_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon148){_inherits(Fof_defined_plain_termContext,_antlr4$ParserRuleCon148);var _super149=_createSuper(Fof_defined_plain_termContext);function Fof_defined_plain_termContext(parser,parent,invokingState){var _this149;_classCallCheck(this,Fof_defined_plain_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this149=_super149.call(this,parent,invokingState);_this149.parser=parser;_this149.ruleIndex=TPTPParser.RULE_fof_defined_plain_term;return _this149;}_createClass(Fof_defined_plain_termContext,[{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"defined_functor\",value:function defined_functor(){return this.getTypedRuleContext(Defined_functorContext,0);}},{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_defined_plain_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_defined_plain_term(this);}}}]);return Fof_defined_plain_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_system_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon149){_inherits(Fof_system_termContext,_antlr4$ParserRuleCon149);var _super150=_createSuper(Fof_system_termContext);function Fof_system_termContext(parser,parent,invokingState){var _this150;_classCallCheck(this,Fof_system_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this150=_super150.call(this,parent,invokingState);_this150.parser=parser;_this150.ruleIndex=TPTPParser.RULE_fof_system_term;return _this150;}_createClass(Fof_system_termContext,[{key:\"system_constant\",value:function system_constant(){return this.getTypedRuleContext(System_constantContext,0);}},{key:\"system_functor\",value:function system_functor(){return this.getTypedRuleContext(System_functorContext,0);}},{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_system_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_system_term(this);}}}]);return Fof_system_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_argumentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon150){_inherits(Fof_argumentsContext,_antlr4$ParserRuleCon150);var _super151=_createSuper(Fof_argumentsContext);function Fof_argumentsContext(parser,parent,invokingState){var _this151;_classCallCheck(this,Fof_argumentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this151=_super151.call(this,parent,invokingState);_this151.parser=parser;_this151.ruleIndex=TPTPParser.RULE_fof_arguments;return _this151;}_createClass(Fof_argumentsContext,[{key:\"fof_term\",value:function fof_term(){return this.getTypedRuleContext(Fof_termContext,0);}},{key:\"fof_arguments\",value:function fof_arguments(){return this.getTypedRuleContext(Fof_argumentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_arguments(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_arguments(this);}}}]);return Fof_argumentsContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon151){_inherits(Fof_termContext,_antlr4$ParserRuleCon151);var _super152=_createSuper(Fof_termContext);function Fof_termContext(parser,parent,invokingState){var _this152;_classCallCheck(this,Fof_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this152=_super152.call(this,parent,invokingState);_this152.parser=parser;_this152.ruleIndex=TPTPParser.RULE_fof_term;return _this152;}_createClass(Fof_termContext,[{key:\"fof_function_term\",value:function fof_function_term(){return this.getTypedRuleContext(Fof_function_termContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_term(this);}}}]);return Fof_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_function_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon152){_inherits(Fof_function_termContext,_antlr4$ParserRuleCon152);var _super153=_createSuper(Fof_function_termContext);function Fof_function_termContext(parser,parent,invokingState){var _this153;_classCallCheck(this,Fof_function_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this153=_super153.call(this,parent,invokingState);_this153.parser=parser;_this153.ruleIndex=TPTPParser.RULE_fof_function_term;return _this153;}_createClass(Fof_function_termContext,[{key:\"fof_plain_term\",value:function fof_plain_term(){return this.getTypedRuleContext(Fof_plain_termContext,0);}},{key:\"fof_defined_term\",value:function fof_defined_term(){return this.getTypedRuleContext(Fof_defined_termContext,0);}},{key:\"fof_system_term\",value:function fof_system_term(){return this.getTypedRuleContext(Fof_system_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_function_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_function_term(this);}}}]);return Fof_function_termContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_sequentContext=/*#__PURE__*/function(_antlr4$ParserRuleCon153){_inherits(Fof_sequentContext,_antlr4$ParserRuleCon153);var _super154=_createSuper(Fof_sequentContext);function Fof_sequentContext(parser,parent,invokingState){var _this154;_classCallCheck(this,Fof_sequentContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this154=_super154.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this154),\"fof_formula_tuple\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Fof_formula_tupleContext);}else{return this.getTypedRuleContext(Fof_formula_tupleContext,i);}});_this154.parser=parser;_this154.ruleIndex=TPTPParser.RULE_fof_sequent;return _this154;}_createClass(Fof_sequentContext,[{key:\"Gentzen_arrow\",value:function Gentzen_arrow(){return this.getToken(TPTPParser.Gentzen_arrow,0);}},{key:\"fof_sequent\",value:function fof_sequent(){return this.getTypedRuleContext(Fof_sequentContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_sequent(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_sequent(this);}}}]);return Fof_sequentContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_formula_tupleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon154){_inherits(Fof_formula_tupleContext,_antlr4$ParserRuleCon154);var _super155=_createSuper(Fof_formula_tupleContext);function Fof_formula_tupleContext(parser,parent,invokingState){var _this155;_classCallCheck(this,Fof_formula_tupleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this155=_super155.call(this,parent,invokingState);_this155.parser=parser;_this155.ruleIndex=TPTPParser.RULE_fof_formula_tuple;return _this155;}_createClass(Fof_formula_tupleContext,[{key:\"fof_formula_tuple_list\",value:function fof_formula_tuple_list(){return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_formula_tuple(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_formula_tuple(this);}}}]);return Fof_formula_tupleContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_formula_tuple_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon155){_inherits(Fof_formula_tuple_listContext,_antlr4$ParserRuleCon155);var _super156=_createSuper(Fof_formula_tuple_listContext);function Fof_formula_tuple_listContext(parser,parent,invokingState){var _this156;_classCallCheck(this,Fof_formula_tuple_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this156=_super156.call(this,parent,invokingState);_this156.parser=parser;_this156.ruleIndex=TPTPParser.RULE_fof_formula_tuple_list;return _this156;}_createClass(Fof_formula_tuple_listContext,[{key:\"fof_logic_formula\",value:function fof_logic_formula(){return this.getTypedRuleContext(Fof_logic_formulaContext,0);}},{key:\"fof_formula_tuple_list\",value:function fof_formula_tuple_list(){return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_formula_tuple_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_formula_tuple_list(this);}}}]);return Fof_formula_tuple_listContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_formulaContext=/*#__PURE__*/function(_antlr4$ParserRuleCon156){_inherits(Cnf_formulaContext,_antlr4$ParserRuleCon156);var _super157=_createSuper(Cnf_formulaContext);function Cnf_formulaContext(parser,parent,invokingState){var _this157;_classCallCheck(this,Cnf_formulaContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this157=_super157.call(this,parent,invokingState);_this157.parser=parser;_this157.ruleIndex=TPTPParser.RULE_cnf_formula;return _this157;}_createClass(Cnf_formulaContext,[{key:\"cnf_disjunction\",value:function cnf_disjunction(){return this.getTypedRuleContext(Cnf_disjunctionContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterCnf_formula(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitCnf_formula(this);}}}]);return Cnf_formulaContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_disjunctionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon157){_inherits(Cnf_disjunctionContext,_antlr4$ParserRuleCon157);var _super158=_createSuper(Cnf_disjunctionContext);function Cnf_disjunctionContext(parser,parent,invokingState){var _this158;_classCallCheck(this,Cnf_disjunctionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this158=_super158.call(this,parent,invokingState);_this158.parser=parser;_this158.ruleIndex=TPTPParser.RULE_cnf_disjunction;return _this158;}_createClass(Cnf_disjunctionContext,[{key:\"cnf_literal\",value:function cnf_literal(){return this.getTypedRuleContext(Cnf_literalContext,0);}},{key:\"cnf_disjunction\",value:function cnf_disjunction(){return this.getTypedRuleContext(Cnf_disjunctionContext,0);}},{key:\"Or\",value:function Or(){return this.getToken(TPTPParser.Or,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterCnf_disjunction(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitCnf_disjunction(this);}}}]);return Cnf_disjunctionContext;}(_antlr[\"default\"].ParserRuleContext);var Cnf_literalContext=/*#__PURE__*/function(_antlr4$ParserRuleCon158){_inherits(Cnf_literalContext,_antlr4$ParserRuleCon158);var _super159=_createSuper(Cnf_literalContext);function Cnf_literalContext(parser,parent,invokingState){var _this159;_classCallCheck(this,Cnf_literalContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this159=_super159.call(this,parent,invokingState);_this159.parser=parser;_this159.ruleIndex=TPTPParser.RULE_cnf_literal;return _this159;}_createClass(Cnf_literalContext,[{key:\"fof_atomic_formula\",value:function fof_atomic_formula(){return this.getTypedRuleContext(Fof_atomic_formulaContext,0);}},{key:\"Not\",value:function Not(){return this.getToken(TPTPParser.Not,0);}},{key:\"fof_infix_unary\",value:function fof_infix_unary(){return this.getTypedRuleContext(Fof_infix_unaryContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterCnf_literal(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitCnf_literal(this);}}}]);return Cnf_literalContext;}(_antlr[\"default\"].ParserRuleContext);var Thf_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon159){_inherits(Thf_quantifierContext,_antlr4$ParserRuleCon159);var _super160=_createSuper(Thf_quantifierContext);function Thf_quantifierContext(parser,parent,invokingState){var _this160;_classCallCheck(this,Thf_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this160=_super160.call(this,parent,invokingState);_this160.parser=parser;_this160.ruleIndex=TPTPParser.RULE_thf_quantifier;return _this160;}_createClass(Thf_quantifierContext,[{key:\"fof_quantifier\",value:function fof_quantifier(){return this.getTypedRuleContext(Fof_quantifierContext,0);}},{key:\"th0_quantifier\",value:function th0_quantifier(){return this.getTypedRuleContext(Th0_quantifierContext,0);}},{key:\"th1_quantifier\",value:function th1_quantifier(){return this.getTypedRuleContext(Th1_quantifierContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterThf_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitThf_quantifier(this);}}}]);return Thf_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Th1_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon160){_inherits(Th1_quantifierContext,_antlr4$ParserRuleCon160);var _super161=_createSuper(Th1_quantifierContext);function Th1_quantifierContext(parser,parent,invokingState){var _this161;_classCallCheck(this,Th1_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this161=_super161.call(this,parent,invokingState);_this161.parser=parser;_this161.ruleIndex=TPTPParser.RULE_th1_quantifier;return _this161;}_createClass(Th1_quantifierContext,[{key:\"TyForall\",value:function TyForall(){return this.getToken(TPTPParser.TyForall,0);}},{key:\"TyExists\",value:function TyExists(){return this.getToken(TPTPParser.TyExists,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTh1_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTh1_quantifier(this);}}}]);return Th1_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Th0_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon161){_inherits(Th0_quantifierContext,_antlr4$ParserRuleCon161);var _super162=_createSuper(Th0_quantifierContext);function Th0_quantifierContext(parser,parent,invokingState){var _this162;_classCallCheck(this,Th0_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this162=_super162.call(this,parent,invokingState);_this162.parser=parser;_this162.ruleIndex=TPTPParser.RULE_th0_quantifier;return _this162;}_createClass(Th0_quantifierContext,[{key:\"Lambda\",value:function Lambda(){return this.getToken(TPTPParser.Lambda,0);}},{key:\"Choice\",value:function Choice(){return this.getToken(TPTPParser.Choice,0);}},{key:\"Description\",value:function Description(){return this.getToken(TPTPParser.Description,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTh0_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTh0_quantifier(this);}}}]);return Th0_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Fof_quantifierContext=/*#__PURE__*/function(_antlr4$ParserRuleCon162){_inherits(Fof_quantifierContext,_antlr4$ParserRuleCon162);var _super163=_createSuper(Fof_quantifierContext);function Fof_quantifierContext(parser,parent,invokingState){var _this163;_classCallCheck(this,Fof_quantifierContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this163=_super163.call(this,parent,invokingState);_this163.parser=parser;_this163.ruleIndex=TPTPParser.RULE_fof_quantifier;return _this163;}_createClass(Fof_quantifierContext,[{key:\"Forall\",value:function Forall(){return this.getToken(TPTPParser.Forall,0);}},{key:\"Exists\",value:function Exists(){return this.getToken(TPTPParser.Exists,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFof_quantifier(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFof_quantifier(this);}}}]);return Fof_quantifierContext;}(_antlr[\"default\"].ParserRuleContext);var Nonassoc_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon163){_inherits(Nonassoc_connectiveContext,_antlr4$ParserRuleCon163);var _super164=_createSuper(Nonassoc_connectiveContext);function Nonassoc_connectiveContext(parser,parent,invokingState){var _this164;_classCallCheck(this,Nonassoc_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this164=_super164.call(this,parent,invokingState);_this164.parser=parser;_this164.ruleIndex=TPTPParser.RULE_nonassoc_connective;return _this164;}_createClass(Nonassoc_connectiveContext,[{key:\"Iff\",value:function Iff(){return this.getToken(TPTPParser.Iff,0);}},{key:\"Impl\",value:function Impl(){return this.getToken(TPTPParser.Impl,0);}},{key:\"If\",value:function If(){return this.getToken(TPTPParser.If,0);}},{key:\"Niff\",value:function Niff(){return this.getToken(TPTPParser.Niff,0);}},{key:\"Nor\",value:function Nor(){return this.getToken(TPTPParser.Nor,0);}},{key:\"Nand\",value:function Nand(){return this.getToken(TPTPParser.Nand,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNonassoc_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNonassoc_connective(this);}}}]);return Nonassoc_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Assoc_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon164){_inherits(Assoc_connectiveContext,_antlr4$ParserRuleCon164);var _super165=_createSuper(Assoc_connectiveContext);function Assoc_connectiveContext(parser,parent,invokingState){var _this165;_classCallCheck(this,Assoc_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this165=_super165.call(this,parent,invokingState);_this165.parser=parser;_this165.ruleIndex=TPTPParser.RULE_assoc_connective;return _this165;}_createClass(Assoc_connectiveContext,[{key:\"Or\",value:function Or(){return this.getToken(TPTPParser.Or,0);}},{key:\"And\",value:function And(){return this.getToken(TPTPParser.And,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAssoc_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAssoc_connective(this);}}}]);return Assoc_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Unary_connectiveContext=/*#__PURE__*/function(_antlr4$ParserRuleCon165){_inherits(Unary_connectiveContext,_antlr4$ParserRuleCon165);var _super166=_createSuper(Unary_connectiveContext);function Unary_connectiveContext(parser,parent,invokingState){var _this166;_classCallCheck(this,Unary_connectiveContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this166=_super166.call(this,parent,invokingState);_this166.parser=parser;_this166.ruleIndex=TPTPParser.RULE_unary_connective;return _this166;}_createClass(Unary_connectiveContext,[{key:\"Not\",value:function Not(){return this.getToken(TPTPParser.Not,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterUnary_connective(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitUnary_connective(this);}}}]);return Unary_connectiveContext;}(_antlr[\"default\"].ParserRuleContext);var Type_constantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon166){_inherits(Type_constantContext,_antlr4$ParserRuleCon166);var _super167=_createSuper(Type_constantContext);function Type_constantContext(parser,parent,invokingState){var _this167;_classCallCheck(this,Type_constantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this167=_super167.call(this,parent,invokingState);_this167.parser=parser;_this167.ruleIndex=TPTPParser.RULE_type_constant;return _this167;}_createClass(Type_constantContext,[{key:\"type_functor\",value:function type_functor(){return this.getTypedRuleContext(Type_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterType_constant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitType_constant(this);}}}]);return Type_constantContext;}(_antlr[\"default\"].ParserRuleContext);var Type_functorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon167){_inherits(Type_functorContext,_antlr4$ParserRuleCon167);var _super168=_createSuper(Type_functorContext);function Type_functorContext(parser,parent,invokingState){var _this168;_classCallCheck(this,Type_functorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this168=_super168.call(this,parent,invokingState);_this168.parser=parser;_this168.ruleIndex=TPTPParser.RULE_type_functor;return _this168;}_createClass(Type_functorContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterType_functor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitType_functor(this);}}}]);return Type_functorContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon168){_inherits(Defined_typeContext,_antlr4$ParserRuleCon168);var _super169=_createSuper(Defined_typeContext);function Defined_typeContext(parser,parent,invokingState){var _this169;_classCallCheck(this,Defined_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this169=_super169.call(this,parent,invokingState);_this169.parser=parser;_this169.ruleIndex=TPTPParser.RULE_defined_type;return _this169;}_createClass(Defined_typeContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(TPTPParser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDefined_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDefined_type(this);}}}]);return Defined_typeContext;}(_antlr[\"default\"].ParserRuleContext);var System_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon169){_inherits(System_typeContext,_antlr4$ParserRuleCon169);var _super170=_createSuper(System_typeContext);function System_typeContext(parser,parent,invokingState){var _this170;_classCallCheck(this,System_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this170=_super170.call(this,parent,invokingState);_this170.parser=parser;_this170.ruleIndex=TPTPParser.RULE_system_type;return _this170;}_createClass(System_typeContext,[{key:\"atomic_system_word\",value:function atomic_system_word(){return this.getTypedRuleContext(Atomic_system_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterSystem_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitSystem_type(this);}}}]);return System_typeContext;}(_antlr[\"default\"].ParserRuleContext);var AtomContext=/*#__PURE__*/function(_antlr4$ParserRuleCon170){_inherits(AtomContext,_antlr4$ParserRuleCon170);var _super171=_createSuper(AtomContext);function AtomContext(parser,parent,invokingState){var _this171;_classCallCheck(this,AtomContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this171=_super171.call(this,parent,invokingState);_this171.parser=parser;_this171.ruleIndex=TPTPParser.RULE_atom;return _this171;}_createClass(AtomContext,[{key:\"untyped_atom\",value:function untyped_atom(){return this.getTypedRuleContext(Untyped_atomContext,0);}},{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAtom(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAtom(this);}}}]);return AtomContext;}(_antlr[\"default\"].ParserRuleContext);var Untyped_atomContext=/*#__PURE__*/function(_antlr4$ParserRuleCon171){_inherits(Untyped_atomContext,_antlr4$ParserRuleCon171);var _super172=_createSuper(Untyped_atomContext);function Untyped_atomContext(parser,parent,invokingState){var _this172;_classCallCheck(this,Untyped_atomContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this172=_super172.call(this,parent,invokingState);_this172.parser=parser;_this172.ruleIndex=TPTPParser.RULE_untyped_atom;return _this172;}_createClass(Untyped_atomContext,[{key:\"constant\",value:function constant(){return this.getTypedRuleContext(ConstantContext,0);}},{key:\"system_constant\",value:function system_constant(){return this.getTypedRuleContext(System_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterUntyped_atom(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitUntyped_atom(this);}}}]);return Untyped_atomContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_propositionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon172){_inherits(Defined_propositionContext,_antlr4$ParserRuleCon172);var _super173=_createSuper(Defined_propositionContext);function Defined_propositionContext(parser,parent,invokingState){var _this173;_classCallCheck(this,Defined_propositionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this173=_super173.call(this,parent,invokingState);_this173.parser=parser;_this173.ruleIndex=TPTPParser.RULE_defined_proposition;return _this173;}_createClass(Defined_propositionContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(TPTPParser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDefined_proposition(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDefined_proposition(this);}}}]);return Defined_propositionContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_predicateContext=/*#__PURE__*/function(_antlr4$ParserRuleCon173){_inherits(Defined_predicateContext,_antlr4$ParserRuleCon173);var _super174=_createSuper(Defined_predicateContext);function Defined_predicateContext(parser,parent,invokingState){var _this174;_classCallCheck(this,Defined_predicateContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this174=_super174.call(this,parent,invokingState);_this174.parser=parser;_this174.ruleIndex=TPTPParser.RULE_defined_predicate;return _this174;}_createClass(Defined_predicateContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(TPTPParser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDefined_predicate(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDefined_predicate(this);}}}]);return Defined_predicateContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_infix_predContext=/*#__PURE__*/function(_antlr4$ParserRuleCon174){_inherits(Defined_infix_predContext,_antlr4$ParserRuleCon174);var _super175=_createSuper(Defined_infix_predContext);function Defined_infix_predContext(parser,parent,invokingState){var _this175;_classCallCheck(this,Defined_infix_predContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this175=_super175.call(this,parent,invokingState);_this175.parser=parser;_this175.ruleIndex=TPTPParser.RULE_defined_infix_pred;return _this175;}_createClass(Defined_infix_predContext,[{key:\"Infix_equality\",value:function Infix_equality(){return this.getToken(TPTPParser.Infix_equality,0);}},{key:\"Assignment\",value:function Assignment(){return this.getToken(TPTPParser.Assignment,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDefined_infix_pred(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDefined_infix_pred(this);}}}]);return Defined_infix_predContext;}(_antlr[\"default\"].ParserRuleContext);var ConstantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon175){_inherits(ConstantContext,_antlr4$ParserRuleCon175);var _super176=_createSuper(ConstantContext);function ConstantContext(parser,parent,invokingState){var _this176;_classCallCheck(this,ConstantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this176=_super176.call(this,parent,invokingState);_this176.parser=parser;_this176.ruleIndex=TPTPParser.RULE_constant;return _this176;}_createClass(ConstantContext,[{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterConstant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitConstant(this);}}}]);return ConstantContext;}(_antlr[\"default\"].ParserRuleContext);var FunctorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon176){_inherits(FunctorContext,_antlr4$ParserRuleCon176);var _super177=_createSuper(FunctorContext);function FunctorContext(parser,parent,invokingState){var _this177;_classCallCheck(this,FunctorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this177=_super177.call(this,parent,invokingState);_this177.parser=parser;_this177.ruleIndex=TPTPParser.RULE_functor;return _this177;}_createClass(FunctorContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFunctor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFunctor(this);}}}]);return FunctorContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_constantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon177){_inherits(Defined_constantContext,_antlr4$ParserRuleCon177);var _super178=_createSuper(Defined_constantContext);function Defined_constantContext(parser,parent,invokingState){var _this178;_classCallCheck(this,Defined_constantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this178=_super178.call(this,parent,invokingState);_this178.parser=parser;_this178.ruleIndex=TPTPParser.RULE_defined_constant;return _this178;}_createClass(Defined_constantContext,[{key:\"defined_functor\",value:function defined_functor(){return this.getTypedRuleContext(Defined_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDefined_constant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDefined_constant(this);}}}]);return Defined_constantContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_functorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon178){_inherits(Defined_functorContext,_antlr4$ParserRuleCon178);var _super179=_createSuper(Defined_functorContext);function Defined_functorContext(parser,parent,invokingState){var _this179;_classCallCheck(this,Defined_functorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this179=_super179.call(this,parent,invokingState);_this179.parser=parser;_this179.ruleIndex=TPTPParser.RULE_defined_functor;return _this179;}_createClass(Defined_functorContext,[{key:\"atomic_defined_word\",value:function atomic_defined_word(){return this.getTypedRuleContext(Atomic_defined_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDefined_functor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDefined_functor(this);}}}]);return Defined_functorContext;}(_antlr[\"default\"].ParserRuleContext);var System_constantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon179){_inherits(System_constantContext,_antlr4$ParserRuleCon179);var _super180=_createSuper(System_constantContext);function System_constantContext(parser,parent,invokingState){var _this180;_classCallCheck(this,System_constantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this180=_super180.call(this,parent,invokingState);_this180.parser=parser;_this180.ruleIndex=TPTPParser.RULE_system_constant;return _this180;}_createClass(System_constantContext,[{key:\"system_functor\",value:function system_functor(){return this.getTypedRuleContext(System_functorContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterSystem_constant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitSystem_constant(this);}}}]);return System_constantContext;}(_antlr[\"default\"].ParserRuleContext);var System_functorContext=/*#__PURE__*/function(_antlr4$ParserRuleCon180){_inherits(System_functorContext,_antlr4$ParserRuleCon180);var _super181=_createSuper(System_functorContext);function System_functorContext(parser,parent,invokingState){var _this181;_classCallCheck(this,System_functorContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this181=_super181.call(this,parent,invokingState);_this181.parser=parser;_this181.ruleIndex=TPTPParser.RULE_system_functor;return _this181;}_createClass(System_functorContext,[{key:\"atomic_system_word\",value:function atomic_system_word(){return this.getTypedRuleContext(Atomic_system_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterSystem_functor(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitSystem_functor(this);}}}]);return System_functorContext;}(_antlr[\"default\"].ParserRuleContext);var Def_or_sys_constantContext=/*#__PURE__*/function(_antlr4$ParserRuleCon181){_inherits(Def_or_sys_constantContext,_antlr4$ParserRuleCon181);var _super182=_createSuper(Def_or_sys_constantContext);function Def_or_sys_constantContext(parser,parent,invokingState){var _this182;_classCallCheck(this,Def_or_sys_constantContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this182=_super182.call(this,parent,invokingState);_this182.parser=parser;_this182.ruleIndex=TPTPParser.RULE_def_or_sys_constant;return _this182;}_createClass(Def_or_sys_constantContext,[{key:\"defined_constant\",value:function defined_constant(){return this.getTypedRuleContext(Defined_constantContext,0);}},{key:\"system_constant\",value:function system_constant(){return this.getTypedRuleContext(System_constantContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDef_or_sys_constant(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDef_or_sys_constant(this);}}}]);return Def_or_sys_constantContext;}(_antlr[\"default\"].ParserRuleContext);var Th1_defined_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon182){_inherits(Th1_defined_termContext,_antlr4$ParserRuleCon182);var _super183=_createSuper(Th1_defined_termContext);function Th1_defined_termContext(parser,parent,invokingState){var _this183;_classCallCheck(this,Th1_defined_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this183=_super183.call(this,parent,invokingState);_this183.parser=parser;_this183.ruleIndex=TPTPParser.RULE_th1_defined_term;return _this183;}_createClass(Th1_defined_termContext,[{key:\"ForallComb\",value:function ForallComb(){return this.getToken(TPTPParser.ForallComb,0);}},{key:\"ExistsComb\",value:function ExistsComb(){return this.getToken(TPTPParser.ExistsComb,0);}},{key:\"ChoiceComb\",value:function ChoiceComb(){return this.getToken(TPTPParser.ChoiceComb,0);}},{key:\"DescriptionComb\",value:function DescriptionComb(){return this.getToken(TPTPParser.DescriptionComb,0);}},{key:\"EqComb\",value:function EqComb(){return this.getToken(TPTPParser.EqComb,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTh1_defined_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTh1_defined_term(this);}}}]);return Th1_defined_termContext;}(_antlr[\"default\"].ParserRuleContext);var Defined_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon183){_inherits(Defined_termContext,_antlr4$ParserRuleCon183);var _super184=_createSuper(Defined_termContext);function Defined_termContext(parser,parent,invokingState){var _this184;_classCallCheck(this,Defined_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this184=_super184.call(this,parent,invokingState);_this184.parser=parser;_this184.ruleIndex=TPTPParser.RULE_defined_term;return _this184;}_createClass(Defined_termContext,[{key:\"number\",value:function number(){return this.getTypedRuleContext(NumberContext,0);}},{key:\"Distinct_object\",value:function Distinct_object(){return this.getToken(TPTPParser.Distinct_object,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDefined_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDefined_term(this);}}}]);return Defined_termContext;}(_antlr[\"default\"].ParserRuleContext);var VariableContext=/*#__PURE__*/function(_antlr4$ParserRuleCon184){_inherits(VariableContext,_antlr4$ParserRuleCon184);var _super185=_createSuper(VariableContext);function VariableContext(parser,parent,invokingState){var _this185;_classCallCheck(this,VariableContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this185=_super185.call(this,parent,invokingState);_this185.parser=parser;_this185.ruleIndex=TPTPParser.RULE_variable;return _this185;}_createClass(VariableContext,[{key:\"Upper_word\",value:function Upper_word(){return this.getToken(TPTPParser.Upper_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterVariable(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitVariable(this);}}}]);return VariableContext;}(_antlr[\"default\"].ParserRuleContext);var SourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon185){_inherits(SourceContext,_antlr4$ParserRuleCon185);var _super186=_createSuper(SourceContext);function SourceContext(parser,parent,invokingState){var _this186;_classCallCheck(this,SourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this186=_super186.call(this,parent,invokingState);_this186.parser=parser;_this186.ruleIndex=TPTPParser.RULE_source;return _this186;}_createClass(SourceContext,[{key:\"dag_source\",value:function dag_source(){return this.getTypedRuleContext(Dag_sourceContext,0);}},{key:\"internal_source\",value:function internal_source(){return this.getTypedRuleContext(Internal_sourceContext,0);}},{key:\"external_source\",value:function external_source(){return this.getTypedRuleContext(External_sourceContext,0);}},{key:\"Lower_word\",value:function Lower_word(){return this.getToken(TPTPParser.Lower_word,0);}},{key:\"sources\",value:function sources(){return this.getTypedRuleContext(SourcesContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterSource(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitSource(this);}}}]);return SourceContext;}(_antlr[\"default\"].ParserRuleContext);var SourcesContext=/*#__PURE__*/function(_antlr4$ParserRuleCon186){_inherits(SourcesContext,_antlr4$ParserRuleCon186);var _super187=_createSuper(SourcesContext);function SourcesContext(parser,parent,invokingState){var _this187;_classCallCheck(this,SourcesContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this187=_super187.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this187),\"source\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(SourceContext);}else{return this.getTypedRuleContext(SourceContext,i);}});_this187.parser=parser;_this187.ruleIndex=TPTPParser.RULE_sources;return _this187;}_createClass(SourcesContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterSources(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitSources(this);}}}]);return SourcesContext;}(_antlr[\"default\"].ParserRuleContext);var Dag_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon187){_inherits(Dag_sourceContext,_antlr4$ParserRuleCon187);var _super188=_createSuper(Dag_sourceContext);function Dag_sourceContext(parser,parent,invokingState){var _this188;_classCallCheck(this,Dag_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this188=_super188.call(this,parent,invokingState);_this188.parser=parser;_this188.ruleIndex=TPTPParser.RULE_dag_source;return _this188;}_createClass(Dag_sourceContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"inference_record\",value:function inference_record(){return this.getTypedRuleContext(Inference_recordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDag_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDag_source(this);}}}]);return Dag_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_recordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon188){_inherits(Inference_recordContext,_antlr4$ParserRuleCon188);var _super189=_createSuper(Inference_recordContext);function Inference_recordContext(parser,parent,invokingState){var _this189;_classCallCheck(this,Inference_recordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this189=_super189.call(this,parent,invokingState);_this189.parser=parser;_this189.ruleIndex=TPTPParser.RULE_inference_record;return _this189;}_createClass(Inference_recordContext,[{key:\"inference_rule\",value:function inference_rule(){return this.getTypedRuleContext(Inference_ruleContext,0);}},{key:\"useful_info\",value:function useful_info(){return this.getTypedRuleContext(Useful_infoContext,0);}},{key:\"inference_parents\",value:function inference_parents(){return this.getTypedRuleContext(Inference_parentsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInference_record(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInference_record(this);}}}]);return Inference_recordContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_ruleContext=/*#__PURE__*/function(_antlr4$ParserRuleCon189){_inherits(Inference_ruleContext,_antlr4$ParserRuleCon189);var _super190=_createSuper(Inference_ruleContext);function Inference_ruleContext(parser,parent,invokingState){var _this190;_classCallCheck(this,Inference_ruleContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this190=_super190.call(this,parent,invokingState);_this190.parser=parser;_this190.ruleIndex=TPTPParser.RULE_inference_rule;return _this190;}_createClass(Inference_ruleContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInference_rule(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInference_rule(this);}}}]);return Inference_ruleContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_parentsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon190){_inherits(Inference_parentsContext,_antlr4$ParserRuleCon190);var _super191=_createSuper(Inference_parentsContext);function Inference_parentsContext(parser,parent,invokingState){var _this191;_classCallCheck(this,Inference_parentsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this191=_super191.call(this,parent,invokingState);_this191.parser=parser;_this191.ruleIndex=TPTPParser.RULE_inference_parents;return _this191;}_createClass(Inference_parentsContext,[{key:\"parent_list\",value:function parent_list(){return this.getTypedRuleContext(Parent_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInference_parents(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInference_parents(this);}}}]);return Inference_parentsContext;}(_antlr[\"default\"].ParserRuleContext);var Parent_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon191){_inherits(Parent_listContext,_antlr4$ParserRuleCon191);var _super192=_createSuper(Parent_listContext);function Parent_listContext(parser,parent,invokingState){var _this192;_classCallCheck(this,Parent_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this192=_super192.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this192),\"parent_info\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Parent_infoContext);}else{return this.getTypedRuleContext(Parent_infoContext,i);}});_this192.parser=parser;_this192.ruleIndex=TPTPParser.RULE_parent_list;return _this192;}_createClass(Parent_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterParent_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitParent_list(this);}}}]);return Parent_listContext;}(_antlr[\"default\"].ParserRuleContext);var Parent_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon192){_inherits(Parent_infoContext,_antlr4$ParserRuleCon192);var _super193=_createSuper(Parent_infoContext);function Parent_infoContext(parser,parent,invokingState){var _this193;_classCallCheck(this,Parent_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this193=_super193.call(this,parent,invokingState);_this193.parser=parser;_this193.ruleIndex=TPTPParser.RULE_parent_info;return _this193;}_createClass(Parent_infoContext,[{key:\"source\",value:function source(){return this.getTypedRuleContext(SourceContext,0);}},{key:\"parent_details\",value:function parent_details(){return this.getTypedRuleContext(Parent_detailsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterParent_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitParent_info(this);}}}]);return Parent_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Parent_detailsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon193){_inherits(Parent_detailsContext,_antlr4$ParserRuleCon193);var _super194=_createSuper(Parent_detailsContext);function Parent_detailsContext(parser,parent,invokingState){var _this194;_classCallCheck(this,Parent_detailsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this194=_super194.call(this,parent,invokingState);_this194.parser=parser;_this194.ruleIndex=TPTPParser.RULE_parent_details;return _this194;}_createClass(Parent_detailsContext,[{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterParent_details(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitParent_details(this);}}}]);return Parent_detailsContext;}(_antlr[\"default\"].ParserRuleContext);var Internal_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon194){_inherits(Internal_sourceContext,_antlr4$ParserRuleCon194);var _super195=_createSuper(Internal_sourceContext);function Internal_sourceContext(parser,parent,invokingState){var _this195;_classCallCheck(this,Internal_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this195=_super195.call(this,parent,invokingState);_this195.parser=parser;_this195.ruleIndex=TPTPParser.RULE_internal_source;return _this195;}_createClass(Internal_sourceContext,[{key:\"intro_type\",value:function intro_type(){return this.getTypedRuleContext(Intro_typeContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInternal_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInternal_source(this);}}}]);return Internal_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var Intro_typeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon195){_inherits(Intro_typeContext,_antlr4$ParserRuleCon195);var _super196=_createSuper(Intro_typeContext);function Intro_typeContext(parser,parent,invokingState){var _this196;_classCallCheck(this,Intro_typeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this196=_super196.call(this,parent,invokingState);_this196.parser=parser;_this196.ruleIndex=TPTPParser.RULE_intro_type;return _this196;}_createClass(Intro_typeContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(TPTPParser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterIntro_type(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitIntro_type(this);}}}]);return Intro_typeContext;}(_antlr[\"default\"].ParserRuleContext);var External_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon196){_inherits(External_sourceContext,_antlr4$ParserRuleCon196);var _super197=_createSuper(External_sourceContext);function External_sourceContext(parser,parent,invokingState){var _this197;_classCallCheck(this,External_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this197=_super197.call(this,parent,invokingState);_this197.parser=parser;_this197.ruleIndex=TPTPParser.RULE_external_source;return _this197;}_createClass(External_sourceContext,[{key:\"file_source\",value:function file_source(){return this.getTypedRuleContext(File_sourceContext,0);}},{key:\"theory\",value:function theory(){return this.getTypedRuleContext(TheoryContext,0);}},{key:\"creator_source\",value:function creator_source(){return this.getTypedRuleContext(Creator_sourceContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterExternal_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitExternal_source(this);}}}]);return External_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var File_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon197){_inherits(File_sourceContext,_antlr4$ParserRuleCon197);var _super198=_createSuper(File_sourceContext);function File_sourceContext(parser,parent,invokingState){var _this198;_classCallCheck(this,File_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this198=_super198.call(this,parent,invokingState);_this198.parser=parser;_this198.ruleIndex=TPTPParser.RULE_file_source;return _this198;}_createClass(File_sourceContext,[{key:\"file_name\",value:function file_name(){return this.getTypedRuleContext(File_nameContext,0);}},{key:\"file_info\",value:function file_info(){return this.getTypedRuleContext(File_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFile_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFile_source(this);}}}]);return File_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var File_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon198){_inherits(File_infoContext,_antlr4$ParserRuleCon198);var _super199=_createSuper(File_infoContext);function File_infoContext(parser,parent,invokingState){var _this199;_classCallCheck(this,File_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this199=_super199.call(this,parent,invokingState);_this199.parser=parser;_this199.ruleIndex=TPTPParser.RULE_file_info;return _this199;}_createClass(File_infoContext,[{key:\"name\",value:function name(){return this.getTypedRuleContext(NameContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFile_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFile_info(this);}}}]);return File_infoContext;}(_antlr[\"default\"].ParserRuleContext);var TheoryContext=/*#__PURE__*/function(_antlr4$ParserRuleCon199){_inherits(TheoryContext,_antlr4$ParserRuleCon199);var _super200=_createSuper(TheoryContext);function TheoryContext(parser,parent,invokingState){var _this200;_classCallCheck(this,TheoryContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this200=_super200.call(this,parent,invokingState);_this200.parser=parser;_this200.ruleIndex=TPTPParser.RULE_theory;return _this200;}_createClass(TheoryContext,[{key:\"theory_name\",value:function theory_name(){return this.getTypedRuleContext(Theory_nameContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTheory(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTheory(this);}}}]);return TheoryContext;}(_antlr[\"default\"].ParserRuleContext);var Theory_nameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon200){_inherits(Theory_nameContext,_antlr4$ParserRuleCon200);var _super201=_createSuper(Theory_nameContext);function Theory_nameContext(parser,parent,invokingState){var _this201;_classCallCheck(this,Theory_nameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this201=_super201.call(this,parent,invokingState);_this201.parser=parser;_this201.ruleIndex=TPTPParser.RULE_theory_name;return _this201;}_createClass(Theory_nameContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(TPTPParser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterTheory_name(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitTheory_name(this);}}}]);return Theory_nameContext;}(_antlr[\"default\"].ParserRuleContext);var Creator_sourceContext=/*#__PURE__*/function(_antlr4$ParserRuleCon201){_inherits(Creator_sourceContext,_antlr4$ParserRuleCon201);var _super202=_createSuper(Creator_sourceContext);function Creator_sourceContext(parser,parent,invokingState){var _this202;_classCallCheck(this,Creator_sourceContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this202=_super202.call(this,parent,invokingState);_this202.parser=parser;_this202.ruleIndex=TPTPParser.RULE_creator_source;return _this202;}_createClass(Creator_sourceContext,[{key:\"creator_name\",value:function creator_name(){return this.getTypedRuleContext(Creator_nameContext,0);}},{key:\"optional_info\",value:function optional_info(){return this.getTypedRuleContext(Optional_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterCreator_source(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitCreator_source(this);}}}]);return Creator_sourceContext;}(_antlr[\"default\"].ParserRuleContext);var Creator_nameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon202){_inherits(Creator_nameContext,_antlr4$ParserRuleCon202);var _super203=_createSuper(Creator_nameContext);function Creator_nameContext(parser,parent,invokingState){var _this203;_classCallCheck(this,Creator_nameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this203=_super203.call(this,parent,invokingState);_this203.parser=parser;_this203.ruleIndex=TPTPParser.RULE_creator_name;return _this203;}_createClass(Creator_nameContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterCreator_name(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitCreator_name(this);}}}]);return Creator_nameContext;}(_antlr[\"default\"].ParserRuleContext);var Optional_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon203){_inherits(Optional_infoContext,_antlr4$ParserRuleCon203);var _super204=_createSuper(Optional_infoContext);function Optional_infoContext(parser,parent,invokingState){var _this204;_classCallCheck(this,Optional_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this204=_super204.call(this,parent,invokingState);_this204.parser=parser;_this204.ruleIndex=TPTPParser.RULE_optional_info;return _this204;}_createClass(Optional_infoContext,[{key:\"useful_info\",value:function useful_info(){return this.getTypedRuleContext(Useful_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterOptional_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitOptional_info(this);}}}]);return Optional_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Useful_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon204){_inherits(Useful_infoContext,_antlr4$ParserRuleCon204);var _super205=_createSuper(Useful_infoContext);function Useful_infoContext(parser,parent,invokingState){var _this205;_classCallCheck(this,Useful_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this205=_super205.call(this,parent,invokingState);_this205.parser=parser;_this205.ruleIndex=TPTPParser.RULE_useful_info;return _this205;}_createClass(Useful_infoContext,[{key:\"info_items\",value:function info_items(){return this.getTypedRuleContext(Info_itemsContext,0);}},{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterUseful_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitUseful_info(this);}}}]);return Useful_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Info_itemsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon205){_inherits(Info_itemsContext,_antlr4$ParserRuleCon205);var _super206=_createSuper(Info_itemsContext);function Info_itemsContext(parser,parent,invokingState){var _this206;_classCallCheck(this,Info_itemsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this206=_super206.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this206),\"info_item\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Info_itemContext);}else{return this.getTypedRuleContext(Info_itemContext,i);}});_this206.parser=parser;_this206.ruleIndex=TPTPParser.RULE_info_items;return _this206;}_createClass(Info_itemsContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInfo_items(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInfo_items(this);}}}]);return Info_itemsContext;}(_antlr[\"default\"].ParserRuleContext);var Info_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon206){_inherits(Info_itemContext,_antlr4$ParserRuleCon206);var _super207=_createSuper(Info_itemContext);function Info_itemContext(parser,parent,invokingState){var _this207;_classCallCheck(this,Info_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this207=_super207.call(this,parent,invokingState);_this207.parser=parser;_this207.ruleIndex=TPTPParser.RULE_info_item;return _this207;}_createClass(Info_itemContext,[{key:\"formula_item\",value:function formula_item(){return this.getTypedRuleContext(Formula_itemContext,0);}},{key:\"inference_item\",value:function inference_item(){return this.getTypedRuleContext(Inference_itemContext,0);}},{key:\"general_function\",value:function general_function(){return this.getTypedRuleContext(General_functionContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInfo_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInfo_item(this);}}}]);return Info_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon207){_inherits(Formula_itemContext,_antlr4$ParserRuleCon207);var _super208=_createSuper(Formula_itemContext);function Formula_itemContext(parser,parent,invokingState){var _this208;_classCallCheck(this,Formula_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this208=_super208.call(this,parent,invokingState);_this208.parser=parser;_this208.ruleIndex=TPTPParser.RULE_formula_item;return _this208;}_createClass(Formula_itemContext,[{key:\"description_item\",value:function description_item(){return this.getTypedRuleContext(Description_itemContext,0);}},{key:\"iquote_item\",value:function iquote_item(){return this.getTypedRuleContext(Iquote_itemContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFormula_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFormula_item(this);}}}]);return Formula_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Description_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon208){_inherits(Description_itemContext,_antlr4$ParserRuleCon208);var _super209=_createSuper(Description_itemContext);function Description_itemContext(parser,parent,invokingState){var _this209;_classCallCheck(this,Description_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this209=_super209.call(this,parent,invokingState);_this209.parser=parser;_this209.ruleIndex=TPTPParser.RULE_description_item;return _this209;}_createClass(Description_itemContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterDescription_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitDescription_item(this);}}}]);return Description_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Iquote_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon209){_inherits(Iquote_itemContext,_antlr4$ParserRuleCon209);var _super210=_createSuper(Iquote_itemContext);function Iquote_itemContext(parser,parent,invokingState){var _this210;_classCallCheck(this,Iquote_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this210=_super210.call(this,parent,invokingState);_this210.parser=parser;_this210.ruleIndex=TPTPParser.RULE_iquote_item;return _this210;}_createClass(Iquote_itemContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterIquote_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitIquote_item(this);}}}]);return Iquote_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_itemContext=/*#__PURE__*/function(_antlr4$ParserRuleCon210){_inherits(Inference_itemContext,_antlr4$ParserRuleCon210);var _super211=_createSuper(Inference_itemContext);function Inference_itemContext(parser,parent,invokingState){var _this211;_classCallCheck(this,Inference_itemContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this211=_super211.call(this,parent,invokingState);_this211.parser=parser;_this211.ruleIndex=TPTPParser.RULE_inference_item;return _this211;}_createClass(Inference_itemContext,[{key:\"inference_status\",value:function inference_status(){return this.getTypedRuleContext(Inference_statusContext,0);}},{key:\"assumptions_record\",value:function assumptions_record(){return this.getTypedRuleContext(Assumptions_recordContext,0);}},{key:\"new_symbol_record\",value:function new_symbol_record(){return this.getTypedRuleContext(New_symbol_recordContext,0);}},{key:\"refutation\",value:function refutation(){return this.getTypedRuleContext(RefutationContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInference_item(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInference_item(this);}}}]);return Inference_itemContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_statusContext=/*#__PURE__*/function(_antlr4$ParserRuleCon211){_inherits(Inference_statusContext,_antlr4$ParserRuleCon211);var _super212=_createSuper(Inference_statusContext);function Inference_statusContext(parser,parent,invokingState){var _this212;_classCallCheck(this,Inference_statusContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this212=_super212.call(this,parent,invokingState);_this212.parser=parser;_this212.ruleIndex=TPTPParser.RULE_inference_status;return _this212;}_createClass(Inference_statusContext,[{key:\"status_value\",value:function status_value(){return this.getTypedRuleContext(Status_valueContext,0);}},{key:\"inference_info\",value:function inference_info(){return this.getTypedRuleContext(Inference_infoContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInference_status(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInference_status(this);}}}]);return Inference_statusContext;}(_antlr[\"default\"].ParserRuleContext);var Status_valueContext=/*#__PURE__*/function(_antlr4$ParserRuleCon212){_inherits(Status_valueContext,_antlr4$ParserRuleCon212);var _super213=_createSuper(Status_valueContext);function Status_valueContext(parser,parent,invokingState){var _this213;_classCallCheck(this,Status_valueContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this213=_super213.call(this,parent,invokingState);_this213.parser=parser;_this213.ruleIndex=TPTPParser.RULE_status_value;return _this213;}_createClass(Status_valueContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(TPTPParser.Lower_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterStatus_value(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitStatus_value(this);}}}]);return Status_valueContext;}(_antlr[\"default\"].ParserRuleContext);var Inference_infoContext=/*#__PURE__*/function(_antlr4$ParserRuleCon213){_inherits(Inference_infoContext,_antlr4$ParserRuleCon213);var _super214=_createSuper(Inference_infoContext);function Inference_infoContext(parser,parent,invokingState){var _this214;_classCallCheck(this,Inference_infoContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this214=_super214.call(this,parent,invokingState);_this214.parser=parser;_this214.ruleIndex=TPTPParser.RULE_inference_info;return _this214;}_createClass(Inference_infoContext,[{key:\"inference_rule\",value:function inference_rule(){return this.getTypedRuleContext(Inference_ruleContext,0);}},{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInference_info(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInference_info(this);}}}]);return Inference_infoContext;}(_antlr[\"default\"].ParserRuleContext);var Assumptions_recordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon214){_inherits(Assumptions_recordContext,_antlr4$ParserRuleCon214);var _super215=_createSuper(Assumptions_recordContext);function Assumptions_recordContext(parser,parent,invokingState){var _this215;_classCallCheck(this,Assumptions_recordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this215=_super215.call(this,parent,invokingState);_this215.parser=parser;_this215.ruleIndex=TPTPParser.RULE_assumptions_record;return _this215;}_createClass(Assumptions_recordContext,[{key:\"name_list\",value:function name_list(){return this.getTypedRuleContext(Name_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAssumptions_record(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAssumptions_record(this);}}}]);return Assumptions_recordContext;}(_antlr[\"default\"].ParserRuleContext);var RefutationContext=/*#__PURE__*/function(_antlr4$ParserRuleCon215){_inherits(RefutationContext,_antlr4$ParserRuleCon215);var _super216=_createSuper(RefutationContext);function RefutationContext(parser,parent,invokingState){var _this216;_classCallCheck(this,RefutationContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this216=_super216.call(this,parent,invokingState);_this216.parser=parser;_this216.ruleIndex=TPTPParser.RULE_refutation;return _this216;}_createClass(RefutationContext,[{key:\"file_source\",value:function file_source(){return this.getTypedRuleContext(File_sourceContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterRefutation(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitRefutation(this);}}}]);return RefutationContext;}(_antlr[\"default\"].ParserRuleContext);var New_symbol_recordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon216){_inherits(New_symbol_recordContext,_antlr4$ParserRuleCon216);var _super217=_createSuper(New_symbol_recordContext);function New_symbol_recordContext(parser,parent,invokingState){var _this217;_classCallCheck(this,New_symbol_recordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this217=_super217.call(this,parent,invokingState);_this217.parser=parser;_this217.ruleIndex=TPTPParser.RULE_new_symbol_record;return _this217;}_createClass(New_symbol_recordContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"new_symbol_list\",value:function new_symbol_list(){return this.getTypedRuleContext(New_symbol_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNew_symbol_record(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNew_symbol_record(this);}}}]);return New_symbol_recordContext;}(_antlr[\"default\"].ParserRuleContext);var New_symbol_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon217){_inherits(New_symbol_listContext,_antlr4$ParserRuleCon217);var _super218=_createSuper(New_symbol_listContext);function New_symbol_listContext(parser,parent,invokingState){var _this218;_classCallCheck(this,New_symbol_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this218=_super218.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this218),\"principal_symbol\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(Principal_symbolContext);}else{return this.getTypedRuleContext(Principal_symbolContext,i);}});_this218.parser=parser;_this218.ruleIndex=TPTPParser.RULE_new_symbol_list;return _this218;}_createClass(New_symbol_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNew_symbol_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNew_symbol_list(this);}}}]);return New_symbol_listContext;}(_antlr[\"default\"].ParserRuleContext);var Principal_symbolContext=/*#__PURE__*/function(_antlr4$ParserRuleCon218){_inherits(Principal_symbolContext,_antlr4$ParserRuleCon218);var _super219=_createSuper(Principal_symbolContext);function Principal_symbolContext(parser,parent,invokingState){var _this219;_classCallCheck(this,Principal_symbolContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this219=_super219.call(this,parent,invokingState);_this219.parser=parser;_this219.ruleIndex=TPTPParser.RULE_principal_symbol;return _this219;}_createClass(Principal_symbolContext,[{key:\"functor\",value:function functor(){return this.getTypedRuleContext(FunctorContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterPrincipal_symbol(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitPrincipal_symbol(this);}}}]);return Principal_symbolContext;}(_antlr[\"default\"].ParserRuleContext);var IncludeContext=/*#__PURE__*/function(_antlr4$ParserRuleCon219){_inherits(IncludeContext,_antlr4$ParserRuleCon219);var _super220=_createSuper(IncludeContext);function IncludeContext(parser,parent,invokingState){var _this220;_classCallCheck(this,IncludeContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this220=_super220.call(this,parent,invokingState);_this220.parser=parser;_this220.ruleIndex=TPTPParser.RULE_include;return _this220;}_createClass(IncludeContext,[{key:\"file_name\",value:function file_name(){return this.getTypedRuleContext(File_nameContext,0);}},{key:\"formula_selection\",value:function formula_selection(){return this.getTypedRuleContext(Formula_selectionContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterInclude(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitInclude(this);}}}]);return IncludeContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_selectionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon220){_inherits(Formula_selectionContext,_antlr4$ParserRuleCon220);var _super221=_createSuper(Formula_selectionContext);function Formula_selectionContext(parser,parent,invokingState){var _this221;_classCallCheck(this,Formula_selectionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this221=_super221.call(this,parent,invokingState);_this221.parser=parser;_this221.ruleIndex=TPTPParser.RULE_formula_selection;return _this221;}_createClass(Formula_selectionContext,[{key:\"name_list\",value:function name_list(){return this.getTypedRuleContext(Name_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFormula_selection(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFormula_selection(this);}}}]);return Formula_selectionContext;}(_antlr[\"default\"].ParserRuleContext);var Name_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon221){_inherits(Name_listContext,_antlr4$ParserRuleCon221);var _super222=_createSuper(Name_listContext);function Name_listContext(parser,parent,invokingState){var _this222;_classCallCheck(this,Name_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this222=_super222.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this222),\"name\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(NameContext);}else{return this.getTypedRuleContext(NameContext,i);}});_this222.parser=parser;_this222.ruleIndex=TPTPParser.RULE_name_list;return _this222;}_createClass(Name_listContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterName_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitName_list(this);}}}]);return Name_listContext;}(_antlr[\"default\"].ParserRuleContext);var General_termContext=/*#__PURE__*/function(_antlr4$ParserRuleCon222){_inherits(General_termContext,_antlr4$ParserRuleCon222);var _super223=_createSuper(General_termContext);function General_termContext(parser,parent,invokingState){var _this223;_classCallCheck(this,General_termContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this223=_super223.call(this,parent,invokingState);_this223.parser=parser;_this223.ruleIndex=TPTPParser.RULE_general_term;return _this223;}_createClass(General_termContext,[{key:\"general_data\",value:function general_data(){return this.getTypedRuleContext(General_dataContext,0);}},{key:\"general_term\",value:function general_term(){return this.getTypedRuleContext(General_termContext,0);}},{key:\"general_list\",value:function general_list(){return this.getTypedRuleContext(General_listContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterGeneral_term(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitGeneral_term(this);}}}]);return General_termContext;}(_antlr[\"default\"].ParserRuleContext);var General_dataContext=/*#__PURE__*/function(_antlr4$ParserRuleCon223){_inherits(General_dataContext,_antlr4$ParserRuleCon223);var _super224=_createSuper(General_dataContext);function General_dataContext(parser,parent,invokingState){var _this224;_classCallCheck(this,General_dataContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this224=_super224.call(this,parent,invokingState);_this224.parser=parser;_this224.ruleIndex=TPTPParser.RULE_general_data;return _this224;}_createClass(General_dataContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"general_function\",value:function general_function(){return this.getTypedRuleContext(General_functionContext,0);}},{key:\"variable\",value:function variable(){return this.getTypedRuleContext(VariableContext,0);}},{key:\"number\",value:function number(){return this.getTypedRuleContext(NumberContext,0);}},{key:\"Distinct_object\",value:function Distinct_object(){return this.getToken(TPTPParser.Distinct_object,0);}},{key:\"formula_data\",value:function formula_data(){return this.getTypedRuleContext(Formula_dataContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterGeneral_data(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitGeneral_data(this);}}}]);return General_dataContext;}(_antlr[\"default\"].ParserRuleContext);var General_functionContext=/*#__PURE__*/function(_antlr4$ParserRuleCon224){_inherits(General_functionContext,_antlr4$ParserRuleCon224);var _super225=_createSuper(General_functionContext);function General_functionContext(parser,parent,invokingState){var _this225;_classCallCheck(this,General_functionContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this225=_super225.call(this,parent,invokingState);_this225.parser=parser;_this225.ruleIndex=TPTPParser.RULE_general_function;return _this225;}_createClass(General_functionContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"general_terms\",value:function general_terms(){return this.getTypedRuleContext(General_termsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterGeneral_function(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitGeneral_function(this);}}}]);return General_functionContext;}(_antlr[\"default\"].ParserRuleContext);var Formula_dataContext=/*#__PURE__*/function(_antlr4$ParserRuleCon225){_inherits(Formula_dataContext,_antlr4$ParserRuleCon225);var _super226=_createSuper(Formula_dataContext);function Formula_dataContext(parser,parent,invokingState){var _this226;_classCallCheck(this,Formula_dataContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this226=_super226.call(this,parent,invokingState);_this226.parser=parser;_this226.ruleIndex=TPTPParser.RULE_formula_data;return _this226;}_createClass(Formula_dataContext,[{key:\"thf_formula\",value:function thf_formula(){return this.getTypedRuleContext(Thf_formulaContext,0);}},{key:\"tff_formula\",value:function tff_formula(){return this.getTypedRuleContext(Tff_formulaContext,0);}},{key:\"fof_formula\",value:function fof_formula(){return this.getTypedRuleContext(Fof_formulaContext,0);}},{key:\"cnf_formula\",value:function cnf_formula(){return this.getTypedRuleContext(Cnf_formulaContext,0);}},{key:\"fof_term\",value:function fof_term(){return this.getTypedRuleContext(Fof_termContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFormula_data(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFormula_data(this);}}}]);return Formula_dataContext;}(_antlr[\"default\"].ParserRuleContext);var General_listContext=/*#__PURE__*/function(_antlr4$ParserRuleCon226){_inherits(General_listContext,_antlr4$ParserRuleCon226);var _super227=_createSuper(General_listContext);function General_listContext(parser,parent,invokingState){var _this227;_classCallCheck(this,General_listContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this227=_super227.call(this,parent,invokingState);_this227.parser=parser;_this227.ruleIndex=TPTPParser.RULE_general_list;return _this227;}_createClass(General_listContext,[{key:\"general_terms\",value:function general_terms(){return this.getTypedRuleContext(General_termsContext,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterGeneral_list(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitGeneral_list(this);}}}]);return General_listContext;}(_antlr[\"default\"].ParserRuleContext);var General_termsContext=/*#__PURE__*/function(_antlr4$ParserRuleCon227){_inherits(General_termsContext,_antlr4$ParserRuleCon227);var _super228=_createSuper(General_termsContext);function General_termsContext(parser,parent,invokingState){var _this228;_classCallCheck(this,General_termsContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this228=_super228.call(this,parent,invokingState);_defineProperty(_assertThisInitialized(_this228),\"general_term\",function(i){if(i===undefined){i=null;}if(i===null){return this.getTypedRuleContexts(General_termContext);}else{return this.getTypedRuleContext(General_termContext,i);}});_this228.parser=parser;_this228.ruleIndex=TPTPParser.RULE_general_terms;return _this228;}_createClass(General_termsContext,[{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterGeneral_terms(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitGeneral_terms(this);}}}]);return General_termsContext;}(_antlr[\"default\"].ParserRuleContext);var NameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon228){_inherits(NameContext,_antlr4$ParserRuleCon228);var _super229=_createSuper(NameContext);function NameContext(parser,parent,invokingState){var _this229;_classCallCheck(this,NameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this229=_super229.call(this,parent,invokingState);_this229.parser=parser;_this229.ruleIndex=TPTPParser.RULE_name;return _this229;}_createClass(NameContext,[{key:\"atomic_word\",value:function atomic_word(){return this.getTypedRuleContext(Atomic_wordContext,0);}},{key:\"Integer\",value:function Integer(){return this.getToken(TPTPParser.Integer,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterName(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitName(this);}}}]);return NameContext;}(_antlr[\"default\"].ParserRuleContext);var Atomic_wordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon229){_inherits(Atomic_wordContext,_antlr4$ParserRuleCon229);var _super230=_createSuper(Atomic_wordContext);function Atomic_wordContext(parser,parent,invokingState){var _this230;_classCallCheck(this,Atomic_wordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this230=_super230.call(this,parent,invokingState);_this230.parser=parser;_this230.ruleIndex=TPTPParser.RULE_atomic_word;return _this230;}_createClass(Atomic_wordContext,[{key:\"Lower_word\",value:function Lower_word(){return this.getToken(TPTPParser.Lower_word,0);}},{key:\"Single_quoted\",value:function Single_quoted(){return this.getToken(TPTPParser.Single_quoted,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAtomic_word(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAtomic_word(this);}}}]);return Atomic_wordContext;}(_antlr[\"default\"].ParserRuleContext);var Atomic_defined_wordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon230){_inherits(Atomic_defined_wordContext,_antlr4$ParserRuleCon230);var _super231=_createSuper(Atomic_defined_wordContext);function Atomic_defined_wordContext(parser,parent,invokingState){var _this231;_classCallCheck(this,Atomic_defined_wordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this231=_super231.call(this,parent,invokingState);_this231.parser=parser;_this231.ruleIndex=TPTPParser.RULE_atomic_defined_word;return _this231;}_createClass(Atomic_defined_wordContext,[{key:\"Dollar_word\",value:function Dollar_word(){return this.getToken(TPTPParser.Dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAtomic_defined_word(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAtomic_defined_word(this);}}}]);return Atomic_defined_wordContext;}(_antlr[\"default\"].ParserRuleContext);var Atomic_system_wordContext=/*#__PURE__*/function(_antlr4$ParserRuleCon231){_inherits(Atomic_system_wordContext,_antlr4$ParserRuleCon231);var _super232=_createSuper(Atomic_system_wordContext);function Atomic_system_wordContext(parser,parent,invokingState){var _this232;_classCallCheck(this,Atomic_system_wordContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this232=_super232.call(this,parent,invokingState);_this232.parser=parser;_this232.ruleIndex=TPTPParser.RULE_atomic_system_word;return _this232;}_createClass(Atomic_system_wordContext,[{key:\"Dollar_dollar_word\",value:function Dollar_dollar_word(){return this.getToken(TPTPParser.Dollar_dollar_word,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterAtomic_system_word(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitAtomic_system_word(this);}}}]);return Atomic_system_wordContext;}(_antlr[\"default\"].ParserRuleContext);var NumberContext=/*#__PURE__*/function(_antlr4$ParserRuleCon232){_inherits(NumberContext,_antlr4$ParserRuleCon232);var _super233=_createSuper(NumberContext);function NumberContext(parser,parent,invokingState){var _this233;_classCallCheck(this,NumberContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this233=_super233.call(this,parent,invokingState);_this233.parser=parser;_this233.ruleIndex=TPTPParser.RULE_number;return _this233;}_createClass(NumberContext,[{key:\"Integer\",value:function Integer(){return this.getToken(TPTPParser.Integer,0);}},{key:\"Rational\",value:function Rational(){return this.getToken(TPTPParser.Rational,0);}},{key:\"Real\",value:function Real(){return this.getToken(TPTPParser.Real,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterNumber(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitNumber(this);}}}]);return NumberContext;}(_antlr[\"default\"].ParserRuleContext);var File_nameContext=/*#__PURE__*/function(_antlr4$ParserRuleCon233){_inherits(File_nameContext,_antlr4$ParserRuleCon233);var _super234=_createSuper(File_nameContext);function File_nameContext(parser,parent,invokingState){var _this234;_classCallCheck(this,File_nameContext);if(parent===undefined){parent=null;}if(invokingState===undefined||invokingState===null){invokingState=-1;}_this234=_super234.call(this,parent,invokingState);_this234.parser=parser;_this234.ruleIndex=TPTPParser.RULE_file_name;return _this234;}_createClass(File_nameContext,[{key:\"Single_quoted\",value:function Single_quoted(){return this.getToken(TPTPParser.Single_quoted,0);}},{key:\"enterRule\",value:function enterRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.enterFile_name(this);}}},{key:\"exitRule\",value:function exitRule(listener){if(listener instanceof _TPTPListener[\"default\"]){listener.exitFile_name(this);}}}]);return File_nameContext;}(_antlr[\"default\"].ParserRuleContext);TPTPParser.Tptp_fileContext=Tptp_fileContext;TPTPParser.Tptp_inputContext=Tptp_inputContext;TPTPParser.Annotated_formulaContext=Annotated_formulaContext;TPTPParser.Tpi_annotatedContext=Tpi_annotatedContext;TPTPParser.Tpi_formulaContext=Tpi_formulaContext;TPTPParser.Thf_annotatedContext=Thf_annotatedContext;TPTPParser.Tff_annotatedContext=Tff_annotatedContext;TPTPParser.Tcf_annotatedContext=Tcf_annotatedContext;TPTPParser.Fof_annotatedContext=Fof_annotatedContext;TPTPParser.Cnf_annotatedContext=Cnf_annotatedContext;TPTPParser.AnnotationsContext=AnnotationsContext;TPTPParser.Formula_roleContext=Formula_roleContext;TPTPParser.Thf_formulaContext=Thf_formulaContext;TPTPParser.Thf_logic_formulaContext=Thf_logic_formulaContext;TPTPParser.Thf_binary_formulaContext=Thf_binary_formulaContext;TPTPParser.Thf_binary_nonassocContext=Thf_binary_nonassocContext;TPTPParser.Thf_binary_assocContext=Thf_binary_assocContext;TPTPParser.Thf_or_formulaContext=Thf_or_formulaContext;TPTPParser.Thf_and_formulaContext=Thf_and_formulaContext;TPTPParser.Thf_apply_formulaContext=Thf_apply_formulaContext;TPTPParser.Thf_unit_formulaContext=Thf_unit_formulaContext;TPTPParser.Thf_preunit_formulaContext=Thf_preunit_formulaContext;TPTPParser.Thf_unitary_formulaContext=Thf_unitary_formulaContext;TPTPParser.Thf_quantified_formulaContext=Thf_quantified_formulaContext;TPTPParser.Thf_quantificationContext=Thf_quantificationContext;TPTPParser.Thf_variable_listContext=Thf_variable_listContext;TPTPParser.Thf_variableContext=Thf_variableContext;TPTPParser.Thf_typed_variableContext=Thf_typed_variableContext;TPTPParser.Thf_unary_formulaContext=Thf_unary_formulaContext;TPTPParser.Thf_prefix_unaryContext=Thf_prefix_unaryContext;TPTPParser.Thf_infix_unaryContext=Thf_infix_unaryContext;TPTPParser.Thf_atomic_formulaContext=Thf_atomic_formulaContext;TPTPParser.Thf_plain_atomicContext=Thf_plain_atomicContext;TPTPParser.Thf_defined_atomicContext=Thf_defined_atomicContext;TPTPParser.Thf_defined_termContext=Thf_defined_termContext;TPTPParser.Thf_defined_infixContext=Thf_defined_infixContext;TPTPParser.Thf_system_atomicContext=Thf_system_atomicContext;TPTPParser.Thf_letContext=Thf_letContext;TPTPParser.Thf_let_typesContext=Thf_let_typesContext;TPTPParser.Thf_atom_typing_listContext=Thf_atom_typing_listContext;TPTPParser.Thf_let_defnsContext=Thf_let_defnsContext;TPTPParser.Thf_let_defnContext=Thf_let_defnContext;TPTPParser.Thf_let_defn_listContext=Thf_let_defn_listContext;TPTPParser.Thf_unitary_termContext=Thf_unitary_termContext;TPTPParser.Thf_conn_termContext=Thf_conn_termContext;TPTPParser.Thf_tupleContext=Thf_tupleContext;TPTPParser.Thf_fof_functionContext=Thf_fof_functionContext;TPTPParser.Thf_argumentsContext=Thf_argumentsContext;TPTPParser.Thf_formula_listContext=Thf_formula_listContext;TPTPParser.Thf_atom_typingContext=Thf_atom_typingContext;TPTPParser.Thf_top_level_typeContext=Thf_top_level_typeContext;TPTPParser.Thf_unitary_typeContext=Thf_unitary_typeContext;TPTPParser.Thf_apply_typeContext=Thf_apply_typeContext;TPTPParser.Thf_binary_typeContext=Thf_binary_typeContext;TPTPParser.Thf_mapping_typeContext=Thf_mapping_typeContext;TPTPParser.Thf_xprod_typeContext=Thf_xprod_typeContext;TPTPParser.Thf_union_typeContext=Thf_union_typeContext;TPTPParser.Thf_subtypeContext=Thf_subtypeContext;TPTPParser.Thf_definitionContext=Thf_definitionContext;TPTPParser.Thf_sequentContext=Thf_sequentContext;TPTPParser.Tff_formulaContext=Tff_formulaContext;TPTPParser.Tff_logic_formulaContext=Tff_logic_formulaContext;TPTPParser.Tff_binary_formulaContext=Tff_binary_formulaContext;TPTPParser.Tff_binary_nonassocContext=Tff_binary_nonassocContext;TPTPParser.Tff_binary_assocContext=Tff_binary_assocContext;TPTPParser.Tff_or_formulaContext=Tff_or_formulaContext;TPTPParser.Tff_and_formulaContext=Tff_and_formulaContext;TPTPParser.Tff_unit_formulaContext=Tff_unit_formulaContext;TPTPParser.Tff_preunit_formulaContext=Tff_preunit_formulaContext;TPTPParser.Tff_unitary_formulaContext=Tff_unitary_formulaContext;TPTPParser.Txf_unitary_formulaContext=Txf_unitary_formulaContext;TPTPParser.Tff_quantified_formulaContext=Tff_quantified_formulaContext;TPTPParser.Tff_variable_listContext=Tff_variable_listContext;TPTPParser.Tff_variableContext=Tff_variableContext;TPTPParser.Tff_typed_variableContext=Tff_typed_variableContext;TPTPParser.Tff_unary_formulaContext=Tff_unary_formulaContext;TPTPParser.Tff_prefix_unaryContext=Tff_prefix_unaryContext;TPTPParser.Tff_infix_unaryContext=Tff_infix_unaryContext;TPTPParser.Tff_atomic_formulaContext=Tff_atomic_formulaContext;TPTPParser.Tff_plain_atomicContext=Tff_plain_atomicContext;TPTPParser.Tff_defined_atomicContext=Tff_defined_atomicContext;TPTPParser.Tff_defined_plainContext=Tff_defined_plainContext;TPTPParser.Tff_defined_infixContext=Tff_defined_infixContext;TPTPParser.Tff_system_atomicContext=Tff_system_atomicContext;TPTPParser.Txf_letContext=Txf_letContext;TPTPParser.Txf_let_typesContext=Txf_let_typesContext;TPTPParser.Tff_atom_typing_listContext=Tff_atom_typing_listContext;TPTPParser.Txf_let_defnsContext=Txf_let_defnsContext;TPTPParser.Txf_let_defnContext=Txf_let_defnContext;TPTPParser.Txf_let_LHSContext=Txf_let_LHSContext;TPTPParser.Txf_let_defn_listContext=Txf_let_defn_listContext;TPTPParser.Txf_ntf_atomContext=Txf_ntf_atomContext;TPTPParser.Tff_termContext=Tff_termContext;TPTPParser.Tff_unitary_termContext=Tff_unitary_termContext;TPTPParser.Txf_tupleContext=Txf_tupleContext;TPTPParser.Tff_argumentsContext=Tff_argumentsContext;TPTPParser.Tff_atom_typingContext=Tff_atom_typingContext;TPTPParser.Tff_top_level_typeContext=Tff_top_level_typeContext;TPTPParser.Tff_non_atomic_typeContext=Tff_non_atomic_typeContext;TPTPParser.Tf1_quantified_typeContext=Tf1_quantified_typeContext;TPTPParser.Tff_monotypeContext=Tff_monotypeContext;TPTPParser.Tff_unitary_typeContext=Tff_unitary_typeContext;TPTPParser.Tff_atomic_typeContext=Tff_atomic_typeContext;TPTPParser.Tff_type_argumentsContext=Tff_type_argumentsContext;TPTPParser.Tff_mapping_typeContext=Tff_mapping_typeContext;TPTPParser.Tff_xprod_typeContext=Tff_xprod_typeContext;TPTPParser.Txf_tuple_typeContext=Txf_tuple_typeContext;TPTPParser.Tff_type_listContext=Tff_type_listContext;TPTPParser.Tff_subtypeContext=Tff_subtypeContext;TPTPParser.Txf_definitionContext=Txf_definitionContext;TPTPParser.Txf_sequentContext=Txf_sequentContext;TPTPParser.Ntf_connectiveContext=Ntf_connectiveContext;TPTPParser.Ntf_short_connectiveContext=Ntf_short_connectiveContext;TPTPParser.Ntf_long_connectiveContext=Ntf_long_connectiveContext;TPTPParser.Ntf_connective_nameContext=Ntf_connective_nameContext;TPTPParser.Ntf_parameter_listContext=Ntf_parameter_listContext;TPTPParser.Ntf_parameterContext=Ntf_parameterContext;TPTPParser.Ntf_indexContext=Ntf_indexContext;TPTPParser.Ntf_key_pairContext=Ntf_key_pairContext;TPTPParser.Logic_defn_ruleContext=Logic_defn_ruleContext;TPTPParser.Logic_defn_LHSContext=Logic_defn_LHSContext;TPTPParser.Logic_defn_RHSContext=Logic_defn_RHSContext;TPTPParser.Tcf_formulaContext=Tcf_formulaContext;TPTPParser.Tcf_logic_formulaContext=Tcf_logic_formulaContext;TPTPParser.Tcf_quantified_formulaContext=Tcf_quantified_formulaContext;TPTPParser.Fof_formulaContext=Fof_formulaContext;TPTPParser.Fof_logic_formulaContext=Fof_logic_formulaContext;TPTPParser.Fof_binary_formulaContext=Fof_binary_formulaContext;TPTPParser.Fof_binary_nonassocContext=Fof_binary_nonassocContext;TPTPParser.Fof_binary_assocContext=Fof_binary_assocContext;TPTPParser.Fof_or_formulaContext=Fof_or_formulaContext;TPTPParser.Fof_and_formulaContext=Fof_and_formulaContext;TPTPParser.Fof_unary_formulaContext=Fof_unary_formulaContext;TPTPParser.Fof_infix_unaryContext=Fof_infix_unaryContext;TPTPParser.Fof_unit_formulaContext=Fof_unit_formulaContext;TPTPParser.Fof_unitary_formulaContext=Fof_unitary_formulaContext;TPTPParser.Fof_quantified_formulaContext=Fof_quantified_formulaContext;TPTPParser.Fof_variable_listContext=Fof_variable_listContext;TPTPParser.Fof_atomic_formulaContext=Fof_atomic_formulaContext;TPTPParser.Fof_plain_atomic_formulaContext=Fof_plain_atomic_formulaContext;TPTPParser.Fof_defined_atomic_formulaContext=Fof_defined_atomic_formulaContext;TPTPParser.Fof_defined_plain_formulaContext=Fof_defined_plain_formulaContext;TPTPParser.Fof_defined_infix_formulaContext=Fof_defined_infix_formulaContext;TPTPParser.Fof_system_atomic_formulaContext=Fof_system_atomic_formulaContext;TPTPParser.Fof_plain_termContext=Fof_plain_termContext;TPTPParser.Fof_defined_termContext=Fof_defined_termContext;TPTPParser.Fof_defined_atomic_termContext=Fof_defined_atomic_termContext;TPTPParser.Fof_defined_plain_termContext=Fof_defined_plain_termContext;TPTPParser.Fof_system_termContext=Fof_system_termContext;TPTPParser.Fof_argumentsContext=Fof_argumentsContext;TPTPParser.Fof_termContext=Fof_termContext;TPTPParser.Fof_function_termContext=Fof_function_termContext;TPTPParser.Fof_sequentContext=Fof_sequentContext;TPTPParser.Fof_formula_tupleContext=Fof_formula_tupleContext;TPTPParser.Fof_formula_tuple_listContext=Fof_formula_tuple_listContext;TPTPParser.Cnf_formulaContext=Cnf_formulaContext;TPTPParser.Cnf_disjunctionContext=Cnf_disjunctionContext;TPTPParser.Cnf_literalContext=Cnf_literalContext;TPTPParser.Thf_quantifierContext=Thf_quantifierContext;TPTPParser.Th1_quantifierContext=Th1_quantifierContext;TPTPParser.Th0_quantifierContext=Th0_quantifierContext;TPTPParser.Fof_quantifierContext=Fof_quantifierContext;TPTPParser.Nonassoc_connectiveContext=Nonassoc_connectiveContext;TPTPParser.Assoc_connectiveContext=Assoc_connectiveContext;TPTPParser.Unary_connectiveContext=Unary_connectiveContext;TPTPParser.Type_constantContext=Type_constantContext;TPTPParser.Type_functorContext=Type_functorContext;TPTPParser.Defined_typeContext=Defined_typeContext;TPTPParser.System_typeContext=System_typeContext;TPTPParser.AtomContext=AtomContext;TPTPParser.Untyped_atomContext=Untyped_atomContext;TPTPParser.Defined_propositionContext=Defined_propositionContext;TPTPParser.Defined_predicateContext=Defined_predicateContext;TPTPParser.Defined_infix_predContext=Defined_infix_predContext;TPTPParser.ConstantContext=ConstantContext;TPTPParser.FunctorContext=FunctorContext;TPTPParser.Defined_constantContext=Defined_constantContext;TPTPParser.Defined_functorContext=Defined_functorContext;TPTPParser.System_constantContext=System_constantContext;TPTPParser.System_functorContext=System_functorContext;TPTPParser.Def_or_sys_constantContext=Def_or_sys_constantContext;TPTPParser.Th1_defined_termContext=Th1_defined_termContext;TPTPParser.Defined_termContext=Defined_termContext;TPTPParser.VariableContext=VariableContext;TPTPParser.SourceContext=SourceContext;TPTPParser.SourcesContext=SourcesContext;TPTPParser.Dag_sourceContext=Dag_sourceContext;TPTPParser.Inference_recordContext=Inference_recordContext;TPTPParser.Inference_ruleContext=Inference_ruleContext;TPTPParser.Inference_parentsContext=Inference_parentsContext;TPTPParser.Parent_listContext=Parent_listContext;TPTPParser.Parent_infoContext=Parent_infoContext;TPTPParser.Parent_detailsContext=Parent_detailsContext;TPTPParser.Internal_sourceContext=Internal_sourceContext;TPTPParser.Intro_typeContext=Intro_typeContext;TPTPParser.External_sourceContext=External_sourceContext;TPTPParser.File_sourceContext=File_sourceContext;TPTPParser.File_infoContext=File_infoContext;TPTPParser.TheoryContext=TheoryContext;TPTPParser.Theory_nameContext=Theory_nameContext;TPTPParser.Creator_sourceContext=Creator_sourceContext;TPTPParser.Creator_nameContext=Creator_nameContext;TPTPParser.Optional_infoContext=Optional_infoContext;TPTPParser.Useful_infoContext=Useful_infoContext;TPTPParser.Info_itemsContext=Info_itemsContext;TPTPParser.Info_itemContext=Info_itemContext;TPTPParser.Formula_itemContext=Formula_itemContext;TPTPParser.Description_itemContext=Description_itemContext;TPTPParser.Iquote_itemContext=Iquote_itemContext;TPTPParser.Inference_itemContext=Inference_itemContext;TPTPParser.Inference_statusContext=Inference_statusContext;TPTPParser.Status_valueContext=Status_valueContext;TPTPParser.Inference_infoContext=Inference_infoContext;TPTPParser.Assumptions_recordContext=Assumptions_recordContext;TPTPParser.RefutationContext=RefutationContext;TPTPParser.New_symbol_recordContext=New_symbol_recordContext;TPTPParser.New_symbol_listContext=New_symbol_listContext;TPTPParser.Principal_symbolContext=Principal_symbolContext;TPTPParser.IncludeContext=IncludeContext;TPTPParser.Formula_selectionContext=Formula_selectionContext;TPTPParser.Name_listContext=Name_listContext;TPTPParser.General_termContext=General_termContext;TPTPParser.General_dataContext=General_dataContext;TPTPParser.General_functionContext=General_functionContext;TPTPParser.Formula_dataContext=Formula_dataContext;TPTPParser.General_listContext=General_listContext;TPTPParser.General_termsContext=General_termsContext;TPTPParser.NameContext=NameContext;TPTPParser.Atomic_wordContext=Atomic_wordContext;TPTPParser.Atomic_defined_wordContext=Atomic_defined_wordContext;TPTPParser.Atomic_system_wordContext=Atomic_system_wordContext;TPTPParser.NumberContext=NumberContext;TPTPParser.File_nameContext=File_nameContext;\n\n//# sourceURL=webpack://idvjs/./TPTP-ANTLR4-Grammar/TPTPParser.js?");

/***/ }),

/***/ "./static/js/helpers.js":
/*!******************************!*\
  !*** ./static/js/helpers.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar _parser = __webpack_require__(/*! ./parser.js */ \"./static/js/parser.js\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction choose(choices) {\n  var index = Math.floor(Math.random() * choices.length);\n  return choices[index];\n}\n\nwindow.choose = choose;\n\nfunction htmlDecode(value) {\n  var el = document.createElement(\"textarea\");\n  el.innerHTML = value;\n  return el.innerText;\n}\n\nfunction showLoadingSpinner() {\n  document.getElementById(\"loadingSymbol\").classList.remove(\"hidden\");\n}\n\nfunction hideLoadingSpinner() {\n  document.getElementById(\"loadingSymbol\").classList.add(\"hidden\");\n}\n\nfunction ancestors(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var proofObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.proof;\n  var l = [];\n  var queue = [[node, depth]];\n  var interpretationOffset = node.level;\n  var nodeName;\n\n  while (queue.length > 0) {\n    var _queue$shift = queue.shift();\n\n    var _queue$shift2 = _slicedToArray(_queue$shift, 2);\n\n    node = _queue$shift2[0];\n    depth = _queue$shift2[1];\n    var parents = node.parents.map(function (name) {\n      return [proofObj[name], window.interpretation ? proofObj[name].level - interpretationOffset : depth - 1];\n    });\n    l.push.apply(l, _toConsumableArray(parents));\n    queue.push.apply(queue, _toConsumableArray(parents));\n  }\n\n  return l;\n}\n\nwindow.ancestors = ancestors;\n\nfunction descendants(node) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var proofObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window.proof;\n  var l = [];\n  var queue = [[node, depth]];\n  var interpretationOffset = node.level;\n  var nodeName;\n\n  while (queue.length > 0) {\n    var _queue$shift3 = queue.shift();\n\n    var _queue$shift4 = _slicedToArray(_queue$shift3, 2);\n\n    node = _queue$shift4[0];\n    depth = _queue$shift4[1];\n    var children = node.children.map(function (name) {\n      return [proofObj[name], window.interpretation ? proofObj[name].level - interpretationOffset : depth + 1];\n    });\n    l.push.apply(l, _toConsumableArray(children));\n    queue.push.apply(queue, _toConsumableArray(children));\n  }\n\n  return l;\n}\n\nwindow.descendants = descendants;\n\nfunction assignColorToNode(color, node) {\n  try {\n    node.graphviz.fillcolor = color;\n    node.svgNode.style.fill = color;\n  } catch (e) {}\n}\n\nfunction nodeIsUninteresting(node) {\n  // the final conclusion is always interesting.\n  if (node.children.length == 0) {\n    return false;\n  }\n\n  var anc = ancestors(originalProof[node.name], 0, originalProof).map(function (vals) {\n    return vals[0].role;\n  });\n\n  if (window.hideConjecture) {\n    if ([\"conjecture\", \"negated_conjecture\"].includes(node.role)) {\n      return true;\n    } else if (anc.includes(\"conjecture\") || anc.includes(\"negated_conjecture\")) {\n      return true;\n    }\n  }\n\n  return +node.info.interesting < window.interestFilterVal && ![-1, undefined].includes(+node.info.interesting);\n} //// begin graphviz setup ///////////////////////////\n\n\nvar graphviz = d3.select(\"#graph\").graphviz();\nwindow.graphviz = graphviz;\ngraphviz.zoomScaleExtent([0.01, 100]);\ngraphviz.transition(function () {\n  return d3.transition(\"main\").duration(500);\n});\ngraphviz.engine(\"dot\"); // graphviz.engine(\"neato\");\n// graphviz.engine(\"fdp\");\n// graphviz.engine(\"sfdp\");\n//// end graphviz setup /////////////////////////////\n\nfunction getNodeName(hovered) {\n  return window.interpretation ? hovered.querySelector(\"text\").getAttribute(\"proofKey\") : hovered.querySelector(\"text\").innerHTML;\n}\n\nfunction showGV(dot) {\n  showLoadingSpinner();\n  graphviz.renderDot(htmlDecode(dot));\n  graphviz.on(\"end\", function () {\n    // add hover eventlisteners and update window.proof to tell\n    // it where to find the svg nodes corresponding to \"proof\"/json nodes\n    var _iterator = _createForOfIteratorHelper(document.querySelectorAll(\"g.node\")),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var node = _step.value;\n        node.addEventListener(\"mouseenter\", nodeHoverEventListener);\n        var nodeName = getNodeName(node);\n\n        try {\n          window.proof[nodeName].svgNode = node.querySelector(\"polygon, ellipse\");\n        } catch (e) {\n          window.nodeName = nodeName;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    hideLoadingSpinner();\n  });\n}\n\nfunction nodeHoverEventListener(e) {\n  if (e.buttons != 0) {\n    return;\n  }\n\n  var nodeName = getNodeName(e.currentTarget);\n  var node = proof[nodeName];\n  var nodeInfo = document.getElementById(\"nodeInfo\");\n  var tptpTextareaOpen = \"\";\n\n  try {\n    tptpTextareaOpen = document.getElementById(\"tptpNodeStatement\").classList.contains(\"open\") ? \"open\" : \"\";\n  } catch (e) {}\n\n  var interestingnessHTML = \"\";\n\n  if (node.info.interesting != undefined) {\n    interestingnessHTML = \"<b>Interestingness: </b>\".concat(node.info.interesting, \"<br>\");\n  }\n\n  nodeInfo.innerHTML = \"<hr>\\n\\t\\t<b>Name:</b> \".concat(node['name'], \"<br>\\n\\t\\t<b>Type:</b> \").concat(node['type'], \"<br>\\n\\t\\t<b>Role:</b> \").concat(node['role'], \"<br>\\n\\t\\t\").concat(interestingnessHTML, \"\\n\\t\\t<b>Formula:</b> \").concat(node['formula'], \"<br>\\n\\t\\t<b>Inference Record:</b> \").concat(node['inference_record'], \"\\n\\t\\t<hr>\\n\\n\\t\\t<div class=\\\"box\\\">\\n\\t\\t\\t<h4 id=\\\"tptpNodeStatement\\\" \\n\\t\\t\\t\\tclass=\\\"settingsHeader \").concat(tptpTextareaOpen, \"\\\" \\n\\t\\t\\t\\tonclick=\\\"collapseBox(this)\\\">\\n\\t\\t\\t\\t\\tFull TPTP Statement: \\n\\t\\t\\t\\t\\t<span class=\\\"triangle\\\"></span>\\n\\t\\t\\t</h4>\\n\\t\\t\\t<textarea id=\\\"tptpTextarea\\\" class=\\\"\").concat(tptpTextareaOpen, \"\\\">\").concat(node['tptp'], \"</textarea>\\n\\t\\t</div>\\n  \");\n  recolorNodesByInterest();\n\n  function colorHelper(depth, min, max) {\n    var startColor = [255, 0, 0];\n    var midColor = [255, 255, 255];\n    var endColor = [0, 0, 255];\n    var frac, r, g, b;\n\n    if (depth < 0) {\n      frac = (depth - min) / (0 - min);\n      r = Math.round(startColor[0] + frac * (midColor[0] - startColor[0]));\n      g = Math.round(startColor[1] + frac * (midColor[1] - startColor[1]));\n      b = Math.round(startColor[2] + frac * (midColor[2] - startColor[2]));\n    } else if (depth > 0) {\n      frac = 1 - (max - depth) / max;\n      r = Math.round(midColor[0] + frac * (endColor[0] - midColor[0]));\n      g = Math.round(midColor[1] + frac * (endColor[1] - midColor[1]));\n      b = Math.round(midColor[2] + frac * (endColor[2] - midColor[2]));\n    } else {\n      r = midColor[0];\n      g = midColor[1];\n      b = midColor[2];\n    }\n\n    function hex(v) {\n      return v.toString(16).length == 2 ? v.toString(16) : \"0\" + v.toString(16);\n    }\n\n    return \"#\".concat(hex(r)).concat(hex(g)).concat(hex(b));\n  }\n\n  var anc = ancestors(node);\n  var minDepth = 0;\n  anc.forEach(function (a) {\n    if (a[1] < minDepth) {\n      minDepth = a[1];\n    }\n  });\n  var des = descendants(node);\n  var maxDepth = 0;\n  des.forEach(function (d) {\n    if (d[1] > maxDepth) {\n      maxDepth = d[1];\n    }\n  });\n\n  var _iterator2 = _createForOfIteratorHelper(anc),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n          a = _step2$value[0],\n          depth = _step2$value[1];\n\n      if (a.graphviz.fillcolor != \"#000000\") assignColorToNode(colorHelper(depth, minDepth, maxDepth), a);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  var _iterator3 = _createForOfIteratorHelper(des),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _step3$value = _slicedToArray(_step3.value, 2),\n          d = _step3$value[0],\n          _depth = _step3$value[1];\n\n      if (d.graphviz.fillcolor != \"#000000\") assignColorToNode(colorHelper(_depth, minDepth, maxDepth), d);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  if (node.graphviz.fillcolor != \"#000000\") assignColorToNode(colorHelper(0, minDepth, maxDepth), node);\n} //// begin interestingness helpers /////////////////\n\n\nfunction assignInterestingnessToHeightAndWidth() {\n  for (var _i2 = 0, _Object$values = Object.values(window.proof); _i2 < _Object$values.length; _i2++) {\n    var node = _Object$values[_i2];\n\n    if (window.interestScalingBool && node.info.interesting !== undefined) {\n      node.graphviz.width = scaleFromInterestingness(node.info.interesting);\n      node.graphviz.height = scaleFromInterestingness(node.info.interesting);\n    } else {\n      node.graphviz.width = undefined;\n      node.graphviz.height = undefined;\n    }\n  }\n}\n\nwindow.assignInterestingnessToHeightAndWidth = assignInterestingnessToHeightAndWidth;\n\nfunction getInterest() {\n  showLoadingSpinner();\n  Array.from(document.querySelectorAll(\".interestHidden\")).map(function (x) {\n    return x.style.display = \"block\";\n  });\n\n  if (!window.interestScalingBool) {\n    toggleInterestScaling();\n  }\n\n  fetch(\"/idv/interestingness\", {\n    method: 'POST',\n    body: JSON.stringify({\n      \"proof\": document.getElementById(\"proofText\").innerText\n    })\n  }).then(function (response) {\n    return response.text();\n  }).then(function (response) {\n    console.log(response);\n    return response;\n  }).then(function (text) {\n    text = htmlDecode(text);\n    var interestProof = (0, _parser.parseProof)(text);\n\n    for (var _i3 = 0, _Object$keys = Object.keys(originalProof); _i3 < _Object$keys.length; _i3++) {\n      var key = _Object$keys[_i3];\n      originalProof[key].info.interesting = interestProof[key].info.interesting;\n    }\n\n    redrawNodesByInterest();\n  })[\"catch\"](function (v) {\n    alert(\"Failed to query TPTP for interestingness!\");\n  })[\"finally\"](function (v) {\n    hideLoadingSpinner();\n  });\n}\n\nwindow.getInterest = getInterest;\n\nfunction toggleInterestScaling() {\n  var el = document.querySelector(\"#interestScaleToggle\");\n\n  if (el.innerText.includes(\"Disable\")) {\n    el.innerText = el.innerText.replace(\"Disable\", \"Enable\");\n  } else {\n    el.innerText = el.innerText.replace(\"Enable\", \"Disable\");\n  }\n\n  window.interestScalingBool = !window.interestScalingBool;\n  renderInterest();\n}\n\nwindow.toggleInterestScaling = toggleInterestScaling;\n\nfunction renderInterest() {\n  assignInterestingnessToHeightAndWidth();\n  showGV((0, _parser.proofToGV)(window.proof));\n}\n\nwindow.renderInterest = renderInterest;\n\nfunction recolorNodesByInterest() {\n  window.interestFilterVal = document.getElementById(\"interestingnessSlider\").value;\n\n  for (var _i4 = 0, _Object$keys2 = Object.keys(proof); _i4 < _Object$keys2.length; _i4++) {\n    var key = _Object$keys2[_i4];\n    var node = proof[key];\n\n    if (nodeIsUninteresting(node)) {\n      assignColorToNode(\"#000000\", node);\n    } else {\n      assignColorToNode(\"#c0c0c0\", node);\n    }\n  }\n\n  assignInterestingnessToHeightAndWidth();\n}\n\nwindow.recolorNodesByInterest = recolorNodesByInterest;\n\nfunction redrawNodesByInterest() {\n  window.interestFilterVal = document.getElementById(\"interestingnessSlider\").value;\n  window.proof = JSON.parse(JSON.stringify(originalProof));\n  assignInterestingnessToHeightAndWidth();\n\n  for (var _i5 = 0, _Object$values2 = Object.values(window.proof); _i5 < _Object$values2.length; _i5++) {\n    var node = _Object$values2[_i5];\n\n    // make node invisible if it's too uninteresting.\n    if (nodeIsUninteresting(node)) {\n      // update parent nodes\n      var _iterator4 = _createForOfIteratorHelper(node.parents),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _parent$children;\n\n          var parentName = _step4.value;\n          var parent = proof[parentName];\n          parent.children.splice(parent.children.indexOf(node.name), 1);\n\n          (_parent$children = parent.children).push.apply(_parent$children, _toConsumableArray(node.children));\n\n          parent.children = Array.from(new Set(parent.children));\n        } // update children nodes\n\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(node.children),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _child$parents;\n\n          var childName = _step5.value;\n          var child = proof[childName];\n          child.parents.splice(child.parents.indexOf(node.name), 1);\n\n          (_child$parents = child.parents).push.apply(_child$parents, _toConsumableArray(node.parents));\n\n          child.parents = Array.from(new Set(child.parents));\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      delete window.proof[node.name];\n    }\n  }\n\n  showGV((0, _parser.proofToGV)(window.proof));\n}\n\nwindow.redrawNodesByInterest = redrawNodesByInterest;\n\nfunction resetGraph() {\n  document.getElementById('interestingnessSlider').value = -1;\n  var hideConjNodesButton = document.getElementById('hideConjNodesButton');\n  hideConjNodesButton.innerText = hideConjNodesButton.innerText.replace(\"Show\", \"Blacken\");\n  window.hideConjecture = false;\n  redrawNodesByInterest();\n}\n\nwindow.resetGraph = resetGraph;\n\nfunction toggleConjectureVisible(el) {\n  if (el.innerText.includes(\"Blacken\")) {\n    el.innerText = el.innerText.replace(\"Blacken\", \"Show\");\n  } else {\n    el.innerText = el.innerText.replace(\"Show\", \"Blacken\");\n  }\n\n  window.hideConjecture = !window.hideConjecture;\n  recolorNodesByInterest();\n}\n\nwindow.toggleConjectureVisible = toggleConjectureVisible; //// end interestingness helpers ///////////////////\n\nwindow.parseProof = _parser.parseProof;\nwindow.proofToGV = _parser.proofToGV;\nwindow.showGV = showGV;\n\nwindow.collapseBox = function (title) {\n  var el = title.parentNode.children[1];\n  var open = title.classList.contains(\"open\");\n\n  if (open) {\n    title.classList.remove(\"open\");\n    el.style.height = \"0px\";\n    el.style.display = \"none\";\n  } else {\n    title.classList.add(\"open\");\n    el.style.height = \"100%\";\n    el.style.display = \"block\";\n  }\n};\n\n//# sourceURL=webpack://idvjs/./static/js/helpers.js?");

/***/ }),

/***/ "./static/js/parser.js":
/*!*****************************!*\
  !*** ./static/js/parser.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.proofToGV = exports.parseProof = void 0;\n\nvar antlr4 = _interopRequireWildcard(__webpack_require__(/*! antlr4 */ \"./node_modules/antlr4/src/antlr4/index.js\"));\n\nvar _TPTPLexer = _interopRequireDefault(__webpack_require__(/*! ../../TPTP-ANTLR4-Grammar/TPTPLexer */ \"./TPTP-ANTLR4-Grammar/TPTPLexer.js\"));\n\nvar _TPTPParser = _interopRequireDefault(__webpack_require__(/*! ../../TPTP-ANTLR4-Grammar/TPTPParser */ \"./TPTP-ANTLR4-Grammar/TPTPParser.js\"));\n\nvar _TPTPListener = _interopRequireDefault(__webpack_require__(/*! ../../TPTP-ANTLR4-Grammar/TPTPListener */ \"./TPTP-ANTLR4-Grammar/TPTPListener.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nwindow.antlr4 = antlr4;\n\nfunction stripParens(formula) {\n  return formula.replace(/\\s+/g, '').replace(/[()]/g, '');\n}\n\nfunction interpretationLabel(node) {\n  var s = node.formula.replace(/\"/g, '\\\\\"');\n  var lastColonPos = s.lastIndexOf(\":\");\n  var beforeColon = s.substr(0, lastColonPos).trim();\n\n  if (beforeColon.startsWith(\"'\") && beforeColon.endsWith(\"'\")) {\n    return s.split(\"'\")[1];\n  }\n\n  return lastColonPos == -1 ? s : beforeColon;\n}\n\nfunction getNodeShape(node) {\n  var shapeMap = {\n    axiom: \"invtriangle\",\n    conjecture: \"house\",\n    negated_conjecture: \"invhouse\",\n    plain: \"ellipse\"\n  };\n\n  if (stripParens(node.formula) == \"$false\") {\n    return \"box\";\n  }\n\n  if (window.interpretation && stripParens(node.formula) == \"$true\") {\n    return \"box\";\n  }\n\n  return shapeMap[node.role];\n}\n\nfunction getNodeColor(node) {\n  var colorMap = {\n    thf: \"blue\",\n    tff: \"orange\",\n    tcf: \"grey30\",\n    fof: \"green\",\n    cnf: \"red\"\n  };\n  return colorMap[node.type];\n}\n\nfunction scaleFromInterestingness(interestingness) {\n  interestingness = +interestingness;\n  var defaultSize = 1;\n\n  if ([-1, undefined].includes(interestingness)) {\n    return defaultSize;\n  } else {\n    return 0.5 * (1 + interestingness) + 0.5;\n  }\n}\n\nwindow.scaleFromInterestingness = scaleFromInterestingness; // helper function for extracting recursive parent information:\n\nfunction getParentsFromSource(source, node) {\n  var dag = source.dag_source();\n  var sources = source.sources();\n\n  if (sources !== null) {\n    var _iterator = _createForOfIteratorHelper(sources),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var s = _step.value;\n        getParentsFromSource(s, node);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  } else if (dag === null) {\n    return;\n  }\n\n  if (dag.inference_record()) {\n    var inference_record = dag.inference_record();\n    node.inference_record = inference_record.getText();\n    var parent_list = inference_record.inference_parents().parent_list().parent_info();\n\n    for (var i = 0; i < parent_list.length; i++) {\n      var p = parent_list[i];\n      var ps = p.source();\n\n      if (ps.dag_source()) {\n        if (ps.dag_source().name()) {\n          node.parents.push(ps.getText());\n        } else {\n          try {\n            var _sources = [];\n            var parents = ps.dag_source().inference_record().inference_parents().parent_list().parent_info();\n            _sources = parents.map(function (x) {\n              return x.source();\n            });\n\n            var _iterator2 = _createForOfIteratorHelper(_sources),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var _s = _step2.value;\n                getParentsFromSource(_s, node);\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          } catch (e) {\n            console.log(\"failed to parse dag source: \".concat(ps.dag_source().getText()));\n          }\n        }\n      } else if (ps.sources()) {\n        var _sources2 = ps.sources().source();\n\n        var _iterator3 = _createForOfIteratorHelper(_sources2),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _s2 = _step3.value;\n            getParentsFromSource(_s2, node);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else {\n        console.log(\"\".concat(node.name, \" has source \").concat(source));\n      }\n    }\n  } else if (dag.name()) {\n    node.parents.push(dag.name().getText());\n  }\n}\n\nfunction getNodeLevel(source, node) {\n  // console.log(\"Getting node level\", node, source);\n  var regex = /level\\(([0-9]+)\\)/;\n\n  try {\n    node.level = parseInt(node.inference_record.match(regex)[1]);\n  } catch (e) {\n    window.source = source;\n    node.level = parseInt(source.internal_source().getText().match(regex)[1]);\n  }\n} // this class exists to format the relevant parts of the parse tree for ease of use.\n// It makes it JSON. To see the schema, look at the \"process\" method.\n\n\nvar Formatter = /*#__PURE__*/function (_Listener) {\n  _inherits(Formatter, _Listener);\n\n  var _super = _createSuper(Formatter);\n\n  function Formatter() {\n    var _this;\n\n    _classCallCheck(this, Formatter);\n\n    _this = _super.call(this);\n    _this.node_map = {};\n    return _this;\n  }\n\n  _createClass(Formatter, [{\n    key: \"enterThf_annotated\",\n    value: function enterThf_annotated(ctx) {\n      this.process(ctx, \"thf\");\n    }\n  }, {\n    key: \"enterTff_annotated\",\n    value: function enterTff_annotated(ctx) {\n      this.process(ctx, \"tff\");\n    }\n  }, {\n    key: \"enterTcf_annotated\",\n    value: function enterTcf_annotated(ctx) {\n      this.process(ctx, \"tcf\");\n    }\n  }, {\n    key: \"enterFof_annotated\",\n    value: function enterFof_annotated(ctx) {\n      this.process(ctx, \"fof\");\n    }\n  }, {\n    key: \"enterCnf_annotated\",\n    value: function enterCnf_annotated(ctx) {\n      this.process(ctx, \"cnf\");\n      window.ctx = ctx;\n    }\n  }, {\n    key: \"process\",\n    value: function process(ctx, type) {\n      var role = ctx.formula_role().getText();\n\n      if (![\"conjecture\", \"negated_conjecture\", \"axiom\", \"plain\"].includes(role)) {\n        console.log(\"\\\"\".concat(role, \"\\\" role not shown for \\\"\").concat(ctx.name().getText(), \"\\\"\"));\n        return;\n      }\n\n      var node = {\n        name: ctx.name().getText(),\n        type: type,\n        role: role,\n        formula: ctx[\"\".concat(type, \"_formula\")]().getText(),\n        parents: [],\n        inference_record: \"\",\n        info: {},\n        level: undefined,\n        tptp: ctx.parentCtx.parentCtx.getText()\n      }; // try to get node info...(contains interestingness)\n\n      try {\n        var info = ctx.annotations().optional_info().useful_info().info_items().getText().split(\",\");\n        var infoObj = {};\n\n        var _iterator4 = _createForOfIteratorHelper(info),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var s = _step4.value;\n\n            var _s$split = s.split(\"(\"),\n                _s$split2 = _slicedToArray(_s$split, 2),\n                key = _s$split2[0],\n                value = _s$split2[1];\n\n            value = value.substring(0, value.length - 1);\n            infoObj[key] = value;\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n\n        node.info = infoObj;\n      } catch (e) {// console.log(`\"${node.name}\" has no info (or we failed getting it)`)\n      } // try to get source...(contains parents)\n\n\n      var source;\n\n      try {\n        source = ctx.annotations().source();\n        getParentsFromSource(source, node);\n      } catch (e) {\n        console.log(\"\\\"\".concat(node.name, \"\\\" has no sources (or we failed getting them).\"));\n      }\n\n      try {\n        getNodeLevel(source, node);\n      } catch (e) {\n        console.log(\"\\\"\".concat(node.name, \"\\\" has no level (or we failed getting it).\"));\n      }\n\n      this.node_map[node.name] = node;\n    }\n  }]);\n\n  return Formatter;\n}(_TPTPListener[\"default\"]); // must be a higher order function so it can take in s as input...\n\n\nfunction nodeToGV(s) {\n  return function (node) {\n    // What was this for? I commented it to fix an IIV bug, but I can't remember why it was here to begin with.\n\n    /*if(node.children.length == 0 && node.parents.length == 0){\n    return\n    }*/\n    var label = window.interpretation ? interpretationLabel(node) : node.name;\n    label = node.graphviz.inviz ? \"\" : label;\n    s.push(\"\\\"\".concat(node.name, \"\\\" [\\n\\t\\t\\tfixedsize=true,\\n\\t\\t\\tlabel=\\\"\").concat(label, \"\\\",\\n\\t\\t\\t\").concat(node.graphviz.invis ? \"style=invis,\" : \"\", \"\\n\\t\\t\\tshape=\").concat(node.graphviz.invis ? \"point\" : node.graphviz.shape, \",\\n\\t\\t\\tcolor=\\\"\").concat(node.graphviz.color, \"\\\",\\n\\t\\t\\tfillcolor=\\\"\").concat(node.graphviz.fillcolor, \"\\\",\\n\\t\\t\\twidth=\\\"\").concat(node.graphviz.width, \"\\\",\\n\\t\\t\\theight=\\\"\").concat(node.graphviz.height, \"\\\",\\n\\t\\t\\tpenwidth=\\\"3.0\\\"\\n\\t\\t]\"));\n  };\n} // nodes is a JSON object where the keys are node names.\n// and the values are the JSON objects of the nodes.\n\n\nvar proofToGV = function proofToGV(nodes) {\n  // A higher order function which returns a function from\n  // a node to whether or not that node should be in the top row of that type.\n  function isTopRow(type) {\n    return function (node) {\n      return node.parents.every(function (parentName) {\n        var parent = nodes[parentName];\n\n        if (parent === undefined) {\n          return false;\n        }\n\n        var parentType = nodes[parentName].type;\n        return parentType != type || top_row.includes(parent);\n      });\n    };\n  }\n\n  var nodeList = Object.values(nodes); // will become string segments of the \"dot\" file graphviz file.\n\n  var gvLines = [];\n  var top_row = [];\n  var others = nodeList;\n\n  if (!window.interpretation) {\n    top_row = nodeList.filter(function (e) {\n      return e.parents.length == 0;\n    });\n    others = nodeList.filter(function (e) {\n      return e.parents.length != 0;\n    });\n  }\n\n  window.ns = {}; // namespace for simplifying redundant ops on thf/tff/tcf/fof/cnf...\n\n  var langs = [\"thf\", \"tff\", \"tcf\", \"fof\", \"cnf\"];\n\n  var _loop = function _loop() {\n    var lang = _langs[_i2];\n    ns[lang] = others.filter(function (e) {\n      return e.type == lang;\n    });\n    ns[\"top_\".concat(lang)] = ns[lang].filter(isTopRow(lang));\n  };\n\n  for (var _i2 = 0, _langs = langs; _i2 < _langs.length; _i2++) {\n    _loop();\n  }\n\n  gvLines.push(\"digraph G {\");\n  gvLines.push(\"node [style=filled];\");\n  gvLines.push(\"newrank=\\\"true\\\"\"); // let clusterColor = 'lightgrey';\n\n  var clusterColor = 'transparent'; //begin Top Row...\n\n  gvLines.push(\"subgraph clusterAxioms {\");\n  gvLines.push(\"pencolor=\".concat(clusterColor));\n  top_row.forEach(nodeToGV(gvLines));\n  if (!window.interpretation) gvLines.push(\"{rank=same; \" + top_row.map(function (e) {\n    return \"\\\"\".concat(e.name, \"\\\"\");\n  }).join(' ') + \"}\");\n  gvLines.push(\"}\"); //end Top Row\n\n  for (var _i3 = 0, _langs2 = langs; _i3 < _langs2.length; _i3++) {\n    var lang = _langs2[_i3];\n\n    if (!window.interpretation) {\n      gvLines.push(\"subgraph cluster\".concat(lang, \"s {\"));\n      gvLines.push(\"pencolor=\".concat(clusterColor));\n    }\n\n    ns[lang].forEach(nodeToGV(gvLines));\n\n    if (!window.interpretation) {\n      gvLines.push(\"{rank=same; \" + ns[\"top_\".concat(lang)].map(function (e) {\n        return \"\\\"\".concat(e.name, \"\\\"\");\n      }).join(' ') + \"}\");\n      gvLines.push(\"}\");\n    }\n  } // Add Level Information to GraphViz\n\n\n  window.levels = {};\n\n  for (var _i4 = 0, _nodeList = nodeList; _i4 < _nodeList.length; _i4++) {\n    var node = _nodeList[_i4];\n\n    if (typeof node.level == 'number') {\n      if (!Object.keys(levels).includes(\"\".concat(node.level))) {\n        console.log(\"Level \".concat(node.level, \" not in levels, making new\"));\n        levels[node.level] = [];\n      }\n\n      levels[node.level].push(node.name);\n    }\n  }\n\n  for (var _i5 = 0, _Object$entries = Object.entries(levels); _i5 < _Object$entries.length; _i5++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i5], 2),\n        level = _Object$entries$_i[0],\n        names = _Object$entries$_i[1];\n\n    gvLines.push(\"{rank=same; \".concat(names.map(function (x) {\n      return \"\\\"\".concat(x, \"\\\"\");\n    }).join(' '), \"}\"));\n  }\n\n  var _loop2 = function _loop2() {\n    var node = _nodeList2[_i6];\n    var arrowOrNot = node.graphviz.invis ? \" [dir=none] \" : \"\";\n    node.parents.forEach(function (p) {\n      gvLines.push(\"\\\"\".concat(p, \"\\\"\") + \" -> \" + \"\\\"\".concat(node.name, \"\\\"\") + arrowOrNot);\n    });\n  };\n\n  for (var _i6 = 0, _nodeList2 = nodeList; _i6 < _nodeList2.length; _i6++) {\n    _loop2();\n  }\n\n  gvLines.push(\"}\");\n  return gvLines.join('\\n');\n};\n\nexports.proofToGV = proofToGV;\n\nvar parseProof = function parseProof(proofText) {\n  var chars = new antlr4[\"default\"].InputStream(proofText);\n  var lexer = new _TPTPLexer[\"default\"](chars);\n  var tokens = new antlr4[\"default\"].CommonTokenStream(lexer);\n  var parser = new _TPTPParser[\"default\"](tokens); // parser.removeErrorListeners();\n\n  parser.buildParseTrees = true;\n  var formatter = new Formatter();\n  var tree;\n  console.log(\"Beginning parsing...\");\n\n  while (tree = parser.tptp_input()) {\n    if (tree.getText() == \"<EOF>\") break;\n    antlr4[\"default\"].tree.ParseTreeWalker.DEFAULT.walk(formatter, tree);\n  }\n\n  console.log(\"Finished parsing!\");\n  var nm = formatter.node_map; // post-processing of node-map. \n\n  for (var _i7 = 0, _Object$keys = Object.keys(nm); _i7 < _Object$keys.length; _i7++) {\n    var name = _Object$keys[_i7];\n    var node = nm[name];\n    node.graphviz = {\n      shape: getNodeShape(node),\n      color: getNodeColor(node),\n      fillcolor: \"#c0c0c0\"\n    };\n\n    if (node.info['interesting'] !== undefined) {\n      node.graphviz.width = scaleFromInterestingness(node.info.interesting);\n      node.graphviz.height = scaleFromInterestingness(node.info.interesting);\n    }\n\n    if (node.children === undefined) {\n      node.children = [];\n    }\n\n    var parentsCopy = Array.from(node['parents']);\n\n    for (var _i8 = 0, _parentsCopy = parentsCopy; _i8 < _parentsCopy.length; _i8++) {\n      var parentName = _parentsCopy[_i8];\n\n      if (parentName in nm) {\n        if (nm[parentName][\"children\"] === undefined) {\n          nm[parentName][\"children\"] = [name];\n        } else {\n          nm[parentName][\"children\"].push(name);\n        }\n      } else {\n        console.log(\"Error: \".concat(parentName, \" was a parentNode of \").concat(node[\"name\"], \", but is not in the map!\")); // remove the parent.\n\n        while (node['parents'].includes(parentName)) {\n          console.log(\"Removing \".concat(parentName, \" from \").concat(node.name, \"'s parents\"));\n          var location = node['parents'].indexOf(parentName);\n          node['parents'].splice(location, 1);\n        }\n      }\n    }\n  }\n\n  return nm;\n};\n\nexports.parseProof = parseProof;\n\n//# sourceURL=webpack://idvjs/./static/js/parser.js?");

/***/ }),

/***/ "?1ac6":
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/***/ (() => {

eval("/* (ignored) */\n\n//# sourceURL=webpack://idvjs/fs_(ignored)?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/BufferedTokenStream.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/BufferedTokenStream.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BufferedTokenStream)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _Lexer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Lexer.js */ \"./node_modules/antlr4/src/antlr4/Lexer.js\");\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _TokenStream_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TokenStream.js */ \"./node_modules/antlr4/src/antlr4/TokenStream.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n/**\n * This implementation of {@link TokenStream} loads tokens from a\n * {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n * access to any previous token by index.\n *\n * <p>\n * This token stream ignores the value of {@link Token//getChannel}. If your\n * parser requires the token stream filter tokens to only those on a particular\n * channel, such as {@link Token//DEFAULT_CHANNEL} or\n * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n * {@link CommonTokenStream}.</p>\n */\nclass BufferedTokenStream extends _TokenStream_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n\tconstructor(tokenSource) {\n\n\t\tsuper();\n\t\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\t\tthis.tokenSource = tokenSource;\n\t\t/**\n\t\t * A collection of all tokens fetched from the token source. The list is\n\t\t * considered a complete view of the input once {@link //fetchedEOF} is set\n\t\t * to {@code true}.\n\t\t */\n\t\tthis.tokens = [];\n\n\t\t/**\n\t\t * The index into {@link //tokens} of the current token (next token to\n\t\t * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t\t * be\n\t\t * {@link //LT LT(1)}.\n\t\t *\n\t\t * <p>This field is set to -1 when the stream is first constructed or when\n\t\t * {@link //setTokenSource} is called, indicating that the first token has\n\t\t * not yet been fetched from the token source. For additional information,\n\t\t * see the documentation of {@link IntStream} for a description of\n\t\t * Initializing Methods.</p>\n\t\t */\n\t\tthis.index = -1;\n\n\t\t/**\n\t\t * Indicates whether the {@link Token//EOF} token has been fetched from\n\t\t * {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t\t * performance for the following cases:\n\t\t *\n\t\t * <ul>\n\t\t * <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t\t * prevent\n\t\t * consuming the EOF symbol is optimized by checking the values of\n\t\t * {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t\t * //LA}.</li>\n\t\t * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t\t * into\n\t\t * {@link //tokens} is trivial with this field.</li>\n\t\t * <ul>\n\t\t */\n\t\tthis.fetchedEOF = false;\n\t}\n\n\tmark() {\n\t\treturn 0;\n\t}\n\n\trelease(marker) {\n\t\t// no resources to release\n\t}\n\n\treset() {\n\t\tthis.seek(0);\n\t}\n\n\tseek(index) {\n\t\tthis.lazyInit();\n\t\tthis.index = this.adjustSeekIndex(index);\n\t}\n\n\tget(index) {\n\t\tthis.lazyInit();\n\t\treturn this.tokens[index];\n\t}\n\n\tconsume() {\n\t\tlet skipEofCheck = false;\n\t\tif (this.index >= 0) {\n\t\t\tif (this.fetchedEOF) {\n\t\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t\t// fetched token except the last.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t\t} else {\n\t\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t\t}\n\t\t} else {\n\t\t\t// not yet initialized\n\t\t\tskipEofCheck = false;\n\t\t}\n\t\tif (!skipEofCheck && this.LA(1) === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\tthrow \"cannot consume EOF\";\n\t\t}\n\t\tif (this.sync(this.index + 1)) {\n\t\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t\t}\n\t}\n\n\t/**\n\t * Make sure index {@code i} in tokens has a token.\n\t *\n\t * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise\n\t * {@code false}.\n\t * @see //get(int i)\n\t */\n\tsync(i) {\n\t\tconst n = i - this.tokens.length + 1; // how many more elements we need?\n\t\tif (n > 0) {\n\t\t\tconst fetched = this.fetch(n);\n\t\t\treturn fetched >= n;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Add {@code n} elements to buffer.\n\t *\n\t * @return {Number} The actual number of elements added to the buffer.\n\t */\n\tfetch(n) {\n\t\tif (this.fetchedEOF) {\n\t\t\treturn 0;\n\t\t}\n\t\tfor (let i = 0; i < n; i++) {\n\t\t\tconst t = this.tokenSource.nextToken();\n\t\t\tt.tokenIndex = this.tokens.length;\n\t\t\tthis.tokens.push(t);\n\t\t\tif (t.type === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\t\tthis.fetchedEOF = true;\n\t\t\t\treturn i + 1;\n\t\t\t}\n\t\t}\n\t\treturn n;\n\t}\n\n// Get all tokens from start..stop inclusively///\n\tgetTokens(start, stop, types) {\n\t\tif (types === undefined) {\n\t\t\ttypes = null;\n\t\t}\n\t\tif (start < 0 || stop < 0) {\n\t\t\treturn null;\n\t\t}\n\t\tthis.lazyInit();\n\t\tconst subset = [];\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tfor (let i = start; i < stop; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (types === null || types.contains(t.type)) {\n\t\t\t\tsubset.push(t);\n\t\t\t}\n\t\t}\n\t\treturn subset;\n\t}\n\n\tLA(i) {\n\t\treturn this.LT(i).type;\n\t}\n\n\tLB(k) {\n\t\tif (this.index - k < 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.tokens[this.index - k];\n\t}\n\n\tLT(k) {\n\t\tthis.lazyInit();\n\t\tif (k === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tif (k < 0) {\n\t\t\treturn this.LB(-k);\n\t\t}\n\t\tconst i = this.index + k - 1;\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) { // return EOF token\n\t\t\t// EOF must be last token\n\t\t\treturn this.tokens[this.tokens.length - 1];\n\t\t}\n\t\treturn this.tokens[i];\n\t}\n\n\t/**\n\t * Allowed derived classes to modify the behavior of operations which change\n\t * the current stream position by adjusting the target token index of a seek\n\t * operation. The default implementation simply returns {@code i}. If an\n\t * exception is thrown in this method, the current stream index should not be\n\t * changed.\n\t *\n\t * <p>For example, {@link CommonTokenStream} overrides this method to ensure\n\t * that\n\t * the seek target is always an on-channel token.</p>\n\t *\n\t * @param {Number} i The target token index.\n\t * @return {Number} The adjusted target token index.\n\t */\n\tadjustSeekIndex(i) {\n\t\treturn i;\n\t}\n\n\tlazyInit() {\n\t\tif (this.index === -1) {\n\t\t\tthis.setup();\n\t\t}\n\t}\n\n\tsetup() {\n\t\tthis.sync(0);\n\t\tthis.index = this.adjustSeekIndex(0);\n\t}\n\n// Reset this token stream by setting its token source.///\n\tsetTokenSource(tokenSource) {\n\t\tthis.tokenSource = tokenSource;\n\t\tthis.tokens = [];\n\t\tthis.index = -1;\n\t\tthis.fetchedEOF = false;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the next token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and EOF.\n\t */\n\tnextTokenOnChannel(i, channel) {\n\t\tthis.sync(i);\n\t\tif (i >= this.tokens.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tlet token = this.tokens[i];\n\t\twhile (token.channel !== this.channel) {\n\t\t\tif (token.type === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\ti += 1;\n\t\t\tthis.sync(i);\n\t\t\ttoken = this.tokens[i];\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Given a starting index, return the index of the previous token on channel.\n\t * Return i if tokens[i] is on channel. Return -1 if there are no tokens\n\t * on channel between i and 0.\n\t */\n\tpreviousTokenOnChannel(i, channel) {\n\t\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\t\ti -= 1;\n\t\t}\n\t\treturn i;\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the right of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n\t * EOF. If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToRight(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, _Lexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_TOKEN_CHANNEL);\n\t\tconst from_ = tokenIndex + 1;\n\t\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\t\tconst to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\t/**\n\t * Collect all tokens on specified channel to the left of\n\t * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n\t * If channel is -1, find any non default channel token.\n\t */\n\tgetHiddenTokensToLeft(tokenIndex,\n\t\t\tchannel) {\n\t\tif (channel === undefined) {\n\t\t\tchannel = -1;\n\t\t}\n\t\tthis.lazyInit();\n\t\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t\t}\n\t\tconst prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, _Lexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_TOKEN_CHANNEL);\n\t\tif (prevOnChannel === tokenIndex - 1) {\n\t\t\treturn null;\n\t\t}\n\t\t// if none on channel to left, prevOnChannel=-1 then from=0\n\t\tconst from_ = prevOnChannel + 1;\n\t\tconst to = tokenIndex - 1;\n\t\treturn this.filterForChannel(from_, to, channel);\n\t}\n\n\tfilterForChannel(left, right, channel) {\n\t\tconst hidden = [];\n\t\tfor (let i = left; i < right + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (channel === -1) {\n\t\t\t\tif (t.channel !== _Lexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\t\thidden.push(t);\n\t\t\t\t}\n\t\t\t} else if (t.channel === channel) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t}\n\t\tif (hidden.length === 0) {\n\t\t\treturn null;\n\t\t}\n\t\treturn hidden;\n\t}\n\n\tgetSourceName() {\n\t\treturn this.tokenSource.getSourceName();\n\t}\n\n// Get the text of all tokens in this buffer.///\n\tgetText(interval) {\n\t\tthis.lazyInit();\n\t\tthis.fill();\n\t\tif (interval === undefined || interval === null) {\n\t\t\tinterval = new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](0, this.tokens.length - 1);\n\t\t}\n\t\tlet start = interval.start;\n\t\tif (start instanceof _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n\t\t\tstart = start.tokenIndex;\n\t\t}\n\t\tlet stop = interval.stop;\n\t\tif (stop instanceof _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n\t\t\tstop = stop.tokenIndex;\n\t\t}\n\t\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\t\treturn \"\";\n\t\t}\n\t\tif (stop >= this.tokens.length) {\n\t\t\tstop = this.tokens.length - 1;\n\t\t}\n\t\tlet s = \"\";\n\t\tfor (let i = start; i < stop + 1; i++) {\n\t\t\tconst t = this.tokens[i];\n\t\t\tif (t.type === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ts = s + t.text;\n\t\t}\n\t\treturn s;\n\t}\n\n// Get all tokens from lexer until EOF///\n\tfill() {\n\t\tthis.lazyInit();\n\t\twhile (this.fetch(1000) === 1000) {\n\t\t\tcontinue;\n\t\t}\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/BufferedTokenStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CharStreams.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CharStreams.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _InputStream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputStream.js */ \"./node_modules/antlr4/src/antlr4/InputStream.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"?1ac6\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n/**\n * Utility functions to create InputStreams from various sources.\n *\n * All returned InputStreams support the full range of Unicode\n * up to U+10FFFF (the default behavior of InputStream only supports\n * code points up to U+FFFF).\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  // Creates an InputStream from a string.\n  fromString: function(str) {\n    return new _InputStream_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](str, true);\n  },\n\n  /**\n   * Asynchronously creates an InputStream from a blob given the\n   * encoding of the bytes in that blob (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes onLoad(result) on success, onError(error) on\n   * failure.\n   */\n  fromBlob: function(blob, encoding, onLoad, onError) {\n    const reader = new window.FileReader();\n    reader.onload = function(e) {\n      const is = new _InputStream_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  /**\n   * Creates an InputStream from a Buffer given the\n   * encoding of the bytes in that buffer (defaults to 'utf8' if\n   * encoding is null).\n   */\n  fromBuffer: function(buffer, encoding) {\n    return new _InputStream_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](buffer.toString(encoding), true);\n  },\n\n  /** Asynchronously creates an InputStream from a file on disk given\n   * the encoding of the bytes in that file (defaults to 'utf8' if\n   * encoding is null).\n   *\n   * Invokes callback(error, result) on completion.\n   */\n  fromPath: function(path, encoding, callback) {\n    fs__WEBPACK_IMPORTED_MODULE_1__.readFile(path, encoding, function(err, data) {\n      let is = null;\n      if (data !== null) {\n        is = new _InputStream_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  /**\n   * Synchronously creates an InputStream given a path to a file\n   * on disk and the encoding of the bytes in that file (defaults to\n   * 'utf8' if encoding is null).\n   */\n  fromPathSync: function(path, encoding) {\n    const data = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(path, encoding);\n    return new _InputStream_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](data, true);\n  }\n});\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/CharStreams.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonToken.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonToken.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CommonToken)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n\n\nclass CommonToken extends _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(source, type, channel, start, stop) {\n        super();\n        this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n        this.type = type !== undefined ? type : null;\n        this.channel = channel !== undefined ? channel : _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_CHANNEL;\n        this.start = start !== undefined ? start : -1;\n        this.stop = stop !== undefined ? stop : -1;\n        this.tokenIndex = -1;\n        if (this.source[0] !== null) {\n            this.line = source[0].line;\n            this.column = source[0].column;\n        } else {\n            this.column = -1;\n        }\n    }\n\n    /**\n     * Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n     *\n     * <p>\n     * If {@code oldToken} is also a {@link CommonToken} instance, the newly\n     * constructed token will share a reference to the {@link //text} field and\n     * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n     * be assigned the result of calling {@link //getText}, and {@link //source}\n     * will be constructed from the result of {@link Token//getTokenSource} and\n     * {@link Token//getInputStream}.</p>\n     *\n     * @param oldToken The token to copy.\n     */\n    clone() {\n        const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);\n        t.tokenIndex = this.tokenIndex;\n        t.line = this.line;\n        t.column = this.column;\n        t.text = this.text;\n        return t;\n    }\n\n    toString() {\n        let txt = this.text;\n        if (txt !== null) {\n            txt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n        } else {\n            txt = \"<no text>\";\n        }\n        return \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" +\n            txt + \"',<\" + this.type + \">\" +\n            (this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" +\n            this.line + \":\" + this.column + \"]\";\n    }\n\n    get text(){\n        if (this._text !== null) {\n            return this._text;\n        }\n        const input = this.getInputStream();\n        if (input === null) {\n            return null;\n        }\n        const n = input.size;\n        if (this.start < n && this.stop < n) {\n            return input.getText(this.start, this.stop);\n        } else {\n            return \"<EOF>\";\n        }\n    }\n\n    set text(text) {\n        this._text = text;\n    }\n}\n\n/**\n * An empty {@link Pair} which is used as the default value of\n * {@link //source} for tokens that do not have a source.\n */\nCommonToken.EMPTY_SOURCE = [ null, null ];\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/CommonToken.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenFactory.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenFactory.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CommonTokenFactory)\n/* harmony export */ });\n/* harmony import */ var _CommonToken_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CommonToken.js */ \"./node_modules/antlr4/src/antlr4/CommonToken.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass TokenFactory {}\n\n/**\n * This default implementation of {@link TokenFactory} creates\n * {@link CommonToken} objects.\n */\nclass CommonTokenFactory extends TokenFactory {\n    constructor(copyText) {\n        super();\n        /**\n         * Indicates whether {@link CommonToken//setText} should be called after\n         * constructing tokens to explicitly set the text. This is useful for cases\n         * where the input stream might not be able to provide arbitrary substrings\n         * of text from the input after the lexer creates a token (e.g. the\n         * implementation of {@link CharStream//getText} in\n         * {@link UnbufferedCharStream} throws an\n         * {@link UnsupportedOperationException}). Explicitly setting the token text\n         * allows {@link Token//getText} to be called at any time regardless of the\n         * input stream implementation.\n         *\n         * <p>\n         * The default value is {@code false} to avoid the performance and memory\n         * overhead of copying text for every token unless explicitly requested.</p>\n         */\n        this.copyText = copyText===undefined ? false : copyText;\n    }\n\n    create(source, type, text, channel, start, stop, line, column) {\n        const t = new _CommonToken_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](source, type, channel, start, stop);\n        t.line = line;\n        t.column = column;\n        if (text !==null) {\n            t.text = text;\n        } else if (this.copyText && source[1] !==null) {\n            t.text = source[1].getText(start,stop);\n        }\n        return t;\n    }\n\n    createThin(type, text) {\n        const t = new _CommonToken_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](null, type);\n        t.text = text;\n        return t;\n    }\n}\n\n/**\n * The default {@link CommonTokenFactory} instance.\n *\n * <p>\n * This token factory does not explicitly copy token text when constructing\n * tokens.</p>\n */\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/CommonTokenFactory.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenStream.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenStream.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ CommonTokenStream)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _BufferedTokenStream_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BufferedTokenStream.js */ \"./node_modules/antlr4/src/antlr4/BufferedTokenStream.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n/**\n * This class extends {@link BufferedTokenStream} with functionality to filter\n * token streams to tokens on a particular channel (tokens where\n * {@link Token//getChannel} returns a particular value).\n *\n * <p>\n * This token stream provides access to all tokens by index or when calling\n * methods like {@link //getText}. The channel filtering is only used for code\n * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n * {@link //LB}.</p>\n *\n * <p>\n * By default, tokens are placed on the default channel\n * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n * call {@link Lexer//setChannel}.\n * </p>\n *\n * <p>\n * Note: lexer rules which use the {@code ->skip} lexer command or call\n * {@link Lexer//skip} do not produce tokens at all, so input text matched by\n * such a rule will not be available as part of the token stream, regardless of\n * channel.</p>\n */\nclass CommonTokenStream extends _BufferedTokenStream_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(lexer, channel) {\n        super(lexer);\n        this.channel = channel===undefined ? _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_CHANNEL : channel;\n    }\n\n    adjustSeekIndex(i) {\n        return this.nextTokenOnChannel(i, this.channel);\n    }\n\n    LB(k) {\n        if (k===0 || this.index-k<0) {\n            return null;\n        }\n        let i = this.index;\n        let n = 1;\n        // find k good tokens looking backwards\n        while (n <= k) {\n            // skip off-channel tokens\n            i = this.previousTokenOnChannel(i - 1, this.channel);\n            n += 1;\n        }\n        if (i < 0) {\n            return null;\n        }\n        return this.tokens[i];\n    }\n\n    LT(k) {\n        this.lazyInit();\n        if (k === 0) {\n            return null;\n        }\n        if (k < 0) {\n            return this.LB(-k);\n        }\n        let i = this.index;\n        let n = 1; // we know tokens[pos] is a good one\n        // find k good tokens\n        while (n < k) {\n            // skip off-channel tokens, but make sure to not look past EOF\n            if (this.sync(i + 1)) {\n                i = this.nextTokenOnChannel(i + 1, this.channel);\n            }\n            n += 1;\n        }\n        return this.tokens[i];\n    }\n\n    // Count EOF just once.\n    getNumberOfOnChannelTokens() {\n        let n = 0;\n        this.fill();\n        for (let i =0; i< this.tokens.length;i++) {\n            const t = this.tokens[i];\n            if( t.channel===this.channel) {\n                n += 1;\n            }\n            if( t.type===_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n                break;\n            }\n        }\n        return n;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/CommonTokenStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/FileStream.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/FileStream.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FileStream)\n/* harmony export */ });\n/* harmony import */ var _InputStream_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputStream.js */ \"./node_modules/antlr4/src/antlr4/InputStream.js\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ \"?1ac6\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n/**\n * This is an InputStream that is loaded from a file all at once\n * when you construct the object.\n */\nclass FileStream extends _InputStream_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\tconstructor(fileName, decodeToUnicodeCodePoints) {\n\t\tconst data = fs__WEBPACK_IMPORTED_MODULE_1__.readFileSync(fileName, \"utf8\");\n\t\tsuper(data, decodeToUnicodeCodePoints);\n\t\tthis.fileName = fileName;\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/FileStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/InputStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/InputStream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InputStream)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _polyfills_codepointat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polyfills/codepointat.js */ \"./node_modules/antlr4/src/antlr4/polyfills/codepointat.js\");\n/* harmony import */ var _polyfills_fromcodepoint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfills/fromcodepoint.js */ \"./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n/**\n * If decodeToUnicodeCodePoints is true, the input is treated\n * as a series of Unicode code points.\n *\n * Otherwise, the input is treated as a series of 16-bit UTF-16 code\n * units.\n */\nclass InputStream {\n\tconstructor(data, decodeToUnicodeCodePoints) {\n\t\tthis.name = \"<empty>\";\n\t\tthis.strdata = data;\n\t\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t\t// _loadString - Vacuum all input from a string and then treat it like a buffer.\n\t\tthis._index = 0;\n\t\tthis.data = [];\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tfor (let i = 0; i < this.strdata.length; ) {\n\t\t\t\tconst codePoint = this.strdata.codePointAt(i);\n\t\t\t\tthis.data.push(codePoint);\n\t\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.data = new Array(this.strdata.length);\n\t\t\tfor (let i = 0; i < this.strdata.length; i++) {\n\t\t\t\tconst codeUnit = this.strdata.charCodeAt(i);\n\t\t\t\tthis.data[i] = codeUnit;\n\t\t\t}\n\t\t}\n\t\tthis._size = this.data.length;\n\t}\n\n\t/**\n\t * Reset the stream so that it's in the same state it was\n\t * when the object was created *except* the data array is not\n\t * touched.\n\t */\n\treset() {\n\t\tthis._index = 0;\n\t}\n\n\tconsume() {\n\t\tif (this._index >= this._size) {\n\t\t\t// assert this.LA(1) == Token.EOF\n\t\t\tthrow (\"cannot consume EOF\");\n\t\t}\n\t\tthis._index += 1;\n\t}\n\n\tLA(offset) {\n\t\tif (offset === 0) {\n\t\t\treturn 0; // undefined\n\t\t}\n\t\tif (offset < 0) {\n\t\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t\t}\n\t\tconst pos = this._index + offset - 1;\n\t\tif (pos < 0 || pos >= this._size) { // invalid\n\t\t\treturn _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF;\n\t\t}\n\t\treturn this.data[pos];\n\t}\n\n\tLT(offset) {\n\t\treturn this.LA(offset);\n\t}\n\n// mark/release do nothing; we have entire buffer\n\tmark() {\n\t\treturn -1;\n\t}\n\n\trelease(marker) {\n\t}\n\n\t/**\n\t * consume() ahead until p==_index; can't just set p=_index as we must\n\t * update line and column. If we seek backwards, just set p\n\t */\n\tseek(_index) {\n\t\tif (_index <= this._index) {\n\t\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t\t\t\t\t\t\t// ...)\n\t\t\treturn;\n\t\t}\n\t\t// seek forward\n\t\tthis._index = Math.min(_index, this._size);\n\t}\n\n\tgetText(start, stop) {\n\t\tif (stop >= this._size) {\n\t\t\tstop = this._size - 1;\n\t\t}\n\t\tif (start >= this._size) {\n\t\t\treturn \"\";\n\t\t} else {\n\t\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\t\tlet result = \"\";\n\t\t\t\tfor (let i = start; i <= stop; i++) {\n\t\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.strdata;\n\t}\n\n\tget index(){\n\t\treturn this._index;\n\t}\n\n\tget size(){\n\t\treturn this._size;\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/InputStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Lexer.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Lexer.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Lexer)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _Recognizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Recognizer.js */ \"./node_modules/antlr4/src/antlr4/Recognizer.js\");\n/* harmony import */ var _CommonTokenFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CommonTokenFactory.js */ \"./node_modules/antlr4/src/antlr4/CommonTokenFactory.js\");\n/* harmony import */ var _error_RecognitionException_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./error/RecognitionException.js */ \"./node_modules/antlr4/src/antlr4/error/RecognitionException.js\");\n/* harmony import */ var _error_LexerNoViableAltException_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error/LexerNoViableAltException.js */ \"./node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n/**\n * A lexer is recognizer that draws input symbols from a character stream.\n * lexer grammars result in a subclass of this object. A Lexer object\n * uses simplified match() and error recovery mechanisms in the interest of speed.\n */\nclass Lexer extends _Recognizer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n\tconstructor(input) {\n\t\tsuper();\n\t\tthis._input = input;\n\t\tthis._factory = _CommonTokenFactory_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].DEFAULT;\n\t\tthis._tokenFactorySourcePair = [ this, input ];\n\n\t\tthis._interp = null; // child classes must populate this\n\n\t\t/**\n\t\t * The goal of all lexer rules/methods is to create a token object.\n\t\t * this is an instance variable as multiple rules may collaborate to\n\t\t * create a single token. nextToken will return this object after\n\t\t * matching lexer rule(s). If you subclass to allow multiple token\n\t\t * emissions, then set this to the last token to be matched or\n\t\t * something nonnull so that the auto token emit mechanism will not\n\t\t * emit another token.\n\t\t */\n\t\tthis._token = null;\n\n\t\t/**\n\t\t * What character index in the stream did the current token start at?\n\t\t * Needed, for example, to get the text for current token. Set at\n\t\t * the start of nextToken.\n\t\t */\n\t\tthis._tokenStartCharIndex = -1;\n\n\t\t// The line on which the first character of the token resides///\n\t\tthis._tokenStartLine = -1;\n\n\t\t// The character position of first character within the line///\n\t\tthis._tokenStartColumn = -1;\n\n\t\t// Once we see EOF on char stream, next token will be EOF.\n\t\t// If you have DONE : EOF ; then you see DONE EOF.\n\t\tthis._hitEOF = false;\n\n\t\t// The channel number for the current token///\n\t\tthis._channel = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_CHANNEL;\n\n\t\t// The token type for the current token///\n\t\tthis._type = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_TYPE;\n\n\t\tthis._modeStack = [];\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t\t/**\n\t\t * You can set the text for the current token to override what is in\n\t\t * the input char buffer. Use setText() or can set this instance var.\n\t\t */\n\t\tthis._text = null;\n\t}\n\n\treset() {\n\t\t// wack Lexer state variables\n\t\tif (this._input !== null) {\n\t\t\tthis._input.seek(0); // rewind the input\n\t\t}\n\t\tthis._token = null;\n\t\tthis._type = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_TYPE;\n\t\tthis._channel = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_CHANNEL;\n\t\tthis._tokenStartCharIndex = -1;\n\t\tthis._tokenStartColumn = -1;\n\t\tthis._tokenStartLine = -1;\n\t\tthis._text = null;\n\n\t\tthis._hitEOF = false;\n\t\tthis._mode = Lexer.DEFAULT_MODE;\n\t\tthis._modeStack = [];\n\n\t\tthis._interp.reset();\n\t}\n\n// Return a token from this source; i.e., match a token on the char stream.\n\tnextToken() {\n\t\tif (this._input === null) {\n\t\t\tthrow \"nextToken requires a non-null input stream.\";\n\t\t}\n\n\t\t/**\n\t\t * Mark start location in char stream so unbuffered streams are\n\t\t * guaranteed at least have text of current token\n\t\t */\n\t\tconst tokenStartMarker = this._input.mark();\n\t\ttry {\n\t\t\tfor (;;) {\n\t\t\t\tif (this._hitEOF) {\n\t\t\t\t\tthis.emitEOF();\n\t\t\t\t\treturn this._token;\n\t\t\t\t}\n\t\t\t\tthis._token = null;\n\t\t\t\tthis._channel = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_CHANNEL;\n\t\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\t\tthis._text = null;\n\t\t\t\tlet continueOuter = false;\n\t\t\t\tfor (;;) {\n\t\t\t\t\tthis._type = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_TYPE;\n\t\t\t\t\tlet ttype = Lexer.SKIP;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif(e instanceof _error_RecognitionException_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n\t\t\t\t\t\t\tthis.notifyListeners(e); // report error\n\t\t\t\t\t\t\tthis.recover(e);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(e.stack);\n\t\t\t\t\t\t\tthrow e;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (this._input.LA(1) === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_TYPE) {\n\t\t\t\t\t\tthis._type = ttype;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (continueOuter) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this._token === null) {\n\t\t\t\t\tthis.emit();\n\t\t\t\t}\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t} finally {\n\t\t\t// make sure we release marker after match or\n\t\t\t// unbuffered char stream will keep buffering\n\t\t\tthis._input.release(tokenStartMarker);\n\t\t}\n\t}\n\n\t/**\n\t * Instruct the lexer to skip creating a token for current lexer rule\n\t * and look for another token. nextToken() knows to keep looking when\n\t * a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n\t * if token==null at end of any token rule, it creates one for you\n\t * and emits it.\n\t */\n\tskip() {\n\t\tthis._type = Lexer.SKIP;\n\t}\n\n\tmore() {\n\t\tthis._type = Lexer.MORE;\n\t}\n\n\tmode(m) {\n\t\tthis._mode = m;\n\t}\n\n\tpushMode(m) {\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"pushMode \" + m);\n\t\t}\n\t\tthis._modeStack.push(this._mode);\n\t\tthis.mode(m);\n\t}\n\n\tpopMode() {\n\t\tif (this._modeStack.length === 0) {\n\t\t\tthrow \"Empty Stack\";\n\t\t}\n\t\tif (this._interp.debug) {\n\t\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t\t}\n\t\tthis.mode(this._modeStack.pop());\n\t\treturn this._mode;\n\t}\n\n\t/**\n\t * By default does not support multiple emits per nextToken invocation\n\t * for efficiency reasons. Subclass and override this method, nextToken,\n\t * and getToken (to push tokens into a list and pull from that list\n\t * rather than a single variable as this implementation does).\n\t */\n\temitToken(token) {\n\t\tthis._token = token;\n\t}\n\n\t/**\n\t * The standard method called to automatically emit a token at the\n\t * outermost lexical rule. The token object should point into the\n\t * char buffer start..stop. If there is a text override in 'text',\n\t * use that to set the token's text. Override this method to emit\n\t * custom Token objects or provide a new factory.\n\t */\n\temit() {\n\t\tconst t = this._factory.create(this._tokenFactorySourcePair, this._type,\n\t\t\t\tthis._text, this._channel, this._tokenStartCharIndex, this\n\t\t\t\t\t\t.getCharIndex() - 1, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn);\n\t\tthis.emitToken(t);\n\t\treturn t;\n\t}\n\n\temitEOF() {\n\t\tconst cpos = this.column;\n\t\tconst lpos = this.line;\n\t\tconst eof = this._factory.create(this._tokenFactorySourcePair, _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF,\n\t\t\t\tnull, _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_CHANNEL, this._input.index,\n\t\t\t\tthis._input.index - 1, lpos, cpos);\n\t\tthis.emitToken(eof);\n\t\treturn eof;\n\t}\n\n// What is the index of the current character of lookahead?///\n\tgetCharIndex() {\n\t\treturn this._input.index;\n\t}\n\n\t/**\n\t * Return a list of all Token objects in input char stream.\n\t * Forces load of all tokens. Does not include EOF token.\n\t */\n\tgetAllTokens() {\n\t\tconst tokens = [];\n\t\tlet t = this.nextToken();\n\t\twhile (t.type !== _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\ttokens.push(t);\n\t\t\tt = this.nextToken();\n\t\t}\n\t\treturn tokens;\n\t}\n\n\tnotifyListeners(e) {\n\t\tconst start = this._tokenStartCharIndex;\n\t\tconst stop = this._input.index;\n\t\tconst text = this._input.getText(start, stop);\n\t\tconst msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\t\tconst listener = this.getErrorListenerDispatch();\n\t\tlistener.syntaxError(this, null, this._tokenStartLine,\n\t\t\t\tthis._tokenStartColumn, msg, e);\n\t}\n\n\tgetErrorDisplay(s) {\n\t\tconst d = [];\n\t\tfor (let i = 0; i < s.length; i++) {\n\t\t\td.push(s[i]);\n\t\t}\n\t\treturn d.join('');\n\t}\n\n\tgetErrorDisplayForChar(c) {\n\t\tif (c.charCodeAt(0) === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (c === '\\n') {\n\t\t\treturn \"\\\\n\";\n\t\t} else if (c === '\\t') {\n\t\t\treturn \"\\\\t\";\n\t\t} else if (c === '\\r') {\n\t\t\treturn \"\\\\r\";\n\t\t} else {\n\t\t\treturn c;\n\t\t}\n\t}\n\n\tgetCharErrorDisplay(c) {\n\t\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n\t}\n\n\t/**\n\t * Lexers can normally match any char in it's vocabulary after matching\n\t * a token, so do the easy thing and just kill a character and hope\n\t * it all works out. You can instead use the rule invocation stack\n\t * to do sophisticated error recovery if you are in a fragment rule.\n\t */\n\trecover(re) {\n\t\tif (this._input.LA(1) !== _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\tif (re instanceof _error_LexerNoViableAltException_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n\t\t\t\t// skip a char and try again\n\t\t\t\tthis._interp.consume(this._input);\n\t\t\t} else {\n\t\t\t\t// TODO: Do we lose character or line position information?\n\t\t\t\tthis._input.consume();\n\t\t\t}\n\t\t}\n\t}\n\n\tget inputStream(){\n\t\treturn this._input;\n\t}\n\n\tset inputStream(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t}\n\n\tget sourceName(){\n\t\treturn this._input.sourceName;\n\t}\n\n\tget type(){\n\t\treturn this._type;\n\t}\n\n\tset type(type) {\n\t\tthis._type = type;\n\t}\n\n\tget line(){\n\t\treturn this._interp.line;\n\t}\n\n\tset line(line) {\n\t\tthis._interp.line = line;\n\t}\n\n\tget column(){\n\t\treturn this._interp.column;\n\t}\n\n\tset column(column) {\n\t\tthis._interp.column = column;\n\t}\n\n\tget text(){\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\n\n\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].DEFAULT_CHANNEL;\nLexer.HIDDEN = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/Lexer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Parser.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Parser.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Parser)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _tree_TerminalNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tree/TerminalNode.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNode.js\");\n/* harmony import */ var _tree_ErrorNode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./tree/ErrorNode.js */ \"./node_modules/antlr4/src/antlr4/tree/ErrorNode.js\");\n/* harmony import */ var _Recognizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Recognizer.js */ \"./node_modules/antlr4/src/antlr4/Recognizer.js\");\n/* harmony import */ var _error_DefaultErrorStrategy_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./error/DefaultErrorStrategy.js */ \"./node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js\");\n/* harmony import */ var _atn_ATNDeserializer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./atn/ATNDeserializer.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\");\n/* harmony import */ var _atn_ATNDeserializationOptions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./atn/ATNDeserializationOptions.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\");\n/* harmony import */ var _TraceListener_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./TraceListener.js */ \"./node_modules/antlr4/src/antlr4/TraceListener.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\nclass Parser extends _Recognizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    /**\n     * this is all the parsing support code essentially; most of it is error\n     * recovery stuff.\n     */\n    constructor(input) {\n        super();\n        // The input stream.\n        this._input = null;\n        /**\n         * The error handling strategy for the parser. The default value is a new\n         * instance of {@link DefaultErrorStrategy}.\n         */\n        this._errHandler = new _error_DefaultErrorStrategy_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        this._precedenceStack = [];\n        this._precedenceStack.push(0);\n        /**\n         * The {@link ParserRuleContext} object for the currently executing rule.\n         * this is always non-null during the parsing process.\n         */\n        this._ctx = null;\n        /**\n         * Specifies whether or not the parser should construct a parse tree during\n         * the parsing process. The default value is {@code true}.\n         */\n        this.buildParseTrees = true;\n        /**\n         * When {@link //setTrace}{@code (true)} is called, a reference to the\n         * {@link TraceListener} is stored here so it can be easily removed in a\n         * later call to {@link //setTrace}{@code (false)}. The listener itself is\n         * implemented as a parser listener so this field is not directly used by\n         * other parser methods.\n         */\n        this._tracer = null;\n        /**\n         * The list of {@link ParseTreeListener} listeners registered to receive\n         * events during the parse.\n         */\n        this._parseListeners = null;\n        /**\n         * The number of syntax errors reported during parsing. this value is\n         * incremented each time {@link //notifyErrorListeners} is called.\n         */\n        this._syntaxErrors = 0;\n        this.setInputStream(input);\n    }\n\n    // reset the parser's state\n    reset() {\n        if (this._input !== null) {\n            this._input.seek(0);\n        }\n        this._errHandler.reset(this);\n        this._ctx = null;\n        this._syntaxErrors = 0;\n        this.setTrace(false);\n        this._precedenceStack = [];\n        this._precedenceStack.push(0);\n        if (this._interp !== null) {\n            this._interp.reset();\n        }\n    }\n\n    /**\n     * Match current input symbol against {@code ttype}. If the symbol type\n     * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n     * called to complete the match process.\n     *\n     * <p>If the symbol type does not match,\n     * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n     * strategy to attempt recovery. If {@link //getBuildParseTree} is\n     * {@code true} and the token index of the symbol returned by\n     * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n     * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n     *\n     * @param ttype the token type to match\n     * @return the matched symbol\n     * @throws RecognitionException if the current input symbol did not match\n     * {@code ttype} and the error strategy could not recover from the\n     * mismatched symbol\n     */\n    match(ttype) {\n        let t = this.getCurrentToken();\n        if (t.type === ttype) {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        } else {\n            t = this._errHandler.recoverInline(this);\n            if (this.buildParseTrees && t.tokenIndex === -1) {\n                // we must have conjured up a new token during single token\n                // insertion\n                // if it's not the current symbol\n                this._ctx.addErrorNode(t);\n            }\n        }\n        return t;\n    }\n\n    /**\n     * Match current input symbol as a wildcard. If the symbol type matches\n     * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n     * and {@link //consume} are called to complete the match process.\n     *\n     * <p>If the symbol type does not match,\n     * {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n     * strategy to attempt recovery. If {@link //getBuildParseTree} is\n     * {@code true} and the token index of the symbol returned by\n     * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n     * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n     *\n     * @return the matched symbol\n     * @throws RecognitionException if the current input symbol did not match\n     * a wildcard and the error strategy could not recover from the mismatched\n     * symbol\n     */\n    matchWildcard() {\n        let t = this.getCurrentToken();\n        if (t.type > 0) {\n            this._errHandler.reportMatch(this);\n            this.consume();\n        } else {\n            t = this._errHandler.recoverInline(this);\n            if (this._buildParseTrees && t.tokenIndex === -1) {\n                // we must have conjured up a new token during single token\n                // insertion\n                // if it's not the current symbol\n                this._ctx.addErrorNode(t);\n            }\n        }\n        return t;\n    }\n\n    getParseListeners() {\n        return this._parseListeners || [];\n    }\n\n    /**\n     * Registers {@code listener} to receive events during the parsing process.\n     *\n     * <p>To support output-preserving grammar transformations (including but not\n     * limited to left-recursion removal, automated left-factoring, and\n     * optimized code generation), calls to listener methods during the parse\n     * may differ substantially from calls made by\n     * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n     * particular, rule entry and exit events may occur in a different order\n     * during the parse than after the parser. In addition, calls to certain\n     * rule entry methods may be omitted.</p>\n     *\n     * <p>With the following specific exceptions, calls to listener events are\n     * <em>deterministic</em>, i.e. for identical input the calls to listener\n     * methods will be the same.</p>\n     *\n     * <ul>\n     * <li>Alterations to the grammar used to generate code may change the\n     * behavior of the listener calls.</li>\n     * <li>Alterations to the command line options passed to ANTLR 4 when\n     * generating the parser may change the behavior of the listener calls.</li>\n     * <li>Changing the version of the ANTLR Tool used to generate the parser\n     * may change the behavior of the listener calls.</li>\n     * </ul>\n     *\n     * @param listener the listener to add\n     *\n     * @throws NullPointerException if {@code} listener is {@code null}\n     */\n    addParseListener(listener) {\n        if (listener === null) {\n            throw \"listener\";\n        }\n        if (this._parseListeners === null) {\n            this._parseListeners = [];\n        }\n        this._parseListeners.push(listener);\n    }\n\n    /**\n     * Remove {@code listener} from the list of parse listeners.\n     *\n     * <p>If {@code listener} is {@code null} or has not been added as a parse\n     * listener, this method does nothing.</p>\n     * @param listener the listener to remove\n     */\n    removeParseListener(listener) {\n        if (this._parseListeners !== null) {\n            const idx = this._parseListeners.indexOf(listener);\n            if (idx >= 0) {\n                this._parseListeners.splice(idx, 1);\n            }\n            if (this._parseListeners.length === 0) {\n                this._parseListeners = null;\n            }\n        }\n    }\n\n    // Remove all parse listeners.\n    removeParseListeners() {\n        this._parseListeners = null;\n    }\n\n    // Notify any parse listeners of an enter rule event.\n    triggerEnterRuleEvent() {\n        if (this._parseListeners !== null) {\n            const ctx = this._ctx;\n            this._parseListeners.forEach(function (listener) {\n                listener.enterEveryRule(ctx);\n                ctx.enterRule(listener);\n            });\n        }\n    }\n\n    /**\n     * Notify any parse listeners of an exit rule event.\n     * @see //addParseListener\n     */\n    triggerExitRuleEvent() {\n        if (this._parseListeners !== null) {\n            // reverse order walk of listeners\n            const ctx = this._ctx;\n            this._parseListeners.slice(0).reverse().forEach(function (listener) {\n                ctx.exitRule(listener);\n                listener.exitEveryRule(ctx);\n            });\n        }\n    }\n\n    getTokenFactory() {\n        return this._input.tokenSource._factory;\n    }\n\n    // Tell our token source and error strategy about a new way to create tokens.\n    setTokenFactory(factory) {\n        this._input.tokenSource._factory = factory;\n    }\n\n    /**\n     * The ATN with bypass alternatives is expensive to create so we create it\n     * lazily.\n     *\n     * @throws UnsupportedOperationException if the current parser does not\n     * implement the {@link //getSerializedATN()} method.\n     */\n    getATNWithBypassAlts() {\n        const serializedAtn = this.getSerializedATN();\n        if (serializedAtn === null) {\n            throw \"The current parser does not support an ATN with bypass alternatives.\";\n        }\n        let result = this.bypassAltsAtnCache[serializedAtn];\n        if (result === null) {\n            const deserializationOptions = new _atn_ATNDeserializationOptions_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n            deserializationOptions.generateRuleBypassTransitions = true;\n            result = new _atn_ATNDeserializer_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](deserializationOptions)\n                .deserialize(serializedAtn);\n            this.bypassAltsAtnCache[serializedAtn] = result;\n        }\n        return result;\n    }\n\n    getInputStream() {\n        return this.getTokenStream();\n    }\n\n    setInputStream(input) {\n        this.setTokenStream(input);\n    }\n\n    getTokenStream() {\n        return this._input;\n    }\n\n    // Set the token stream and reset the parser.\n    setTokenStream(input) {\n        this._input = null;\n        this.reset();\n        this._input = input;\n    }\n\n    /**\n     * Match needs to return the current input symbol, which gets put\n     * into the label for the associated token ref; e.g., x=ID.\n     */\n    getCurrentToken() {\n        return this._input.LT(1);\n    }\n\n    notifyErrorListeners(msg, offendingToken, err) {\n        offendingToken = offendingToken || null;\n        err = err || null;\n        if (offendingToken === null) {\n            offendingToken = this.getCurrentToken();\n        }\n        this._syntaxErrors += 1;\n        const line = offendingToken.line;\n        const column = offendingToken.column;\n        const listener = this.getErrorListenerDispatch();\n        listener.syntaxError(this, offendingToken, line, column, msg, err);\n    }\n\n    /**\n     * Consume and return the {@linkplain //getCurrentToken current symbol}.\n     *\n     * <p>E.g., given the following input with {@code A} being the current\n     * lookahead symbol, this function moves the cursor to {@code B} and returns\n     * {@code A}.</p>\n     *\n     * <pre>\n     * A B\n     * ^\n     * </pre>\n     *\n     * If the parser is not in error recovery mode, the consumed symbol is added\n     * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n     * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n     * If the parser <em>is</em> in error recovery mode, the consumed symbol is\n     * added to the parse tree using\n     * {@link ParserRuleContext//addErrorNode(Token)}, and\n     * {@link ParseTreeListener//visitErrorNode} is called on any parse\n     * listeners.\n     */\n    consume() {\n        const o = this.getCurrentToken();\n        if (o.type !== _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n            this.getInputStream().consume();\n        }\n        const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n        if (this.buildParseTrees || hasListener) {\n            let node;\n            if (this._errHandler.inErrorRecoveryMode(this)) {\n                node = this._ctx.addErrorNode(o);\n            } else {\n                node = this._ctx.addTokenNode(o);\n            }\n            node.invokingState = this.state;\n            if (hasListener) {\n                this._parseListeners.forEach(function (listener) {\n                    if (node instanceof _tree_ErrorNode_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] || (node.isErrorNode !== undefined && node.isErrorNode())) {\n                        listener.visitErrorNode(node);\n                    } else if (node instanceof _tree_TerminalNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n                        listener.visitTerminal(node);\n                    }\n                });\n            }\n        }\n        return o;\n    }\n\n    addContextToParseTree() {\n        // add current context to parent if we have a parent\n        if (this._ctx.parentCtx !== null) {\n            this._ctx.parentCtx.addChild(this._ctx);\n        }\n    }\n\n    /**\n     * Always called by generated parsers upon entry to a rule. Access field\n     * {@link //_ctx} get the current context.\n     */\n    enterRule(localctx, state, ruleIndex) {\n        this.state = state;\n        this._ctx = localctx;\n        this._ctx.start = this._input.LT(1);\n        if (this.buildParseTrees) {\n            this.addContextToParseTree();\n        }\n        this.triggerEnterRuleEvent();\n    }\n\n    exitRule() {\n        this._ctx.stop = this._input.LT(-1);\n        // trigger event on _ctx, before it reverts to parent\n        this.triggerExitRuleEvent();\n        this.state = this._ctx.invokingState;\n        this._ctx = this._ctx.parentCtx;\n    }\n\n    enterOuterAlt(localctx, altNum) {\n        localctx.setAltNumber(altNum);\n        // if we have new localctx, make sure we replace existing ctx\n        // that is previous child of parse tree\n        if (this.buildParseTrees && this._ctx !== localctx) {\n            if (this._ctx.parentCtx !== null) {\n                this._ctx.parentCtx.removeLastChild();\n                this._ctx.parentCtx.addChild(localctx);\n            }\n        }\n        this._ctx = localctx;\n    }\n\n    /**\n     * Get the precedence level for the top-most precedence rule.\n     *\n     * @return The precedence level for the top-most precedence rule, or -1 if\n     * the parser context is not nested within a precedence rule.\n     */\n    getPrecedence() {\n        if (this._precedenceStack.length === 0) {\n            return -1;\n        } else {\n            return this._precedenceStack[this._precedenceStack.length - 1];\n        }\n    }\n\n    enterRecursionRule(localctx, state, ruleIndex, precedence) {\n        this.state = state;\n        this._precedenceStack.push(precedence);\n        this._ctx = localctx;\n        this._ctx.start = this._input.LT(1);\n        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n    }\n\n    // Like {@link //enterRule} but for recursive rules.\n    pushNewRecursionContext(localctx, state, ruleIndex) {\n        const previous = this._ctx;\n        previous.parentCtx = localctx;\n        previous.invokingState = state;\n        previous.stop = this._input.LT(-1);\n\n        this._ctx = localctx;\n        this._ctx.start = previous.start;\n        if (this.buildParseTrees) {\n            this._ctx.addChild(previous);\n        }\n        this.triggerEnterRuleEvent(); // simulates rule entry for left-recursive rules\n    }\n\n    unrollRecursionContexts(parentCtx) {\n        this._precedenceStack.pop();\n        this._ctx.stop = this._input.LT(-1);\n        const retCtx = this._ctx; // save current ctx (return value)\n        // unroll so _ctx is as it was before call to recursive method\n        const parseListeners = this.getParseListeners();\n        if (parseListeners !== null && parseListeners.length > 0) {\n            while (this._ctx !== parentCtx) {\n                this.triggerExitRuleEvent();\n                this._ctx = this._ctx.parentCtx;\n            }\n        } else {\n            this._ctx = parentCtx;\n        }\n        // hook into tree\n        retCtx.parentCtx = parentCtx;\n        if (this.buildParseTrees && parentCtx !== null) {\n            // add return ctx into invoking rule's tree\n            parentCtx.addChild(retCtx);\n        }\n    }\n\n    getInvokingContext(ruleIndex) {\n        let ctx = this._ctx;\n        while (ctx !== null) {\n            if (ctx.ruleIndex === ruleIndex) {\n                return ctx;\n            }\n            ctx = ctx.parentCtx;\n        }\n        return null;\n    }\n\n    precpred(localctx, precedence) {\n        return precedence >= this._precedenceStack[this._precedenceStack.length - 1];\n    }\n\n    inContext(context) {\n        // TODO: useful in parser?\n        return false;\n    }\n\n    /**\n     * Checks whether or not {@code symbol} can follow the current state in the\n     * ATN. The behavior of this method is equivalent to the following, but is\n     * implemented such that the complete context-sensitive follow set does not\n     * need to be explicitly constructed.\n     *\n     * <pre>\n     * return getExpectedTokens().contains(symbol);\n     * </pre>\n     *\n     * @param symbol the symbol type to check\n     * @return {@code true} if {@code symbol} can follow the current state in\n     * the ATN, otherwise {@code false}.\n     */\n    isExpectedToken(symbol) {\n        const atn = this._interp.atn;\n        let ctx = this._ctx;\n        const s = atn.states[this.state];\n        let following = atn.nextTokens(s);\n        if (following.contains(symbol)) {\n            return true;\n        }\n        if (!following.contains(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EPSILON)) {\n            return false;\n        }\n        while (ctx !== null && ctx.invokingState >= 0 && following.contains(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EPSILON)) {\n            const invokingState = atn.states[ctx.invokingState];\n            const rt = invokingState.transitions[0];\n            following = atn.nextTokens(rt.followState);\n            if (following.contains(symbol)) {\n                return true;\n            }\n            ctx = ctx.parentCtx;\n        }\n        if (following.contains(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EPSILON) && symbol === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Computes the set of input symbols which could follow the current parser\n     * state and context, as given by {@link //getState} and {@link //getContext},\n     * respectively.\n     *\n     * @see ATN//getExpectedTokens(int, RuleContext)\n     */\n    getExpectedTokens() {\n        return this._interp.atn.getExpectedTokens(this.state, this._ctx);\n    }\n\n    getExpectedTokensWithinCurrentRule() {\n        const atn = this._interp.atn;\n        const s = atn.states[this.state];\n        return atn.nextTokens(s);\n    }\n\n    // Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.\n    getRuleIndex(ruleName) {\n        const ruleIndex = this.getRuleIndexMap()[ruleName];\n        if (ruleIndex !== null) {\n            return ruleIndex;\n        } else {\n            return -1;\n        }\n    }\n\n    /**\n     * Return List&lt;String&gt; of the rule names in your parser instance\n     * leading up to a call to the current rule. You could override if\n     * you want more details such as the file/line info of where\n     * in the ATN a rule is invoked.\n     *\n     * this is very useful for error messages.\n     */\n    getRuleInvocationStack(p) {\n        p = p || null;\n        if (p === null) {\n            p = this._ctx;\n        }\n        const stack = [];\n        while (p !== null) {\n            // compute what follows who invoked us\n            const ruleIndex = p.ruleIndex;\n            if (ruleIndex < 0) {\n                stack.push(\"n/a\");\n            } else {\n                stack.push(this.ruleNames[ruleIndex]);\n            }\n            p = p.parentCtx;\n        }\n        return stack;\n    }\n\n    // For debugging and other purposes.\n    getDFAStrings() {\n        return this._interp.decisionToDFA.toString();\n    }\n\n    // For debugging and other purposes.\n    dumpDFA() {\n        let seenOne = false;\n        for (let i = 0; i < this._interp.decisionToDFA.length; i++) {\n            const dfa = this._interp.decisionToDFA[i];\n            if (dfa.states.length > 0) {\n                if (seenOne) {\n                    console.log();\n                }\n                this.printer.println(\"Decision \" + dfa.decision + \":\");\n                this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n                seenOne = true;\n            }\n        }\n    }\n\n    /*\n        \"\t\t\tprinter = function() {\\r\\n\" +\n        \"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n        \"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n        \"\t\t\t};\\r\\n\" +\n        */\n    getSourceName() {\n        return this._input.sourceName;\n    }\n\n    /**\n     * During a parse is sometimes useful to listen in on the rule entry and exit\n     * events as well as token matches. this is for quick and dirty debugging.\n     */\n    setTrace(trace) {\n        if (!trace) {\n            this.removeParseListener(this._tracer);\n            this._tracer = null;\n        } else {\n            if (this._tracer !== null) {\n                this.removeParseListener(this._tracer);\n            }\n            this._tracer = new _TraceListener_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](this);\n            this.addParseListener(this._tracer);\n        }\n    }\n}\n\n/**\n * this field maps from the serialized ATN string to the deserialized {@link\n    * ATN} with\n * bypass alternatives.\n *\n * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n */\nParser.bypassAltsAtnCache = {};\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/Parser.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Recognizer.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Recognizer.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Recognizer)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _error_ConsoleErrorListener_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./error/ConsoleErrorListener.js */ \"./node_modules/antlr4/src/antlr4/error/ConsoleErrorListener.js\");\n/* harmony import */ var _error_ProxyErrorListener_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./error/ProxyErrorListener.js */ \"./node_modules/antlr4/src/antlr4/error/ProxyErrorListener.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\nclass Recognizer {\n    constructor() {\n        this._listeners = [ _error_ConsoleErrorListener_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INSTANCE ];\n        this._interp = null;\n        this._stateNumber = -1;\n    }\n\n    checkVersion(toolVersion) {\n        const runtimeVersion = \"4.10.1\";\n        if (runtimeVersion!==toolVersion) {\n            console.log(\"ANTLR runtime and generated code versions disagree: \"+runtimeVersion+\"!=\"+toolVersion);\n        }\n    }\n\n    addErrorListener(listener) {\n        this._listeners.push(listener);\n    }\n\n    removeErrorListeners() {\n        this._listeners = [];\n    }\n\n    getLiteralNames() {\n        return Object.getPrototypeOf(this).constructor.literalNames || [];\n    }\n\n    getSymbolicNames() {\n        return Object.getPrototypeOf(this).constructor.symbolicNames || [];\n    }\n\n    getTokenNames() {\n        if(!this.tokenNames) {\n            const literalNames = this.getLiteralNames();\n            const symbolicNames = this.getSymbolicNames();\n            const length = literalNames.length > symbolicNames.length ? literalNames.length : symbolicNames.length;\n            this.tokenNames = [];\n            for(let i=0; i<length; i++) {\n                this.tokenNames[i] = literalNames[i] || symbolicNames[i] || \"<INVALID\";\n            }\n        }\n        return this.tokenNames;\n    }\n\n    getTokenTypeMap() {\n        const tokenNames = this.getTokenNames();\n        if (tokenNames===null) {\n            throw(\"The current recognizer does not provide a list of token names.\");\n        }\n        let result = this.tokenTypeMapCache[tokenNames];\n        if(result===undefined) {\n            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });\n            result.EOF = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF;\n            this.tokenTypeMapCache[tokenNames] = result;\n        }\n        return result;\n    }\n\n    /**\n     * Get a map from rule names to rule indexes.\n     * <p>Used for XPath and tree pattern compilation.</p>\n     */\n    getRuleIndexMap() {\n        const ruleNames = this.ruleNames;\n        if (ruleNames===null) {\n            throw(\"The current recognizer does not provide a list of rule names.\");\n        }\n        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?\n        if(result===undefined) {\n            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });\n            this.ruleIndexMapCache[ruleNames] = result;\n        }\n        return result;\n    }\n\n    getTokenType(tokenName) {\n        const ttype = this.getTokenTypeMap()[tokenName];\n        if (ttype !==undefined) {\n            return ttype;\n        } else {\n            return _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_TYPE;\n        }\n    }\n\n    // What is the error header, normally line/character position information?\n    getErrorHeader(e) {\n        const line = e.getOffendingToken().line;\n        const column = e.getOffendingToken().column;\n        return \"line \" + line + \":\" + column;\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out.  Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     *\n     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n     * implementations of {@link ANTLRErrorStrategy} may provide a similar\n     * feature when necessary. For example, see\n     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/\n    getTokenErrorDisplay(t) {\n        if (t===null) {\n            return \"<no token>\";\n        }\n        let s = t.text;\n        if (s===null) {\n            if (t.type===_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        s = s.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    getErrorListenerDispatch() {\n        return new _error_ProxyErrorListener_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this._listeners);\n    }\n\n    /**\n     * subclass needs to override these if there are sempreds or actions\n     * that the ATN interp needs to execute\n     */\n    sempred(localctx, ruleIndex, actionIndex) {\n        return true;\n    }\n\n    precpred(localctx , precedence) {\n        return true;\n    }\n\n    get state(){\n        return this._stateNumber;\n    }\n\n    set state(state) {\n        this._stateNumber = state;\n    }\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/Recognizer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Token.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Token.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Token)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * A token has properties: text, type, line, character position in the line\n * (so we can ignore tabs), token channel, index, and source from which\n * we obtained this token.\n */\nclass Token {\n\tconstructor() {\n\t\tthis.source = null;\n\t\tthis.type = null; // token type of the token\n\t\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\t\tthis.start = null; // optional; return -1 if not implemented.\n\t\tthis.stop = null; // optional; return -1 if not implemented.\n\t\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\t\tthis.line = null; // line=1..n of the 1st character\n\t\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\t\tthis._text = null; // text of the token.\n\t}\n\n\tgetTokenSource() {\n\t\treturn this.source[0];\n\t}\n\n\tgetInputStream() {\n\t\treturn this.source[1];\n\t}\n\n\tget text(){\n\t\treturn this._text;\n\t}\n\n\tset text(text) {\n\t\tthis._text = text;\n\t}\n}\n\nToken.INVALID_TYPE = 0;\n\n/**\n * During lookahead operations, this \"token\" signifies we hit rule end ATN state\n * and did not follow it despite needing to.\n */\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n/**\n * All tokens go to the parser (unless skip() is called in that rule)\n * on a particular \"channel\". The parser tunes to a particular channel\n * so that whitespace etc... can go to the parser on a \"hidden\" channel.\n */\nToken.DEFAULT_CHANNEL = 0;\n\n/**\n * Anything on different channel than DEFAULT_CHANNEL is not parsed\n * by parser.\n */\nToken.HIDDEN_CHANNEL = 1;\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/Token.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/TokenStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/TokenStream.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TokenStream)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// this is just to keep meaningful parameter types to Parser\nclass TokenStream {}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/TokenStream.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/TraceListener.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/TraceListener.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TraceListener)\n/* harmony export */ });\n/* harmony import */ var _tree_ParseTreeListener_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tree/ParseTreeListener.js */ \"./node_modules/antlr4/src/antlr4/tree/ParseTreeListener.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass TraceListener extends _tree_ParseTreeListener_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(parser) {\n        super();\n        this.parser = parser;\n    }\n\n    enterEveryRule(ctx) {\n        console.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n    }\n\n    visitTerminal(node) {\n        console.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n    }\n\n    exitEveryRule(ctx) {\n        console.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/TraceListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerAction.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerAction.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerAction)\n/* harmony export */ });\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass LexerAction {\n    constructor(action) {\n        this.actionType = action;\n        this.isPositionDependent = false;\n    }\n\n    hashCode() {\n        const hash = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        this.updateHashCode(hash);\n        return hash.finish()\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType);\n    }\n\n    equals(other) {\n        return this === other;\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerChannelAction.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerChannelAction.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerChannelAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Implements the {@code channel} lexer action by calling\n * {@link Lexer//setChannel} with the assigned channel.\n * Constructs a new {@code channel} action with the specified channel value.\n * @param channel The channel value to pass to {@link Lexer//setChannel}\n */\nclass LexerChannelAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(channel) {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CHANNEL);\n        this.channel = channel;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//setChannel} with the\n     * value provided by {@link //getChannel}.</p>\n     */\n    execute(lexer) {\n        lexer._channel = this.channel;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.channel);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerChannelAction)) {\n            return false;\n        } else {\n            return this.channel === other.channel;\n        }\n    }\n\n    toString() {\n        return \"channel(\" + this.channel + \")\";\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerChannelAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerCustomAction.js":
/*!********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerCustomAction.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerCustomAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Executes a custom lexer action by calling {@link Recognizer//action} with the\n * rule and action indexes assigned to the custom action. The implementation of\n * a custom action is added to the generated code for the lexer in an override\n * of {@link Recognizer//action} when the grammar is compiled.\n *\n * <p>This class may represent embedded actions created with the <code>{...}</code>\n * syntax in ANTLR 4, as well as actions created for lexer commands where the\n * command argument could not be evaluated when the grammar was compiled.</p>\n */\nclass LexerCustomAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    /**\n     * Constructs a custom lexer action with the specified rule and action\n     * indexes.\n     *\n     * @param ruleIndex The rule index to use for calls to\n     * {@link Recognizer//action}.\n     * @param actionIndex The action index to use for calls to\n     * {@link Recognizer//action}.\n     */\n    constructor(ruleIndex, actionIndex) {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].CUSTOM);\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>Custom actions are implemented by calling {@link Lexer//action} with the\n     * appropriate rule and action indexes.</p>\n     */\n    execute(lexer) {\n        lexer.action(null, this.ruleIndex, this.actionIndex);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerCustomAction)) {\n            return false;\n        } else {\n            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerCustomAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerIndexedCustomAction.js":
/*!***************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerIndexedCustomAction.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerIndexedCustomAction)\n/* harmony export */ });\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/**\n * This implementation of {@link LexerAction} is used for tracking input offsets\n * for position-dependent actions within a {@link LexerActionExecutor}.\n *\n * <p>This action is not serialized as part of the ATN, and is only required for\n * position-dependent lexer actions which appear at a location other than the\n * end of a rule. For more information about DFA optimizations employed for\n * lexer actions, see {@link LexerActionExecutor//append} and\n * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n *\n * Constructs a new indexed custom action by associating a character offset\n * with a {@link LexerAction}.\n *\n * <p>Note: This class is only required for lexer actions for which\n * {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n *\n * @param offset The offset into the input {@link CharStream}, relative to\n * the token start index, at which the specified lexer action should be\n * executed.\n * @param action The lexer action to execute at a particular offset in the\n * input {@link CharStream}.\n */\n\n\n\nclass LexerIndexedCustomAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(offset, action) {\n        super(action.actionType);\n        this.offset = offset;\n        this.action = action;\n        this.isPositionDependent = true;\n    }\n\n    /**\n     * <p>This method calls {@link //execute} on the result of {@link //getAction}\n     * using the provided {@code lexer}.</p>\n     */\n    execute(lexer) {\n        // assume the input stream position was properly set by the calling code\n        this.action.execute(lexer);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.offset, this.action);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerIndexedCustomAction)) {\n            return false;\n        } else {\n            return this.offset === other.offset && this.action === other.action;\n        }\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerIndexedCustomAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerModeAction.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerModeAction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerModeAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n * the assigned mode\n */\nclass LexerModeAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(mode) {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//mode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.mode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"mode(\" + this.mode + \")\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerModeAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerMoreAction.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerMoreAction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerMoreAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Implements the {@code more} lexer action by calling {@link Lexer//more}.\n *\n * <p>The {@code more} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerMoreAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].MORE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.more();\n    }\n\n    toString() {\n        return \"more\";\n    }\n}\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerMoreAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerPopModeAction.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerPopModeAction.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerPopModeAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n *\n * <p>The {@code popMode} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerPopModeAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].POP_MODE);\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>\n     */\n    execute(lexer) {\n        lexer.popMode();\n    }\n\n    toString() {\n        return \"popMode\";\n    }\n}\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerPopModeAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerPushModeAction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerPushModeAction.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerPushModeAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Implements the {@code pushMode} lexer action by calling\n * {@link Lexer//pushMode} with the assigned mode\n */\nclass LexerPushModeAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(mode) {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PUSH_MODE);\n        this.mode = mode;\n    }\n\n    /**\n     * <p>This action is implemented by calling {@link Lexer//pushMode} with the\n     * value provided by {@link //getMode}.</p>\n     */\n    execute(lexer) {\n        lexer.pushMode(this.mode);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.mode);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof LexerPushModeAction)) {\n            return false;\n        } else {\n            return this.mode === other.mode;\n        }\n    }\n\n    toString() {\n        return \"pushMode(\" + this.mode + \")\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerPushModeAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerSkipAction.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerSkipAction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerSkipAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n *\n * <p>The {@code skip} command does not have any parameters, so this action is\n * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\n */\nclass LexerSkipAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].SKIP);\n    }\n\n    execute(lexer) {\n        lexer.skip();\n    }\n\n    toString() {\n        return \"skip\";\n    }\n}\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerSkipAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/action/LexerTypeAction.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/action/LexerTypeAction.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerTypeAction)\n/* harmony export */ });\n/* harmony import */ var _atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LexerAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Implements the {@code type} lexer action by calling {@link Lexer//setType}\n * with the assigned type\n */\n\nclass LexerTypeAction extends _LexerAction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(type) {\n        super(_atn_LexerActionType_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].TYPE);\n        this.type = type;\n    }\n\n    execute(lexer) {\n        lexer.type = this.type;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.actionType, this.type);\n    }\n\n    equals(other) {\n        if(this === other) {\n            return true;\n        } else if (! (other instanceof LexerTypeAction)) {\n            return false;\n        } else {\n            return this.type === other.type;\n        }\n    }\n\n    toString() {\n        return \"type(\" + this.type + \")\";\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/action/LexerTypeAction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATN.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATN.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ATN)\n/* harmony export */ });\n/* harmony import */ var _LL1Analyzer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LL1Analyzer.js */ \"./node_modules/antlr4/src/antlr4/atn/LL1Analyzer.js\");\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\nclass ATN {\n\n    constructor(grammarType , maxTokenType) {\n        /**\n         * Used for runtime deserialization of ATNs from strings\n         * The type of the ATN.\n        */\n        this.grammarType = grammarType;\n        // The maximum value for any symbol recognized by a transition in the ATN.\n        this.maxTokenType = maxTokenType;\n        this.states = [];\n        /**\n         * Each subrule/rule is a decision point and we must track them so we\n         * can go back later and build DFA predictors for them.  This includes\n         * all the rules, subrules, optional blocks, ()+, ()* etc...\n         */\n        this.decisionToState = [];\n        // Maps from rule index to starting state number.\n        this.ruleToStartState = [];\n        // Maps from rule index to stop state number.\n        this.ruleToStopState = null;\n        this.modeNameToStartState = {};\n        /**\n         * For lexer ATNs, this maps the rule index to the resulting token type.\n         * For parser ATNs, this maps the rule index to the generated bypass token\n         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n         * deserialization option was specified; otherwise, this is {@code null}\n         */\n        this.ruleToTokenType = null;\n        /**\n         * For lexer ATNs, this is an array of {@link LexerAction} objects which may\n         * be referenced by action transitions in the ATN\n         */\n        this.lexerActions = null;\n        this.modeToStartState = [];\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in state {@code s}.\n     * If {@code ctx} is null, the set of tokens will not include what can follow\n     * the rule surrounding {@code s}. In other words, the set will be\n     * restricted to tokens reachable staying within {@code s}'s rule\n     */\n    nextTokensInContext(s, ctx) {\n        const anal = new _LL1Analyzer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this);\n        return anal.LOOK(s, null, ctx);\n    }\n\n    /**\n     * Compute the set of valid tokens that can occur starting in {@code s} and\n     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n     * rule\n     */\n    nextTokensNoContext(s) {\n        if (s.nextTokenWithinRule !== null ) {\n            return s.nextTokenWithinRule;\n        }\n        s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n        s.nextTokenWithinRule.readOnly = true;\n        return s.nextTokenWithinRule;\n    }\n\n    nextTokens(s, ctx) {\n        if ( ctx===undefined ) {\n            return this.nextTokensNoContext(s);\n        } else {\n            return this.nextTokensInContext(s, ctx);\n        }\n    }\n\n    addState(state) {\n        if ( state !== null ) {\n            state.atn = this;\n            state.stateNumber = this.states.length;\n        }\n        this.states.push(state);\n    }\n\n    removeState(state) {\n        this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n    }\n\n    defineDecisionState(s) {\n        this.decisionToState.push(s);\n        s.decision = this.decisionToState.length-1;\n        return s.decision;\n    }\n\n    getDecisionState(decision) {\n        if (this.decisionToState.length===0) {\n            return null;\n        } else {\n            return this.decisionToState[decision];\n        }\n    }\n\n    /**\n     * Computes the set of input symbols which could follow ATN state number\n     * {@code stateNumber} in the specified full {@code context}. This method\n     * considers the complete parser context, but does not evaluate semantic\n     * predicates (i.e. all predicates encountered during the calculation are\n     * assumed true). If a path in the ATN exists from the starting state to the\n     * {@link RuleStopState} of the outermost context without matching any\n     * symbols, {@link Token//EOF} is added to the returned set.\n     *\n     * <p>If {@code context} is {@code null}, it is treated as\n     * {@link ParserRuleContext//EMPTY}.</p>\n     *\n     * @param stateNumber the ATN state number\n     * @param ctx the full parse context\n     *\n     * @return {IntervalSet} The set of potentially valid input symbols which could follow the\n     * specified state in the specified context.\n     *\n     * @throws IllegalArgumentException if the ATN does not contain a state with\n     * number {@code stateNumber}\n     */\n    getExpectedTokens(stateNumber, ctx ) {\n        if ( stateNumber < 0 || stateNumber >= this.states.length ) {\n            throw(\"Invalid state number.\");\n        }\n        const s = this.states[stateNumber];\n        let following = this.nextTokens(s);\n        if (!following.contains(_Token_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EPSILON)) {\n            return following;\n        }\n        const expected = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        expected.addSet(following);\n        expected.removeOne(_Token_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EPSILON);\n        while (ctx !== null && ctx.invokingState >= 0 && following.contains(_Token_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EPSILON)) {\n            const invokingState = this.states[ctx.invokingState];\n            const rt = invokingState.transitions[0];\n            following = this.nextTokens(rt.followState);\n            expected.addSet(following);\n            expected.removeOne(_Token_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EPSILON);\n            ctx = ctx.parentCtx;\n        }\n        if (following.contains(_Token_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EPSILON)) {\n            expected.addOne(_Token_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].EOF);\n        }\n        return expected;\n    }\n}\n\nATN.INVALID_ALT_NUMBER = 0;\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ATN.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfig.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ATNConfig)\n/* harmony export */ });\n/* harmony import */ var _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemanticContext.js */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nfunction checkParams(params, isCfg) {\n\tif(params===null) {\n\t\tconst result = { state:null, alt:null, context:null, semanticContext:null };\n\t\tif(isCfg) {\n\t\t\tresult.reachesIntoOuterContext = 0;\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tconst props = {};\n\t\tprops.state = params.state || null;\n\t\tprops.alt = (params.alt === undefined) ? null : params.alt;\n\t\tprops.context = params.context || null;\n\t\tprops.semanticContext = params.semanticContext || null;\n\t\tif(isCfg) {\n\t\t\tprops.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t\t\tprops.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t\t}\n\t\treturn props;\n\t}\n}\n\nclass ATNConfig {\n    /**\n     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).\n     * The syntactic context is a graph-structured stack node whose\n     * path(s) to the root is the rule invocation(s)\n     * chain used to arrive at the state.  The semantic context is\n     * the tree of semantic predicates encountered before reaching\n     * an ATN state\n     */\n    constructor(params, config) {\n        this.checkContext(params, config);\n        params = checkParams(params);\n        config = checkParams(config, true);\n        // The ATN state associated with this configuration///\n        this.state = params.state!==null ? params.state : config.state;\n        // What alt (or lexer rule) is predicted by this configuration///\n        this.alt = params.alt!==null ? params.alt : config.alt;\n        /**\n         * The stack of invoking states leading to the rule/states associated\n         * with this config.  We track only those contexts pushed during\n         * execution of the ATN simulator\n         */\n        this.context = params.context!==null ? params.context : config.context;\n        this.semanticContext = params.semanticContext!==null ? params.semanticContext :\n            (config.semanticContext!==null ? config.semanticContext : _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE);\n        // TODO: make it a boolean then\n        /**\n         * We cannot execute predicates dependent upon local context unless\n         * we know for sure we are in the correct context. Because there is\n         * no way to do this efficiently, we simply cannot evaluate\n         * dependent predicates unless we are in the rule that initially\n         * invokes the ATN simulator.\n         * closure() tracks the depth of how far we dip into the\n         * outer context: depth &gt; 0.  Note that it may not be totally\n         * accurate depth since I don't ever decrement\n         */\n        this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    }\n\n    checkContext(params, config) {\n        if((params.context===null || params.context===undefined) &&\n                (config===null || config.context===null || config.context===undefined)) {\n            this.context = null;\n        }\n    }\n\n    hashCode() {\n        const hash = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        this.updateHashCode(hash);\n        return hash.finish();\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n    }\n\n    /**\n     * An ATN configuration is equal to another if both have\n     * the same state, they predict the same alternative, and\n     * syntactic/semantic contexts are the same\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                (this.context===null ? other.context===null : this.context.equals(other.context)) &&\n                this.semanticContext.equals(other.semanticContext) &&\n                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;\n        }\n    }\n\n    hashCodeForConfigSet() {\n        const hash = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n        return hash.finish();\n    }\n\n    equalsForConfigSet(other) {\n        if (this === other) {\n            return true;\n        } else if (! (other instanceof ATNConfig)) {\n            return false;\n        } else {\n            return this.state.stateNumber===other.state.stateNumber &&\n                this.alt===other.alt &&\n                this.semanticContext.equals(other.semanticContext);\n        }\n    }\n\n    toString() {\n        return \"(\" + this.state + \",\" + this.alt +\n            (this.context!==null ? \",[\" + this.context.toString() + \"]\" : \"\") +\n            (this.semanticContext !== _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE ?\n                    (\",\" + this.semanticContext.toString())\n                    : \"\") +\n            (this.reachesIntoOuterContext>0 ?\n                    (\",up=\" + this.reachesIntoOuterContext)\n                    : \"\") + \")\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ATNConfig.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ATNConfigSet)\n/* harmony export */ });\n/* harmony import */ var _ATN_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATN.js */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\n/* harmony import */ var _SemanticContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SemanticContext.js */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n/* harmony import */ var _context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/PredictionContextUtils.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js\");\n/* harmony import */ var _utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/arrayToString.js */ \"./node_modules/antlr4/src/antlr4/utils/arrayToString.js\");\n/* harmony import */ var _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../misc/HashSet.js */ \"./node_modules/antlr4/src/antlr4/misc/HashSet.js\");\n/* harmony import */ var _utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/equalArrays.js */ \"./node_modules/antlr4/src/antlr4/utils/equalArrays.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif ( a===b ) {\n\t\treturn true;\n\t} else if ( a===null || b===null ) {\n\t\treturn false;\n\t} else\n       return a.equalsForConfigSet(b);\n }\n\n/**\n * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n * info about the set, with support for combining similar configurations using a\n * graph-structured stack\n */\nclass ATNConfigSet {\n\tconstructor(fullCtx) {\n\t\t/**\n\t\t * The reason that we need this is because we don't want the hash map to use\n\t\t * the standard hash code and equals. We need all configurations with the\n\t\t * same\n\t\t * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t\t * doubles\n\t\t * the number of objects associated with ATNConfigs. The other solution is\n\t\t * to\n\t\t * use a hash table that lets us specify the equals/hashcode operation.\n\t\t * All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t\t * when we go readonly as this set becomes a DFA state\n\t\t */\n\t\tthis.configLookup = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](hashATNConfig, equalATNConfigs);\n\t\t/**\n\t\t * Indicates that this configuration set is part of a full context\n\t\t * LL prediction. It will be used to determine how to merge $. With SLL\n\t\t * it's a wildcard whereas it is not for LL context merge\n\t\t */\n\t\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t\t/**\n\t\t * Indicates that the set of configurations is read-only. Do not\n\t\t * allow any code to manipulate the set; DFA states will point at\n\t\t * the sets and they must not change. This does not protect the other\n\t\t * fields; in particular, conflictingAlts is set after\n\t\t * we've made this readonly\n\t\t */\n\t\tthis.readOnly = false;\n\t\t// Track the elements as they are added to the set; supports get(i)///\n\t\tthis.configs = [];\n\n\t\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t\t// together, saves recomputation\n\t\t// TODO: can we track conflicts as they are added to save scanning configs\n\t\t// later?\n\t\tthis.uniqueAlt = 0;\n\t\tthis.conflictingAlts = null;\n\n\t\t/**\n\t\t * Used in parser and lexer. In lexer, it indicates we hit a pred\n\t\t * while computing a closure operation. Don't make a DFA state from this\n\t\t */\n\t\tthis.hasSemanticContext = false;\n\t\tthis.dipsIntoOuterContext = false;\n\n\t\tthis.cachedHashCode = -1;\n\t}\n\n\t/**\n\t * Adding a new config means merging contexts with existing configs for\n\t * {@code (s, i, pi, _)}, where {@code s} is the\n\t * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n\t * {@code pi} is the {@link ATNConfig//semanticContext}. We use\n\t * {@code (s,i,pi)} as key.\n\t *\n\t * <p>This method updates {@link //dipsIntoOuterContext} and\n\t * {@link //hasSemanticContext} when necessary.</p>\n\t */\n\tadd(config, mergeCache) {\n\t\tif (mergeCache === undefined) {\n\t\t\tmergeCache = null;\n\t\t}\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (config.semanticContext !== _SemanticContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NONE) {\n\t\t\tthis.hasSemanticContext = true;\n\t\t}\n\t\tif (config.reachesIntoOuterContext > 0) {\n\t\t\tthis.dipsIntoOuterContext = true;\n\t\t}\n\t\tconst existing = this.configLookup.add(config);\n\t\tif (existing === config) {\n\t\t\tthis.cachedHashCode = -1;\n\t\t\tthis.configs.push(config); // track order here\n\t\t\treturn true;\n\t\t}\n\t\t// a previous (s,i,pi,_), merge with it and save result\n\t\tconst rootIsWildcard = !this.fullCtx;\n\t\tconst merged = (0,_context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_2__.merge)(existing.context, config.context, rootIsWildcard, mergeCache);\n\t\t/**\n\t\t * no need to check for existing.context, config.context in cache\n\t\t * since only way to create new graphs is \"call rule\" and here. We\n\t\t * cache at both places\n\t\t */\n\t\texisting.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t\t// make sure to preserve the precedence filter suppression during the merge\n\t\tif (config.precedenceFilterSuppressed) {\n\t\t\texisting.precedenceFilterSuppressed = true;\n\t\t}\n\t\texisting.context = merged; // replace context; no need to alt mapping\n\t\treturn true;\n\t}\n\n\tgetStates() {\n\t\tconst states = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tstates.add(this.configs[i].state);\n\t\t}\n\t\treturn states;\n\t}\n\n\tgetPredicates() {\n\t\tconst preds = [];\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst c = this.configs[i].semanticContext;\n\t\t\tif (c !== _SemanticContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].NONE) {\n\t\t\t\tpreds.push(c.semanticContext);\n\t\t\t}\n\t\t}\n\t\treturn preds;\n\t}\n\n\toptimizeConfigs(interpreter) {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tif (this.configLookup.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\tconst config = this.configs[i];\n\t\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t\t}\n\t}\n\n\taddAll(coll) {\n\t\tfor (let i = 0; i < coll.length; i++) {\n\t\t\tthis.add(coll[i]);\n\t\t}\n\t\treturn false;\n\t}\n\n\tequals(other) {\n\t\treturn this === other ||\n\t\t\t(other instanceof ATNConfigSet &&\n\t\t\t(0,_utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"])(this.configs, other.configs) &&\n\t\t\tthis.fullCtx === other.fullCtx &&\n\t\t\tthis.uniqueAlt === other.uniqueAlt &&\n\t\t\tthis.conflictingAlts === other.conflictingAlts &&\n\t\t\tthis.hasSemanticContext === other.hasSemanticContext &&\n\t\t\tthis.dipsIntoOuterContext === other.dipsIntoOuterContext);\n\t}\n\n\thashCode() {\n\t\tconst hash = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n\n\tupdateHashCode(hash) {\n\t\tif (this.readOnly) {\n\t\t\tif (this.cachedHashCode === -1) {\n\t\t\t\tthis.cachedHashCode = this.hashCode();\n\t\t\t}\n\t\t\thash.update(this.cachedHashCode);\n\t\t} else {\n\t\t\thash.update(this.hashCode());\n\t\t}\n\t}\n\n\tisEmpty() {\n\t\treturn this.configs.length === 0;\n\t}\n\n\tcontains(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.contains(item);\n\t}\n\n\tcontainsFast(item) {\n\t\tif (this.configLookup === null) {\n\t\t\tthrow \"This method is not implemented for readonly sets.\";\n\t\t}\n\t\treturn this.configLookup.containsFast(item);\n\t}\n\n\tclear() {\n\t\tif (this.readOnly) {\n\t\t\tthrow \"This set is readonly\";\n\t\t}\n\t\tthis.configs = [];\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configLookup = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n\t}\n\n\tsetReadonly(readOnly) {\n\t\tthis.readOnly = readOnly;\n\t\tif (readOnly) {\n\t\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn (0,_utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(this.configs) +\n\t\t\t(this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") +\n\t\t\t(this.uniqueAlt !== _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") +\n\t\t\t(this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") +\n\t\t\t(this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n\t}\n\n\tget items(){\n\t\treturn this.configs;\n\t}\n\n\tget length(){\n\t\treturn this.configs.length;\n\t}\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ATNDeserializationOptions)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nclass ATNDeserializationOptions {\n\tconstructor(copyFrom) {\n\t\tif(copyFrom===undefined) {\n\t\t\tcopyFrom = null;\n\t\t}\n\t\tthis.readOnly = false;\n\t\tthis.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;\n\t\tthis.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;\n\t}\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ATNDeserializer)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _ATN_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATN.js */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\n/* harmony import */ var _ATNType_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ATNType.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNType.js\");\n/* harmony import */ var _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* harmony import */ var _state_BasicState_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../state/BasicState.js */ \"./node_modules/antlr4/src/antlr4/state/BasicState.js\");\n/* harmony import */ var _state_DecisionState_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../state/DecisionState.js */ \"./node_modules/antlr4/src/antlr4/state/DecisionState.js\");\n/* harmony import */ var _state_BlockStartState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../state/BlockStartState.js */ \"./node_modules/antlr4/src/antlr4/state/BlockStartState.js\");\n/* harmony import */ var _state_BlockEndState_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../state/BlockEndState.js */ \"./node_modules/antlr4/src/antlr4/state/BlockEndState.js\");\n/* harmony import */ var _state_LoopEndState_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../state/LoopEndState.js */ \"./node_modules/antlr4/src/antlr4/state/LoopEndState.js\");\n/* harmony import */ var _state_RuleStartState_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../state/RuleStartState.js */ \"./node_modules/antlr4/src/antlr4/state/RuleStartState.js\");\n/* harmony import */ var _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../state/RuleStopState.js */ \"./node_modules/antlr4/src/antlr4/state/RuleStopState.js\");\n/* harmony import */ var _state_TokensStartState_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../state/TokensStartState.js */ \"./node_modules/antlr4/src/antlr4/state/TokensStartState.js\");\n/* harmony import */ var _state_PlusLoopbackState_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../state/PlusLoopbackState.js */ \"./node_modules/antlr4/src/antlr4/state/PlusLoopbackState.js\");\n/* harmony import */ var _state_StarLoopbackState_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../state/StarLoopbackState.js */ \"./node_modules/antlr4/src/antlr4/state/StarLoopbackState.js\");\n/* harmony import */ var _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../state/StarLoopEntryState.js */ \"./node_modules/antlr4/src/antlr4/state/StarLoopEntryState.js\");\n/* harmony import */ var _state_PlusBlockStartState_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../state/PlusBlockStartState.js */ \"./node_modules/antlr4/src/antlr4/state/PlusBlockStartState.js\");\n/* harmony import */ var _state_StarBlockStartState_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../state/StarBlockStartState.js */ \"./node_modules/antlr4/src/antlr4/state/StarBlockStartState.js\");\n/* harmony import */ var _state_BasicBlockStartState_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../state/BasicBlockStartState.js */ \"./node_modules/antlr4/src/antlr4/state/BasicBlockStartState.js\");\n/* harmony import */ var _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../transition/Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* harmony import */ var _transition_AtomTransition_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../transition/AtomTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/AtomTransition.js\");\n/* harmony import */ var _transition_SetTransition_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../transition/SetTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/SetTransition.js\");\n/* harmony import */ var _transition_NotSetTransition_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../transition/NotSetTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/NotSetTransition.js\");\n/* harmony import */ var _transition_RuleTransition_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../transition/RuleTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/RuleTransition.js\");\n/* harmony import */ var _transition_RangeTransition_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../transition/RangeTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/RangeTransition.js\");\n/* harmony import */ var _transition_ActionTransition_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../transition/ActionTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/ActionTransition.js\");\n/* harmony import */ var _transition_EpsilonTransition_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../transition/EpsilonTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/EpsilonTransition.js\");\n/* harmony import */ var _transition_WildcardTransition_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../transition/WildcardTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/WildcardTransition.js\");\n/* harmony import */ var _transition_PredicateTransition_js__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../transition/PredicateTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/PredicateTransition.js\");\n/* harmony import */ var _transition_PrecedencePredicateTransition_js__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../transition/PrecedencePredicateTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/PrecedencePredicateTransition.js\");\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _ATNDeserializationOptions_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./ATNDeserializationOptions.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js\");\n/* harmony import */ var _LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./LexerActionType.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionType.js\");\n/* harmony import */ var _action_LexerSkipAction_js__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../action/LexerSkipAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerSkipAction.js\");\n/* harmony import */ var _action_LexerChannelAction_js__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../action/LexerChannelAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerChannelAction.js\");\n/* harmony import */ var _action_LexerCustomAction_js__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../action/LexerCustomAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerCustomAction.js\");\n/* harmony import */ var _action_LexerMoreAction_js__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../action/LexerMoreAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerMoreAction.js\");\n/* harmony import */ var _action_LexerTypeAction_js__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../action/LexerTypeAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerTypeAction.js\");\n/* harmony import */ var _action_LexerPushModeAction_js__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../action/LexerPushModeAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerPushModeAction.js\");\n/* harmony import */ var _action_LexerPopModeAction_js__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../action/LexerPopModeAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerPopModeAction.js\");\n/* harmony import */ var _action_LexerModeAction_js__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../action/LexerModeAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerModeAction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst SERIALIZED_VERSION = 4;\n\nfunction initArray( length, value) {\n\tconst tmp = [];\n\ttmp[length-1] = value;\n\treturn tmp.map(function(i) {return value;});\n}\n\nclass ATNDeserializer {\n    constructor(options) {\n\n        if ( options=== undefined || options === null ) {\n            options = _ATNDeserializationOptions_js__WEBPACK_IMPORTED_MODULE_30__[\"default\"].defaultOptions;\n        }\n        this.deserializationOptions = options;\n        this.stateFactories = null;\n        this.actionFactories = null;\n    }\n\n    deserialize(data) {\n        const legacy = this.reset(data);\n        this.checkVersion(legacy);\n        if(legacy)\n            this.skipUUID();\n        const atn = this.readATN();\n        this.readStates(atn, legacy);\n        this.readRules(atn, legacy);\n        this.readModes(atn);\n        const sets = [];\n        this.readSets(atn, sets, this.readInt.bind(this));\n        if(legacy)\n            this.readSets(atn, sets, this.readInt32.bind(this));\n        this.readEdges(atn, sets);\n        this.readDecisions(atn);\n        this.readLexerActions(atn, legacy);\n        this.markPrecedenceDecisions(atn);\n        this.verifyATN(atn);\n        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === _ATNType_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].PARSER ) {\n            this.generateRuleBypassTransitions(atn);\n            // re-verify after modification\n            this.verifyATN(atn);\n        }\n        return atn;\n    }\n\n    reset(data) {\n        const version = data.charCodeAt ? data.charCodeAt(0) : data[0];\n        if(version === SERIALIZED_VERSION - 1) {\n            const adjust = function (c) {\n                const v = c.charCodeAt(0);\n                return v > 1 ? v - 2 : v + 65534;\n            };\n            const temp = data.split(\"\").map(adjust);\n            // don't adjust the first value since that's the version number\n            temp[0] = data.charCodeAt(0);\n            this.data = temp;\n            this.pos = 0;\n            return true;\n        } else {\n            this.data = data\n            this.pos = 0;\n            return false;\n        }\n    }\n\n    skipUUID() {\n        let count = 0;\n        while(count++ < 8)\n            this.readInt();\n    }\n\n    checkVersion(legacy) {\n        const version = this.readInt();\n        if ( !legacy && version !== SERIALIZED_VERSION ) {\n            throw (\"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\");\n        }\n    }\n\n    readATN() {\n        const grammarType = this.readInt();\n        const maxTokenType = this.readInt();\n        return new _ATN_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](grammarType, maxTokenType);\n    }\n\n    readStates(atn, legacy) {\n        let j, pair, stateNumber;\n        const  loopBackStateNumbers = [];\n        const  endStateNumbers = [];\n        const  nstates = this.readInt();\n        for(let i=0; i<nstates; i++) {\n            const  stype = this.readInt();\n            // ignore bad type of states\n            if (stype===_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].INVALID_TYPE) {\n                atn.addState(null);\n                continue;\n            }\n            let ruleIndex = this.readInt();\n            if (legacy && ruleIndex === 0xFFFF) {\n                ruleIndex = -1;\n            }\n            const  s = this.stateFactory(stype, ruleIndex);\n            if (stype === _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].LOOP_END) { // special case\n                const  loopBackStateNumber = this.readInt();\n                loopBackStateNumbers.push([s, loopBackStateNumber]);\n            } else if(s instanceof _state_BlockStartState_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]) {\n                const  endStateNumber = this.readInt();\n                endStateNumbers.push([s, endStateNumber]);\n            }\n            atn.addState(s);\n        }\n        // delay the assignment of loop back and end states until we know all the\n        // state instances have been initialized\n        for (j=0; j<loopBackStateNumbers.length; j++) {\n            pair = loopBackStateNumbers[j];\n            pair[0].loopBackState = atn.states[pair[1]];\n        }\n\n        for (j=0; j<endStateNumbers.length; j++) {\n            pair = endStateNumbers[j];\n            pair[0].endState = atn.states[pair[1]];\n        }\n\n        let numNonGreedyStates = this.readInt();\n        for (j=0; j<numNonGreedyStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].nonGreedy = true;\n        }\n\n        let numPrecedenceStates = this.readInt();\n        for (j=0; j<numPrecedenceStates; j++) {\n            stateNumber = this.readInt();\n            atn.states[stateNumber].isPrecedenceRule = true;\n        }\n    }\n\n    readRules(atn, legacy) {\n        let i;\n        const nrules = this.readInt();\n        if (atn.grammarType === _ATNType_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LEXER ) {\n            atn.ruleToTokenType = initArray(nrules, 0);\n        }\n        atn.ruleToStartState = initArray(nrules, 0);\n        for (i=0; i<nrules; i++) {\n            const s = this.readInt();\n            atn.ruleToStartState[i] = atn.states[s];\n            if ( atn.grammarType === _ATNType_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LEXER ) {\n                let tokenType = this.readInt();\n                if (legacy && tokenType === 0xFFFF) {\n                    tokenType = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF;\n                }\n                atn.ruleToTokenType[i] = tokenType;\n            }\n        }\n        atn.ruleToStopState = initArray(nrules, 0);\n        for (i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!(state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])) {\n                continue;\n            }\n            atn.ruleToStopState[state.ruleIndex] = state;\n            atn.ruleToStartState[state.ruleIndex].stopState = state;\n        }\n    }\n\n    readModes(atn) {\n        const nmodes = this.readInt();\n        for (let i=0; i<nmodes; i++) {\n            let s = this.readInt();\n            atn.modeToStartState.push(atn.states[s]);\n        }\n    }\n\n    readSets(atn, sets, reader) {\n        const m = this.readInt();\n        for (let i=0; i<m; i++) {\n            const iset = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_29__[\"default\"]();\n            sets.push(iset);\n            const n = this.readInt();\n            const containsEof = this.readInt();\n            if (containsEof!==0) {\n                iset.addOne(-1);\n            }\n            for (let j=0; j<n; j++) {\n                const i1 = reader();\n                const i2 = reader();\n                iset.addRange(i1, i2);\n            }\n        }\n    }\n\n    readEdges(atn, sets) {\n        let i, j, state, trans, target;\n        const nedges = this.readInt();\n        for (i=0; i<nedges; i++) {\n            const src = this.readInt();\n            const trg = this.readInt();\n            const ttype = this.readInt();\n            const arg1 = this.readInt();\n            const arg2 = this.readInt();\n            const arg3 = this.readInt();\n            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n            const srcState = atn.states[src];\n            srcState.addTransition(trans);\n        }\n        // edges for rule stop states can be derived, so they aren't serialized\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for (j=0; j<state.transitions.length; j++) {\n                const t = state.transitions[j];\n                if (!(t instanceof _transition_RuleTransition_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"])) {\n                    continue;\n                }\n                let outermostPrecedenceReturn = -1;\n                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n                    if (t.precedence === 0) {\n                        outermostPrecedenceReturn = t.target.ruleIndex;\n                    }\n                }\n\n                trans = new _transition_EpsilonTransition_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"](t.followState, outermostPrecedenceReturn);\n                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n            }\n        }\n\n        for (i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            if (state instanceof _state_BlockStartState_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]) {\n                // we need to know the end state to set its start state\n                if (state.endState === null) {\n                    throw (\"IllegalState\");\n                }\n                // block end states can only be associated to a single block start\n                // state\n                if ( state.endState.startState !== null) {\n                    throw (\"IllegalState\");\n                }\n                state.endState.startState = state;\n            }\n            if (state instanceof _state_PlusLoopbackState_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof _state_PlusBlockStartState_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]) {\n                        target.loopBackState = state;\n                    }\n                }\n            } else if (state instanceof _state_StarLoopbackState_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]) {\n                for (j=0; j<state.transitions.length; j++) {\n                    target = state.transitions[j].target;\n                    if (target instanceof _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]) {\n                        target.loopBackState = state;\n                    }\n                }\n            }\n        }\n    }\n\n    readDecisions(atn) {\n        const ndecisions = this.readInt();\n        for (let i=0; i<ndecisions; i++) {\n            const s = this.readInt();\n            const decState = atn.states[s];\n            atn.decisionToState.push(decState);\n            decState.decision = i;\n        }\n    }\n\n    readLexerActions(atn, legacy) {\n        if (atn.grammarType === _ATNType_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].LEXER) {\n            const count = this.readInt();\n            atn.lexerActions = initArray(count, null);\n            for (let i=0; i<count; i++) {\n                const actionType = this.readInt();\n                let data1 = this.readInt();\n                if (legacy && data1 === 0xFFFF) {\n                    data1 = -1;\n                }\n                let data2 = this.readInt();\n                if (legacy && data2 === 0xFFFF) {\n                    data2 = -1;\n                }\n                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);\n            }\n        }\n    }\n\n    generateRuleBypassTransitions(atn) {\n        let i;\n        const count = atn.ruleToStartState.length;\n        for(i=0; i<count; i++) {\n            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n        }\n        for(i=0; i<count; i++) {\n            this.generateRuleBypassTransition(atn, i);\n        }\n    }\n\n    generateRuleBypassTransition(atn, idx) {\n        let i, state;\n        const bypassStart = new _state_BasicBlockStartState_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"]();\n        bypassStart.ruleIndex = idx;\n        atn.addState(bypassStart);\n\n        const bypassStop = new _state_BlockEndState_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n        bypassStop.ruleIndex = idx;\n        atn.addState(bypassStop);\n\n        bypassStart.endState = bypassStop;\n        atn.defineDecisionState(bypassStart);\n\n        bypassStop.startState = bypassStart;\n\n        let excludeTransition = null;\n        let endState = null;\n\n        if (atn.ruleToStartState[idx].isPrecedenceRule) {\n            // wrap from the beginning of the rule to the StarLoopEntryState\n            endState = null;\n            for(i=0; i<atn.states.length; i++) {\n                state = atn.states[i];\n                if (this.stateIsEndStateFor(state, idx)) {\n                    endState = state;\n                    excludeTransition = state.loopBackState.transitions[0];\n                    break;\n                }\n            }\n            if (excludeTransition === null) {\n                throw (\"Couldn't identify final state of the precedence rule prefix section.\");\n            }\n        } else {\n            endState = atn.ruleToStopState[idx];\n        }\n\n        // all non-excluded transitions that currently target end state need to\n        // target blockEnd instead\n        for(i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            for(let j=0; j<state.transitions.length; j++) {\n                const transition = state.transitions[j];\n                if (transition === excludeTransition) {\n                    continue;\n                }\n                if (transition.target === endState) {\n                    transition.target = bypassStop;\n                }\n            }\n        }\n\n        // all transitions leaving the rule start state need to leave blockStart\n        // instead\n        const ruleToStartState = atn.ruleToStartState[idx];\n        const count = ruleToStartState.transitions.length;\n        while ( count > 0) {\n            bypassStart.addTransition(ruleToStartState.transitions[count-1]);\n            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n        }\n        // link the new states\n        atn.ruleToStartState[idx].addTransition(new _transition_EpsilonTransition_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"](bypassStart));\n        bypassStop.addTransition(new _transition_EpsilonTransition_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"](endState));\n\n        const matchState = new _state_BasicState_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n        atn.addState(matchState);\n        matchState.addTransition(new _transition_AtomTransition_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"](bypassStop, atn.ruleToTokenType[idx]));\n        bypassStart.addTransition(new _transition_EpsilonTransition_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"](matchState));\n    }\n\n    stateIsEndStateFor(state, idx) {\n        if ( state.ruleIndex !== idx) {\n            return null;\n        }\n        if (!( state instanceof _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])) {\n            return null;\n        }\n        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n        if (!( maybeLoopEndState instanceof _state_LoopEndState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"])) {\n            return null;\n        }\n        if (maybeLoopEndState.epsilonOnlyTransitions &&\n            (maybeLoopEndState.transitions[0].target instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])) {\n            return state;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n     * correct value.\n     * @param atn The ATN.\n     */\n    markPrecedenceDecisions(atn) {\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (!( state instanceof _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"])) {\n                continue;\n            }\n            // We analyze the ATN to determine if this ATN decision state is the\n            // decision for the closure block that determines whether a\n            // precedence rule should continue or complete.\n            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n                if (maybeLoopEndState instanceof _state_LoopEndState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]) {\n                    if ( maybeLoopEndState.epsilonOnlyTransitions &&\n                            (maybeLoopEndState.transitions[0].target instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"])) {\n                        state.isPrecedenceDecision = true;\n                    }\n                }\n            }\n        }\n    }\n\n    verifyATN(atn) {\n        if (!this.deserializationOptions.verifyATN) {\n            return;\n        }\n        // verify assumptions\n        for(let i=0; i<atn.states.length; i++) {\n            const state = atn.states[i];\n            if (state === null) {\n                continue;\n            }\n            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n            if (state instanceof _state_PlusBlockStartState_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]) {\n                this.checkCondition(state.loopBackState !== null);\n            } else  if (state instanceof _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]) {\n                this.checkCondition(state.loopBackState !== null);\n                this.checkCondition(state.transitions.length === 2);\n                if (state.transitions[0].target instanceof _state_StarBlockStartState_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]) {\n                    this.checkCondition(state.transitions[1].target instanceof _state_LoopEndState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]);\n                    this.checkCondition(!state.nonGreedy);\n                } else if (state.transitions[0].target instanceof _state_LoopEndState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]) {\n                    this.checkCondition(state.transitions[1].target instanceof _state_StarBlockStartState_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]);\n                    this.checkCondition(state.nonGreedy);\n                } else {\n                    throw(\"IllegalState\");\n                }\n            } else if (state instanceof _state_StarLoopbackState_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]) {\n                this.checkCondition(state.transitions.length === 1);\n                this.checkCondition(state.transitions[0].target instanceof _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]);\n            } else if (state instanceof _state_LoopEndState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]) {\n                this.checkCondition(state.loopBackState !== null);\n            } else if (state instanceof _state_RuleStartState_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]) {\n                this.checkCondition(state.stopState !== null);\n            } else if (state instanceof _state_BlockStartState_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]) {\n                this.checkCondition(state.endState !== null);\n            } else if (state instanceof _state_BlockEndState_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]) {\n                this.checkCondition(state.startState !== null);\n            } else if (state instanceof _state_DecisionState_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]) {\n                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n            } else {\n                this.checkCondition(state.transitions.length <= 1 || (state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]));\n            }\n        }\n    }\n\n    checkCondition(condition, message) {\n        if (!condition) {\n            if (message === undefined || message===null) {\n                message = \"IllegalState\";\n            }\n            throw (message);\n        }\n    }\n\n    readInt() {\n        return this.data[this.pos++];\n    }\n\n    readInt32() {\n        const low = this.readInt();\n        const high = this.readInt();\n        return low | (high << 16);\n    }\n\n    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {\n        const target = atn.states[trg];\n        switch(type) {\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].EPSILON:\n            return new _transition_EpsilonTransition_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"](target);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].RANGE:\n            return arg3 !== 0 ? new _transition_RangeTransition_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"](target, _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF, arg2) : new _transition_RangeTransition_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"](target, arg1, arg2);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].RULE:\n            return new _transition_RuleTransition_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"](atn.states[arg1], arg2, arg3, target);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].PREDICATE:\n            return new _transition_PredicateTransition_js__WEBPACK_IMPORTED_MODULE_27__[\"default\"](target, arg1, arg2, arg3 !== 0);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].PRECEDENCE:\n            return new _transition_PrecedencePredicateTransition_js__WEBPACK_IMPORTED_MODULE_28__[\"default\"](target, arg1);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].ATOM:\n            return arg3 !== 0 ? new _transition_AtomTransition_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"](target, _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) : new _transition_AtomTransition_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"](target, arg1);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].ACTION:\n            return new _transition_ActionTransition_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"](target, arg1, arg2, arg3 !== 0);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].SET:\n            return new _transition_SetTransition_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"](target, sets[arg1]);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].NOT_SET:\n            return new _transition_NotSetTransition_js__WEBPACK_IMPORTED_MODULE_21__[\"default\"](target, sets[arg1]);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"].WILDCARD:\n            return new _transition_WildcardTransition_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"](target);\n        default:\n            throw \"The specified transition type: \" + type + \" is not valid.\";\n        }\n    }\n\n    stateFactory(type, ruleIndex) {\n        if (this.stateFactories === null) {\n            const sf = [];\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].INVALID_TYPE] = null;\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BASIC] = () => new _state_BasicState_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].RULE_START] = () => new _state_RuleStartState_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BLOCK_START] = () => new _state_BasicBlockStartState_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PLUS_BLOCK_START] = () => new _state_PlusBlockStartState_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].STAR_BLOCK_START] = () => new _state_StarBlockStartState_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].TOKEN_START] = () => new _state_TokensStartState_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].RULE_STOP] = () => new _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BLOCK_END] = () => new _state_BlockEndState_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].STAR_LOOP_BACK] = () => new _state_StarLoopbackState_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].STAR_LOOP_ENTRY] = () => new _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PLUS_LOOP_BACK] = () => new _state_PlusLoopbackState_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]();\n            sf[_state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].LOOP_END] = () => new _state_LoopEndState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]();\n            this.stateFactories = sf;\n        }\n        if (type>this.stateFactories.length || this.stateFactories[type] === null) {\n            throw(\"The specified state type \" + type + \" is not valid.\");\n        } else {\n            const s = this.stateFactories[type]();\n            if (s!==null) {\n                s.ruleIndex = ruleIndex;\n                return s;\n            }\n        }\n    }\n\n    lexerActionFactory(type, data1, data2) {\n        if (this.actionFactories === null) {\n            const af = [];\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].CHANNEL] = (data1, data2) => new _action_LexerChannelAction_js__WEBPACK_IMPORTED_MODULE_33__[\"default\"](data1);\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].CUSTOM] = (data1, data2) => new _action_LexerCustomAction_js__WEBPACK_IMPORTED_MODULE_34__[\"default\"](data1, data2);\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].MODE] = (data1, data2) => new _action_LexerModeAction_js__WEBPACK_IMPORTED_MODULE_39__[\"default\"](data1);\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].MORE] = (data1, data2) => _action_LexerMoreAction_js__WEBPACK_IMPORTED_MODULE_35__[\"default\"].INSTANCE;\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].POP_MODE] = (data1, data2) => _action_LexerPopModeAction_js__WEBPACK_IMPORTED_MODULE_38__[\"default\"].INSTANCE;\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].PUSH_MODE] = (data1, data2) => new _action_LexerPushModeAction_js__WEBPACK_IMPORTED_MODULE_37__[\"default\"](data1);\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].SKIP] = (data1, data2) => _action_LexerSkipAction_js__WEBPACK_IMPORTED_MODULE_32__[\"default\"].INSTANCE;\n            af[_LexerActionType_js__WEBPACK_IMPORTED_MODULE_31__[\"default\"].TYPE] = (data1, data2) => new _action_LexerTypeAction_js__WEBPACK_IMPORTED_MODULE_36__[\"default\"](data1);\n            this.actionFactories = af;\n        }\n        if (type>this.actionFactories.length || this.actionFactories[type] === null) {\n            throw(\"The specified lexer action type \" + type + \" is not valid.\");\n        } else {\n            return this.actionFactories[type](data1, data2);\n        }\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ATNSimulator)\n/* harmony export */ });\n/* harmony import */ var _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dfa/DFAState.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\n/* harmony import */ var _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNConfigSet.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\n/* harmony import */ var _context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../context/PredictionContextUtils.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js\");\n/* harmony import */ var _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../misc/HashMap.js */ \"./node_modules/antlr4/src/antlr4/misc/HashMap.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\nclass ATNSimulator {\n    constructor(atn, sharedContextCache) {\n        /**\n         * The context cache maps all PredictionContext objects that are ==\n         * to a single cached copy. This cache is shared across all contexts\n         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n         * to use only cached nodes/graphs in addDFAState(). We don't want to\n         * fill this during closure() since there are lots of contexts that\n         * pop up but are not used ever again. It also greatly slows down closure().\n         *\n         * <p>This cache makes a huge difference in memory and a little bit in speed.\n         * For the Java grammar on java.*, it dropped the memory requirements\n         * at the end from 25M to 16M. We don't store any of the full context\n         * graphs in the DFA because they are limited to local context only,\n         * but apparently there's a lot of repetition there as well. We optimize\n         * the config contexts before storing the config set in the DFA states\n         * by literally rebuilding them with cached subgraphs only.</p>\n         *\n         * <p>I tried a cache for use during closure operations, that was\n         * whacked after each adaptivePredict(). It cost a little bit\n         * more time I think and doesn't save on the overall footprint\n         * so it's not worth the complexity.</p>\n         */\n        this.atn = atn;\n        this.sharedContextCache = sharedContextCache;\n        return this;\n    }\n\n    getCachedContext(context) {\n        if (this.sharedContextCache ===null) {\n            return context;\n        }\n        const visited = new _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]();\n        return (0,_context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_2__.getCachedPredictionContext)(context, this.sharedContextCache, visited);\n    }\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](0x7FFFFFFF, new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]());\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNType.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNType.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Represents the type of recognizer an ATN applies to\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    LEXER: 0,\n    PARSER: 1\n});\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ATNType.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js":
/*!***************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AbstractPredicateTransition)\n/* harmony export */ });\n/* harmony import */ var _transition_Transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transition/Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass AbstractPredicateTransition extends _transition_Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(target) {\n        super(target);\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LL1Analyzer.js":
/*!***********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LL1Analyzer.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LL1Analyzer)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _ATNConfig_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNConfig.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/RuleStopState.js */ \"./node_modules/antlr4/src/antlr4/state/RuleStopState.js\");\n/* harmony import */ var _transition_RuleTransition_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../transition/RuleTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/RuleTransition.js\");\n/* harmony import */ var _transition_NotSetTransition_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../transition/NotSetTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/NotSetTransition.js\");\n/* harmony import */ var _transition_WildcardTransition_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../transition/WildcardTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/WildcardTransition.js\");\n/* harmony import */ var _AbstractPredicateTransition_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AbstractPredicateTransition.js */ \"./node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js\");\n/* harmony import */ var _context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../context/PredictionContextUtils.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js\");\n/* harmony import */ var _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../context/PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _context_SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../context/SingletonPredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js\");\n/* harmony import */ var _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../misc/BitSet.js */ \"./node_modules/antlr4/src/antlr4/misc/BitSet.js\");\n/* harmony import */ var _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../misc/HashSet.js */ \"./node_modules/antlr4/src/antlr4/misc/HashSet.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass LL1Analyzer {\n    constructor(atn) {\n        this.atn = atn;\n    }\n\n    /**\n     * Calculates the SLL(1) expected lookahead set for each outgoing transition\n     * of an {@link ATNState}. The returned array has one element for each\n     * outgoing transition in {@code s}. If the closure from transition\n     * <em>i</em> leads to a semantic predicate before matching a symbol, the\n     * element at index <em>i</em> of the result will be {@code null}.\n     *\n     * @param s the ATN state\n     * @return the expected symbols for each outgoing transition of {@code s}.\n     */\n    getDecisionLookahead(s) {\n        if (s === null) {\n            return null;\n        }\n        const count = s.transitions.length;\n        const look = [];\n        for(let alt=0; alt< count; alt++) {\n            look[alt] = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n            const lookBusy = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"]();\n            const seeThruPreds = false; // fail to get lookahead upon pred\n            this._LOOK(s.transition(alt).target, null, _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].EMPTY,\n                  look[alt], lookBusy, new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"](), seeThruPreds, false);\n            // Wipe out lookahead for this alternative if we found nothing\n            // or we had a predicate when we !seeThruPreds\n            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n                look[alt] = null;\n            }\n        }\n        return look;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and the end of the rule containing\n     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n     * If {@code ctx} is not {@code null} and the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx the complete parser context, or {@code null} if the context\n     * should be ignored\n     *\n     * @return The set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     */\n    LOOK(s, stopState, ctx) {\n        const r = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        const seeThruPreds = true; // ignore preds; get all lookahead\n        ctx = ctx || null;\n        const lookContext = ctx!==null ? (0,_context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_8__.predictionContextFromRuleContext)(s.atn, ctx) : null;\n        this._LOOK(s, stopState, lookContext, r, new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"](), new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"](), seeThruPreds, true);\n        return r;\n    }\n\n    /**\n     * Compute set of tokens that can follow {@code s} in the ATN in the\n     * specified {@code ctx}.\n     *\n     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n     * {@code true} and {@code stopState} or the end of the outermost rule is\n     * reached, {@link Token//EOF} is added to the result set.</p>\n     *\n     * @param s the ATN state.\n     * @param stopState the ATN state to stop at. This can be a\n     * {@link BlockEndState} to detect epsilon paths through a closure.\n     * @param ctx The outer context, or {@code null} if the outer context should\n     * not be used.\n     * @param look The result lookahead set.\n     * @param lookBusy A set used for preventing epsilon closures in the ATN\n     * from causing a stack overflow. Outside code should pass\n     * {@code new CustomizedSet<ATNConfig>} for this argument.\n     * @param calledRuleStack A set used for preventing left recursion in the\n     * ATN from causing a stack overflow. Outside code should pass\n     * {@code new BitSet()} for this argument.\n     * @param seeThruPreds {@code true} to true semantic predicates as\n     * implicitly {@code true} and \"see through them\", otherwise {@code false}\n     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n     * result if one is encountered.\n     * @param addEOF Add {@link Token//EOF} to the result if the end of the\n     * outermost context is reached. This parameter has no effect if {@code ctx}\n     * is {@code null}.\n     */\n    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n        const c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]({state:s, alt:0, context: ctx}, null);\n        if (lookBusy.has(c)) {\n            return;\n        }\n        lookBusy.add(c);\n        if (s === stopState) {\n            if (ctx ===null) {\n                look.addOne(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF);\n                return;\n            }\n        }\n        if (s instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] ) {\n            if (ctx ===null) {\n                look.addOne(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EPSILON);\n                return;\n            } else if (ctx.isEmpty() && addEOF) {\n                look.addOne(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF);\n                return;\n            }\n            if (ctx !== _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].EMPTY) {\n                const removed = calledRuleStack.has(s.ruleIndex);\n                try {\n                    calledRuleStack.remove(s.ruleIndex);\n                    // run thru all possible stack tops in ctx\n                    for (let i = 0; i < ctx.length; i++) {\n                        const returnState = this.atn.states[ctx.getReturnState(i)];\n                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                    }\n                }finally {\n                    if (removed) {\n                        calledRuleStack.add(s.ruleIndex);\n                    }\n                }\n                return;\n            }\n        }\n        for(let j=0; j<s.transitions.length; j++) {\n            const t = s.transitions[j];\n            if (t.constructor === _transition_RuleTransition_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n                if (calledRuleStack.has(t.target.ruleIndex)) {\n                    continue;\n                }\n                const newContext = _context_SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].create(ctx, t.followState.stateNumber);\n                try {\n                    calledRuleStack.add(t.target.ruleIndex);\n                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    calledRuleStack.remove(t.target.ruleIndex);\n                }\n            } else if (t instanceof _AbstractPredicateTransition_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"] ) {\n                if (seeThruPreds) {\n                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } else {\n                    look.addOne(LL1Analyzer.HIT_PRED);\n                }\n            } else if( t.isEpsilon) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else if (t.constructor === _transition_WildcardTransition_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]) {\n                look.addRange( _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );\n            } else {\n                let set = t.label;\n                if (set !== null) {\n                    if (t instanceof _transition_NotSetTransition_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]) {\n                        set = set.complement(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                    }\n                    look.addSet(set);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Special value added to the lookahead sets to indicate that we hit\n * a predicate during analysis if {@code seeThruPreds==false}.\n */\nLL1Analyzer.HIT_PRED = _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_TYPE;\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/LL1Analyzer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerATNConfig.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerATNConfig.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerATNConfig)\n/* harmony export */ });\n/* harmony import */ var _state_DecisionState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../state/DecisionState.js */ \"./node_modules/antlr4/src/antlr4/state/DecisionState.js\");\n/* harmony import */ var _ATNConfig_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNConfig.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass LexerATNConfig extends _ATNConfig_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(params, config) {\n        super(params, config);\n\n        // This is the backing field for {@link //getLexerActionExecutor}.\n        const lexerActionExecutor = params.lexerActionExecutor || null;\n        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);\n        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;\n        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n        this.equalsForConfigSet = LexerATNConfig.prototype.equals;\n        return this;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n    }\n\n    equals(other) {\n        return this === other ||\n            (other instanceof LexerATNConfig &&\n                this.passedThroughNonGreedyDecision === other.passedThroughNonGreedyDecision &&\n                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&\n                super.equals(other));\n    }\n\n    checkNonGreedyDecision(source, target) {\n        return source.passedThroughNonGreedyDecision ||\n            (target instanceof _state_DecisionState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) && target.nonGreedy;\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/LexerATNConfig.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerATNSimulator)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _Lexer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../Lexer.js */ \"./node_modules/antlr4/src/antlr4/Lexer.js\");\n/* harmony import */ var _ATN_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ATN.js */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\n/* harmony import */ var _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ATNSimulator.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\");\n/* harmony import */ var _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../dfa/DFAState.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\n/* harmony import */ var _OrderedATNConfigSet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OrderedATNConfigSet.js */ \"./node_modules/antlr4/src/antlr4/atn/OrderedATNConfigSet.js\");\n/* harmony import */ var _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../context/PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _context_SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../context/SingletonPredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js\");\n/* harmony import */ var _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../state/RuleStopState.js */ \"./node_modules/antlr4/src/antlr4/state/RuleStopState.js\");\n/* harmony import */ var _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./LexerATNConfig.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerATNConfig.js\");\n/* harmony import */ var _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../transition/Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* harmony import */ var _LexerActionExecutor_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./LexerActionExecutor.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js\");\n/* harmony import */ var _error_LexerNoViableAltException_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../error/LexerNoViableAltException.js */ \"./node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction resetSimState(sim) {\n    sim.index = -1;\n    sim.line = 0;\n    sim.column = -1;\n    sim.dfaState = null;\n}\n\nclass SimState {\n    constructor() {\n        resetSimState(this);\n    }\n\n    reset() {\n        resetSimState(this);\n    }\n}\n\nclass LexerATNSimulator extends _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] {\n    /**\n     * When we hit an accept state in either the DFA or the ATN, we\n     * have to notify the character stream to start buffering characters\n     * via {@link IntStream//mark} and record the current state. The current sim state\n     * includes the current index into the input, the current line,\n     * and current character position in that line. Note that the Lexer is\n     * tracking the starting line and characterization of the token. These\n     * variables track the \"state\" of the simulator when it hits an accept state.\n     *\n     * <p>We track these variables separately for the DFA and ATN simulation\n     * because the DFA simulation often has to fail over to the ATN\n     * simulation. If the ATN simulation fails, we need the DFA to fall\n     * back to its previously accepted state, if any. If the ATN succeeds,\n     * then the ATN does the accept and the DFA simulator that invoked it\n     * can simply return the predicted token type.</p>\n     */\n    constructor(recog, atn, decisionToDFA, sharedContextCache) {\n        super(atn, sharedContextCache);\n        this.decisionToDFA = decisionToDFA;\n        this.recog = recog;\n        /**\n         * The current token's starting index into the character stream.\n         * Shared across DFA to ATN simulation in case the ATN fails and the\n         * DFA did not have a previous accept state. In this case, we use the\n         * ATN-generated exception object\n         */\n        this.startIndex = -1;\n        // line number 1..n within the input///\n        this.line = 1;\n        /**\n         * The index of the character relative to the beginning of the line\n         * 0..n-1\n         */\n        this.column = 0;\n        this.mode = _Lexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_MODE;\n        /**\n         * Used during DFA/ATN exec to record the most recent accept configuration\n         * info\n         */\n        this.prevAccept = new SimState();\n    }\n\n    copyState(simulator) {\n        this.column = simulator.column;\n        this.line = simulator.line;\n        this.mode = simulator.mode;\n        this.startIndex = simulator.startIndex;\n    }\n\n    match(input, mode) {\n        this.mode = mode;\n        const mark = input.mark();\n        try {\n            this.startIndex = input.index;\n            this.prevAccept.reset();\n            const dfa = this.decisionToDFA[mode];\n            if (dfa.s0 === null) {\n                return this.matchATN(input);\n            } else {\n                return this.execATN(input, dfa.s0);\n            }\n        } finally {\n            input.release(mark);\n        }\n    }\n\n    reset() {\n        this.prevAccept.reset();\n        this.startIndex = -1;\n        this.line = 1;\n        this.column = 0;\n        this.mode = _Lexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].DEFAULT_MODE;\n    }\n\n    matchATN(input) {\n        const startState = this.atn.modeToStartState[this.mode];\n\n        if (LexerATNSimulator.debug) {\n            console.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n        }\n        const old_mode = this.mode;\n        const s0_closure = this.computeStartState(input, startState);\n        const suppressEdge = s0_closure.hasSemanticContext;\n        s0_closure.hasSemanticContext = false;\n\n        const next = this.addDFAState(s0_closure);\n        if (!suppressEdge) {\n            this.decisionToDFA[this.mode].s0 = next;\n        }\n\n        const predict = this.execATN(input, next);\n\n        if (LexerATNSimulator.debug) {\n            console.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n        }\n        return predict;\n    }\n\n    execATN(input, ds0) {\n        if (LexerATNSimulator.debug) {\n            console.log(\"start state closure=\" + ds0.configs);\n        }\n        if (ds0.isAcceptState) {\n            // allow zero-length tokens\n            this.captureSimState(this.prevAccept, input, ds0);\n        }\n        let t = input.LA(1);\n        let s = ds0; // s is current/from DFA state\n\n        for (; ;) { // while more work\n            if (LexerATNSimulator.debug) {\n                console.log(\"execATN loop starting closure: \" + s.configs);\n            }\n\n            /**\n             * As we move src->trg, src->trg, we keep track of the previous trg to\n             * avoid looking up the DFA state again, which is expensive.\n             * If the previous target was already part of the DFA, we might\n             * be able to avoid doing a reach operation upon t. If s!=null,\n             * it means that semantic predicates didn't prevent us from\n             * creating a DFA state. Once we know s!=null, we check to see if\n             * the DFA state has an edge already for t. If so, we can just reuse\n             * it's configuration set; there's no point in re-computing it.\n             * This is kind of like doing DFA simulation within the ATN\n             * simulation because DFA simulation is really just a way to avoid\n             * computing reach/closure sets. Technically, once we know that\n             * we have a previously added DFA state, we could jump over to\n             * the DFA simulator. But, that would mean popping back and forth\n             * a lot and making things more complicated algorithmically.\n             * This optimization makes a lot of sense for loops within DFA.\n             * A character will take us back to an existing DFA state\n             * that already has lots of edges out of it. e.g., .* in comments.\n             * print(\"Target for:\" + str(s) + \" and:\" + str(t))\n             */\n            let target = this.getExistingTargetState(s, t);\n            // print(\"Existing:\" + str(target))\n            if (target === null) {\n                target = this.computeTargetState(input, s, t);\n                // print(\"Computed:\" + str(target))\n            }\n            if (target === _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ERROR) {\n                break;\n            }\n            // If this is a consumable input element, make sure to consume before\n            // capturing the accept state so the input index, line, and char\n            // position accurately reflect the state of the interpreter at the\n            // end of the token.\n            if (t !== _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n                this.consume(input);\n            }\n            if (target.isAcceptState) {\n                this.captureSimState(this.prevAccept, input, target);\n                if (t === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n                    break;\n                }\n            }\n            t = input.LA(1);\n            s = target; // flip; current DFA target becomes new src/from state\n        }\n        return this.failOrAccept(this.prevAccept, input, s.configs, t);\n    }\n\n    /**\n     * Get an existing target state for an edge in the DFA. If the target state\n     * for the edge has not yet been computed or is otherwise not available,\n     * this method returns {@code null}.\n     *\n     * @param s The current DFA state\n     * @param t The next input symbol\n     * @return The existing target DFA state for the given input symbol\n     * {@code t}, or {@code null} if the target state for this edge is not\n     * already cached\n     */\n    getExistingTargetState(s, t) {\n        if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n            return null;\n        }\n\n        let target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n        if (target === undefined) {\n            target = null;\n        }\n        if (LexerATNSimulator.debug && target !== null) {\n            console.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n        }\n        return target;\n    }\n\n    /**\n     * Compute a target state for an edge in the DFA, and attempt to add the\n     * computed state and corresponding edge to the DFA.\n     *\n     * @param input The input stream\n     * @param s The current DFA state\n     * @param t The next input symbol\n     *\n     * @return The computed target DFA state for the given input symbol\n     * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n     * returns {@link //ERROR}.\n     */\n    computeTargetState(input, s, t) {\n        const reach = new _OrderedATNConfigSet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n        // if we don't find an existing DFA state\n        // Fill reach starting from closure, following t transitions\n        this.getReachableConfigSet(input, s.configs, reach, t);\n\n        if (reach.items.length === 0) { // we got nowhere on t from s\n            if (!reach.hasSemanticContext) {\n                // we got nowhere on t, don't throw out this knowledge; it'd\n                // cause a failover from DFA later.\n                this.addDFAEdge(s, t, _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ERROR);\n            }\n            // stop when we can't match any more char\n            return _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].ERROR;\n        }\n        // Add an edge from s to target DFA found/created for reach\n        return this.addDFAEdge(s, t, null, reach);\n    }\n\n    failOrAccept(prevAccept, input, reach, t) {\n        if (this.prevAccept.dfaState !== null) {\n            const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n            this.accept(input, lexerActionExecutor, this.startIndex,\n                prevAccept.index, prevAccept.line, prevAccept.column);\n            return prevAccept.dfaState.prediction;\n        } else {\n            // if no accept and EOF is first char, return EOF\n            if (t === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF && input.index === this.startIndex) {\n                return _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF;\n            }\n            throw new _error_LexerNoViableAltException_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"](this.recog, input, this.startIndex, reach);\n        }\n    }\n\n    /**\n     * Given a starting configuration set, figure out all ATN configurations\n     * we can reach upon input {@code t}. Parameter {@code reach} is a return\n     * parameter.\n     */\n    getReachableConfigSet(input, closure, reach, t) {\n        // this is used to skip processing for configs which have a lower priority\n        // than a config that already reached an accept state for the same rule\n        let skipAlt = _ATN_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].INVALID_ALT_NUMBER;\n        for (let i = 0; i < closure.items.length; i++) {\n            const cfg = closure.items[i];\n            const currentAltReachedAcceptState = (cfg.alt === skipAlt);\n            if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n                continue;\n            }\n            if (LexerATNSimulator.debug) {\n                console.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg\n                    .toString(this.recog, true));\n            }\n            for (let j = 0; j < cfg.state.transitions.length; j++) {\n                const trans = cfg.state.transitions[j]; // for each transition\n                const target = this.getReachableTarget(trans, t);\n                if (target !== null) {\n                    let lexerActionExecutor = cfg.lexerActionExecutor;\n                    if (lexerActionExecutor !== null) {\n                        lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n                    }\n                    const treatEofAsEpsilon = (t === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF);\n                    const config = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: target, lexerActionExecutor: lexerActionExecutor}, cfg);\n                    if (this.closure(input, config, reach,\n                        currentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n                        // any remaining configs for this alt have a lower priority\n                        // than the one that just reached an accept state.\n                        skipAlt = cfg.alt;\n                    }\n                }\n            }\n        }\n    }\n\n    accept(input, lexerActionExecutor, startIndex, index, line, charPos) {\n        if (LexerATNSimulator.debug) {\n            console.log(\"ACTION %s\\n\", lexerActionExecutor);\n        }\n        // seek to after last char in token\n        input.seek(index);\n        this.line = line;\n        this.column = charPos;\n        if (lexerActionExecutor !== null && this.recog !== null) {\n            lexerActionExecutor.execute(this.recog, input, startIndex);\n        }\n    }\n\n    getReachableTarget(trans, t) {\n        if (trans.matches(t, 0, _Lexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MAX_CHAR_VALUE)) {\n            return trans.target;\n        } else {\n            return null;\n        }\n    }\n\n    computeStartState(input, p) {\n        const initialContext = _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].EMPTY;\n        const configs = new _OrderedATNConfigSet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n        for (let i = 0; i < p.transitions.length; i++) {\n            const target = p.transitions[i].target;\n            const cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: target, alt: i + 1, context: initialContext}, null);\n            this.closure(input, cfg, configs, false, false, false);\n        }\n        return configs;\n    }\n\n    /**\n     * Since the alternatives within any lexer decision are ordered by\n     * preference, this method stops pursuing the closure as soon as an accept\n     * state is reached. After the first accept state is reached by depth-first\n     * search from {@code config}, all other (potentially reachable) states for\n     * this rule would have a lower priority.\n     *\n     * @return {Boolean} {@code true} if an accept state is reached, otherwise\n     * {@code false}.\n     */\n    closure(input, config, configs,\n            currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n        let cfg = null;\n        if (LexerATNSimulator.debug) {\n            console.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n        }\n        if (config.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]) {\n            if (LexerATNSimulator.debug) {\n                if (this.recog !== null) {\n                    console.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n                } else {\n                    console.log(\"closure at rule stop %s\\n\", config);\n                }\n            }\n            if (config.context === null || config.context.hasEmptyPath()) {\n                if (config.context === null || config.context.isEmpty()) {\n                    configs.add(config);\n                    return true;\n                } else {\n                    configs.add(new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: config.state, context: _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].EMPTY}, config));\n                    currentAltReachedAcceptState = true;\n                }\n            }\n            if (config.context !== null && !config.context.isEmpty()) {\n                for (let i = 0; i < config.context.length; i++) {\n                    if (config.context.getReturnState(i) !== _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"].EMPTY_RETURN_STATE) {\n                        const newContext = config.context.getParent(i); // \"pop\" return state\n                        const returnState = this.atn.states[config.context.getReturnState(i)];\n                        cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: returnState, context: newContext}, config);\n                        currentAltReachedAcceptState = this.closure(input, cfg,\n                            configs, currentAltReachedAcceptState, speculative,\n                            treatEofAsEpsilon);\n                    }\n                }\n            }\n            return currentAltReachedAcceptState;\n        }\n        // optimization\n        if (!config.state.epsilonOnlyTransitions) {\n            if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n                configs.add(config);\n            }\n        }\n        for (let j = 0; j < config.state.transitions.length; j++) {\n            const trans = config.state.transitions[j];\n            cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n            if (cfg !== null) {\n                currentAltReachedAcceptState = this.closure(input, cfg, configs,\n                    currentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n            }\n        }\n        return currentAltReachedAcceptState;\n    }\n\n    // side-effect: can alter configs.hasSemanticContext\n    getEpsilonTarget(input, config, trans,\n                     configs, speculative, treatEofAsEpsilon) {\n        let cfg = null;\n        if (trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].RULE) {\n            const newContext = _context_SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].create(config.context, trans.followState.stateNumber);\n            cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: trans.target, context: newContext}, config);\n        } else if (trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].PRECEDENCE) {\n            throw \"Precedence predicates are not supported in lexers.\";\n        } else if (trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].PREDICATE) {\n            // Track traversing semantic predicates. If we traverse,\n            // we cannot add a DFA state for this \"reach\" computation\n            // because the DFA would not test the predicate again in the\n            // future. Rather than creating collections of semantic predicates\n            // like v3 and testing them on prediction, v4 will test them on the\n            // fly all the time using the ATN not the DFA. This is slower but\n            // semantically it's not used that often. One of the key elements to\n            // this predicate mechanism is not adding DFA states that see\n            // predicates immediately afterwards in the ATN. For example,\n\n            // a : ID {p1}? | ID {p2}? ;\n\n            // should create the start state for rule 'a' (to save start state\n            // competition), but should not create target of ID state. The\n            // collection of ATN states the following ID references includes\n            // states reached by traversing predicates. Since this is when we\n            // test them, we cannot cash the DFA state target of ID.\n\n            if (LexerATNSimulator.debug) {\n                console.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n            }\n            configs.hasSemanticContext = true;\n            if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n                cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: trans.target}, config);\n            }\n        } else if (trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].ACTION) {\n            if (config.context === null || config.context.hasEmptyPath()) {\n                // execute actions anywhere in the start rule for a token.\n                //\n                // TODO: if the entry rule is invoked recursively, some\n                // actions may be executed during the recursive call. The\n                // problem can appear when hasEmptyPath() is true but\n                // isEmpty() is false. In this case, the config needs to be\n                // split into two contexts - one with just the empty path\n                // and another with everything but the empty path.\n                // Unfortunately, the current algorithm does not allow\n                // getEpsilonTarget to return two configurations, so\n                // additional modifications are needed before we can support\n                // the split operation.\n                const lexerActionExecutor = _LexerActionExecutor_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].append(config.lexerActionExecutor,\n                    this.atn.lexerActions[trans.actionIndex]);\n                cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: trans.target, lexerActionExecutor: lexerActionExecutor}, config);\n            } else {\n                // ignore actions in referenced rules\n                cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: trans.target}, config);\n            }\n        } else if (trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].EPSILON) {\n            cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: trans.target}, config);\n        } else if (trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].ATOM ||\n            trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].RANGE ||\n            trans.serializationType === _transition_Transition_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].SET) {\n            if (treatEofAsEpsilon) {\n                if (trans.matches(_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF, 0, _Lexer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].MAX_CHAR_VALUE)) {\n                    cfg = new _LexerATNConfig_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"]({state: trans.target}, config);\n                }\n            }\n        }\n        return cfg;\n    }\n\n    /**\n     * Evaluate a predicate specified in the lexer.\n     *\n     * <p>If {@code speculative} is {@code true}, this method was called before\n     * {@link //consume} for the matched character. This method should call\n     * {@link //consume} before evaluating the predicate to ensure position\n     * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n     * and {@link Lexer//getcolumn}, properly reflect the current\n     * lexer state. This method should restore {@code input} and the simulator\n     * to the original state before returning (i.e. undo the actions made by the\n     * call to {@link //consume}.</p>\n     *\n     * @param input The input stream.\n     * @param ruleIndex The rule containing the predicate.\n     * @param predIndex The index of the predicate within the rule.\n     * @param speculative {@code true} if the current index in {@code input} is\n     * one character before the predicate's location.\n     *\n     * @return {@code true} if the specified predicate evaluates to\n     * {@code true}.\n     */\n    evaluatePredicate(input, ruleIndex,\n                      predIndex, speculative) {\n        // assume true if no recognizer was provided\n        if (this.recog === null) {\n            return true;\n        }\n        if (!speculative) {\n            return this.recog.sempred(null, ruleIndex, predIndex);\n        }\n        const savedcolumn = this.column;\n        const savedLine = this.line;\n        const index = input.index;\n        const marker = input.mark();\n        try {\n            this.consume(input);\n            return this.recog.sempred(null, ruleIndex, predIndex);\n        } finally {\n            this.column = savedcolumn;\n            this.line = savedLine;\n            input.seek(index);\n            input.release(marker);\n        }\n    }\n\n    captureSimState(settings, input, dfaState) {\n        settings.index = input.index;\n        settings.line = this.line;\n        settings.column = this.column;\n        settings.dfaState = dfaState;\n    }\n\n    addDFAEdge(from_, tk, to, cfgs) {\n        if (to === undefined) {\n            to = null;\n        }\n        if (cfgs === undefined) {\n            cfgs = null;\n        }\n        if (to === null && cfgs !== null) {\n            // leading to this call, ATNConfigSet.hasSemanticContext is used as a\n            // marker indicating dynamic predicate evaluation makes this edge\n            // dependent on the specific input sequence, so the static edge in the\n            // DFA should be omitted. The target DFAState is still created since\n            // execATN has the ability to resynchronize with the DFA state cache\n            // following the predicate evaluation step.\n            //\n            // TJP notes: next time through the DFA, we see a pred again and eval.\n            // If that gets us to a previously created (but dangling) DFA\n            // state, we can continue in pure DFA mode from there.\n            // /\n            const suppressEdge = cfgs.hasSemanticContext;\n            cfgs.hasSemanticContext = false;\n\n            to = this.addDFAState(cfgs);\n\n            if (suppressEdge) {\n                return to;\n            }\n        }\n        // add the edge\n        if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n            // Only track edges within the DFA bounds\n            return to;\n        }\n        if (LexerATNSimulator.debug) {\n            console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n        }\n        if (from_.edges === null) {\n            // make room for tokens 1..n and -1 masquerading as index 0\n            from_.edges = [];\n        }\n        from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n        return to;\n    }\n\n    /**\n     * Add a new DFA state if there isn't one with this set of\n     * configurations already. This method also detects the first\n     * configuration containing an ATN rule stop state. Later, when\n     * traversing the DFA, we will know which rule to accept.\n     */\n    addDFAState(configs) {\n        const proposed = new _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](null, configs);\n        let firstConfigWithRuleStopState = null;\n        for (let i = 0; i < configs.items.length; i++) {\n            const cfg = configs.items[i];\n            if (cfg.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]) {\n                firstConfigWithRuleStopState = cfg;\n                break;\n            }\n        }\n        if (firstConfigWithRuleStopState !== null) {\n            proposed.isAcceptState = true;\n            proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n            proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n        }\n        const dfa = this.decisionToDFA[this.mode];\n        const existing = dfa.states.get(proposed);\n        if (existing !== null) {\n            return existing;\n        }\n        const newState = proposed;\n        newState.stateNumber = dfa.states.length;\n        configs.setReadonly(true);\n        newState.configs = configs;\n        dfa.states.add(newState);\n        return newState;\n    }\n\n    getDFA(mode) {\n        return this.decisionToDFA[mode];\n    }\n\n// Get the text matched so far for the current token.\n    getText(input) {\n        // index is first lookahead char, don't include.\n        return input.getText(this.startIndex, input.index - 1);\n    }\n\n    consume(input) {\n        const curChar = input.LA(1);\n        if (curChar === \"\\n\".charCodeAt(0)) {\n            this.line += 1;\n            this.column = 0;\n        } else {\n            this.column += 1;\n        }\n        input.consume();\n    }\n\n    getTokenName(tt) {\n        if (tt === -1) {\n            return \"EOF\";\n        } else {\n            return \"'\" + String.fromCharCode(tt) + \"'\";\n        }\n    }\n}\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerActionExecutor)\n/* harmony export */ });\n/* harmony import */ var _action_LexerIndexedCustomAction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../action/LexerIndexedCustomAction.js */ \"./node_modules/antlr4/src/antlr4/action/LexerIndexedCustomAction.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nclass LexerActionExecutor {\n\t/**\n\t * Represents an executor for a sequence of lexer actions which traversed during\n\t * the matching operation of a lexer rule (token).\n\t *\n\t * <p>The executor tracks position information for position-dependent lexer actions\n\t * efficiently, ensuring that actions appearing only at the end of the rule do\n\t * not cause bloating of the {@link DFA} created for the lexer.</p>\n\t */\n\tconstructor(lexerActions) {\n\t\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t\t/**\n\t\t * Caches the result of {@link //hashCode} since the hash code is an element\n\t\t * of the performance-critical {@link LexerATNConfig//hashCode} operation\n\t\t */\n\t\tthis.cachedHashCode = _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t\t// lexerActions]))\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which encodes the current offset\n\t * for position-dependent lexer actions.\n\t *\n\t * <p>Normally, when the executor encounters lexer actions where\n\t * {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n\t * {@link IntStream//seek} on the input {@link CharStream} to set the input\n\t * position to the <em>end</em> of the current token. This behavior provides\n\t * for efficient DFA representation of lexer actions which appear at the end\n\t * of a lexer rule, even when the lexer rule matches a variable number of\n\t * characters.</p>\n\t *\n\t * <p>Prior to traversing a match transition in the ATN, the current offset\n\t * from the token start index is assigned to all position-dependent lexer\n\t * actions which have not already been assigned a fixed offset. By storing\n\t * the offsets relative to the token start index, the DFA representation of\n\t * lexer actions which appear in the middle of tokens remains efficient due\n\t * to sharing among tokens of the same length, regardless of their absolute\n\t * position in the input stream.</p>\n\t *\n\t * <p>If the current executor already has offsets assigned to all\n\t * position-dependent lexer actions, the method returns {@code this}.</p>\n\t *\n\t * @param offset The current offset to assign to all position-dependent\n\t * lexer actions which do not already have offsets assigned.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets\n\t * for all position-dependent lexer actions.\n\t */\n\tfixOffsetBeforeMatch(offset) {\n\t\tlet updatedLexerActions = null;\n\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\tif (this.lexerActions[i].isPositionDependent &&\n\t\t\t\t\t!(this.lexerActions[i] instanceof _action_LexerIndexedCustomAction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])) {\n\t\t\t\tif (updatedLexerActions === null) {\n\t\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t\t}\n\t\t\t\tupdatedLexerActions[i] = new _action_LexerIndexedCustomAction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](offset,\n\t\t\t\t\t\tthis.lexerActions[i]);\n\t\t\t}\n\t\t}\n\t\tif (updatedLexerActions === null) {\n\t\t\treturn this;\n\t\t} else {\n\t\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t\t}\n\t}\n\n\t/**\n\t * Execute the actions encapsulated by this executor within the context of a\n\t * particular {@link Lexer}.\n\t *\n\t * <p>This method calls {@link IntStream//seek} to set the position of the\n\t * {@code input} {@link CharStream} prior to calling\n\t * {@link LexerAction//execute} on a position-dependent action. Before the\n\t * method returns, the input position will be restored to the same position\n\t * it was in when the method was invoked.</p>\n\t *\n\t * @param lexer The lexer instance.\n\t * @param input The input stream which is the source for the current token.\n\t * When this method is called, the current {@link IntStream//index} for\n\t * {@code input} should be the start of the following token, i.e. 1\n\t * character past the end of the current token.\n\t * @param startIndex The token start index. This value may be passed to\n\t * {@link IntStream//seek} to set the {@code input} position to the beginning\n\t * of the token.\n\t */\n\texecute(lexer, input, startIndex) {\n\t\tlet requiresSeek = false;\n\t\tconst stopIndex = input.index;\n\t\ttry {\n\t\t\tfor (let i = 0; i < this.lexerActions.length; i++) {\n\t\t\t\tlet lexerAction = this.lexerActions[i];\n\t\t\t\tif (lexerAction instanceof _action_LexerIndexedCustomAction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n\t\t\t\t\tconst offset = lexerAction.offset;\n\t\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\t\trequiresSeek = (startIndex + offset) !== stopIndex;\n\t\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\t\tinput.seek(stopIndex);\n\t\t\t\t\trequiresSeek = false;\n\t\t\t\t}\n\t\t\t\tlexerAction.execute(lexer);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (requiresSeek) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t}\n\t\t}\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\t\treturn false;\n\t\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\t\treturn false;\n\t\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tconst numActions = this.lexerActions.length\n\t\t\tfor (let idx = 0; idx < numActions; ++idx) {\n\t\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t/**\n\t * Creates a {@link LexerActionExecutor} which executes the actions for\n\t * the input {@code lexerActionExecutor} followed by a specified\n\t * {@code lexerAction}.\n\t *\n\t * @param lexerActionExecutor The executor for actions already traversed by\n\t * the lexer while matching a token within a particular\n\t * {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n\t * though it were an empty executor.\n\t * @param lexerAction The lexer action to execute after the actions\n\t * specified in {@code lexerActionExecutor}.\n\t *\n\t * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions\n\t * of {@code lexerActionExecutor} and {@code lexerAction}.\n\t */\n\tstatic append(lexerActionExecutor, lexerAction) {\n\t\tif (lexerActionExecutor === null) {\n\t\t\treturn new LexerActionExecutor([ lexerAction ]);\n\t\t}\n\t\tconst lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);\n\t\treturn new LexerActionExecutor(lexerActions);\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerActionType.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerActionType.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    // The type of a {@link LexerChannelAction} action.\n    CHANNEL: 0,\n    // The type of a {@link LexerCustomAction} action\n    CUSTOM: 1,\n    // The type of a {@link LexerModeAction} action.\n    MODE: 2,\n    //The type of a {@link LexerMoreAction} action.\n    MORE: 3,\n    //The type of a {@link LexerPopModeAction} action.\n    POP_MODE: 4,\n    //The type of a {@link LexerPushModeAction} action.\n    PUSH_MODE: 5,\n    //The type of a {@link LexerSkipAction} action.\n    SKIP: 6,\n    //The type of a {@link LexerTypeAction} action.\n    TYPE: 7\n});\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/LexerActionType.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/OrderedATNConfigSet.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/OrderedATNConfigSet.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ OrderedATNConfigSet)\n/* harmony export */ });\n/* harmony import */ var _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNConfigSet.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\n/* harmony import */ var _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/HashSet.js */ \"./node_modules/antlr4/src/antlr4/misc/HashSet.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass OrderedATNConfigSet extends _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.configLookup = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/OrderedATNConfigSet.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ParserATNSimulator)\n/* harmony export */ });\n/* harmony import */ var _ATN_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATN.js */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\n/* harmony import */ var _state_ATNState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* harmony import */ var _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../state/RuleStopState.js */ \"./node_modules/antlr4/src/antlr4/state/RuleStopState.js\");\n/* harmony import */ var _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ATNConfig.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\n/* harmony import */ var _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ATNConfigSet.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../dfa/DFAState.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\n/* harmony import */ var _dfa_PredPrediction_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../dfa/PredPrediction.js */ \"./node_modules/antlr4/src/antlr4/dfa/PredPrediction.js\");\n/* harmony import */ var _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ATNSimulator.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js\");\n/* harmony import */ var _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./PredictionMode.js */ \"./node_modules/antlr4/src/antlr4/atn/PredictionMode.js\");\n/* harmony import */ var _context_RuleContext_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../context/RuleContext.js */ \"./node_modules/antlr4/src/antlr4/context/RuleContext.js\");\n/* harmony import */ var _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./SemanticContext.js */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n/* harmony import */ var _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../context/PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../transition/Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* harmony import */ var _transition_SetTransition_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../transition/SetTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/SetTransition.js\");\n/* harmony import */ var _transition_NotSetTransition_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../transition/NotSetTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/NotSetTransition.js\");\n/* harmony import */ var _transition_RuleTransition_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../transition/RuleTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/RuleTransition.js\");\n/* harmony import */ var _transition_ActionTransition_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../transition/ActionTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/ActionTransition.js\");\n/* harmony import */ var _error_NoViableAltException_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../error/NoViableAltException.js */ \"./node_modules/antlr4/src/antlr4/error/NoViableAltException.js\");\n/* harmony import */ var _context_SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../context/SingletonPredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js\");\n/* harmony import */ var _context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../context/PredictionContextUtils.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js\");\n/* harmony import */ var _transition_AtomTransition_js__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../transition/AtomTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/AtomTransition.js\");\n/* harmony import */ var _utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../utils/arrayToString.js */ \"./node_modules/antlr4/src/antlr4/utils/arrayToString.js\");\n/* harmony import */ var _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../misc/BitSet.js */ \"./node_modules/antlr4/src/antlr4/misc/BitSet.js\");\n/* harmony import */ var _utils_DoubleDict_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../utils/DoubleDict.js */ \"./node_modules/antlr4/src/antlr4/utils/DoubleDict.js\");\n/* harmony import */ var _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../misc/HashSet.js */ \"./node_modules/antlr4/src/antlr4/misc/HashSet.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n *\n * <p>\n * The basic complexity of the adaptive strategy makes it harder to understand.\n * We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n * requests go through the DFA first. If they reach a state without an edge for\n * the current symbol, the algorithm fails over to the ATN simulation to\n * complete the DFA path for the current input (until it finds a conflict state\n * or uniquely predicting state).</p>\n *\n * <p>\n * All of that is done without using the outer context because we want to create\n * a DFA that is not dependent upon the rule invocation stack when we do a\n * prediction. One DFA works in all contexts. We avoid using context not\n * necessarily because it's slower, although it can be, but because of the DFA\n * caching problem. The closure routine only considers the rule invocation stack\n * created during prediction beginning in the decision rule. For example, if\n * prediction occurs without invoking another rule's ATN, there are no context\n * stacks in the configurations. When lack of context leads to a conflict, we\n * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n * strategy (versus full LL(*)).</p>\n *\n * <p>\n * When SLL yields a configuration set with conflict, we rewind the input and\n * retry the ATN simulation, this time using full outer context without adding\n * to the DFA. Configuration context stacks will be the full invocation stacks\n * from the start rule. If we get a conflict using full context, then we can\n * definitively say we have a true ambiguity for that input sequence. If we\n * don't get a conflict, it implies that the decision is sensitive to the outer\n * context. (It is not context-sensitive in the sense of context-sensitive\n * grammars.)</p>\n *\n * <p>\n * The next time we reach this DFA state with an SLL conflict, through DFA\n * simulation, we will again retry the ATN simulation using full context mode.\n * This is slow because we can't save the results and have to \"interpret\" the\n * ATN each time we get that input.</p>\n *\n * <p>\n * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n *\n * <p>\n * We could cache results from full context to predicted alternative easily and\n * that saves a lot of time but doesn't work in presence of predicates. The set\n * of visible predicates from the ATN start state changes depending on the\n * context, because closure can fall off the end of a rule. I tried to cache\n * tuples (stack context, semantic context, predicted alt) but it was slower\n * than interpreting and much more complicated. Also required a huge amount of\n * memory. The goal is not to create the world's fastest parser anyway. I'd like\n * to keep this algorithm simple. By launching multiple threads, we can improve\n * the speed of parsing across a large number of files.</p>\n *\n * <p>\n * There is no strict ordering between the amount of input used by SLL vs LL,\n * which makes it really hard to build a cache for full context. Let's say that\n * we have input A B C that leads to an SLL conflict with full context X. That\n * implies that using X we might only use A B but we could also use A B C D to\n * resolve conflict. Input A B C D could predict alternative 1 in one position\n * in the input and A B C E could predict alternative 2 in another position in\n * input. The conflicting SLL configurations could still be non-unique in the\n * full context prediction, which would lead us to requiring more input than the\n * original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n * input\tused during the previous prediction. That amounts to a cache that maps\n * X to a specific DFA for that context.</p>\n *\n * <p>\n * Something should be done for left-recursive expression predictions. They are\n * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n * with full LL thing Sam does.</p>\n *\n * <p>\n * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n *\n * <p>\n * We avoid doing full context retry when the outer context is empty, we did not\n * dip into the outer context by falling off the end of the decision state rule,\n * or when we force SLL mode.</p>\n *\n * <p>\n * As an example of the not dip into outer context case, consider as super\n * constructor calls versus function calls. One grammar might look like\n * this:</p>\n *\n * <pre>\n * ctorBody\n *   : '{' superCall? stat* '}'\n *   ;\n * </pre>\n *\n * <p>\n * Or, you might see something like</p>\n *\n * <pre>\n * stat\n *   : superCall ';'\n *   | expression ';'\n *   | ...\n *   ;\n * </pre>\n *\n * <p>\n * In both cases I believe that no closure operations will dip into the outer\n * context. In the first case ctorBody in the worst case will stop at the '}'.\n * In the 2nd case it should stop at the ';'. Both cases should stay within the\n * entry rule and not dip into the outer context.</p>\n *\n * <p>\n * <strong>PREDICATES</strong></p>\n *\n * <p>\n * Predicates are always evaluated if present in either SLL or LL both. SLL and\n * LL simulation deals with predicates differently. SLL collects predicates as\n * it performs closure operations like ANTLR v3 did. It delays predicate\n * evaluation until it reaches and accept state. This allows us to cache the SLL\n * ATN simulation whereas, if we had evaluated predicates on-the-fly during\n * closure, the DFA state configuration sets would be different and we couldn't\n * build up a suitable DFA.</p>\n *\n * <p>\n * When building a DFA accept state during ATN simulation, we evaluate any\n * predicates and return the sole semantically valid alternative. If there is\n * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n * we throw an exception. Alternatives without predicates act like they have\n * true predicates. The simple way to think about it is to strip away all\n * alternatives with false predicates and choose the minimum alternative that\n * remains.</p>\n *\n * <p>\n * When we start in the DFA and reach an accept state that's predicated, we test\n * those and return the minimum semantically viable alternative. If no\n * alternatives are viable, we throw an exception.</p>\n *\n * <p>\n * During full LL ATN simulation, closure always evaluates predicates and\n * on-the-fly. This is crucial to reducing the configuration set size during\n * closure. It hits a landmine when parsing with the Java grammar, for example,\n * without this on-the-fly evaluation.</p>\n *\n * <p>\n * <strong>SHARING DFA</strong></p>\n *\n * <p>\n * All instances of the same parser share the same decision DFAs through a\n * static field. Each instance gets its own ATN simulator but they share the\n * same {@link //decisionToDFA} field. They also share a\n * {@link PredictionContextCache} object that makes sure that all\n * {@link PredictionContext} objects are shared among the DFA states. This makes\n * a big size difference.</p>\n *\n * <p>\n * <strong>THREAD SAFETY</strong></p>\n *\n * <p>\n * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n * it adds a new DFA object to that array. {@link //addDFAEdge}\n * locks on the DFA for the current decision when setting the\n * {@link DFAState//edges} field. {@link //addDFAState} locks on\n * the DFA for the current decision when looking up a DFA state to see if it\n * already exists. We must make sure that all requests to add DFA states that\n * are equivalent result in the same shared DFA object. This is because lots of\n * threads will be trying to update the DFA at once. The\n * {@link //addDFAState} method also locks inside the DFA lock\n * but this time on the shared context cache when it rebuilds the\n * configurations' {@link PredictionContext} objects using cached\n * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n * safe as long as we can guarantee that all threads referencing\n * {@code s.edge[t]} get the same physical target {@link DFAState}, or\n * {@code null}. Once into the DFA, the DFA simulation does not reference the\n * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n * targets. The DFA simulator will either find {@link DFAState//edges} to be\n * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n * {@code dfa.edges[t]} to be non-null. The\n * {@link //addDFAEdge} method could be racing to set the field\n * but in either case the DFA simulator works; if {@code null}, and requests ATN\n * simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n * way it will work because it's not doing a test and set operation.</p>\n *\n * <p>\n * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n * Parsing)</strong></p>\n *\n * <p>\n * Sam pointed out that if SLL does not give a syntax error, then there is no\n * point in doing full LL, which is slower. We only have to try LL if we get a\n * syntax error. For maximum speed, Sam starts the parser set to pure SLL\n * mode with the {@link BailErrorStrategy}:</p>\n *\n * <pre>\n * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n * </pre>\n *\n * <p>\n * If it does not get a syntax error, then we're done. If it does get a syntax\n * error, we need to retry with the combined SLL/LL strategy.</p>\n *\n * <p>\n * The reason this works is as follows. If there are no SLL conflicts, then the\n * grammar is SLL (at least for that input set). If there is an SLL conflict,\n * the full LL analysis must yield a set of viable alternatives which is a\n * subset of the alternatives reported by SLL. If the LL set is a singleton,\n * then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n * set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n * is truly ambiguous on the current input. If the LL set is smaller, then the\n * SLL conflict resolution might choose an alternative that the full LL would\n * rule out as a possibility based upon better context information. If that's\n * the case, then the SLL parse will definitely get an error because the full LL\n * analysis says it's not viable. If SLL conflict resolution chooses an\n * alternative within the LL set, them both SLL and LL would choose the same\n * alternative because they both choose the minimum of multiple conflicting\n * alternatives.</p>\n *\n * <p>\n * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n * parsing will get an error because SLL will pursue alternative 1. If\n * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n * choose the same alternative because alternative one is the minimum of either\n * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n *\n * <p>\n * Of course, if the input is invalid, then we will get an error for sure in\n * both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n * the input.</p>\n */\nclass ParserATNSimulator extends _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"] {\n    constructor(parser, atn, decisionToDFA, sharedContextCache) {\n        super(atn, sharedContextCache);\n        this.parser = parser;\n        this.decisionToDFA = decisionToDFA;\n        // SLL, LL, or LL + exact ambig detection?//\n        this.predictionMode = _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].LL;\n        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n        this._input = null;\n        this._startIndex = 0;\n        this._outerContext = null;\n        this._dfa = null;\n        /**\n         * Each prediction operation uses a cache for merge of prediction contexts.\n         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n         *  isn't synchronized but we're ok since two threads shouldn't reuse same\n         *  parser/atnsim object because it can only handle one input at a time.\n         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n         *  also be examined during cache lookup.\n         */\n        this.mergeCache = null;\n        this.debug = false;\n        this.debug_closure = false;\n        this.debug_add = false;\n        this.debug_list_atn_decisions = false;\n        this.dfa_debug = false;\n        this.retry_debug = false;\n    }\n\n    reset() {}\n\n    adaptivePredict(input, decision, outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"adaptivePredict decision \" + decision +\n                                   \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                   \" line \" + input.LT(1).line + \":\" +\n                                   input.LT(1).column);\n        }\n        this._input = input;\n        this._startIndex = input.index;\n        this._outerContext = outerContext;\n\n        const dfa = this.decisionToDFA[decision];\n        this._dfa = dfa;\n        const m = input.mark();\n        const index = input.index;\n\n        // Now we are certain to have a specific decision's DFA\n        // But, do we still need an initial state?\n        try {\n            let s0;\n            if (dfa.precedenceDfa) {\n                // the start state for a precedence DFA depends on the current\n                // parser precedence, and is provided by a DFA method.\n                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n            } else {\n                // the start state for a \"regular\" DFA is just s0\n                s0 = dfa.s0;\n            }\n            if (s0===null) {\n                if (outerContext===null) {\n                    outerContext = _context_RuleContext_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].EMPTY;\n                }\n                if (this.debug || this.debug_list_atn_decisions) {\n                    console.log(\"predictATN decision \" + dfa.decision +\n                                       \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                       \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n                }\n\n                const fullCtx = false;\n                let s0_closure = this.computeStartState(dfa.atnStartState, _context_RuleContext_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"].EMPTY, fullCtx);\n\n                if( dfa.precedenceDfa) {\n                    // If this is a precedence DFA, we use applyPrecedenceFilter\n                    // to convert the computed start state to a precedence start\n                    // state. We then use DFA.setPrecedenceStartState to set the\n                    // appropriate start state for the precedence level rather\n                    // than simply setting DFA.s0.\n                    //\n                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                    s0_closure = this.applyPrecedenceFilter(s0_closure);\n                    s0 = this.addDFAState(dfa, new _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](null, s0_closure));\n                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n                } else {\n                    s0 = this.addDFAState(dfa, new _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](null, s0_closure));\n                    dfa.s0 = s0;\n                }\n            }\n            const alt = this.execATN(dfa, s0, input, index, outerContext);\n            if (this.debug) {\n                console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames, this.parser.symbolicNames));\n            }\n            return alt;\n        } finally {\n            this._dfa = null;\n            this.mergeCache = null; // wack cache after each prediction\n            input.seek(index);\n            input.release(m);\n        }\n    }\n\n    /**\n     * Performs ATN simulation to compute a predicted alternative based\n     *  upon the remaining input, but also updates the DFA cache to avoid\n     *  having to traverse the ATN again for the same input sequence.\n     *\n     * There are some key conditions we're looking for after computing a new\n     * set of ATN configs (proposed DFA state):\n     *       if the set is empty, there is no viable alternative for current symbol\n     *       does the state uniquely predict an alternative?\n     *       does the state have a conflict that would prevent us from\n     *         putting it on the work list?\n     *\n     * We also have some key operations to do:\n     *       add an edge from previous DFA state to potentially new DFA state, D,\n     *         upon current symbol but only if adding to work list, which means in all\n     *         cases except no viable alternative (and possibly non-greedy decisions?)\n     *       collecting predicates and adding semantic context to DFA accept states\n     *       adding rule context to context-sensitive DFA accept states\n     *       consuming an input symbol\n     *       reporting a conflict\n     *       reporting an ambiguity\n     *       reporting a context sensitivity\n     *       reporting insufficient predicates\n     *\n     * cover these cases:\n     *    dead end\n     *    single alt\n     *    single alt + preds\n     *    conflict\n     *    conflict + preds\n     *\n     */\n    execATN(dfa, s0, input, startIndex, outerContext ) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATN decision \" + dfa.decision +\n                    \" exec LA(1)==\" + this.getLookaheadName(input) +\n                    \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n        }\n        let alt;\n        let previousD = s0;\n\n        if (this.debug) {\n            console.log(\"s0 = \" + s0);\n        }\n        let t = input.LA(1);\n        for(;;) { // while more work\n            let D = this.getExistingTargetState(previousD, t);\n            if(D===null) {\n                D = this.computeTargetState(dfa, previousD, t);\n            }\n            if(D===_ATNSimulator_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].ERROR) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for SLL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n                input.seek(startIndex);\n                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n                if(alt!==_ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            if(D.requiresFullContext && this.predictionMode !== _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].SLL) {\n                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n                let conflictingAlts = null;\n                if (D.predicates!==null) {\n                    if (this.debug) {\n                        console.log(\"DFA state has preds in DFA sim LL failover\");\n                    }\n                    const conflictIndex = input.index;\n                    if(conflictIndex !== startIndex) {\n                        input.seek(startIndex);\n                    }\n                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                    if (conflictingAlts.length===1) {\n                        if(this.debug) {\n                            console.log(\"Full LL avoided\");\n                        }\n                        return conflictingAlts.minValue();\n                    }\n                    if (conflictIndex !== startIndex) {\n                        // restore the index so reporting the fallback to full\n                        // context occurs with the index at the correct spot\n                        input.seek(conflictIndex);\n                    }\n                }\n                if (this.dfa_debug) {\n                    console.log(\"ctx sensitive state \" + outerContext +\" in \" + D);\n                }\n                const fullCtx = true;\n                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n                return alt;\n            }\n            if (D.isAcceptState) {\n                if (D.predicates===null) {\n                    return D.prediction;\n                }\n                const stopIndex = input.index;\n                input.seek(startIndex);\n                const alts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (alts.length===0) {\n                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n                } else if (alts.length===1) {\n                    return alts.minValue();\n                } else {\n                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                    return alts.minValue();\n                }\n            }\n            previousD = D;\n\n            if (t !== _Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n    }\n\n    /**\n     * Get an existing target state for an edge in the DFA. If the target state\n     * for the edge has not yet been computed or is otherwise not available,\n     * this method returns {@code null}.\n     *\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     * @return The existing target DFA state for the given input symbol\n     * {@code t}, or {@code null} if the target state for this edge is not\n     * already cached\n     */\n    getExistingTargetState(previousD, t) {\n        const edges = previousD.edges;\n        if (edges===null) {\n            return null;\n        } else {\n            return edges[t + 1] || null;\n        }\n    }\n\n    /**\n     * Compute a target state for an edge in the DFA, and attempt to add the\n     * computed state and corresponding edge to the DFA.\n     *\n     * @param dfa The DFA\n     * @param previousD The current DFA state\n     * @param t The next input symbol\n     *\n     * @return The computed target DFA state for the given input symbol\n     * {@code t}. If {@code t} does not lead to a valid DFA state, this method\n     * returns {@link //ERROR\n     */\n    computeTargetState(dfa, previousD, t) {\n       const reach = this.computeReachSet(previousD.configs, t, false);\n        if(reach===null) {\n            this.addDFAEdge(dfa, previousD, t, _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].ERROR);\n            return _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].ERROR;\n        }\n        // create new target state; we'll add to DFA after it's complete\n        let D = new _dfa_DFAState_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"](null, reach);\n\n        const predictedAlt = this.getUniqueAlt(reach);\n\n        if (this.debug) {\n            const altSubSets = _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getConflictingAltSubsets(reach);\n            console.log(\"SLL altSubSets=\" + (0,_utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(altSubSets) +\n                        /*\", previous=\" + previousD.configs + */\n                        \", configs=\" + reach +\n                        \", predict=\" + predictedAlt +\n                        \", allSubsetsConflict=\" +\n                        _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].allSubsetsConflict(altSubSets) + \", conflictingAlts=\" +\n                        this.getConflictingAlts(reach));\n        }\n        if (predictedAlt!==_ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n            // NO CONFLICT, UNIQUELY PREDICTED ALT\n            D.isAcceptState = true;\n            D.configs.uniqueAlt = predictedAlt;\n            D.prediction = predictedAlt;\n        } else if (_PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n            // MORE THAN ONE VIABLE ALTERNATIVE\n            D.configs.conflictingAlts = this.getConflictingAlts(reach);\n            D.requiresFullContext = true;\n            // in SLL-only mode, we will stop at this state and return the minimum alt\n            D.isAcceptState = true;\n            D.prediction = D.configs.conflictingAlts.minValue();\n        }\n        if (D.isAcceptState && D.configs.hasSemanticContext) {\n            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n            if( D.predicates!==null) {\n                D.prediction = _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER;\n            }\n        }\n        // all adds to dfa are done after we've created full D state\n        D = this.addDFAEdge(dfa, previousD, t, D);\n        return D;\n    }\n\n    predicateDFAState(dfaState, decisionState) {\n        // We need to test all predicates, even in DFA states that\n        // uniquely predict alternative.\n        const nalts = decisionState.transitions.length;\n        // Update DFA so reach becomes accept state with (predicate,alt)\n        // pairs if preds found for conflicting alts\n        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n        if (altToPred!==null) {\n            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n            dfaState.prediction = _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER; // make sure we use preds\n        } else {\n            // There are preds in configs but they might go away\n            // when OR'd together like {p}? || NONE == NONE. If neither\n            // alt has preds, resolve to min alt\n            dfaState.prediction = altsToCollectPredsFrom.minValue();\n        }\n    }\n\n// comes back with reach.uniqueAlt set to a valid alt\n    execATNWithFullContext(dfa, D, // how far we got before failing over\n                                         s0,\n                                         input,\n                                         startIndex,\n                                         outerContext) {\n        if (this.debug || this.debug_list_atn_decisions) {\n            console.log(\"execATNWithFullContext \"+s0);\n        }\n        const fullCtx = true;\n        let foundExactAmbig = false;\n        let reach;\n        let previous = s0;\n        input.seek(startIndex);\n        let t = input.LA(1);\n        let predictedAlt = -1;\n        for (;;) { // while more work\n            reach = this.computeReachSet(previous, t, fullCtx);\n            if (reach===null) {\n                // if any configs in previous dipped into outer context, that\n                // means that input up to t actually finished entry rule\n                // at least for LL decision. Full LL doesn't dip into outer\n                // so don't need special case.\n                // We will get an error no matter what so delay until after\n                // decision; better error message. Also, no reachable target\n                // ATN states in SLL implies LL will also get nowhere.\n                // If conflict in states that dip out, choose min since we\n                // will get error no matter what.\n                const e = this.noViableAlt(input, outerContext, previous, startIndex);\n                input.seek(startIndex);\n                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n                if(alt!==_ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n                    return alt;\n                } else {\n                    throw e;\n                }\n            }\n            const altSubSets = _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getConflictingAltSubsets(reach);\n            if(this.debug) {\n                console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" +\n                      _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" +\n                      _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].resolvesToJustOneViableAlt(altSubSets));\n            }\n            reach.uniqueAlt = this.getUniqueAlt(reach);\n            // unique prediction?\n            if(reach.uniqueAlt!==_ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n                predictedAlt = reach.uniqueAlt;\n                break;\n            } else if (this.predictionMode !== _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].LL_EXACT_AMBIG_DETECTION) {\n                predictedAlt = _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].resolvesToJustOneViableAlt(altSubSets);\n                if(predictedAlt !== _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n                    break;\n                }\n            } else {\n                // In exact ambiguity mode, we never try to terminate early.\n                // Just keeps scarfing until we know what the conflict is\n                if (_PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].allSubsetsConflict(altSubSets) && _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].allSubsetsEqual(altSubSets)) {\n                    foundExactAmbig = true;\n                    predictedAlt = _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getSingleViableAlt(altSubSets);\n                    break;\n                }\n                // else there are multiple non-conflicting subsets or\n                // we're not sure what the ambiguity is yet.\n                // So, keep going.\n            }\n            previous = reach;\n            if( t !== _Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF) {\n                input.consume();\n                t = input.LA(1);\n            }\n        }\n        // If the configuration set uniquely predicts an alternative,\n        // without conflict, then we know that it's a full LL decision\n        // not SLL.\n        if (reach.uniqueAlt !== _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER ) {\n            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n            return predictedAlt;\n        }\n        // We do not check predicates here because we have checked them\n        // on-the-fly when doing full context prediction.\n\n        //\n        // In non-exact ambiguity detection mode, we might\tactually be able to\n        // detect an exact ambiguity, but I'm not going to spend the cycles\n        // needed to check. We only emit ambiguity warnings in exact ambiguity\n        // mode.\n        //\n        // For example, we might know that we have conflicting configurations.\n        // But, that does not mean that there is no way forward without a\n        // conflict. It's possible to have nonconflicting alt subsets as in:\n\n        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n        // from\n        //\n        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n        //\n        // In this case, (17,1,[5 $]) indicates there is some next sequence that\n        // would resolve this without conflict to alternative 1. Any other viable\n        // next sequence, however, is associated with a conflict.  We stop\n        // looking for input because no amount of further lookahead will alter\n        // the fact that we should predict alternative 1.  We just can't say for\n        // sure that there is an ambiguity without looking further.\n\n        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n        return predictedAlt;\n    }\n\n    computeReachSet(closure, t, fullCtx) {\n        if (this.debug) {\n            console.log(\"in computeReachSet, starting closure: \" + closure);\n        }\n        if( this.mergeCache===null) {\n            this.mergeCache = new _utils_DoubleDict_js__WEBPACK_IMPORTED_MODULE_25__[\"default\"]();\n        }\n        const intermediate = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](fullCtx);\n\n        // Configurations already in a rule stop state indicate reaching the end\n        // of the decision rule (local context) or end of the start rule (full\n        // context). Once reached, these configurations are never updated by a\n        // closure operation, so they are handled separately for the performance\n        // advantage of having a smaller intermediate set when calling closure.\n        //\n        // For full-context reach operations, separate handling is required to\n        // ensure that the alternative matching the longest overall sequence is\n        // chosen when multiple such configurations can match the input.\n\n        let skippedStopStates = null;\n\n        // First figure out where we can reach on input t\n        for (let i=0; i<closure.items.length;i++) {\n            const c = closure.items[i];\n            if(this.debug) {\n                console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n            }\n            if (c.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n                if (fullCtx || t === _Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF) {\n                    if (skippedStopStates===null) {\n                        skippedStopStates = [];\n                    }\n                    skippedStopStates.push(c);\n                    if(this.debug_add) {\n                        console.log(\"added \" + c + \" to skippedStopStates\");\n                    }\n                }\n                continue;\n            }\n            for(let j=0;j<c.state.transitions.length;j++) {\n                const trans = c.state.transitions[j];\n                const target = this.getReachableTarget(trans, t);\n                if (target!==null) {\n                    const cfg = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:target}, c);\n                    intermediate.add(cfg, this.mergeCache);\n                    if(this.debug_add) {\n                        console.log(\"added \" + cfg + \" to intermediate\");\n                    }\n                }\n            }\n        }\n        // Now figure out where the reach operation can take us...\n        let reach = null;\n\n        // This block optimizes the reach operation for intermediate sets which\n        // trivially indicate a termination state for the overall\n        // adaptivePredict operation.\n        //\n        // The conditions assume that intermediate\n        // contains all configurations relevant to the reach set, but this\n        // condition is not true when one or more configurations have been\n        // withheld in skippedStopStates, or when the current symbol is EOF.\n        //\n        if (skippedStopStates===null && t!==_Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF) {\n            if (intermediate.items.length===1) {\n                // Don't pursue the closure if there is just one state.\n                // It can only have one alternative; just add to result\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            } else if (this.getUniqueAlt(intermediate)!==_ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n                // Also don't pursue the closure if there is unique alternative\n                // among the configurations.\n                reach = intermediate;\n            }\n        }\n        // If the reach set could not be trivially determined, perform a closure\n        // operation on the intermediate set to compute its initial value.\n        //\n        if (reach===null) {\n            reach = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](fullCtx);\n            const closureBusy = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"]();\n            const treatEofAsEpsilon = t === _Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF;\n            for (let k=0; k<intermediate.items.length;k++) {\n                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n            }\n        }\n        if (t === _Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF) {\n            // After consuming EOF no additional input is possible, so we are\n            // only interested in configurations which reached the end of the\n            // decision rule (local context) or end of the start rule (full\n            // context). Update reach to contain only these configurations. This\n            // handles both explicit EOF transitions in the grammar and implicit\n            // EOF transitions following the end of the decision or start rule.\n            //\n            // When reach==intermediate, no closure operation was performed. In\n            // this case, removeAllConfigsNotInRuleStopState needs to check for\n            // reachable rule stop states as well as configurations already in\n            // a rule stop state.\n            //\n            // This is handled before the configurations in skippedStopStates,\n            // because any configurations potentially added from that list are\n            // already guaranteed to meet this condition whether or not it's\n            // required.\n            //\n            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n        }\n        // If skippedStopStates!==null, then it contains at least one\n        // configuration. For full-context reach operations, these\n        // configurations reached the end of the start rule, in which case we\n        // only add them back to reach if no configuration during the current\n        // closure operation reached such a state. This ensures adaptivePredict\n        // chooses an alternative matching the longest overall sequence when\n        // multiple alternatives are viable.\n        //\n        if (skippedStopStates!==null && ( (! fullCtx) || (! _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].hasConfigInRuleStopState(reach)))) {\n            for (let l=0; l<skippedStopStates.length;l++) {\n                reach.add(skippedStopStates[l], this.mergeCache);\n            }\n        }\n        if (reach.items.length===0) {\n            return null;\n        } else {\n            return reach;\n        }\n    }\n\n    /**\n     * Return a configuration set containing only the configurations from\n     * {@code configs} which are in a {@link RuleStopState}. If all\n     * configurations in {@code configs} are already in a rule stop state, this\n     * method simply returns {@code configs}.\n     *\n     * <p>When {@code lookToEndOfRule} is true, this method uses\n     * {@link ATN//nextTokens} for each configuration in {@code configs} which is\n     * not already in a rule stop state to see if a rule stop state is reachable\n     * from the configuration via epsilon-only transitions.</p>\n     *\n     * @param configs the configuration set to update\n     * @param lookToEndOfRule when true, this method checks for rule stop states\n     * reachable by epsilon-only transitions from each configuration in\n     * {@code configs}.\n     *\n     * @return {@code configs} if all configurations in {@code configs} are in a\n     * rule stop state, otherwise return a new configuration set containing only\n     * the configurations from {@code configs} which are in a rule stop state\n     */\n    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {\n        if (_PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].allConfigsInRuleStopStates(configs)) {\n            return configs;\n        }\n        const result = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](configs.fullCtx);\n        for(let i=0; i<configs.items.length;i++) {\n            const config = configs.items[i];\n            if (config.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n                result.add(config, this.mergeCache);\n                continue;\n            }\n            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n                const nextTokens = this.atn.nextTokens(config.state);\n                if (nextTokens.contains(_Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EPSILON)) {\n                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                    result.add(new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:endOfRuleState}, config), this.mergeCache);\n                }\n            }\n        }\n        return result;\n    }\n\n    computeStartState(p, ctx, fullCtx) {\n        // always at least the implicit call to start rule\n        const initialContext = (0,_context_PredictionContextUtils_js__WEBPACK_IMPORTED_MODULE_21__.predictionContextFromRuleContext)(this.atn, ctx);\n        const configs = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](fullCtx);\n        for(let i=0;i<p.transitions.length;i++) {\n            const target = p.transitions[i].target;\n            const c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({ state:target, alt:i+1, context:initialContext }, null);\n            const closureBusy = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_26__[\"default\"]();\n            this.closure(c, configs, closureBusy, true, fullCtx, false);\n        }\n        return configs;\n    }\n\n    /**\n     * This method transforms the start state computed by\n     * {@link //computeStartState} to the special start state used by a\n     * precedence DFA for a particular precedence value. The transformation\n     * process applies the following changes to the start state's configuration\n     * set.\n     *\n     * <ol>\n     * <li>Evaluate the precedence predicates for each configuration using\n     * {@link SemanticContext//evalPrecedence}.</li>\n     * <li>Remove all configurations which predict an alternative greater than\n     * 1, for which another configuration that predicts alternative 1 is in the\n     * same ATN state with the same prediction context. This transformation is\n     * valid for the following reasons:\n     * <ul>\n     * <li>The closure block cannot contain any epsilon transitions which bypass\n     * the body of the closure, so all states reachable via alternative 1 are\n     * part of the precedence alternatives of the transformed left-recursive\n     * rule.</li>\n     * <li>The \"primary\" portion of a left recursive rule cannot contain an\n     * epsilon transition, so the only way an alternative other than 1 can exist\n     * in a state that is also reachable via alternative 1 is by nesting calls\n     * to the left-recursive rule, with the outer calls not being at the\n     * preferred precedence level.</li>\n     * </ul>\n     * </li>\n     * </ol>\n     *\n     * <p>\n     * The prediction context must be considered by this filter to address\n     * situations like the following.\n     * </p>\n     * <code>\n     * <pre>\n     * grammar TA;\n     * prog: statement* EOF;\n     * statement: letterA | statement letterA 'b' ;\n     * letterA: 'a';\n     * </pre>\n     * </code>\n     * <p>\n     * If the above grammar, the ATN state immediately before the token\n     * reference {@code 'a'} in {@code letterA} is reachable from the left edge\n     * of both the primary and closure blocks of the left-recursive rule\n     * {@code statement}. The prediction context associated with each of these\n     * configurations distinguishes between them, and prevents the alternative\n     * which stepped out to {@code prog} (and then back in to {@code statement}\n     * from being eliminated by the filter.\n     * </p>\n     *\n     * @param configs The configuration set computed by\n     * {@link //computeStartState} as the start state for the DFA.\n     * @return The transformed configuration set representing the start state\n     * for a precedence DFA at a particular precedence level (determined by\n     * calling {@link Parser//getPrecedence})\n     */\n    applyPrecedenceFilter(configs) {\n        let config;\n        const statesFromAlt1 = [];\n        const configSet = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](configs.fullCtx);\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            // handle alt 1 first\n            if (config.alt !== 1) {\n                continue;\n            }\n            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n            if (updatedContext===null) {\n                // the configuration was eliminated\n                continue;\n            }\n            statesFromAlt1[config.state.stateNumber] = config.context;\n            if (updatedContext !== config.semanticContext) {\n                configSet.add(new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({semanticContext:updatedContext}, config), this.mergeCache);\n            } else {\n                configSet.add(config, this.mergeCache);\n            }\n        }\n        for(let i=0; i<configs.items.length; i++) {\n            config = configs.items[i];\n            if (config.alt === 1) {\n                // already handled\n                continue;\n            }\n            // In the future, this elimination step could be updated to also\n            // filter the prediction context for alternatives predicting alt>1\n            // (basically a graph subtraction algorithm).\n            if (!config.precedenceFilterSuppressed) {\n                const context = statesFromAlt1[config.state.stateNumber] || null;\n                if (context!==null && context.equals(config.context)) {\n                    // eliminated\n                    continue;\n                }\n            }\n            configSet.add(config, this.mergeCache);\n        }\n        return configSet;\n    }\n\n    getReachableTarget(trans, ttype) {\n        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n            return trans.target;\n        } else {\n            return null;\n        }\n    }\n\n    getPredsForAmbigAlts(ambigAlts, configs, nalts) {\n        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n        // altToPred starts as an array of all null contexts. The entry at index i\n        // corresponds to alternative i. altToPred[i] may have one of three values:\n        //   1. null: no ATNConfig c is found such that c.alt==i\n        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n        //      alt i has at least one unpredicated config.\n        //   3. Non-NONE Semantic Context: There exists at least one, and for all\n        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n        //\n        // From this, it is clear that NONE||anything==NONE.\n        //\n        let altToPred = [];\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if(ambigAlts.has( c.alt )) {\n                altToPred[c.alt] = _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].orContext(altToPred[c.alt] || null, c.semanticContext);\n            }\n        }\n        let nPredAlts = 0;\n        for (let i =1;i< nalts+1;i++) {\n            const pred = altToPred[i] || null;\n            if (pred===null) {\n                altToPred[i] = _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].NONE;\n            } else if (pred !== _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].NONE) {\n                nPredAlts += 1;\n            }\n        }\n        // nonambig alts are null in altToPred\n        if (nPredAlts===0) {\n            altToPred = null;\n        }\n        if (this.debug) {\n            console.log(\"getPredsForAmbigAlts result \" + (0,_utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(altToPred));\n        }\n        return altToPred;\n    }\n\n    getPredicatePredictions(ambigAlts, altToPred) {\n        const pairs = [];\n        let containsPredicate = false;\n        for (let i=1; i<altToPred.length;i++) {\n            const pred = altToPred[i];\n            // unpredicated is indicated by SemanticContext.NONE\n            if( ambigAlts!==null && ambigAlts.has( i )) {\n                pairs.push(new _dfa_PredPrediction_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"](pred, i));\n            }\n            if (pred !== _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].NONE) {\n                containsPredicate = true;\n            }\n        }\n        if (! containsPredicate) {\n            return null;\n        }\n        return pairs;\n    }\n\n    /**\n     * This method is used to improve the localization of error messages by\n     * choosing an alternative rather than throwing a\n     * {@link NoViableAltException} in particular prediction scenarios where the\n     * {@link //ERROR} state was reached during ATN simulation.\n     *\n     * <p>\n     * The default implementation of this method uses the following\n     * algorithm to identify an ATN configuration which successfully parsed the\n     * decision entry rule. Choosing such an alternative ensures that the\n     * {@link ParserRuleContext} returned by the calling rule will be complete\n     * and valid, and the syntax error will be reported later at a more\n     * localized location.</p>\n     *\n     * <ul>\n     * <li>If a syntactically valid path or paths reach the end of the decision rule and\n     * they are semantically valid if predicated, return the min associated alt.</li>\n     * <li>Else, if a semantically invalid but syntactically valid path exist\n     * or paths exist, return the minimum associated alt.\n     * </li>\n     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n     * </ul>\n     *\n     * <p>\n     * In some scenarios, the algorithm described above could predict an\n     * alternative which will result in a {@link FailedPredicateException} in\n     * the parser. Specifically, this could occur if the <em>only</em> configuration\n     * capable of successfully parsing to the end of the decision rule is\n     * blocked by a semantic predicate. By choosing this alternative within\n     * {@link //adaptivePredict} instead of throwing a\n     * {@link NoViableAltException}, the resulting\n     * {@link FailedPredicateException} in the parser will identify the specific\n     * predicate which is preventing the parser from successfully parsing the\n     * decision rule, which helps developers identify and correct logic errors\n     * in semantic predicates.\n     * </p>\n     *\n     * @param configs The ATN configurations which were valid immediately before\n     * the {@link //ERROR} state was reached\n     * @param outerContext The is the \\gamma_0 initial parser context from the paper\n     * or the parser stack at the instant before prediction commences.\n     *\n     * @return The value to return from {@link //adaptivePredict}, or\n     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n     * identified and {@link //adaptivePredict} should report an error instead\n     */\n    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {\n        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n        const semValidConfigs = cfgs[0];\n        const semInvalidConfigs = cfgs[1];\n        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n        if (alt!==_ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists\n            return alt;\n        }\n        // Is there a syntactically valid path with a failed pred?\n        if (semInvalidConfigs.items.length>0) {\n            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n            if (alt!==_ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) { // syntactically viable path exists\n                return alt;\n            }\n        }\n        return _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER;\n    }\n\n    getAltThatFinishedDecisionEntryRule(configs) {\n        const alts = [];\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.reachesIntoOuterContext>0 || ((c.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) && c.context.hasEmptyPath())) {\n                if(alts.indexOf(c.alt)<0) {\n                    alts.push(c.alt);\n                }\n            }\n        }\n        if (alts.length===0) {\n            return _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER;\n        } else {\n            return Math.min.apply(null, alts);\n        }\n    }\n\n    /**\n     * Walk the list of configurations and split them according to\n     * those that have preds evaluating to true/false.  If no pred, assume\n     * true pred and include in succeeded set.  Returns Pair of sets.\n     *\n     * Create a new set so as not to alter the incoming parameter.\n     *\n     * Assumption: the input stream has been restored to the starting point\n     * prediction, which is where predicates need to evaluate.*/\n    splitAccordingToSemanticValidity( configs, outerContext) {\n        const succeeded = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](configs.fullCtx);\n        const failed = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](configs.fullCtx);\n        for(let i=0;i<configs.items.length; i++) {\n            const c = configs.items[i];\n            if (c.semanticContext !== _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].NONE) {\n                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n                if (predicateEvaluationResult) {\n                    succeeded.add(c);\n                } else {\n                    failed.add(c);\n                }\n            } else {\n                succeeded.add(c);\n            }\n        }\n        return [succeeded, failed];\n    }\n\n    /**\n     * Look through a list of predicate/alt pairs, returning alts for the\n     * pairs that win. A {@code NONE} predicate indicates an alt containing an\n     * unpredicated config which behaves as \"always true.\" If !complete\n     * then we stop at the first predicate that evaluates to true. This\n     * includes pairs with null predicates.\n     */\n    evalSemanticContext(predPredictions, outerContext, complete) {\n        const predictions = new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"]();\n        for(let i=0;i<predPredictions.length;i++) {\n            const pair = predPredictions[i];\n            if (pair.pred === _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].NONE) {\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n                continue;\n            }\n            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n            if (this.debug || this.dfa_debug) {\n                console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n            }\n            if (predicateEvaluationResult) {\n                if (this.debug || this.dfa_debug) {\n                    console.log(\"PREDICT \" + pair.alt);\n                }\n                predictions.add(pair.alt);\n                if (! complete) {\n                    break;\n                }\n            }\n        }\n        return predictions;\n    }\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n        const initialDepth = 0;\n        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,\n                                 fullCtx, initialDepth, treatEofAsEpsilon);\n    }\n\n    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        if (this.debug || this.debug_closure) {\n            console.log(\"closure(\" + config.toString(this.parser,true) + \")\");\n            // console.log(\"configs(\" + configs.toString() + \")\");\n            if(config.reachesIntoOuterContext>50) {\n                throw \"problem\";\n            }\n        }\n        if (config.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n            // We hit rule end. If we have context info, use it\n            // run thru all possible stack tops in ctx\n            if (! config.context.isEmpty()) {\n                for (let i =0; i<config.context.length; i++) {\n                    if (config.context.getReturnState(i) === _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"].EMPTY_RETURN_STATE) {\n                        if (fullCtx) {\n                            configs.add(new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:config.state, context:_context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"].EMPTY}, config), this.mergeCache);\n                            continue;\n                        } else {\n                            // we have no context info, just chase follow links (if greedy)\n                            if (this.debug) {\n                                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                            }\n                            this.closure_(config, configs, closureBusy, collectPredicates,\n                                     fullCtx, depth, treatEofAsEpsilon);\n                        }\n                        continue;\n                    }\n                    const returnState = this.atn.states[config.context.getReturnState(i)];\n                    const newContext = config.context.getParent(i); // \"pop\" return state\n                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};\n                    const c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](parms, null);\n                    // While we have context to pop back from, we may have\n                    // gotten that context AFTER having falling off a rule.\n                    // Make sure we track that we are now out of context.\n                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n                }\n                return;\n            } else if( fullCtx) {\n                // reached end of start rule\n                configs.add(config, this.mergeCache);\n                return;\n            } else {\n                // else if we have no context info, just chase follow links (if greedy)\n                if (this.debug) {\n                    console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                }\n            }\n        }\n        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n    }\n\n    // Do the actual work of walking epsilon edges//\n    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n        const p = config.state;\n        // optimization\n        if (! p.epsilonOnlyTransitions) {\n            configs.add(config, this.mergeCache);\n            // make sure to not return here, because EOF transitions can act as\n            // both epsilon transitions and non-epsilon transitions.\n        }\n        for(let i = 0;i<p.transitions.length; i++) {\n            if(i === 0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n                continue;\n\n            const t = p.transitions[i];\n            const continueCollecting = collectPredicates && !(t instanceof _transition_ActionTransition_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"]);\n            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n            if (c!==null) {\n                let newDepth = depth;\n                if ( config.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n                    // target fell off end of rule; mark resulting c as having dipped into outer context\n                    // We can't get here if incoming config was rule stop and we had context\n                    // track how far we dip into outer context.  Might\n                    // come in handy and we avoid evaluating context dependent\n                    // preds if this is > 0.\n                    if (this._dfa !== null && this._dfa.precedenceDfa) {\n                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n                            c.precedenceFilterSuppressed = true;\n                        }\n                    }\n\n                    c.reachesIntoOuterContext += 1;\n                    if (closureBusy.add(c)!==c) {\n                        // avoid infinite recursion for right-recursive rules\n                        continue;\n                    }\n                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                    newDepth -= 1;\n                    if (this.debug) {\n                        console.log(\"dips into outer ctx: \" + c);\n                    }\n                } else {\n                    if (!t.isEpsilon && closureBusy.add(c)!==c){\n                        // avoid infinite recursion for EOF* and EOF+\n                        continue;\n                    }\n                    if (t instanceof _transition_RuleTransition_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"]) {\n                        // latch when newDepth goes negative - once we step out of the entry context we can't return\n                        if (newDepth >= 0) {\n                            newDepth += 1;\n                        }\n                    }\n                }\n                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n            }\n        }\n    }\n\n    canDropLoopEntryEdgeInLeftRecursiveRule(config) {\n        // return False\n        const p = config.state;\n        // First check to see if we are in StarLoopEntryState generated during\n        // left-recursion elimination. For efficiency, also check if\n        // the context has an empty stack case. If so, it would mean\n        // global FOLLOW so we can't perform optimization\n        // Are we the special loop entry/exit state? or SLL wildcard\n        if(p.stateType !== _state_ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].STAR_LOOP_ENTRY)\n            return false;\n        if(p.stateType !== _state_ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||\n               config.context.isEmpty() || config.context.hasEmptyPath())\n            return false;\n\n        // Require all return states to return back to the same rule that p is in.\n        const numCtxs = config.context.length;\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnState = this.atn.states[config.context.getReturnState(i)];\n            if (returnState.ruleIndex !== p.ruleIndex)\n                return false;\n        }\n\n        const decisionStartState = p.transitions[0].target;\n        const blockEndStateNum = decisionStartState.endState.stateNumber;\n        const blockEndState = this.atn.states[blockEndStateNum];\n\n        // Verify that the top of each stack context leads to loop entry/exit\n        // state through epsilon edges and w/o leaving rule.\n        for(let i=0; i<numCtxs; i++) { // for each stack context\n            const returnStateNumber = config.context.getReturnState(i);\n            const returnState = this.atn.states[returnStateNumber];\n            // all states must have single outgoing epsilon edge\n            if (returnState.transitions.length !== 1 || !returnState.transitions[0].isEpsilon)\n                return false;\n\n            // Look for prefix op case like 'not expr', (' type ')' expr\n            const returnStateTarget = returnState.transitions[0].target;\n            if ( returnState.stateType === _state_ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BLOCK_END && returnStateTarget === p )\n                continue;\n\n            // Look for 'expr op expr' or case where expr's return state is block end\n            // of (...)* internal block; the block end points to loop back\n            // which points to p but we don't need to check that\n            if ( returnState === blockEndState )\n                continue;\n\n            // Look for ternary expr ? expr : expr. The return state points at block end,\n            // which points at loop entry state\n            if ( returnStateTarget === blockEndState )\n                continue;\n\n            // Look for complex prefix 'between expr and expr' case where 2nd expr's\n            // return state points at block end state of (...)* internal block\n            if (returnStateTarget.stateType === _state_ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].BLOCK_END && returnStateTarget.transitions.length === 1\n                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target === p)\n                continue;\n\n            // anything else ain't conforming\n            return false;\n        }\n        return true;\n    }\n\n    getRuleName(index) {\n        if (this.parser!==null && index>=0) {\n            return this.parser.ruleNames[index];\n        } else {\n            return \"<rule \" + index + \">\";\n        }\n    }\n\n    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n        switch(t.serializationType) {\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].RULE:\n            return this.ruleTransition(config, t);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].PRECEDENCE:\n            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].PREDICATE:\n            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].ACTION:\n            return this.actionTransition(config, t);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].EPSILON:\n            return new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:t.target}, config);\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].ATOM:\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].RANGE:\n        case _transition_Transition_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"].SET:\n            // EOF transitions act like epsilon transitions after the first EOF\n            // transition is traversed\n            if (treatEofAsEpsilon) {\n                if (t.matches(_Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF, 0, 1)) {\n                    return new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state: t.target}, config);\n                }\n            }\n            return null;\n        default:\n            return null;\n        }\n    }\n\n    actionTransition(config, t) {\n        if (this.debug) {\n            const index = t.actionIndex === -1 ? 65535 : t.actionIndex;\n            console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n        }\n        return new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:t.target}, config);\n    }\n\n    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" +\n                    pt.precedence + \">=_p, ctx dependent=true\");\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + (0,_utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && inContext) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].andContext(config.semanticContext, pt.getPredicate());\n                c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    predTransition(config, pt, collectPredicates, inContext, fullCtx) {\n        if (this.debug) {\n            console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex +\n                    \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n            if (this.parser!==null) {\n                console.log(\"context surrounding pred is \" + (0,_utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_23__[\"default\"])(this.parser.getRuleInvocationStack()));\n            }\n        }\n        let c = null;\n        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {\n            if (fullCtx) {\n                // In full context mode, we can evaluate predicates on-the-fly\n                // during closure, which dramatically reduces the size of\n                // the config sets. It also obviates the need to test predicates\n                // later during conflict resolution.\n                const currentPosition = this._input.index;\n                this._input.seek(this._startIndex);\n                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n                this._input.seek(currentPosition);\n                if (predSucceeds) {\n                    c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:pt.target}, config); // no pred context\n                }\n            } else {\n                const newSemCtx = _SemanticContext_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"].andContext(config.semanticContext, pt.getPredicate());\n                c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:pt.target, semanticContext:newSemCtx}, config);\n            }\n        } else {\n            c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:pt.target}, config);\n        }\n        if (this.debug) {\n            console.log(\"config from pred transition=\" + c);\n        }\n        return c;\n    }\n\n    ruleTransition(config, t) {\n        if (this.debug) {\n            console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n        }\n        const returnState = t.followState;\n        const newContext = _context_SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"].create(config.context, returnState.stateNumber);\n        return new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({state:t.target, context:newContext}, config );\n    }\n\n    getConflictingAlts(configs) {\n        const altsets = _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getConflictingAltSubsets(configs);\n        return _PredictionMode_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"].getAlts(altsets);\n    }\n\n    /**\n     * Sam pointed out a problem with the previous definition, v3, of\n     * ambiguous states. If we have another state associated with conflicting\n     * alternatives, we should keep going. For example, the following grammar\n     *\n     * s : (ID | ID ID?) ';' ;\n     *\n     * When the ATN simulation reaches the state before ';', it has a DFA\n     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n     * because alternative to has another way to continue, via [6|2|[]].\n     * The key is that we have a single state that has config's only associated\n     * with a single alternative, 2, and crucially the state transitions\n     * among the configurations are all non-epsilon transitions. That means\n     * we don't consider any conflicts that include alternative 2. So, we\n     * ignore the conflict between alts 1 and 2. We ignore a set of\n     * conflicting alts when there is an intersection with an alternative\n     * associated with a single alt state in the state&rarr;config-list map.\n     *\n     * It's also the case that we might have two conflicting configurations but\n     * also a 3rd nonconflicting configuration for a different alternative:\n     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n     *\n     * a : A | A | A B ;\n     *\n     * After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not\n     * stop working on this state. In the previous example, we're concerned\n     * with states associated with the conflicting alternatives. Here alt\n     * 3 is not associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, I don't declare the state done. We\n     * ignore a set of conflicting alts when we have an alternative\n     * that we still need to pursue\n     */\n    getConflictingAltsOrUniqueAlt(configs) {\n        let conflictingAlts = null;\n        if (configs.uniqueAlt!== _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n            conflictingAlts = new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_24__[\"default\"]();\n            conflictingAlts.add(configs.uniqueAlt);\n        } else {\n            conflictingAlts = configs.conflictingAlts;\n        }\n        return conflictingAlts;\n    }\n\n    getTokenName(t) {\n        if (t===_Token_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"].EOF) {\n            return \"EOF\";\n        }\n        if( this.parser!==null && this.parser.literalNames!==null) {\n            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n                console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n                console.log(\"\" + this.parser.getInputStream().getTokens());\n            } else {\n                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n                return name + \"<\" + t + \">\";\n            }\n        }\n        return \"\" + t;\n    }\n\n    getLookaheadName(input) {\n        return this.getTokenName(input.LA(1));\n    }\n\n    /**\n     * Used for debugging in adaptivePredict around execATN but I cut\n     * it out for clarity now that alg. works well. We can leave this\n     * \"dead\" code for a bit\n     */\n    dumpDeadEndConfigs(nvae) {\n        console.log(\"dead end configs: \");\n        const decs = nvae.getDeadEndConfigs();\n        for(let i=0; i<decs.length; i++) {\n            const c = decs[i];\n            let trans = \"no edges\";\n            if (c.state.transitions.length>0) {\n                const t = c.state.transitions[0];\n                if (t instanceof _transition_AtomTransition_js__WEBPACK_IMPORTED_MODULE_22__[\"default\"]) {\n                    trans = \"Atom \"+ this.getTokenName(t.label);\n                } else if (t instanceof _transition_SetTransition_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"]) {\n                    const neg = (t instanceof _transition_NotSetTransition_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"]);\n                    trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n                }\n            }\n            console.error(c.toString(this.parser, true) + \":\" + trans);\n        }\n    }\n\n    noViableAlt(input, outerContext, configs, startIndex) {\n        return new _error_NoViableAltException_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"](this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n    }\n\n    getUniqueAlt(configs) {\n        let alt = _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER;\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (alt === _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER) {\n                alt = c.alt // found first alt\n            } else if( c.alt!==alt) {\n                return _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER;\n            }\n        }\n        return alt;\n    }\n\n    /**\n     * Add an edge to the DFA, if possible. This method calls\n     * {@link //addDFAState} to ensure the {@code to} state is present in the\n     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n     * range of edges that can be represented in the DFA tables, this method\n     * returns without adding the edge to the DFA.\n     *\n     * <p>If {@code to} is {@code null}, this method returns {@code null}.\n     * Otherwise, this method returns the {@link DFAState} returned by calling\n     * {@link //addDFAState} for the {@code to} state.</p>\n     *\n     * @param dfa The DFA\n     * @param from_ The source state for the edge\n     * @param t The input symbol\n     * @param to The target state for the edge\n     *\n     * @return If {@code to} is {@code null}, this method returns {@code null};\n     * otherwise this method returns the result of calling {@link //addDFAState}\n     * on {@code to}\n     */\n    addDFAEdge(dfa, from_, t, to) {\n        if( this.debug) {\n            console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n        }\n        if (to===null) {\n            return null;\n        }\n        to = this.addDFAState(dfa, to); // used existing if possible not incoming\n        if (from_===null || t < -1 || t > this.atn.maxTokenType) {\n            return to;\n        }\n        if (from_.edges===null) {\n            from_.edges = [];\n        }\n        from_.edges[t+1] = to; // connect\n\n        if (this.debug) {\n            const literalNames = this.parser===null ? null : this.parser.literalNames;\n            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;\n            console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n        }\n        return to;\n    }\n\n    /**\n     * Add state {@code D} to the DFA if it is not already present, and return\n     * the actual instance stored in the DFA. If a state equivalent to {@code D}\n     * is already in the DFA, the existing state is returned. Otherwise this\n     * method returns {@code D} after adding it to the DFA.\n     *\n     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n     * does not change the DFA.</p>\n     *\n     * @param dfa The dfa\n     * @param D The DFA state to add\n     * @return The state stored in the DFA. This will be either the existing\n     * state if {@code D} is already in the DFA, or {@code D} itself if the\n     * state was not already present\n     */\n    addDFAState(dfa, D) {\n        if (D === _ATNSimulator_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"].ERROR) {\n            return D;\n        }\n        const existing = dfa.states.get(D);\n        if(existing!==null) {\n            return existing;\n        }\n        D.stateNumber = dfa.states.length;\n        if (! D.configs.readOnly) {\n            D.configs.optimizeConfigs(this);\n            D.configs.setReadonly(true);\n        }\n        dfa.states.add(D);\n        if (this.debug) {\n            console.log(\"adding new DFA state: \" + D);\n        }\n        return D;\n    }\n\n    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](startIndex, stopIndex + 1);\n            console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n        }\n    }\n\n    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {\n        if (this.debug || this.retry_debug) {\n            const interval = new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](startIndex, stopIndex + 1);\n            console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n        }\n    }\n\n    // If context sensitive parsing, we know it's ambiguity not conflict//\n    reportAmbiguity(dfa, D, startIndex, stopIndex,\n                                   exact, ambigAlts, configs ) {\n        if (this.debug || this.retry_debug) {\n            const interval = new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"](startIndex, stopIndex + 1);\n            console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs +\n                               \", input=\" + this.parser.getTokenStream().getText(interval));\n        }\n        if (this.parser!==null) {\n            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n        }\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/PrecedencePredicate.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/PrecedencePredicate.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PrecedencePredicate)\n/* harmony export */ });\n/* harmony import */ var _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemanticContext.js */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass PrecedencePredicate extends _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(precedence) {\n        super();\n        this.precedence = precedence === undefined ? 0 : precedence;\n    }\n\n    evaluate(parser, outerContext) {\n        return parser.precpred(outerContext, this.precedence);\n    }\n\n    evalPrecedence(parser, outerContext) {\n        if (parser.precpred(outerContext, this.precedence)) {\n            return _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE;\n        } else {\n            return null;\n        }\n    }\n\n    compareTo(other) {\n        return this.precedence - other.precedence;\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.precedence);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof PrecedencePredicate)) {\n            return false;\n        } else {\n            return this.precedence === other.precedence;\n        }\n    }\n\n    toString() {\n        return \"{\" + this.precedence + \">=prec}?\";\n    }\n\n}\n\n// HORRIBLE workaround circular import, avoiding dynamic import\n_SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].PrecedencePredicate = PrecedencePredicate;\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/PrecedencePredicate.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/Predicate.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/Predicate.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Predicate)\n/* harmony export */ });\n/* harmony import */ var _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SemanticContext.js */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass Predicate extends _SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(ruleIndex, predIndex, isCtxDependent) {\n        super();\n        this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n        this.predIndex = predIndex === undefined ? -1 : predIndex;\n        this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n    }\n\n    evaluate(parser, outerContext) {\n        const localctx = this.isCtxDependent ? outerContext : null;\n        return parser.sempred(localctx, this.ruleIndex, this.predIndex);\n    }\n\n    updateHashCode(hash) {\n        hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof Predicate)) {\n            return false;\n        } else {\n            return this.ruleIndex === other.ruleIndex &&\n                this.predIndex === other.predIndex &&\n                this.isCtxDependent === other.isCtxDependent;\n        }\n    }\n\n    toString() {\n        return \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n    }\n}\n\n/**\n * The default {@link SemanticContext}, which is semantically equivalent to\n * a predicate of the form {@code {true}?}\n */\n_SemanticContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NONE = new Predicate();\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/Predicate.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/PredictionContextCache.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/PredictionContextCache.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PredictionContextCache)\n/* harmony export */ });\n/* harmony import */ var _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../context/PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/HashMap.js */ \"./node_modules/antlr4/src/antlr4/misc/HashMap.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Used to cache {@link PredictionContext} objects. Its used for the shared\n * context cash associated with contexts in DFA states. This cache\n * can be used for both lexers and parsers.\n */\nclass PredictionContextCache {\n\n    constructor() {\n        this.cache = new _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n    }\n\n    /**\n     * Add a context to the cache and return it. If the context already exists,\n     * return that one instead and do not add a new context to the cache.\n     * Protect shared cache from unsafe thread access.\n     */\n    add(ctx) {\n        if (ctx === _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY) {\n            return _context_PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY;\n        }\n        const existing = this.cache.get(ctx) || null;\n        if (existing !== null) {\n            return existing;\n        }\n        this.cache.set(ctx, ctx);\n        return ctx;\n    }\n\n    get(ctx) {\n        return this.cache.get(ctx) || null;\n    }\n\n    get length(){\n        return this.cache.length;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/PredictionContextCache.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/PredictionMode.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ATN_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATN.js */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\n/* harmony import */ var _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/RuleStopState.js */ \"./node_modules/antlr4/src/antlr4/state/RuleStopState.js\");\n/* harmony import */ var _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ATNConfigSet.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\n/* harmony import */ var _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ATNConfig.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfig.js\");\n/* harmony import */ var _SemanticContext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SemanticContext.js */ \"./node_modules/antlr4/src/antlr4/atn/SemanticContext.js\");\n/* harmony import */ var _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../misc/BitSet.js */ \"./node_modules/antlr4/src/antlr4/misc/BitSet.js\");\n/* harmony import */ var _misc_AltDict_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../misc/AltDict.js */ \"./node_modules/antlr4/src/antlr4/misc/AltDict.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* harmony import */ var _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../misc/HashMap.js */ \"./node_modules/antlr4/src/antlr4/misc/HashMap.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This enumeration defines the prediction modes available in ANTLR 4 along with\n * utility methods for analyzing configuration sets for conflicts and/or\n * ambiguities.\n */\nconst PredictionMode = {\n    /**\n     * The SLL(*) prediction mode. This prediction mode ignores the current\n     * parser context when making predictions. This is the fastest prediction\n     * mode, and provides correct results for many grammars. This prediction\n     * mode is more powerful than the prediction mode provided by ANTLR 3, but\n     * may result in syntax errors for grammar and input combinations which are\n     * not SLL.\n     *\n     * <p>\n     * When using this prediction mode, the parser will either return a correct\n     * parse tree (i.e. the same parse tree that would be returned with the\n     * {@link //LL} prediction mode), or it will report a syntax error. If a\n     * syntax error is encountered when using the {@link //SLL} prediction mode,\n     * it may be due to either an actual syntax error in the input or indicate\n     * that the particular combination of grammar and input requires the more\n     * powerful {@link //LL} prediction abilities to complete successfully.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    SLL: 0,\n\n    /**\n     * The LL(*) prediction mode. This prediction mode allows the current parser\n     * context to be used for resolving SLL conflicts that occur during\n     * prediction. This is the fastest prediction mode that guarantees correct\n     * parse results for all combinations of grammars with syntactically correct\n     * inputs.\n     *\n     * <p>\n     * When using this prediction mode, the parser will make correct decisions\n     * for all syntactically-correct grammar and input combinations. However, in\n     * cases where the grammar is truly ambiguous this prediction mode might not\n     * report a precise answer for <em>exactly which</em> alternatives are\n     * ambiguous.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL: 1,\n\n    /**\n     *\n     * The LL(*) prediction mode with exact ambiguity detection. In addition to\n     * the correctness guarantees provided by the {@link //LL} prediction mode,\n     * this prediction mode instructs the prediction algorithm to determine the\n     * complete and exact set of ambiguous alternatives for every ambiguous\n     * decision encountered while parsing.\n     *\n     * <p>\n     * This prediction mode may be used for diagnosing ambiguities during\n     * grammar development. Due to the performance overhead of calculating sets\n     * of ambiguous alternatives, this prediction mode should be avoided when\n     * the exact results are not necessary.</p>\n     *\n     * <p>\n     * This prediction mode does not provide any guarantees for prediction\n     * behavior for syntactically-incorrect inputs.</p>\n     */\n    LL_EXACT_AMBIG_DETECTION: 2,\n\n    /**\n     *\n     * Computes the SLL prediction termination condition.\n     *\n     * <p>\n     * This method computes the SLL prediction termination condition for both of\n     * the following cases.</p>\n     *\n     * <ul>\n     * <li>The usual SLL+LL fallback upon SLL conflict</li>\n     * <li>Pure SLL without LL fallback</li>\n     * </ul>\n     *\n     * <p><strong>COMBINED SLL+LL PARSING</strong></p>\n     *\n     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n     * ensured regardless of how the termination condition is computed by this\n     * method. Due to the substantially higher cost of LL prediction, the\n     * prediction should only fall back to LL when the additional lookahead\n     * cannot lead to a unique SLL prediction.</p>\n     *\n     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n     * conflicting subsets should fall back to full LL, even if the\n     * configuration sets don't resolve to the same alternative (e.g.\n     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n     * configuration, SLL could continue with the hopes that more lookahead will\n     * resolve via one of those non-conflicting configurations.</p>\n     *\n     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n     * stops when it sees only conflicting configuration subsets. In contrast,\n     * full LL keeps going when there is uncertainty.</p>\n     *\n     * <p><strong>HEURISTIC</strong></p>\n     *\n     * <p>As a heuristic, we stop prediction when we see any conflicting subset\n     * unless we see a state that only has one alternative associated with it.\n     * The single-alt-state thing lets prediction continue upon rules like\n     * (otherwise, it would admit defeat too soon):</p>\n     *\n     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n     *\n     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n     * processing this node because alternative to has another way to continue,\n     * via {@code [6|2|[]]}.</p>\n     *\n     * <p>It also let's us continue for this rule:</p>\n     *\n     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n     *\n     * <p>After matching input A, we reach the stop state for rule A, state 1.\n     * State 8 is the state right before B. Clearly alternatives 1 and 2\n     * conflict and no amount of further lookahead will separate the two.\n     * However, alternative 3 will be able to continue and so we do not stop\n     * working on this state. In the previous example, we're concerned with\n     * states associated with the conflicting alternatives. Here alt 3 is not\n     * associated with the conflicting configs, but since we can continue\n     * looking for input reasonably, don't declare the state done.</p>\n     *\n     * <p><strong>PURE SLL PARSING</strong></p>\n     *\n     * <p>To handle pure SLL parsing, all we have to do is make sure that we\n     * combine stack contexts for configurations that differ only by semantic\n     * predicate. From there, we can do the usual SLL termination heuristic.</p>\n     *\n     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n     *\n     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n     * states because they need to create the DFA cache that works in all\n     * semantic situations. In contrast, full LL evaluates predicates collected\n     * during start state computation so it can ignore predicates thereafter.\n     * This means that SLL termination detection can totally ignore semantic\n     * predicates.</p>\n     *\n     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n     * semantic predicate contexts so we might see two configurations like the\n     * following.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n     *\n     * <p>Before testing these configurations against others, we have to merge\n     * {@code x} and {@code x'} (without modifying the existing configurations).\n     * For example, we test {@code (x+x')==x''} when looking for conflicts in\n     * the following configurations.</p>\n     *\n     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n     *\n     * <p>If the configuration set has predicates (as indicated by\n     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n     * the configurations to strip out all of the predicates so that a standard\n     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n     */\n    hasSLLConflictTerminatingPrediction: function( mode, configs) {\n        // Configs in rule stop states indicate reaching the end of the decision\n        // rule (local context) or end of start rule (full context). If all\n        // configs meet this condition, then none of the configurations is able\n        // to match additional input so we terminate prediction.\n        //\n        if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n            return true;\n        }\n        // pure SLL mode parsing\n        if (mode === PredictionMode.SLL) {\n            // Don't bother with combining configs from different semantic\n            // contexts if we can fail over to full LL; costs more time\n            // since we'll often fail over anyway.\n            if (configs.hasSemanticContext) {\n                // dup configs, tossing out semantic predicates\n                const dup = new _ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n                for(let i=0;i<configs.items.length;i++) {\n                    let c = configs.items[i];\n                    c = new _ATNConfig_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({semanticContext:_SemanticContext_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].NONE}, c);\n                    dup.add(c);\n                }\n                configs = dup;\n            }\n            // now we have combined contexts for configs with dissimilar preds\n        }\n        // pure SLL or combined SLL+LL mode parsing\n        const altsets = PredictionMode.getConflictingAltSubsets(configs);\n        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n    },\n\n    /**\n     * Checks if any configuration in {@code configs} is in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if any configuration in {@code configs} is in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    hasConfigInRuleStopState: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (c.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    /**\n     * Checks if all configurations in {@code configs} are in a\n     * {@link RuleStopState}. Configurations meeting this condition have reached\n     * the end of the decision rule (local context) or end of start rule (full\n     * context).\n     *\n     * @param configs the configuration set to test\n     * @return {@code true} if all configurations in {@code configs} are in a\n     * {@link RuleStopState}, otherwise {@code false}\n     */\n    allConfigsInRuleStopStates: function(configs) {\n        for(let i=0;i<configs.items.length;i++) {\n            const c = configs.items[i];\n            if (!(c.state instanceof _state_RuleStopState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    /**\n     *\n     * Full LL prediction termination.\n     *\n     * <p>Can we stop looking ahead during ATN simulation or is there some\n     * uncertainty as to which alternative we will ultimately pick, after\n     * consuming more input? Even if there are partial conflicts, we might know\n     * that everything is going to resolve to the same minimum alternative. That\n     * means we can stop since no more lookahead will change that fact. On the\n     * other hand, there might be multiple conflicts that resolve to different\n     * minimums. That means we need more look ahead to decide which of those\n     * alternatives we should predict.</p>\n     *\n     * <p>The basic idea is to split the set of configurations {@code C}, into\n     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n     * non-conflicting configurations. Two configurations conflict if they have\n     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n     *\n     * <p>Reduce these configuration subsets to the set of possible alternatives.\n     * You can compute the alternative subsets in one pass as follows:</p>\n     *\n     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n     * {@code C} holding {@code s} and {@code ctx} fixed.</p>\n     *\n     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     *\n     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n     *\n     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n     * {@code s} and {@code ctx}.</p>\n     *\n     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n     * the union of these alternative subsets is a singleton, then no amount of\n     * more lookahead will help us. We will always pick that alternative. If,\n     * however, there is more than one alternative, then we are uncertain which\n     * alternative to predict and must continue looking for resolution. We may\n     * or may not discover an ambiguity in the future, even if there are no\n     * conflicting subsets this round.</p>\n     *\n     * <p>The biggest sin is to terminate early because it means we've made a\n     * decision but were uncertain as to the eventual outcome. We haven't used\n     * enough lookahead. On the other hand, announcing a conflict too late is no\n     * big deal; you will still have the conflict. It's just inefficient. It\n     * might even look until the end of file.</p>\n     *\n     * <p>No special consideration for semantic predicates is required because\n     * predicates are evaluated on-the-fly for full LL prediction, ensuring that\n     * no configuration contains a semantic context during the termination\n     * check.</p>\n     *\n     * <p><strong>CONFLICTING CONFIGS</strong></p>\n     *\n     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n     * when {@code i!=j} but {@code x=x'}. Because we merge all\n     * {@code (s, i, _)} configurations together, that means that there are at\n     * most {@code n} configurations associated with state {@code s} for\n     * {@code n} possible alternatives in the decision. The merged stacks\n     * complicate the comparison of configuration contexts {@code x} and\n     * {@code x'}. Sam checks to see if one is a subset of the other by calling\n     * merge and checking to see if the merged result is either {@code x} or\n     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n     * is the superset, then {@code i} is the only possible prediction since the\n     * others resolve to {@code min(i)} as well. However, if {@code x} is\n     * associated with {@code j>i} then at least one stack configuration for\n     * {@code j} is not in conflict with alternative {@code i}. The algorithm\n     * should keep going, looking for more lookahead due to the uncertainty.</p>\n     *\n     * <p>For simplicity, I'm doing a equality check between {@code x} and\n     * {@code x'} that lets the algorithm continue to consume lookahead longer\n     * than necessary. The reason I like the equality is of course the\n     * simplicity but also because that is the test you need to detect the\n     * alternatives that are actually in conflict.</p>\n     *\n     * <p><strong>CONTINUE/STOP RULE</strong></p>\n     *\n     * <p>Continue if union of resolved alternative sets from non-conflicting and\n     * conflicting alternative subsets has more than one alternative. We are\n     * uncertain about which alternative to predict.</p>\n     *\n     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n     * alternatives are still in the running for the amount of input we've\n     * consumed at this point. The conflicting sets let us to strip away\n     * configurations that won't lead to more states because we resolve\n     * conflicts to the configuration with a minimum alternate for the\n     * conflicting set.</p>\n     *\n     * <p><strong>CASES</strong></p>\n     *\n     * <ul>\n     *\n     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n     *\n     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1,3}} =&gt; continue\n     * </li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n     * {@code {1}} =&gt; stop and predict 1</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n     * ambiguity {@code {1,2}}</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {2}} = {@code {1,2}} =&gt; continue</li>\n     *\n     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n     * {@code {3}} = {@code {1,3}} =&gt; continue</li>\n     *\n     * </ul>\n     *\n     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n     *\n     * <p>If all states report the same conflicting set of alternatives, then we\n     * know we have the exact ambiguity set.</p>\n     *\n     * <p><code>|A_<em>i</em>|&gt;1</code> and\n     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n     *\n     * <p>In other words, we continue examining lookahead until all {@code A_i}\n     * have more than one alternative and all {@code A_i} are the same. If\n     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n     * because the resolved set is {@code {1}}. To determine what the real\n     * ambiguity is, we have to know whether the ambiguity is between one and\n     * two or one and three so we keep going. We can only stop prediction when\n     * we need exact ambiguity detection when the sets look like\n     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n     */\n    resolvesToJustOneViableAlt: function(altsets) {\n        return PredictionMode.getSingleViableAlt(altsets);\n    },\n\n    /**\n     * Determines if every alternative subset in {@code altsets} contains more\n     * than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every {@link BitSet} in {@code altsets} has\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    allSubsetsConflict: function(altsets) {\n        return ! PredictionMode.hasNonConflictingAltSet(altsets);\n    },\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * exactly one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n     */\n    hasNonConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if any single alternative subset in {@code altsets} contains\n     * more than one alternative.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if {@code altsets} contains a {@link BitSet} with\n     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n     */\n    hasConflictingAltSet: function(altsets) {\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (alts.length>1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n\n    /**\n     * Determines if every alternative subset in {@code altsets} is equivalent.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return {@code true} if every member of {@code altsets} is equal to the\n     * others, otherwise {@code false}\n     */\n    allSubsetsEqual: function(altsets) {\n        let first = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            if (first === null) {\n                first = alts;\n            } else if (alts!==first) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n\n    /**\n     * Returns the unique alternative predicted by all alternative subsets in\n     * {@code altsets}. If no such alternative exists, this method returns\n     * {@link ATN//INVALID_ALT_NUMBER}.\n     *\n     * @param altsets a collection of alternative subsets\n     */\n    getUniqueAlt: function(altsets) {\n        const all = PredictionMode.getAlts(altsets);\n        if (all.length===1) {\n            return all.minValue();\n        } else {\n            return _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER;\n        }\n    },\n\n    /**\n     * Gets the complete set of represented alternatives for a collection of\n     * alternative subsets. This method returns the union of each {@link BitSet}\n     * in {@code altsets}.\n     *\n     * @param altsets a collection of alternative subsets\n     * @return the set of represented alternatives in {@code altsets}\n     */\n    getAlts: function(altsets) {\n        const all = new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n        altsets.map( function(alts) { all.or(alts); });\n        return all;\n    },\n\n    /**\n     * This function gets the conflicting alt subsets from a configuration set.\n     * For each configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n     * alt and not pred\n     * </pre>\n     */\n    getConflictingAltSubsets: function(configs) {\n        const configToAlts = new _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]();\n        configToAlts.hashFunction = function(cfg) { _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"].hashStuff(cfg.state.stateNumber, cfg.context); };\n        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber === c2.state.stateNumber && c1.context.equals(c2.context);};\n        configs.items.map(function(cfg) {\n            let alts = configToAlts.get(cfg);\n            if (alts === null) {\n                alts = new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n                configToAlts.set(cfg, alts);\n            }\n            alts.add(cfg.alt);\n        });\n        return configToAlts.getValues();\n    },\n\n    /**\n     * Get a map from state to alt subset from a configuration set. For each\n     * configuration {@code c} in {@code configs}:\n     *\n     * <pre>\n     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n     * </pre>\n     */\n    getStateToAltMap: function(configs) {\n        const m = new _misc_AltDict_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n        configs.items.map(function(c) {\n            let alts = m.get(c.state);\n            if (alts === null) {\n                alts = new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n                m.set(c.state, alts);\n            }\n            alts.add(c.alt);\n        });\n        return m;\n    },\n\n    hasStateAssociatedWithOneAlt: function(configs) {\n        const values = PredictionMode.getStateToAltMap(configs).values();\n        for(let i=0;i<values.length;i++) {\n            if (values[i].length===1) {\n                return true;\n            }\n        }\n        return false;\n    },\n\n    getSingleViableAlt: function(altsets) {\n        let result = null;\n        for(let i=0;i<altsets.length;i++) {\n            const alts = altsets[i];\n            const minAlt = alts.minValue();\n            if(result===null) {\n                result = minAlt;\n            } else if(result!==minAlt) { // more than 1 viable alt\n                return _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_ALT_NUMBER;\n            }\n        }\n        return result;\n    }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (PredictionMode);\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/PredictionMode.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/SemanticContext.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SemanticContext)\n/* harmony export */ });\n/* harmony import */ var _utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/equalArrays.js */ \"./node_modules/antlr4/src/antlr4/utils/equalArrays.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* harmony import */ var _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc/HashSet.js */ \"./node_modules/antlr4/src/antlr4/misc/HashSet.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n/**\n * A tree structure used to record the semantic context in which\n * an ATN configuration is valid.  It's either a single predicate,\n * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n *\n * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n * {@link SemanticContext} within the scope of this outer class.</p>\n */\nclass SemanticContext {\n\n\thashCode() {\n\t\tconst hash = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\t\tthis.updateHashCode(hash);\n\t\treturn hash.finish();\n\t}\n\n\t/**\n\t * For context independent predicates, we evaluate them without a local\n\t * context (i.e., null context). That way, we can evaluate them without\n\t * having to create proper rule-specific context during prediction (as\n\t * opposed to the parser, which creates them naturally). In a practical\n\t * sense, this avoids a cast exception from RuleContext to myruleContext.\n\t *\n\t * <p>For context dependent predicates, we must pass in a local context so that\n\t * references such as $arg evaluate properly as _localctx.arg. We only\n\t * capture context dependent predicates in the context in which we begin\n\t * prediction, so we passed in the outer context here in case of context\n\t * dependent predicate evaluation.</p>\n\t */\n\tevaluate(parser, outerContext) {}\n\n\t/**\n\t * Evaluate the precedence predicates for the context and reduce the result.\n\t *\n\t * @param parser The parser instance.\n\t * @param outerContext The current parser context object.\n\t * @return The simplified semantic context after precedence predicates are\n\t * evaluated, which will be one of the following values.\n\t * <ul>\n\t * <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code null}: if the predicate simplifies to {@code false} after\n\t * precedence predicates are evaluated.</li>\n\t * <li>{@code this}: if the semantic context is not changed as a result of\n\t * precedence predicate evaluation.</li>\n\t * <li>A non-{@code null} {@link SemanticContext}: the new simplified\n\t * semantic context after precedence predicates are evaluated.</li>\n\t * </ul>\n\t */\n\tevalPrecedence(parser, outerContext) {\n\t\treturn this;\n\t}\n\n\tstatic andContext(a, b) {\n\t\tif (a === null || a === SemanticContext.NONE) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null || b === SemanticContext.NONE) {\n\t\t\treturn a;\n\t\t}\n\t\tconst result = new AND(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tstatic orContext(a, b) {\n\t\tif (a === null) {\n\t\t\treturn b;\n\t\t}\n\t\tif (b === null) {\n\t\t\treturn a;\n\t\t}\n\t\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tconst result = new OR(a, b);\n\t\tif (result.opnds.length === 1) {\n\t\t\treturn result.opnds[0];\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\n\n\nclass AND extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever none of the contained contexts\n\t * is false\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\t\tif (a instanceof AND) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof AND) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\t\tconst precedencePredicates = filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the lowest precedence\n\t\t\tlet reduced = null;\n\t\t\tprecedencePredicates.map( function(p) {\n\t\t\t\tif(reduced===null || p.precedence<reduced.precedence) {\n\t\t\t\t\treduced = p;\n\t\t\t\t}\n\t\t\t});\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof AND)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn (0,_utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"AND\");\n\t}\n\n\t/**\n\t * {@inheritDoc}\n\t *\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === null) {\n\t\t\t\t// The AND context is false if any element is false\n\t\t\t\treturn null;\n\t\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t\t// Reduce the result by skipping true elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were true, so the AND context is true\n\t\t\treturn SemanticContext.NONE;\n\t\t}\n\t\tlet result = null;\n\t\toperands.map(function(o) {\n\t\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"&&\");\n\t}\n}\n\n\nclass OR extends SemanticContext {\n\t/**\n\t * A semantic context which is true whenever at least one of the contained\n\t * contexts is true\n\t */\n\tconstructor(a, b) {\n\t\tsuper();\n\t\tconst operands = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\t\tif (a instanceof OR) {\n\t\t\ta.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(a);\n\t\t}\n\t\tif (b instanceof OR) {\n\t\t\tb.opnds.map(function(o) {\n\t\t\t\toperands.add(o);\n\t\t\t});\n\t\t} else {\n\t\t\toperands.add(b);\n\t\t}\n\n\t\tconst precedencePredicates = filterPrecedencePredicates(operands);\n\t\tif (precedencePredicates.length > 0) {\n\t\t\t// interested in the transition with the highest precedence\n\t\t\tconst s = precedencePredicates.sort(function(a, b) {\n\t\t\t\treturn a.compareTo(b);\n\t\t\t});\n\t\t\tconst reduced = s[s.length-1];\n\t\t\toperands.add(reduced);\n\t\t}\n\t\tthis.opnds = Array.from(operands.values());\n\t}\n\n\tequals(other) {\n\t\tif (this === other) {\n\t\t\treturn true;\n\t\t} else if (!(other instanceof OR)) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn (0,_utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(this.opnds, other.opnds);\n\t\t}\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.opnds, \"OR\");\n\t}\n\n\t/**\n\t * <p>\n\t * The evaluation of predicates by this context is short-circuiting, but\n\t * unordered.</p>\n\t */\n\tevaluate(parser, outerContext) {\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tevalPrecedence(parser, outerContext) {\n\t\tlet differs = false;\n\t\tconst operands = [];\n\t\tfor (let i = 0; i < this.opnds.length; i++) {\n\t\t\tconst context = this.opnds[i];\n\t\t\tconst evaluated = context.evalPrecedence(parser, outerContext);\n\t\t\tdiffers |= (evaluated !== context);\n\t\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t\t// The OR context is true if any element is true\n\t\t\t\treturn SemanticContext.NONE;\n\t\t\t} else if (evaluated !== null) {\n\t\t\t\t// Reduce the result by skipping false elements\n\t\t\t\toperands.push(evaluated);\n\t\t\t}\n\t\t}\n\t\tif (!differs) {\n\t\t\treturn this;\n\t\t}\n\t\tif (operands.length === 0) {\n\t\t\t// all elements were false, so the OR context is false\n\t\t\treturn null;\n\t\t}\n\t\tconst result = null;\n\t\toperands.map(function(o) {\n\t\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t\t});\n\t\treturn result;\n\t}\n\n\ttoString() {\n\t\tconst s = this.opnds.map(o => o.toString());\n\t\treturn (s.length > 3 ? s.slice(3) : s).join(\"||\");\n\t}\n}\n\nfunction filterPrecedencePredicates(set) {\n\tconst result = [];\n\tset.values().map( function(context) {\n\t\tif (context instanceof SemanticContext.PrecedencePredicate) {\n\t\t\tresult.push(context);\n\t\t}\n\t});\n\treturn result;\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/SemanticContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _ATN_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATN.js */ \"./node_modules/antlr4/src/antlr4/atn/ATN.js\");\n/* harmony import */ var _ATNDeserializer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNDeserializer.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js\");\n/* harmony import */ var _LexerATNSimulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LexerATNSimulator.js */ \"./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js\");\n/* harmony import */ var _ParserATNSimulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ParserATNSimulator.js */ \"./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js\");\n/* harmony import */ var _PredictionMode_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./PredictionMode.js */ \"./node_modules/antlr4/src/antlr4/atn/PredictionMode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ ATN: _ATN_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], ATNDeserializer: _ATNDeserializer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], LexerATNSimulator: _LexerATNSimulator_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], ParserATNSimulator: _ParserATNSimulator_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"], PredictionMode: _PredictionMode_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"] });\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/atn/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/context/ArrayPredictionContext.js":
/*!**************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/context/ArrayPredictionContext.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ArrayPredictionContext)\n/* harmony export */ });\n/* harmony import */ var _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/equalArrays.js */ \"./node_modules/antlr4/src/antlr4/utils/equalArrays.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nclass ArrayPredictionContext extends _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(parents, returnStates) {\n        /**\n         * Parent can be null only if full ctx mode and we make an array\n         * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n         * null parent and\n         * returnState == {@link //EMPTY_RETURN_STATE}.\n         */\n        const h = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n        h.update(parents, returnStates);\n        const hashCode = h.finish();\n        super(hashCode);\n        this.parents = parents;\n        this.returnStates = returnStates;\n        return this;\n    }\n\n    isEmpty() {\n        // since EMPTY_RETURN_STATE can only appear in the last position, we\n        // don't need to verify that size==1\n        return this.returnStates[0] === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY_RETURN_STATE;\n    }\n\n    getParent(index) {\n        return this.parents[index];\n    }\n\n    getReturnState(index) {\n        return this.returnStates[index];\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof ArrayPredictionContext)) {\n            return false;\n        } else if (this.hashCode() !== other.hashCode()) {\n            return false; // can't be same if hash is different\n        } else {\n            return (0,_utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.returnStates, other.returnStates) &&\n                (0,_utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.parents, other.parents);\n        }\n    }\n\n    toString() {\n        if (this.isEmpty()) {\n            return \"[]\";\n        } else {\n            let s = \"[\";\n            for (let i = 0; i < this.returnStates.length; i++) {\n                if (i > 0) {\n                    s = s + \", \";\n                }\n                if (this.returnStates[i] === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY_RETURN_STATE) {\n                    s = s + \"$\";\n                    continue;\n                }\n                s = s + this.returnStates[i];\n                if (this.parents[i] !== null) {\n                    s = s + \" \" + this.parents[i];\n                } else {\n                    s = s + \"null\";\n                }\n            }\n            return s + \"]\";\n        }\n    }\n\n    get length(){\n        return this.returnStates.length;\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/context/ArrayPredictionContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/context/EmptyPredictionContext.js":
/*!**************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/context/EmptyPredictionContext.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EmptyPredictionContext)\n/* harmony export */ });\n/* harmony import */ var _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SingletonPredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass EmptyPredictionContext extends _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n\n    constructor() {\n        super(null, _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY_RETURN_STATE);\n    }\n\n    isEmpty() {\n        return true;\n    }\n\n    getParent(index) {\n        return null;\n    }\n\n    getReturnState(index) {\n        return this.returnState;\n    }\n\n    equals(other) {\n        return this === other;\n    }\n\n    toString() {\n        return \"$\";\n    }\n}\n\n\n_PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY = new EmptyPredictionContext();\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/context/EmptyPredictionContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/context/ParserRuleContext.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/context/ParserRuleContext.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ParserRuleContext)\n/* harmony export */ });\n/* harmony import */ var _RuleContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RuleContext.js */ \"./node_modules/antlr4/src/antlr4/context/RuleContext.js\");\n/* harmony import */ var _tree_TerminalNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../tree/TerminalNode.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNode.js\");\n/* harmony import */ var _tree_TerminalNodeImpl_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tree/TerminalNodeImpl.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNodeImpl.js\");\n/* harmony import */ var _tree_ErrorNodeImpl_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../tree/ErrorNodeImpl.js */ \"./node_modules/antlr4/src/antlr4/tree/ErrorNodeImpl.js\");\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n/**\n * A rule invocation record for parsing.\n *\n *  Contains all of the information about the current rule not stored in the\n *  RuleContext. It handles parse tree children list, Any ATN state\n *  tracing, and the default values available for rule indications:\n *  start, stop, rule index, current alt number, current\n *  ATN state.\n *\n *  Subclasses made for each rule and grammar track the parameters,\n *  return values, locals, and labels specific to that rule. These\n *  are the objects that are returned from rules.\n *\n *  Note text is not an actual field of a rule return value; it is computed\n *  from start and stop using the input stream's toString() method.  I\n *  could add a ctor to this so that we can pass in and store the input\n *  stream, but I'm not sure we want to do that.  It would seem to be undefined\n *  to get the .text property anyway if the rule matches tokens from multiple\n *  input streams.\n *\n *  I do not use getters for fields of objects that are used simply to\n *  group values such as this aggregate.  The getters/setters are there to\n *  satisfy the superclass interface.\n */\nclass ParserRuleContext extends _RuleContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\tconstructor(parent, invokingStateNumber) {\n\t\tparent = parent || null;\n\t\tinvokingStateNumber = invokingStateNumber || null;\n\t\tsuper(parent, invokingStateNumber);\n\t\tthis.ruleIndex = -1;\n\t\t/**\n\t\t * If we are debugging or building a parse tree for a visitor,\n\t\t * we need to track all of the tokens and rule invocations associated\n\t\t * with this rule's context. This is empty for parsing w/o tree constr.\n\t\t * operation because we don't the need to track the details about\n\t\t * how we parse this rule.\n\t\t */\n\t\tthis.children = null;\n\t\tthis.start = null;\n\t\tthis.stop = null;\n\t\t/**\n\t\t * The exception that forced this rule to return. If the rule successfully\n\t\t * completed, this is {@code null}.\n\t\t */\n\t\tthis.exception = null;\n\t}\n\n\t// COPY a ctx (I'm deliberately not using copy constructor)\n\tcopyFrom(ctx) {\n\t\t// from RuleContext\n\t\tthis.parentCtx = ctx.parentCtx;\n\t\tthis.invokingState = ctx.invokingState;\n\t\tthis.children = null;\n\t\tthis.start = ctx.start;\n\t\tthis.stop = ctx.stop;\n\t\t// copy any error nodes to alt label node\n\t\tif(ctx.children) {\n\t\t\tthis.children = [];\n\t\t\t// reset parent pointer for any error nodes\n\t\t\tctx.children.map(function(child) {\n\t\t\t\tif (child instanceof _tree_ErrorNodeImpl_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n\t\t\t\t\tthis.children.push(child);\n\t\t\t\t\tchild.parentCtx = this;\n\t\t\t\t}\n\t\t\t}, this);\n\t\t}\n\t}\n\n\t// Double dispatch methods for listeners\n\tenterRule(listener) {\n\t}\n\n\texitRule(listener) {\n\t}\n\n\t// Does not set parent link; other add methods do that\n\taddChild(child) {\n\t\tif (this.children === null) {\n\t\t\tthis.children = [];\n\t\t}\n\t\tthis.children.push(child);\n\t\treturn child;\n\t}\n\n\t/** Used by enterOuterAlt to toss out a RuleContext previously added as\n\t * we entered a rule. If we have // label, we will need to remove\n\t * generic ruleContext object.\n\t */\n\tremoveLastChild() {\n\t\tif (this.children !== null) {\n\t\t\tthis.children.pop();\n\t\t}\n\t}\n\n\taddTokenNode(token) {\n\t\tconst node = new _tree_TerminalNodeImpl_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](token);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\taddErrorNode(badToken) {\n\t\tconst node = new _tree_ErrorNodeImpl_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](badToken);\n\t\tthis.addChild(node);\n\t\tnode.parentCtx = this;\n\t\treturn node;\n\t}\n\n\tgetChild(i, type) {\n\t\ttype = type || null;\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tif (type === null) {\n\t\t\treturn this.children[i];\n\t\t} else {\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif(child instanceof type) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tgetToken(ttype, i) {\n\t\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\t\treturn null;\n\t\t}\n\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\tconst child = this.children[j];\n\t\t\tif (child instanceof _tree_TerminalNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\tif(i===0) {\n\t\t\t\t\t\treturn child;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ti -= 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tgetTokens(ttype ) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst tokens = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof _tree_TerminalNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n\t\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\t\ttokens.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tokens;\n\t\t}\n\t}\n\n\tgetTypedRuleContext(ctxType, i) {\n\t\treturn this.getChild(i, ctxType);\n\t}\n\n\tgetTypedRuleContexts(ctxType) {\n\t\tif (this.children=== null) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst contexts = [];\n\t\t\tfor(let j=0; j<this.children.length; j++) {\n\t\t\t\tconst child = this.children[j];\n\t\t\t\tif (child instanceof ctxType) {\n\t\t\t\t\tcontexts.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn contexts;\n\t\t}\n\t}\n\n\tgetChildCount() {\n\t\tif (this.children=== null) {\n\t\t\treturn 0;\n\t\t} else {\n\t\t\treturn this.children.length;\n\t\t}\n\t}\n\n\tgetSourceInterval() {\n\t\tif( this.start === null || this.stop === null) {\n\t\t\treturn _misc_Interval_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].INVALID_INTERVAL;\n\t\t} else {\n\t\t\treturn new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this.start.tokenIndex, this.stop.tokenIndex);\n\t\t}\n\t}\n}\n\n_RuleContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY = new ParserRuleContext();\n\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/context/ParserRuleContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/context/PredictionContext.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/context/PredictionContext.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PredictionContext)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nclass PredictionContext {\n\n\tconstructor(cachedHashCode) {\n\t\tthis.cachedHashCode = cachedHashCode;\n\t}\n\n\t/**\n\t * Stores the computed hash code of this {@link PredictionContext}. The hash\n\t * code is computed in parts to match the following reference algorithm.\n\t *\n\t * <pre>\n\t * private int referenceHashCode() {\n\t * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n\t * //INITIAL_HASH});\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n\t * getParent}(i));\n\t * }\n\t *\n\t * for (int i = 0; i &lt; {@link //size()}; i++) {\n\t * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n\t * //getReturnState getReturnState}(i));\n\t * }\n\t *\n\t * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n\t * //size()});\n\t * return hash;\n\t * }\n\t * </pre>\n\t * This means only the {@link //EMPTY} context is in set.\n\t */\n\tisEmpty() {\n\t\treturn this === PredictionContext.EMPTY;\n\t}\n\n\thasEmptyPath() {\n\t\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n\t}\n\n\thashCode() {\n\t\treturn this.cachedHashCode;\n\t}\n\n\tupdateHashCode(hash) {\n\t\thash.update(this.cachedHashCode);\n\t}\n}\n\n/**\n * Represents {@code $} in local context prediction, which means wildcard.\n * {@code//+x =//}.\n */\nPredictionContext.EMPTY = null;\n\n/**\n * Represents {@code $} in an array in full context mode, when {@code $}\n * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n * {@code $} = {@link //EMPTY_RETURN_STATE}.\n */\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/context/PredictionContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js":
/*!**************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getAllContextNodes\": () => (/* binding */ getAllContextNodes),\n/* harmony export */   \"getCachedPredictionContext\": () => (/* binding */ getCachedPredictionContext),\n/* harmony export */   \"merge\": () => (/* binding */ merge),\n/* harmony export */   \"predictionContextFromRuleContext\": () => (/* binding */ predictionContextFromRuleContext)\n/* harmony export */ });\n/* harmony import */ var _RuleContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RuleContext.js */ \"./node_modules/antlr4/src/antlr4/context/RuleContext.js\");\n/* harmony import */ var _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ArrayPredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/ArrayPredictionContext.js\");\n/* harmony import */ var _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SingletonPredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js\");\n/* harmony import */ var _EmptyPredictionContext_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./EmptyPredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/EmptyPredictionContext.js\");\n/* harmony import */ var _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../misc/HashMap.js */ \"./node_modules/antlr4/src/antlr4/misc/HashMap.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n/**\n * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n * Return {@link //EMPTY} if {@code outerContext} is empty or null.\n */\nfunction predictionContextFromRuleContext(atn, outerContext) {\n    if (outerContext === undefined || outerContext === null) {\n        outerContext = _RuleContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY;\n    }\n    // if we are in RuleContext of start rule, s, then PredictionContext\n    // is EMPTY. Nobody called us. (if we are empty, return empty)\n    if (outerContext.parentCtx === null || outerContext === _RuleContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY) {\n        return _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY;\n    }\n    // If we have a parent, convert it to a PredictionContext graph\n    const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n    const state = atn.states[outerContext.invokingState];\n    const transition = state.transitions[0];\n    return _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].create(parent, transition.followState.stateNumber);\n}\n\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n    if (context.isEmpty()) {\n        return context;\n    }\n    let existing = visited.get(context) || null;\n    if (existing !== null) {\n        return existing;\n    }\n    existing = contextCache.get(context);\n    if (existing !== null) {\n        visited.set(context, existing);\n        return existing;\n    }\n    let changed = false;\n    let parents = [];\n    for (let i = 0; i < parents.length; i++) {\n        const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n        if (changed || parent !== context.getParent(i)) {\n            if (!changed) {\n                parents = [];\n                for (let j = 0; j < context.length; j++) {\n                    parents[j] = context.getParent(j);\n                }\n                changed = true;\n            }\n            parents[i] = parent;\n        }\n    }\n    if (!changed) {\n        contextCache.add(context);\n        visited.set(context, context);\n        return context;\n    }\n    let updated = null;\n    if (parents.length === 0) {\n        updated = _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY;\n    } else if (parents.length === 1) {\n        updated = _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].create(parents[0], context\n            .getReturnState(0));\n    } else {\n        updated = new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](parents, context.returnStates);\n    }\n    contextCache.add(updated);\n    visited.set(updated, updated);\n    visited.set(context, updated);\n\n    return updated;\n}\n\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n    // share same graph if both same\n    if (a === b) {\n        return a;\n    }\n    if (a instanceof _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] && b instanceof _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n        return mergeSingletons(a, b, rootIsWildcard, mergeCache);\n    }\n    // At least one of a or b is array\n    // If one is $ and rootIsWildcard, return $ as// wildcard\n    if (rootIsWildcard) {\n        if (a instanceof _EmptyPredictionContext_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            return a;\n        }\n        if (b instanceof _EmptyPredictionContext_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"]) {\n            return b;\n        }\n    }\n    // convert singleton so both are arrays to normalize\n    if (a instanceof _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n        a = new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]([a.getParent()], [a.returnState]);\n    }\n    if (b instanceof _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n        b = new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]([b.getParent()], [b.returnState]);\n    }\n    return mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n\n/**\n * Merge two {@link ArrayPredictionContext} instances.\n *\n * <p>Different tops, different parents.<br>\n * <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, same parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, different parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Shared top, all shared parents.<br>\n * <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Equal tops, merge parents and reduce top to\n * {@link SingletonPredictionContext}.<br>\n * <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n */\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n    if (mergeCache !== null) {\n        let previous = mergeCache.get(a, b);\n        if (previous !== null) {\n            return previous;\n        }\n        previous = mergeCache.get(b, a);\n        if (previous !== null) {\n            return previous;\n        }\n    }\n    // merge sorted payloads a + b => M\n    let i = 0; // walks a\n    let j = 0; // walks b\n    let k = 0; // walks target M array\n\n    let mergedReturnStates = [];\n    let mergedParents = [];\n    // walk and merge to yield mergedParents, mergedReturnStates\n    while (i < a.returnStates.length && j < b.returnStates.length) {\n        const a_parent = a.parents[i];\n        const b_parent = b.parents[j];\n        if (a.returnStates[i] === b.returnStates[j]) {\n            // same payload (stack tops are equal), must yield merged singleton\n            const payload = a.returnStates[i];\n            // $+$ = $\n            const bothDollars = payload === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY_RETURN_STATE &&\n                a_parent === null && b_parent === null;\n            const ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax\n            // ->\n            // ax\n            if (bothDollars || ax_ax) {\n                mergedParents[k] = a_parent; // choose left\n                mergedReturnStates[k] = payload;\n            } else { // ax+ay -> a'[x,y]\n                mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n                mergedReturnStates[k] = payload;\n            }\n            i += 1; // hop over left one as usual\n            j += 1; // but also skip one in right side since we merge\n        } else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M\n            mergedParents[k] = a_parent;\n            mergedReturnStates[k] = a.returnStates[i];\n            i += 1;\n        } else { // b > a, copy b[j] to M\n            mergedParents[k] = b_parent;\n            mergedReturnStates[k] = b.returnStates[j];\n            j += 1;\n        }\n        k += 1;\n    }\n    // copy over any payloads remaining in either array\n    if (i < a.returnStates.length) {\n        for (let p = i; p < a.returnStates.length; p++) {\n            mergedParents[k] = a.parents[p];\n            mergedReturnStates[k] = a.returnStates[p];\n            k += 1;\n        }\n    } else {\n        for (let p = j; p < b.returnStates.length; p++) {\n            mergedParents[k] = b.parents[p];\n            mergedReturnStates[k] = b.returnStates[p];\n            k += 1;\n        }\n    }\n    // trim merged if we combined a few that had same stack tops\n    if (k < mergedParents.length) { // write index < last position; trim\n        if (k === 1) { // for just one merged element, return singleton top\n            const a_ = _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].create(mergedParents[0],\n                mergedReturnStates[0]);\n            if (mergeCache !== null) {\n                mergeCache.set(a, b, a_);\n            }\n            return a_;\n        }\n        mergedParents = mergedParents.slice(0, k);\n        mergedReturnStates = mergedReturnStates.slice(0, k);\n    }\n\n    const M = new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](mergedParents, mergedReturnStates);\n\n    // if we created same array as a or b, return that instead\n    // TODO: track whether this is possible above during merge sort for speed\n    if (M === a) {\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, a);\n        }\n        return a;\n    }\n    if (M === b) {\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, b);\n        }\n        return b;\n    }\n    combineCommonParents(mergedParents);\n\n    if (mergeCache !== null) {\n        mergeCache.set(a, b, M);\n    }\n    return M;\n}\n\n\n/**\n * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n * ones.\n */\nfunction combineCommonParents(parents) {\n    const uniqueParents = new _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n\n    for (let p = 0; p < parents.length; p++) {\n        const parent = parents[p];\n        if (!(uniqueParents.containsKey(parent))) {\n            uniqueParents.set(parent, parent);\n        }\n    }\n    for (let q = 0; q < parents.length; q++) {\n        parents[q] = uniqueParents.get(parents[q]);\n    }\n}\n\n\n/**\n * Merge two {@link SingletonPredictionContext} instances.\n *\n * <p>Stack tops equal, parents merge is same; return left graph.<br>\n * <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Same stack top, parents differ; merge parents giving array node, then\n * remainders of those graphs. A new root node is created to point to the\n * merged parents.<br>\n * <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to same parent. Make array node for the\n * root where both element in the root point to the same (original)\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * <p>Different stack tops pointing to different parents. Make array node for\n * the root where each element points to the corresponding original\n * parent.<br>\n * <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n * type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n * @param mergeCache\n */\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n    if (mergeCache !== null) {\n        let previous = mergeCache.get(a, b);\n        if (previous !== null) {\n            return previous;\n        }\n        previous = mergeCache.get(b, a);\n        if (previous !== null) {\n            return previous;\n        }\n    }\n\n    const rootMerge = mergeRoot(a, b, rootIsWildcard);\n    if (rootMerge !== null) {\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, rootMerge);\n        }\n        return rootMerge;\n    }\n    if (a.returnState === b.returnState) {\n        const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n        // if parent is same as existing a or b parent or reduced to a parent,\n        // return it\n        if (parent === a.parentCtx) {\n            return a; // ax + bx = ax, if a=b\n        }\n        if (parent === b.parentCtx) {\n            return b; // ax + bx = bx, if a=b\n        }\n        // else: ax + ay = a'[x,y]\n        // merge parents x and y, giving array node with x,y then remainders\n        // of those graphs. dup a, a' points at merged array\n        // new joined parent so create new singleton pointing to it, a'\n        const spc = _SingletonPredictionContext_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].create(parent, a.returnState);\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, spc);\n        }\n        return spc;\n    } else { // a != b payloads differ\n        // see if we can collapse parents due to $+x parents if local ctx\n        let singleParent = null;\n        if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +\n            // bx =\n            // [a,b]x\n            singleParent = a.parentCtx;\n        }\n        if (singleParent !== null) { // parents are same\n            // sort payloads and use same parent\n            const payloads = [ a.returnState, b.returnState ];\n            if (a.returnState > b.returnState) {\n                payloads[0] = b.returnState;\n                payloads[1] = a.returnState;\n            }\n            const parents = [ singleParent, singleParent ];\n            const apc = new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](parents, payloads);\n            if (mergeCache !== null) {\n                mergeCache.set(a, b, apc);\n            }\n            return apc;\n        }\n        // parents differ and can't merge them. Just pack together\n        // into array; can't merge.\n        // ax + by = [ax,by]\n        const payloads = [ a.returnState, b.returnState ];\n        let parents = [ a.parentCtx, b.parentCtx ];\n        if (a.returnState > b.returnState) { // sort by payload\n            payloads[0] = b.returnState;\n            payloads[1] = a.returnState;\n            parents = [ b.parentCtx, a.parentCtx ];\n        }\n        const a_ = new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](parents, payloads);\n        if (mergeCache !== null) {\n            mergeCache.set(a, b, a_);\n        }\n        return a_;\n    }\n}\n\n\n/**\n * Handle case where at least one of {@code a} or {@code b} is\n * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n * to represent {@link //EMPTY}.\n *\n * <h2>Local-Context Merges</h2>\n *\n * <p>These local-context merge operations are used when {@code rootIsWildcard}\n * is true.</p>\n *\n * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n * <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n * {@code //EMPTY}; return left graph.<br>\n * <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Special case of last merge if local context.<br>\n * <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <h2>Full-Context Merges</h2>\n *\n * <p>These full-context merge operations are used when {@code rootIsWildcard}\n * is false.</p>\n *\n * <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n * null parent).<br>\n * <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n *\n * @param a the first {@link SingletonPredictionContext}\n * @param b the second {@link SingletonPredictionContext}\n * @param rootIsWildcard {@code true} if this is a local-context merge,\n * otherwise false to indicate a full-context merge\n */\nfunction mergeRoot(a, b, rootIsWildcard) {\n    if (rootIsWildcard) {\n        if (a === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY) {\n            return _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY; // // + b =//\n        }\n        if (b === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY) {\n            return _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY; // a +// =//\n        }\n    } else {\n        if (a === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY && b === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY) {\n            return _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY; // $ + $ = $\n        } else if (a === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY) { // $ + x = [$,x]\n            const payloads = [ b.returnState,\n                _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY_RETURN_STATE ];\n            const parents = [ b.parentCtx, null ];\n            return new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](parents, payloads);\n        } else if (b === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY) { // x + $ = [$,x] ($ is always first if present)\n            const payloads = [ a.returnState, _PredictionContext_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EMPTY_RETURN_STATE ];\n            const parents = [ a.parentCtx, null ];\n            return new _ArrayPredictionContext_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](parents, payloads);\n        }\n    }\n    return null;\n}\n\n\n// ter's recursive version of Sam's getAllNodes()\nfunction getAllContextNodes(context, nodes, visited) {\n    if (nodes === null) {\n        nodes = [];\n        return getAllContextNodes(context, nodes, visited);\n    } else if (visited === null) {\n        visited = new _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n        return getAllContextNodes(context, nodes, visited);\n    } else {\n        if (context === null || visited.containsKey(context)) {\n            return nodes;\n        }\n        visited.set(context, context);\n        nodes.push(context);\n        for (let i = 0; i < context.length; i++) {\n            getAllContextNodes(context.getParent(i), nodes, visited);\n        }\n        return nodes;\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/context/PredictionContextUtils.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/context/RuleContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/context/RuleContext.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RuleContext)\n/* harmony export */ });\n/* harmony import */ var _tree_RuleNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tree/RuleNode.js */ \"./node_modules/antlr4/src/antlr4/tree/RuleNode.js\");\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _tree_Trees_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tree/Trees.js */ \"./node_modules/antlr4/src/antlr4/tree/Trees.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\nclass RuleContext extends _tree_RuleNode_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    /** A rule context is a record of a single rule invocation. It knows\n     * which context invoked it, if any. If there is no parent context, then\n     * naturally the invoking state is not valid.  The parent link\n     * provides a chain upwards from the current rule invocation to the root\n     * of the invocation tree, forming a stack. We actually carry no\n     * information about the rule associated with this context (except\n     * when parsing). We keep only the state number of the invoking state from\n     * the ATN submachine that invoked this. Contrast this with the s\n     * pointer inside ParserRuleContext that tracks the current state\n     * being \"executed\" for the current rule.\n     *\n     * The parent contexts are useful for computing lookahead sets and\n     * getting error information.\n     *\n     * These objects are used during parsing and prediction.\n     * For the special case of parsers, we use the subclass\n     * ParserRuleContext.\n     *\n     * @see ParserRuleContext\n     */\n    constructor(parent, invokingState) {\n        // What context invoked this rule?\n        super();\n        this.parentCtx = parent || null;\n        /**\n         * What state invoked the rule associated with this context?\n         * The \"return address\" is the followState of invokingState\n         * If parent is null, this should be -1.\n         */\n        this.invokingState = invokingState || -1;\n    }\n\n    depth() {\n        let n = 0;\n        let p = this;\n        while (p !== null) {\n            p = p.parentCtx;\n            n += 1;\n        }\n        return n;\n    }\n\n    /**\n     * A context is empty if there is no invoking state; meaning nobody call\n     * current context.\n     */\n    isEmpty() {\n        return this.invokingState === -1;\n    }\n\n// satisfy the ParseTree / SyntaxTree interface\n    getSourceInterval() {\n        return _misc_Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INVALID_INTERVAL;\n    }\n\n    getRuleContext() {\n        return this;\n    }\n\n    getPayload() {\n        return this;\n    }\n\n    /**\n     * Return the combined text of all child nodes. This method only considers\n     * tokens which have been added to the parse tree.\n     * <p>\n     * Since tokens on hidden channels (e.g. whitespace or comments) are not\n     * added to the parse trees, they will not appear in the output of this\n     * method.\n     */\n    getText() {\n        if (this.getChildCount() === 0) {\n            return \"\";\n        } else {\n            return this.children.map(function (child) {\n                return child.getText();\n            }).join(\"\");\n        }\n    }\n\n    /**\n     * For rule associated with this parse tree internal node, return\n     * the outer alternative number used to match the input. Default\n     * implementation does not compute nor store this alt num. Create\n     * a subclass of ParserRuleContext with backing field and set\n     * option contextSuperClass.\n     * to set it.\n     */\n    getAltNumber() {\n        // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n        return 0;\n    }\n\n    /**\n     * Set the outer alternative number for this context node. Default\n     * implementation does nothing to avoid backing field overhead for\n     * trees that don't need it.  Create\n     * a subclass of ParserRuleContext with backing field and set\n     * option contextSuperClass.\n     */\n    setAltNumber(altNumber) {\n    }\n\n    getChild(i) {\n        return null;\n    }\n\n    getChildCount() {\n        return 0;\n    }\n\n    accept(visitor) {\n        return visitor.visitChildren(this);\n    }\n\n    /**\n     * Print out a whole tree, not just a node, in LISP format\n     * (root child1 .. childN). Print just a node if this is a leaf.\n     */\n    toStringTree(ruleNames, recog) {\n        return _tree_Trees_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].toStringTree(this, ruleNames, recog);\n    }\n\n    toString(ruleNames, stop) {\n        ruleNames = ruleNames || null;\n        stop = stop || null;\n        let p = this;\n        let s = \"[\";\n        while (p !== null && p !== stop) {\n            if (ruleNames === null) {\n                if (!p.isEmpty()) {\n                    s += p.invokingState;\n                }\n            } else {\n                const ri = p.ruleIndex;\n                const ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]\n                    : \"\" + ri;\n                s += ruleName;\n            }\n            if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n                s += \" \";\n            }\n            p = p.parentCtx;\n        }\n        s += \"]\";\n        return s;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/context/RuleContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js":
/*!******************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SingletonPredictionContext)\n/* harmony export */ });\n/* harmony import */ var _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PredictionContext.js */ \"./node_modules/antlr4/src/antlr4/context/PredictionContext.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass SingletonPredictionContext extends _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    constructor(parent, returnState) {\n        let hashCode = 0;\n        const hash = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n        if(parent !== null) {\n            hash.update(parent, returnState);\n        } else {\n            hash.update(1);\n        }\n        hashCode = hash.finish();\n        super(hashCode);\n        this.parentCtx = parent;\n        this.returnState = returnState;\n    }\n\n    getParent(index) {\n        return this.parentCtx;\n    }\n\n    getReturnState(index) {\n        return this.returnState;\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        } else if (!(other instanceof SingletonPredictionContext)) {\n            return false;\n        } else if (this.hashCode() !== other.hashCode()) {\n            return false; // can't be same if hash is different\n        } else {\n            if(this.returnState !== other.returnState)\n                return false;\n            else if(this.parentCtx==null)\n                return other.parentCtx==null\n            else\n                return this.parentCtx.equals(other.parentCtx);\n        }\n    }\n\n    toString() {\n        const up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n        if (up.length === 0) {\n            if (this.returnState === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY_RETURN_STATE) {\n                return \"$\";\n            } else {\n                return \"\" + this.returnState;\n            }\n        } else {\n            return \"\" + this.returnState + \" \" + up;\n        }\n    }\n\n    get length(){\n        return 1;\n    }\n\n    static create(parent, returnState) {\n        if (returnState === _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY_RETURN_STATE && parent === null) {\n            // someone can pass in the bits of an array ctx that mean $\n            return _PredictionContext_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EMPTY;\n        } else {\n            return new SingletonPredictionContext(parent, returnState);\n        }\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/context/SingletonPredictionContext.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFA.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFA.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DFA)\n/* harmony export */ });\n/* harmony import */ var _DFAState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DFAState.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFAState.js\");\n/* harmony import */ var _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../state/StarLoopEntryState.js */ \"./node_modules/antlr4/src/antlr4/state/StarLoopEntryState.js\");\n/* harmony import */ var _atn_ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../atn/ATNConfigSet.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\n/* harmony import */ var _DFASerializer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DFASerializer.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\");\n/* harmony import */ var _LexerDFASerializer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./LexerDFASerializer.js */ \"./node_modules/antlr4/src/antlr4/dfa/LexerDFASerializer.js\");\n/* harmony import */ var _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../misc/HashSet.js */ \"./node_modules/antlr4/src/antlr4/misc/HashSet.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\nclass DFA {\n\tconstructor(atnStartState, decision) {\n\t\tif (decision === undefined) {\n\t\t\tdecision = 0;\n\t\t}\n\t\t/**\n\t\t * From which ATN state did we create this DFA?\n\t\t */\n\t\tthis.atnStartState = atnStartState;\n\t\tthis.decision = decision;\n\t\t/**\n\t\t * A set of all DFA states. Use {@link Map} so we can get old state back\n\t\t * ({@link Set} only allows you to see if it's there).\n\t\t */\n\t\tthis._states = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n\t\tthis.s0 = null;\n\t\t/**\n\t\t * {@code true} if this DFA is for a precedence decision; otherwise,\n\t\t * {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t\t * {@link //setPrecedenceDfa}\n\t\t */\n\t\tthis.precedenceDfa = false;\n\t\tif (atnStartState instanceof _state_StarLoopEntryState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])\n\t\t{\n\t\t\tif (atnStartState.isPrecedenceDecision) {\n\t\t\t\tthis.precedenceDfa = true;\n\t\t\t\tconst precedenceState = new _DFAState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](null, new _atn_ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @return The start state corresponding to the specified precedence, or\n\t * {@code null} if no start state exists for the specified precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tgetPrecedenceStartState(precedence) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\t// s0.edges is never null for a precedence DFA\n\t\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\t\treturn null;\n\t\t}\n\t\treturn this.s0.edges[precedence] || null;\n\t}\n\n\t/**\n\t * Set the start state for a specific precedence value.\n\t *\n\t * @param precedence The current precedence.\n\t * @param startState The start state corresponding to the specified\n\t * precedence.\n\t *\n\t * @throws IllegalStateException if this is not a precedence DFA.\n\t * @see //isPrecedenceDfa()\n\t */\n\tsetPrecedenceStartState(precedence, startState) {\n\t\tif (!(this.precedenceDfa)) {\n\t\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t\t}\n\t\tif (precedence < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t/**\n\t\t * synchronization on s0 here is ok. when the DFA is turned into a\n\t\t * precedence DFA, s0 will be initialized once and not updated again\n\t\t * s0.edges is never null for a precedence DFA\n\t\t */\n\t\tthis.s0.edges[precedence] = startState;\n\t}\n\n\t/**\n\t * Sets whether this is a precedence DFA. If the specified value differs\n\t * from the current DFA configuration, the following actions are taken;\n\t * otherwise no changes are made to the current DFA.\n\t *\n\t * <ul>\n\t * <li>The {@link //states} map is cleared</li>\n\t * <li>If {@code precedenceDfa} is {@code false}, the initial state\n\t * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n\t * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n\t * store the start states for individual precedence values.</li>\n\t * <li>The {@link //precedenceDfa} field is updated</li>\n\t * </ul>\n\t *\n\t * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n\t * {@code false}\n\t */\n\tsetPrecedenceDfa(precedenceDfa) {\n\t\tif (this.precedenceDfa!==precedenceDfa) {\n\t\t\tthis._states = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"]();\n\t\t\tif (precedenceDfa) {\n\t\t\t\tconst precedenceState = new _DFAState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](null, new _atn_ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]());\n\t\t\t\tprecedenceState.edges = [];\n\t\t\t\tprecedenceState.isAcceptState = false;\n\t\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\t\tthis.s0 = precedenceState;\n\t\t\t} else {\n\t\t\t\tthis.s0 = null;\n\t\t\t}\n\t\t\tthis.precedenceDfa = precedenceDfa;\n\t\t}\n\t}\n\n\t/**\n\t * Return a list of all states in this DFA, ordered by state number.\n\t */\n\tsortedStates() {\n\t\tconst list = this._states.values();\n\t\treturn list.sort(function(a, b) {\n\t\t\treturn a.stateNumber - b.stateNumber;\n\t\t});\n\t}\n\n\ttoString(literalNames, symbolicNames) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new _DFASerializer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this, literalNames, symbolicNames);\n\t\treturn serializer.toString();\n\t}\n\n\ttoLexerString() {\n\t\tif (this.s0 === null) {\n\t\t\treturn \"\";\n\t\t}\n\t\tconst serializer = new _LexerDFASerializer_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"](this);\n\t\treturn serializer.toString();\n\t}\n\n\tget states(){\n\t\treturn this._states;\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/dfa/DFA.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DFASerializer)\n/* harmony export */ });\n/* harmony import */ var _utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arrayToString.js */ \"./node_modules/antlr4/src/antlr4/utils/arrayToString.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n/**\n * A DFA walker that knows how to dump them to serialized strings.\n */\nclass DFASerializer {\n    constructor(dfa, literalNames, symbolicNames) {\n        this.dfa = dfa;\n        this.literalNames = literalNames || [];\n        this.symbolicNames = symbolicNames || [];\n    }\n\n    toString() {\n       if(this.dfa.s0 === null) {\n           return null;\n       }\n       let buf = \"\";\n       const states = this.dfa.sortedStates();\n       for(let i=0; i<states.length; i++) {\n           const s = states[i];\n           if(s.edges!==null) {\n                const n = s.edges.length;\n                for(let j=0;j<n;j++) {\n                    const t = s.edges[j] || null;\n                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {\n                        buf = buf.concat(this.getStateString(s));\n                        buf = buf.concat(\"-\");\n                        buf = buf.concat(this.getEdgeLabel(j));\n                        buf = buf.concat(\"->\");\n                        buf = buf.concat(this.getStateString(t));\n                        buf = buf.concat('\\n');\n                    }\n                }\n           }\n       }\n       return buf.length===0 ? null : buf;\n    }\n\n    getEdgeLabel(i) {\n        if (i===0) {\n            return \"EOF\";\n        } else if(this.literalNames !==null || this.symbolicNames!==null) {\n            return this.literalNames[i-1] || this.symbolicNames[i-1];\n        } else {\n            return String.fromCharCode(i-1);\n        }\n    }\n\n    getStateString(s) {\n        const baseStateStr = ( s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + ( s.requiresFullContext ? \"^\" : \"\");\n        if(s.isAcceptState) {\n            if (s.predicates !== null) {\n                return baseStateStr + \"=>\" + (0,_utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(s.predicates);\n            } else {\n                return baseStateStr + \"=>\" + s.prediction.toString();\n            }\n        } else {\n            return baseStateStr;\n        }\n    }\n}\n\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFAState.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DFAState)\n/* harmony export */ });\n/* harmony import */ var _atn_ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/ATNConfigSet.js */ \"./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js\");\n/* harmony import */ var _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* harmony import */ var _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc/HashSet.js */ \"./node_modules/antlr4/src/antlr4/misc/HashSet.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n/**\n * A DFA state represents a set of possible ATN configurations.\n * As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n * to keep track of all possible states the ATN can be in after\n * reading each input symbol. That is to say, after reading\n * input a1a2..an, the DFA is in a state that represents the\n * subset T of the states of the ATN that are reachable from the\n * ATN's start state along some path labeled a1a2..an.\"\n * In conventional NFA&rarr;DFA conversion, therefore, the subset T\n * would be a bitset representing the set of states the\n * ATN could be in. We need to track the alt predicted by each\n * state as well, however. More importantly, we need to maintain\n * a stack of states, tracking the closure operations as they\n * jump from rule to rule, emulating rule invocations (method calls).\n * I have to add a stack to simulate the proper lookahead sequences for\n * the underlying LL grammar from which the ATN was derived.\n *\n * <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n * is both a state (ala normal conversion) and a RuleContext describing\n * the chain of rules (if any) followed to arrive at that state.</p>\n *\n * <p>A DFA state may have multiple references to a particular state,\n * but with different ATN contexts (with same or different alts)\n * meaning that state was reached via a different set of rule invocations.</p>\n */\nclass DFAState {\n\tconstructor(stateNumber, configs) {\n\t\tif (stateNumber === null) {\n\t\t\tstateNumber = -1;\n\t\t}\n\t\tif (configs === null) {\n\t\t\tconfigs = new _atn_ATNConfigSet_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n\t\t}\n\t\tthis.stateNumber = stateNumber;\n\t\tthis.configs = configs;\n\t\t/**\n\t\t * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t\t * {@link Token//EOF} maps to {@code edges[0]}.\n\t\t */\n\t\tthis.edges = null;\n\t\tthis.isAcceptState = false;\n\t\t/**\n\t\t * if accept state, what ttype do we match or alt do we predict?\n\t\t * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}\n\t\t * {@code !=null} or {@link //requiresFullContext}.\n\t\t */\n\t\tthis.prediction = 0;\n\t\tthis.lexerActionExecutor = null;\n\t\t/**\n\t\t * Indicates that this state was created during SLL prediction that\n\t\t * discovered a conflict between the configurations in the state. Future\n\t\t * {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t\t * full context prediction if this field is true.\n\t\t */\n\t\tthis.requiresFullContext = false;\n\t\t/**\n\t\t * During SLL parsing, this is a list of predicates associated with the\n\t\t * ATN configurations of the DFA state. When we have predicates,\n\t\t * {@link //requiresFullContext} is {@code false} since full context\n\t\t * prediction evaluates predicates\n\t\t * on-the-fly. If this is not null, then {@link //prediction} is\n\t\t * {@link ATN//INVALID_ALT_NUMBER}.\n\t\t *\n\t\t * <p>We only use these for non-{@link //requiresFullContext} but\n\t\t * conflicting states. That\n\t\t * means we know from the context (it's $ or we don't dip into outer\n\t\t * context) that it's an ambiguity not a conflict.</p>\n\t\t *\n\t\t * <p>This list is computed by {@link\n\t\t * ParserATNSimulator//predicateDFAState}.</p>\n\t\t */\n\t\tthis.predicates = null;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Get the set of all alts mentioned by all ATN configurations in this\n\t * DFA state.\n\t */\n\tgetAltSet() {\n\t\tconst alts = new _misc_HashSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\n\t\tif (this.configs !== null) {\n\t\t\tfor (let i = 0; i < this.configs.length; i++) {\n\t\t\t\tconst c = this.configs[i];\n\t\t\t\talts.add(c.alt);\n\t\t\t}\n\t\t}\n\t\tif (alts.length === 0) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn alts;\n\t\t}\n\t}\n\n\t/**\n\t * Two {@link DFAState} instances are equal if their ATN configuration sets\n\t * are the same. This method is used to see if a state already exists.\n\t *\n\t * <p>Because the number of alternatives and number of ATN configurations are\n\t * finite, there is a finite number of DFA states that can be processed.\n\t * This is necessary to show that the algorithm terminates.</p>\n\t *\n\t * <p>Cannot test the DFA state numbers here because in\n\t * {@link ParserATNSimulator//addDFAState} we need to know if any other state\n\t * exists that has this exact set of ATN configurations. The\n\t * {@link //stateNumber} is irrelevant.</p>\n\t */\n\tequals(other) {\n\t\t// compare set of ATN configurations in this set with other\n\t\treturn this === other ||\n\t\t\t\t(other instanceof DFAState &&\n\t\t\t\t\tthis.configs.equals(other.configs));\n\t}\n\n\ttoString() {\n\t\tlet s = \"\" + this.stateNumber + \":\" + this.configs;\n\t\tif(this.isAcceptState) {\n\t\t\ts = s + \"=>\";\n\t\t\tif (this.predicates !== null)\n\t\t\t\ts = s + this.predicates;\n\t\t\telse\n\t\t\t\ts = s + this.prediction;\n\t\t}\n\t\treturn s;\n\t}\n\n\thashCode() {\n\t\tconst hash = new _misc_HashCode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]();\n\t\thash.update(this.configs);\n\t\treturn hash.finish();\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/dfa/DFAState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/LexerDFASerializer.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/LexerDFASerializer.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerDFASerializer)\n/* harmony export */ });\n/* harmony import */ var _DFASerializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DFASerializer.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass LexerDFASerializer extends _DFASerializer_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(dfa) {\n        super(dfa, null);\n    }\n\n    getEdgeLabel(i) {\n        return \"'\" + String.fromCharCode(i) + \"'\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/dfa/LexerDFASerializer.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/PredPrediction.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/PredPrediction.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PredPrediction)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/**\n * Map a predicate to a predicted alternative.\n */\nclass PredPrediction {\n    constructor(pred, alt) {\n        this.alt = alt;\n        this.pred = pred;\n    }\n\n    toString() {\n        return \"(\" + this.pred + \", \" + this.alt + \")\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/dfa/PredPrediction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _DFA_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DFA.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFA.js\");\n/* harmony import */ var _DFASerializer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DFASerializer.js */ \"./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js\");\n/* harmony import */ var _LexerDFASerializer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LexerDFASerializer.js */ \"./node_modules/antlr4/src/antlr4/dfa/LexerDFASerializer.js\");\n/* harmony import */ var _PredPrediction_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./PredPrediction.js */ \"./node_modules/antlr4/src/antlr4/dfa/PredPrediction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ DFA: _DFA_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], DFASerializer: _DFASerializer_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], LexerDFASerializer: _LexerDFASerializer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], PredPrediction: _PredPrediction_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"] });\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/dfa/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/BailErrorStrategy.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/BailErrorStrategy.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BailErrorStrategy)\n/* harmony export */ });\n/* harmony import */ var _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./InputMismatchException.js */ \"./node_modules/antlr4/src/antlr4/error/InputMismatchException.js\");\n/* harmony import */ var _ParseCancellationException_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ParseCancellationException.js */ \"./node_modules/antlr4/src/antlr4/error/ParseCancellationException.js\");\n/* harmony import */ var _DefaultErrorStrategy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DefaultErrorStrategy.js */ \"./node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n/**\n * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n * by immediately canceling the parse operation with a\n * {@link ParseCancellationException}. The implementation ensures that the\n * {@link ParserRuleContext//exception} field is set for all parse tree nodes\n * that were not completed prior to encountering the error.\n *\n * <p>\n * This error strategy is useful in the following scenarios.</p>\n *\n * <ul>\n * <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n * stage of two-stage parsing to immediately terminate if an error is\n * encountered, and immediately fall back to the second stage. In addition to\n * avoiding wasted work by attempting to recover from errors here, the empty\n * implementation of {@link BailErrorStrategy//sync} improves the performance of\n * the first stage.</li>\n * <li><strong>Silent validation:</strong> When syntax errors are not being\n * reported or logged, and the parse result is simply ignored if errors occur,\n * the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n * when the result will be ignored either way.</li>\n * </ul>\n *\n * <p>\n * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n *\n * @see Parser//setErrorHandler(ANTLRErrorStrategy)\n * */\nclass BailErrorStrategy extends _DefaultErrorStrategy_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n\n    constructor() {\n        super();\n    }\n\n    /**\n     * Instead of recovering from exception {@code e}, re-throw it wrapped\n     * in a {@link ParseCancellationException} so it is not caught by the\n     * rule function catches. Use {@link Exception//getCause()} to get the\n     * original {@link RecognitionException}.\n     */\n    recover(recognizer, e) {\n        let context = recognizer._ctx\n        while (context !== null) {\n            context.exception = e;\n            context = context.parentCtx;\n        }\n        throw new _ParseCancellationException_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](e);\n    }\n\n    /**\n     * Make sure we don't attempt to recover inline; if the parser\n     * successfully recovers, it won't throw an exception.\n     */\n    recoverInline(recognizer) {\n        this.recover(recognizer, new _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](recognizer));\n    }\n\n// Make sure we don't attempt to recover from problems in subrules.//\n    sync(recognizer) {\n        // pass\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/BailErrorStrategy.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ConsoleErrorListener.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ConsoleErrorListener.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ConsoleErrorListener)\n/* harmony export */ });\n/* harmony import */ var _ErrorListener_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorListener.js */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/**\n * {@inheritDoc}\n *\n * <p>\n * This implementation prints messages to {@link System//err} containing the\n * values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n * the following format.</p>\n *\n * <pre>\n * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n * </pre>\n *\n */\nclass ConsoleErrorListener extends _ErrorListener_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        console.error(\"line \" + line + \":\" + column + \" \" + msg);\n    }\n}\n\n\n/**\n * Provides a default instance of {@link ConsoleErrorListener}.\n */\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/ConsoleErrorListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DefaultErrorStrategy)\n/* harmony export */ });\n/* harmony import */ var _FailedPredicateException_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FailedPredicateException.js */ \"./node_modules/antlr4/src/antlr4/error/FailedPredicateException.js\");\n/* harmony import */ var _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./InputMismatchException.js */ \"./node_modules/antlr4/src/antlr4/error/InputMismatchException.js\");\n/* harmony import */ var _NoViableAltException_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./NoViableAltException.js */ \"./node_modules/antlr4/src/antlr4/error/NoViableAltException.js\");\n/* harmony import */ var _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../state/ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _ErrorStrategy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ErrorStrategy.js */ \"./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n/**\n * This is the default implementation of {@link ANTLRErrorStrategy} used for\n * error reporting and recovery in ANTLR parsers.\n */\nclass DefaultErrorStrategy extends _ErrorStrategy_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"] {\n    constructor() {\n        super();\n        /**\n         * Indicates whether the error strategy is currently \"recovering from an\n         * error\". This is used to suppress reporting multiple error messages while\n         * attempting to recover from a detected syntax error.\n         *\n         * @see //inErrorRecoveryMode\n         */\n        this.errorRecoveryMode = false;\n\n        /**\n         * The index into the input stream where the last error occurred.\n         * This is used to prevent infinite loops where an error is found\n         * but no token is consumed during recovery...another error is found,\n         * ad nauseum. This is a failsafe mechanism to guarantee that at least\n         * one token/tree node is consumed for two errors.\n         */\n        this.lastErrorIndex = -1;\n        this.lastErrorStates = null;\n        this.nextTokensContext = null;\n        this.nextTokenState = 0;\n    }\n\n    /**\n     * <p>The default implementation simply calls {@link //endErrorCondition} to\n     * ensure that the handler is not in error recovery mode.</p>\n     */\n    reset(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * This method is called to enter error recovery mode when a recognition\n     * exception is reported.\n     *\n     * @param recognizer the parser instance\n     */\n    beginErrorCondition(recognizer) {\n        this.errorRecoveryMode = true;\n    }\n\n    inErrorRecoveryMode(recognizer) {\n        return this.errorRecoveryMode;\n    }\n\n    /**\n     * This method is called to leave error recovery mode after recovering from\n     * a recognition exception.\n     * @param recognizer\n     */\n    endErrorCondition(recognizer) {\n        this.errorRecoveryMode = false;\n        this.lastErrorStates = null;\n        this.lastErrorIndex = -1;\n    }\n\n    /**\n     * {@inheritDoc}\n     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n     */\n    reportMatch(recognizer) {\n        this.endErrorCondition(recognizer);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * <p>The default implementation returns immediately if the handler is already\n     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n     * and dispatches the reporting task based on the runtime type of {@code e}\n     * according to the following table.</p>\n     *\n     * <ul>\n     * <li>{@link NoViableAltException}: Dispatches the call to\n     * {@link //reportNoViableAlternative}</li>\n     * <li>{@link InputMismatchException}: Dispatches the call to\n     * {@link //reportInputMismatch}</li>\n     * <li>{@link FailedPredicateException}: Dispatches the call to\n     * {@link //reportFailedPredicate}</li>\n     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n     * the exception</li>\n     * </ul>\n     */\n    reportError(recognizer, e) {\n        // if we've already reported an error and have not matched a token\n        // yet successfully, don't report any errors.\n        if(this.inErrorRecoveryMode(recognizer)) {\n            return; // don't report spurious errors\n        }\n        this.beginErrorCondition(recognizer);\n        if ( e instanceof _NoViableAltException_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] ) {\n            this.reportNoViableAlternative(recognizer, e);\n        } else if ( e instanceof _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ) {\n            this.reportInputMismatch(recognizer, e);\n        } else if ( e instanceof _FailedPredicateException_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] ) {\n            this.reportFailedPredicate(recognizer, e);\n        } else {\n            console.log(\"unknown recognition error type: \" + e.constructor.name);\n            console.log(e.stack);\n            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n        }\n    }\n\n    /**\n     *\n     * {@inheritDoc}\n     *\n     * <p>The default implementation resynchronizes the parser by consuming tokens\n     * until we find one in the resynchronization set--loosely the set of tokens\n     * that can follow the current rule.</p>\n     *\n     */\n    recover(recognizer, e) {\n        if (this.lastErrorIndex===recognizer.getInputStream().index &&\n            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {\n            // uh oh, another error at same token index and previously-visited\n            // state in ATN; must be a case where LT(1) is in the recovery\n            // token set so nothing got consumed. Consume a single token\n            // at least to prevent an infinite loop; this is a failsafe.\n            recognizer.consume();\n        }\n        this.lastErrorIndex = recognizer._input.index;\n        if (this.lastErrorStates === null) {\n            this.lastErrorStates = [];\n        }\n        this.lastErrorStates.push(recognizer.state);\n        const followSet = this.getErrorRecoverySet(recognizer)\n        this.consumeUntil(recognizer, followSet);\n    }\n\n    /**\n     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n     * that the current lookahead symbol is consistent with what were expecting\n     * at this point in the ATN. You can call this anytime but ANTLR only\n     * generates code to check before subrules/loops and each iteration.\n     *\n     * <p>Implements Jim Idle's magic sync mechanism in closures and optional\n     * subrules. E.g.,</p>\n     *\n     * <pre>\n     * a : sync ( stuff sync )* ;\n     * sync : {consume to what can follow sync} ;\n     * </pre>\n     *\n     * At the start of a sub rule upon error, {@link //sync} performs single\n     * token deletion, if possible. If it can't do that, it bails on the current\n     * rule and uses the default error recovery, which consumes until the\n     * resynchronization set of the current rule.\n     *\n     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n     * with an empty alternative), then the expected set includes what follows\n     * the subrule.</p>\n     *\n     * <p>During loop iteration, it consumes until it sees a token that can start a\n     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n     * stay in the loop as long as possible.</p>\n     *\n     * <p><strong>ORIGINS</strong></p>\n     *\n     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n     * A single mismatch token or missing token would force the parser to bail\n     * out of the entire rules surrounding the loop. So, for rule</p>\n     *\n     * <pre>\n     * classDef : 'class' ID '{' member* '}'\n     * </pre>\n     *\n     * input with an extra token between members would force the parser to\n     * consume until it found the next class definition rather than the next\n     * member definition of the current class.\n     *\n     * <p>This functionality cost a little bit of effort because the parser has to\n     * compare token set at the start of the loop and at each iteration. If for\n     * some reason speed is suffering for you, you can turn off this\n     * functionality by simply overriding this method as a blank { }.</p>\n     *\n     */\n    sync(recognizer) {\n        // If already recovering, don't try to sync\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        const s = recognizer._interp.atn.states[recognizer.state];\n        const la = recognizer.getTokenStream().LA(1);\n        // try cheaper subset first; might get lucky. seems to shave a wee bit off\n        const nextTokens = recognizer.atn.nextTokens(s);\n        if(nextTokens.contains(la)) {\n            this.nextTokensContext = null;\n            this.nextTokenState = _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].INVALID_STATE_NUMBER;\n            return;\n        } else if (nextTokens.contains(_Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].EPSILON)) {\n            if(this.nextTokensContext === null) {\n                // It's possible the next token won't match information tracked\n                // by sync is restricted for performance.\n                this.nextTokensContext = recognizer._ctx;\n                this.nextTokensState = recognizer._stateNumber;\n            }\n            return;\n        }\n        switch (s.stateType) {\n            case _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].BLOCK_START:\n            case _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].STAR_BLOCK_START:\n            case _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PLUS_BLOCK_START:\n            case _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].STAR_LOOP_ENTRY:\n                // report error and recover if possible\n                if( this.singleTokenDeletion(recognizer) !== null) {\n                    return;\n                } else {\n                    throw new _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](recognizer);\n                }\n            case _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].PLUS_LOOP_BACK:\n            case _state_ATNState_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"].STAR_LOOP_BACK:\n                {\n                this.reportUnwantedToken(recognizer);\n                const expecting = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]();\n                expecting.addSet(recognizer.getExpectedTokens());\n                const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n                this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n                }\n                break;\n            default:\n            // do nothing if we can't identify the exact kind of ATN state\n        }\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link NoViableAltException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportNoViableAlternative(recognizer, e) {\n        const tokens = recognizer.getTokenStream()\n        let input\n        if(tokens !== null) {\n            if (e.startToken.type===_Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].EOF) {\n                input = \"<EOF>\";\n            } else {\n                input = tokens.getText(new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](e.startToken.tokenIndex, e.offendingToken.tokenIndex));\n            }\n        } else {\n            input = \"<unknown input>\";\n        }\n        const msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is an\n     * {@link InputMismatchException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportInputMismatch(recognizer, e) {\n        const msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) +\n            \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This is called by {@link //reportError} when the exception is a\n     * {@link FailedPredicateException}.\n     *\n     * @see //reportError\n     *\n     * @param recognizer the parser instance\n     * @param e the recognition exception\n     */\n    reportFailedPredicate(recognizer, e) {\n        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]\n        const msg = \"rule \" + ruleName + \" \" + e.message\n        recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the removal\n     * of a token from the input stream. At the time this method is called, the\n     * erroneous symbol is current {@code LT(1)} symbol and has not yet been\n     * removed from the input stream. When this method returns,\n     * {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenDeletion} identifies\n     * single-token deletion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     *\n     */\n    reportUnwantedToken(recognizer) {\n        if (this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const tokenName = this.getTokenErrorDisplay(t)\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"extraneous input \" + tokenName + \" expecting \" +\n            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * This method is called to report a syntax error which requires the\n     * insertion of a missing token into the input stream. At the time this\n     * method is called, the missing token has not yet been inserted. When this\n     * method returns, {@code recognizer} is in error recovery mode.\n     *\n     * <p>This method is called when {@link //singleTokenInsertion} identifies\n     * single-token insertion as a viable recovery strategy for a mismatched\n     * input error.</p>\n     *\n     * <p>The default implementation simply returns if the handler is already in\n     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n     * enter error recovery mode, followed by calling\n     * {@link Parser//notifyErrorListeners}.</p>\n     *\n     * @param recognizer the parser instance\n     */\n    reportMissingToken(recognizer) {\n        if ( this.inErrorRecoveryMode(recognizer)) {\n            return;\n        }\n        this.beginErrorCondition(recognizer);\n        const t = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +\n            \" at \" + this.getTokenErrorDisplay(t)\n        recognizer.notifyErrorListeners(msg, t, null);\n    }\n\n    /**\n     * <p>The default implementation attempts to recover from the mismatched input\n     * by using single token insertion and deletion as described below. If the\n     * recovery attempt fails, this method throws an\n     * {@link InputMismatchException}.</p>\n     *\n     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n     *\n     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n     * right token, however, then assume {@code LA(1)} is some extra spurious\n     * token and delete it. Then consume and return the next token (which was\n     * the {@code LA(2)} token) as the successful result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n        * //singleTokenDeletion}.</p>\n     *\n     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n     *\n     * <p>If current token (at {@code LA(1)}) is consistent with what could come\n     * after the expected {@code LA(1)} token, then assume the token is missing\n     * and use the parser's {@link TokenFactory} to create it on the fly. The\n     * \"insertion\" is performed by returning the created token as the successful\n     * result of the match operation.</p>\n     *\n     * <p>This recovery strategy is implemented by {@link\n        * //singleTokenInsertion}.</p>\n     *\n     * <p><strong>EXAMPLE</strong></p>\n     *\n     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n     * the parser returns from the nested call to {@code expr}, it will have\n     * call chain:</p>\n     *\n     * <pre>\n     * stat &rarr; expr &rarr; atom\n     * </pre>\n     *\n     * and it will be trying to match the {@code ')'} at this point in the\n     * derivation:\n     *\n     * <pre>\n     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n     * ^\n     * </pre>\n     *\n     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n     * is in the set of tokens that can follow the {@code ')'} token reference\n     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n     */\n    recoverInline(recognizer) {\n        // SINGLE TOKEN DELETION\n        const matchedSymbol = this.singleTokenDeletion(recognizer)\n        if (matchedSymbol !== null) {\n            // we have deleted the extra token.\n            // now, move past ttype token as if all were ok\n            recognizer.consume();\n            return matchedSymbol;\n        }\n        // SINGLE TOKEN INSERTION\n        if (this.singleTokenInsertion(recognizer)) {\n            return this.getMissingSymbol(recognizer);\n        }\n        // even that didn't work; must throw the exception\n        throw new _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](recognizer);\n    }\n\n    /**\n     * This method implements the single-token insertion inline error recovery\n     * strategy. It is called by {@link //recoverInline} if the single-token\n     * deletion strategy fails to recover from the mismatched input. If this\n     * method returns {@code true}, {@code recognizer} will be in error recovery\n     * mode.\n     *\n     * <p>This method determines whether or not single-token insertion is viable by\n     * checking if the {@code LA(1)} input symbol could be successfully matched\n     * if it were instead the {@code LA(2)} symbol. If this method returns\n     * {@code true}, the caller is responsible for creating and inserting a\n     * token with the correct type to produce this behavior.</p>\n     *\n     * @param recognizer the parser instance\n     * @return {@code true} if single-token insertion is a viable recovery\n     * strategy for the current mismatched input, otherwise {@code false}\n     */\n    singleTokenInsertion(recognizer) {\n        const currentSymbolType = recognizer.getTokenStream().LA(1)\n        // if current token is consistent with what could come after current\n        // ATN state, then we know we're missing a token; error recovery\n        // is free to conjure up and insert the missing token\n        const atn = recognizer._interp.atn\n        const currentState = atn.states[recognizer.state]\n        const next = currentState.transitions[0].target\n        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)\n        if (expectingAtLL2.contains(currentSymbolType) ){\n            this.reportMissingToken(recognizer);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * This method implements the single-token deletion inline error recovery\n     * strategy. It is called by {@link //recoverInline} to attempt to recover\n     * from mismatched input. If this method returns null, the parser and error\n     * handler state will not have changed. If this method returns non-null,\n     * {@code recognizer} will <em>not</em> be in error recovery mode since the\n     * returned token was a successful match.\n     *\n     * <p>If the single-token deletion is successful, this method calls\n     * {@link //reportUnwantedToken} to report the error, followed by\n     * {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n     * before returning {@link //reportMatch} is called to signal a successful\n     * match.</p>\n     *\n     * @param recognizer the parser instance\n     * @return the successfully matched {@link Token} instance if single-token\n     * deletion successfully recovers from the mismatched input, otherwise\n     * {@code null}\n     */\n    singleTokenDeletion(recognizer) {\n        const nextTokenType = recognizer.getTokenStream().LA(2)\n        const expecting = this.getExpectedTokens(recognizer)\n        if (expecting.contains(nextTokenType)) {\n            this.reportUnwantedToken(recognizer);\n            // print(\"recoverFromMismatchedToken deleting \" \\\n            // + str(recognizer.getTokenStream().LT(1)) \\\n            // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n            // + \" is what we want\", file=sys.stderr)\n            recognizer.consume(); // simply delete extra token\n            // we want to return the token we're actually matching\n            const matchedSymbol = recognizer.getCurrentToken()\n            this.reportMatch(recognizer); // we know current token is correct\n            return matchedSymbol;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Conjure up a missing token during error recovery.\n     *\n     * The recognizer attempts to recover from single missing\n     * symbols. But, actions might refer to that missing symbol.\n     * For example, x=ID {f($x);}. The action clearly assumes\n     * that there has been an identifier matched previously and that\n     * $x points at that token. If that token is missing, but\n     * the next token in the stream is what we want we assume that\n     * this token is missing and we keep going. Because we\n     * have to return some token to replace the missing token,\n     * we have to conjure one up. This method gives the user control\n     * over the tokens returned for missing tokens. Mostly,\n     * you will want to create something special for identifier\n     * tokens. For literals such as '{' and ',', the default\n     * action in the parser or tree parser works. It simply creates\n     * a CommonToken of the appropriate type. The text will be the token.\n     * If you change what tokens must be created by the lexer,\n     * override this method to create the appropriate tokens.\n     *\n     */\n    getMissingSymbol(recognizer) {\n        const currentSymbol = recognizer.getCurrentToken()\n        const expecting = this.getExpectedTokens(recognizer)\n        const expectedTokenType = expecting.first() // get any element\n        let tokenText\n        if (expectedTokenType===_Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].EOF) {\n            tokenText = \"<missing EOF>\";\n        } else {\n            tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n        }\n        let current = currentSymbol\n        const lookback = recognizer.getTokenStream().LT(-1)\n        if (current.type===_Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].EOF && lookback !== null) {\n            current = lookback;\n        }\n        return recognizer.getTokenFactory().create(current.source,\n            expectedTokenType, tokenText, _Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].DEFAULT_CHANNEL,\n            -1, -1, current.line, current.column);\n    }\n\n    getExpectedTokens(recognizer) {\n        return recognizer.getExpectedTokens();\n    }\n\n    /**\n     * How should a token be displayed in an error message? The default\n     * is to display just the text, but during development you might\n     * want to have a lot of information spit out. Override in that case\n     * to use t.toString() (which, for CommonToken, dumps everything about\n     * the token). This is better than forcing you to override a method in\n     * your token objects because you don't have to go modify your lexer\n     * so that it creates a new Java type.\n     */\n    getTokenErrorDisplay(t) {\n        if (t === null) {\n            return \"<no token>\";\n        }\n        let s = t.text\n        if (s === null) {\n            if (t.type===_Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].EOF) {\n                s = \"<EOF>\";\n            } else {\n                s = \"<\" + t.type + \">\";\n            }\n        }\n        return this.escapeWSAndQuote(s);\n    }\n\n    escapeWSAndQuote(s) {\n        s = s.replace(/\\n/g,\"\\\\n\");\n        s = s.replace(/\\r/g,\"\\\\r\");\n        s = s.replace(/\\t/g,\"\\\\t\");\n        return \"'\" + s + \"'\";\n    }\n\n    /**\n     * Compute the error recovery set for the current rule. During\n     * rule invocation, the parser pushes the set of tokens that can\n     * follow that rule reference on the stack; this amounts to\n     * computing FIRST of what follows the rule reference in the\n     * enclosing rule. See LinearApproximator.FIRST().\n     * This local follow set only includes tokens\n     * from within the rule; i.e., the FIRST computation done by\n     * ANTLR stops at the end of a rule.\n     *\n     * EXAMPLE\n     *\n     * When you find a \"no viable alt exception\", the input is not\n     * consistent with any of the alternatives for rule r. The best\n     * thing to do is to consume tokens until you see something that\n     * can legally follow a call to r//or* any rule that called r.\n     * You don't want the exact set of viable next tokens because the\n     * input might just be missing a token--you might consume the\n     * rest of the input looking for one of the missing tokens.\n     *\n     * Consider grammar:\n     *\n     * a : '[' b ']'\n     * | '(' b ')'\n     * ;\n     * b : c '^' INT ;\n     * c : ID\n     * | INT\n     * ;\n     *\n     * At each rule invocation, the set of tokens that could follow\n     * that rule is pushed on a stack. Here are the various\n     * context-sensitive follow sets:\n     *\n     * FOLLOW(b1_in_a) = FIRST(']') = ']'\n     * FOLLOW(b2_in_a) = FIRST(')') = ')'\n     * FOLLOW(c_in_b) = FIRST('^') = '^'\n     *\n     * Upon erroneous input \"[]\", the call chain is\n     *\n     * a -> b -> c\n     *\n     * and, hence, the follow context stack is:\n     *\n     * depth follow set start of rule execution\n     * 0 <EOF> a (from main())\n     * 1 ']' b\n     * 2 '^' c\n     *\n     * Notice that ')' is not included, because b would have to have\n     * been called from a different context in rule a for ')' to be\n     * included.\n     *\n     * For error recovery, we cannot consider FOLLOW(c)\n     * (context-sensitive or otherwise). We need the combined set of\n     * all context-sensitive FOLLOW sets--the set of all tokens that\n     * could follow any reference in the call chain. We need to\n     * resync to one of those tokens. Note that FOLLOW(c)='^' and if\n     * we resync'd to that token, we'd consume until EOF. We need to\n     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n     * In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n     * not consume anything. After printing an error, rule c would\n     * return normally. Rule b would not find the required '^' though.\n     * At this point, it gets a mismatched token error and throws an\n     * exception (since LA(1) is not in the viable following token\n     * set). The rule exception handler tries to recover, but finds\n     * the same recovery set and doesn't consume anything. Rule b\n     * exits normally returning to rule a. Now it finds the ']' (and\n     * with the successful match exits errorRecovery mode).\n     *\n     * So, you can see that the parser walks up the call chain looking\n     * for the token that was a member of the recovery set.\n     *\n     * Errors are not generated in errorRecovery mode.\n     *\n     * ANTLR's error recovery mechanism is based upon original ideas:\n     *\n     * \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n     *\n     * and\n     *\n     * \"A note on error recovery in recursive descent parsers\":\n     * http://portal.acm.org/citation.cfm?id=947902.947905\n     *\n     * Later, Josef Grosch had some good ideas:\n     *\n     * \"Efficient and Comfortable Error Recovery in Recursive Descent\n     * Parsers\":\n     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n     *\n     * Like Grosch I implement context-sensitive FOLLOW sets that are combined\n     * at run-time upon error to avoid overhead during parsing.\n     */\n    getErrorRecoverySet(recognizer) {\n        const atn = recognizer._interp.atn\n        let ctx = recognizer._ctx\n        const recoverSet = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"]()\n        while (ctx !== null && ctx.invokingState>=0) {\n            // compute what follows who invoked us\n            const invokingState = atn.states[ctx.invokingState]\n            const rt = invokingState.transitions[0]\n            const follow = atn.nextTokens(rt.followState)\n            recoverSet.addSet(follow);\n            ctx = ctx.parentCtx;\n        }\n        recoverSet.removeOne(_Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].EPSILON);\n        return recoverSet;\n    }\n\n// Consume tokens until one matches the given token set.//\n    consumeUntil(recognizer, set) {\n        let ttype = recognizer.getTokenStream().LA(1)\n        while( ttype !== _Token_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"].EOF && !set.contains(ttype)) {\n            recognizer.consume();\n            ttype = recognizer.getTokenStream().LA(1);\n        }\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DiagnosticErrorListener)\n/* harmony export */ });\n/* harmony import */ var _ErrorListener_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorListener.js */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../misc/BitSet.js */ \"./node_modules/antlr4/src/antlr4/misc/BitSet.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n/**\n * This implementation of {@link ANTLRErrorListener} can be used to identify\n *  certain potential correctness and performance problems in grammars. \"Reports\"\n *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n *  message.\n *\n *  <ul>\n *  <li><b>Ambiguities</b>: These are cases where more than one path through the\n *  grammar can match the input.</li>\n *  <li><b>Weak context sensitivity</b>: These are cases where full-context\n *  prediction resolved an SLL conflict to a unique alternative which equaled the\n *  minimum alternative of the SLL conflict.</li>\n *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n *  full-context prediction resolved an SLL conflict to a unique alternative,\n *  <em>and</em> the minimum alternative of the SLL conflict was found to not be\n *  a truly viable alternative. Two-stage parsing cannot be used for inputs where\n *  this situation occurs.</li>\n *  </ul>\n */\nclass DiagnosticErrorListener extends _ErrorListener_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\tconstructor(exactOnly) {\n\t\tsuper();\n\t\texactOnly = exactOnly || true;\n\t\t// whether all ambiguities or only exact ambiguities are reported.\n\t\tthis.exactOnly = exactOnly;\n\t}\n\n\treportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n\t\tif (this.exactOnly && !exact) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg = \"reportAmbiguity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\": ambigAlts=\" +\n\t\t\tthis.getConflictingAlts(ambigAlts, configs) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\t\tconst msg = \"reportAttemptingFullContext d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\treportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\t\tconst msg = \"reportContextSensitivity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](startIndex, stopIndex)) + \"'\"\n\t\trecognizer.notifyErrorListeners(msg);\n\t}\n\n\tgetDecisionDescription(recognizer, dfa) {\n\t\tconst decision = dfa.decision\n\t\tconst ruleIndex = dfa.atnStartState.ruleIndex\n\n\t\tconst ruleNames = recognizer.ruleNames\n\t\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\tconst ruleName = ruleNames[ruleIndex] || null\n\t\tif (ruleName === null || ruleName.length === 0) {\n\t\t\treturn \"\" + decision;\n\t\t}\n\t\treturn `${decision} (${ruleName})`;\n\t}\n\n\t/**\n\t * Computes the set of conflicting or ambiguous alternatives from a\n\t * configuration set, if that information was not already provided by the\n\t * parser.\n\t *\n\t * @param reportedAlts The set of conflicting or ambiguous alternatives, as\n\t * reported by the parser.\n\t * @param configs The conflicting or ambiguous configuration set.\n\t * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n\t * returns the set of alternatives represented in {@code configs}.\n     */\n\tgetConflictingAlts(reportedAlts, configs) {\n\t\tif (reportedAlts !== null) {\n\t\t\treturn reportedAlts;\n\t\t}\n\t\tconst result = new _misc_BitSet_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]()\n\t\tfor (let i = 0; i < configs.items.length; i++) {\n\t\t\tresult.add(configs.items[i].alt);\n\t\t}\n\t\treturn `{${result.values().join(\", \")}}`;\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorListener.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ErrorListener)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * Provides an empty default implementation of {@link ANTLRErrorListener}. The\n * default implementation of each method does nothing, but can be overridden as\n * necessary.\n */\nclass ErrorListener {\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/ErrorListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ErrorStrategy)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nclass ErrorStrategy {\n\n    reset(recognizer) {\n    }\n\n    recoverInline(recognizer) {\n    }\n\n    recover(recognizer, e) {\n    }\n\n    sync(recognizer) {\n    }\n\n    inErrorRecoveryMode(recognizer) {\n    }\n\n    reportError(recognizer) {\n    }\n}\n\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/FailedPredicateException.js":
/*!**************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/FailedPredicateException.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ FailedPredicateException)\n/* harmony export */ });\n/* harmony import */ var _transition_PredicateTransition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../transition/PredicateTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/PredicateTransition.js\");\n/* harmony import */ var _RecognitionException_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RecognitionException.js */ \"./node_modules/antlr4/src/antlr4/error/RecognitionException.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * A semantic predicate failed during validation. Validation of predicates\n * occurs when normally parsing the alternative just like matching a token.\n * Disambiguating predicate evaluation occurs when we test a predicate during\n * prediction.\n */\nclass FailedPredicateException extends _RecognitionException_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(recognizer, predicate, message) {\n        super({\n            message: formatMessage(predicate, message || null), recognizer: recognizer,\n            input: recognizer.getInputStream(), ctx: recognizer._ctx\n        });\n        const s = recognizer._interp.atn.states[recognizer.state]\n        const trans = s.transitions[0]\n        if (trans instanceof _transition_PredicateTransition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n            this.ruleIndex = trans.ruleIndex;\n            this.predicateIndex = trans.predIndex;\n        } else {\n            this.ruleIndex = 0;\n            this.predicateIndex = 0;\n        }\n        this.predicate = predicate;\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\n\nfunction formatMessage(predicate, message) {\n    if (message !==null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/FailedPredicateException.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/InputMismatchException.js":
/*!************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/InputMismatchException.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InputMismatchException)\n/* harmony export */ });\n/* harmony import */ var _RecognitionException_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RecognitionException.js */ \"./node_modules/antlr4/src/antlr4/error/RecognitionException.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/**\n * This signifies any kind of mismatched input exceptions such as\n * when the current input does not match the expected token.\n */\nclass InputMismatchException extends _RecognitionException_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(recognizer) {\n        super({message: \"\", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});\n        this.offendingToken = recognizer.getCurrentToken();\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/InputMismatchException.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js":
/*!***************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LexerNoViableAltException)\n/* harmony export */ });\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _RecognitionException_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RecognitionException.js */ \"./node_modules/antlr4/src/antlr4/error/RecognitionException.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass LexerNoViableAltException extends _RecognitionException_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(lexer, input, startIndex, deadEndConfigs) {\n        super({message: \"\", recognizer: lexer, input: input, ctx: null});\n        this.startIndex = startIndex;\n        this.deadEndConfigs = deadEndConfigs;\n    }\n\n    toString() {\n        let symbol = \"\";\n        if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n            symbol = this.input.getText(new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.startIndex,this.startIndex));\n        }\n        return \"LexerNoViableAltException\" + symbol;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/NoViableAltException.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/NoViableAltException.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NoViableAltException)\n/* harmony export */ });\n/* harmony import */ var _RecognitionException_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RecognitionException.js */ \"./node_modules/antlr4/src/antlr4/error/RecognitionException.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/**\n * Indicates that the parser could not decide which of two or more paths\n * to take based upon the remaining input. It tracks the starting token\n * of the offending input and also knows where the parser was\n * in the various paths when the error. Reported by reportNoViableAlternative()\n */\n\nclass NoViableAltException extends _RecognitionException_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n        ctx = ctx || recognizer._ctx;\n        offendingToken = offendingToken || recognizer.getCurrentToken();\n        startToken = startToken || recognizer.getCurrentToken();\n        input = input || recognizer.getInputStream();\n        super({message: \"\", recognizer: recognizer, input: input, ctx: ctx});\n        // Which configurations did we try at input.index() that couldn't match\n        // input.LT(1)?//\n        this.deadEndConfigs = deadEndConfigs;\n        // The token object at the start index; the input stream might\n        // not be buffering tokens so get a reference to it. (At the\n        // time the error occurred, of course the stream needs to keep a\n        // buffer all of the tokens but later we might not have access to those.)\n        this.startToken = startToken;\n        this.offendingToken = offendingToken;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/NoViableAltException.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ParseCancellationException.js":
/*!****************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ParseCancellationException.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ParseCancellationException)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nclass ParseCancellationException extends Error {\n    constructor() {\n        super()\n        Error.captureStackTrace(this, ParseCancellationException);\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/ParseCancellationException.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ProxyErrorListener.js":
/*!********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ProxyErrorListener.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ProxyErrorListener)\n/* harmony export */ });\n/* harmony import */ var _ErrorListener_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ErrorListener.js */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass ProxyErrorListener extends _ErrorListener_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(delegates) {\n        super();\n        if (delegates===null) {\n            throw \"delegates\";\n        }\n        this.delegates = delegates;\n        return this;\n    }\n\n    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {\n        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));\n    }\n\n    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));\n    }\n\n    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));\n    }\n\n    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/ProxyErrorListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/RecognitionException.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/RecognitionException.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RecognitionException)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n *  3 kinds of errors: prediction errors, failed predicate errors, and\n *  mismatched input errors. In each case, the parser knows where it is\n *  in the input, where it is in the ATN, the rule invocation stack,\n *  and what kind of problem occurred.\n */\n\nclass RecognitionException extends Error {\n    constructor(params) {\n        super(params.message);\n        if (Error.captureStackTrace)\n            Error.captureStackTrace(this, RecognitionException);\n        this.message = params.message;\n        this.recognizer = params.recognizer;\n        this.input = params.input;\n        this.ctx = params.ctx;\n        /**\n         * The current {@link Token} when an error occurred. Since not all streams\n         * support accessing symbols by index, we have to track the {@link Token}\n         * instance itself\n        */\n        this.offendingToken = null;\n        /**\n         * Get the ATN state number the parser was in at the time the error\n         * occurred. For {@link NoViableAltException} and\n         * {@link LexerNoViableAltException} exceptions, this is the\n         * {@link DecisionState} number. For others, it is the state whose outgoing\n         * edge we couldn't match.\n         */\n        this.offendingState = -1;\n        if (this.recognizer!==null) {\n            this.offendingState = this.recognizer.state;\n        }\n    }\n\n    /**\n     * Gets the set of input symbols which could potentially follow the\n     * previously matched symbol at the time this exception was thrown.\n     *\n     * <p>If the set of expected tokens is not known and could not be computed,\n     * this method returns {@code null}.</p>\n     *\n     * @return The set of token types that could potentially follow the current\n     * state in the ATN, or {@code null} if the information is not available.\n     */\n    getExpectedTokens() {\n        if (this.recognizer!==null) {\n            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n        } else {\n            return null;\n        }\n    }\n\n    // <p>If the state number is not known, this method returns -1.</p>\n    toString() {\n        return this.message;\n    }\n}\n\n\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/RecognitionException.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _RecognitionException_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RecognitionException.js */ \"./node_modules/antlr4/src/antlr4/error/RecognitionException.js\");\n/* harmony import */ var _NoViableAltException_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./NoViableAltException.js */ \"./node_modules/antlr4/src/antlr4/error/NoViableAltException.js\");\n/* harmony import */ var _LexerNoViableAltException_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./LexerNoViableAltException.js */ \"./node_modules/antlr4/src/antlr4/error/LexerNoViableAltException.js\");\n/* harmony import */ var _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./InputMismatchException.js */ \"./node_modules/antlr4/src/antlr4/error/InputMismatchException.js\");\n/* harmony import */ var _FailedPredicateException_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./FailedPredicateException.js */ \"./node_modules/antlr4/src/antlr4/error/FailedPredicateException.js\");\n/* harmony import */ var _DiagnosticErrorListener_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./DiagnosticErrorListener.js */ \"./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js\");\n/* harmony import */ var _BailErrorStrategy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BailErrorStrategy.js */ \"./node_modules/antlr4/src/antlr4/error/BailErrorStrategy.js\");\n/* harmony import */ var _DefaultErrorStrategy_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./DefaultErrorStrategy.js */ \"./node_modules/antlr4/src/antlr4/error/DefaultErrorStrategy.js\");\n/* harmony import */ var _ErrorListener_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ErrorListener.js */ \"./node_modules/antlr4/src/antlr4/error/ErrorListener.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    RecognitionException: _RecognitionException_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], NoViableAltException: _NoViableAltException_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], LexerNoViableAltException: _LexerNoViableAltException_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], InputMismatchException: _InputMismatchException_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"], FailedPredicateException: _FailedPredicateException_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    DiagnosticErrorListener: _DiagnosticErrorListener_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"], BailErrorStrategy: _BailErrorStrategy_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"], DefaultErrorStrategy: _DefaultErrorStrategy_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"], ErrorListener: _ErrorListener_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"]\n});\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/error/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/index.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/index.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_stringHashCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/stringHashCode.js */ \"./node_modules/antlr4/src/antlr4/utils/stringHashCode.js\");\n/* harmony import */ var _polyfills_codepointat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polyfills/codepointat.js */ \"./node_modules/antlr4/src/antlr4/polyfills/codepointat.js\");\n/* harmony import */ var _polyfills_fromcodepoint_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfills/fromcodepoint.js */ \"./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js\");\n/* harmony import */ var _atn_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./atn/index.js */ \"./node_modules/antlr4/src/antlr4/atn/index.js\");\n/* harmony import */ var _dfa_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./dfa/index.js */ \"./node_modules/antlr4/src/antlr4/dfa/index.js\");\n/* harmony import */ var _tree_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tree/index.js */ \"./node_modules/antlr4/src/antlr4/tree/index.js\");\n/* harmony import */ var _error_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./error/index.js */ \"./node_modules/antlr4/src/antlr4/error/index.js\");\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _CommonToken_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./CommonToken.js */ \"./node_modules/antlr4/src/antlr4/CommonToken.js\");\n/* harmony import */ var _CharStreams_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./CharStreams.js */ \"./node_modules/antlr4/src/antlr4/CharStreams.js\");\n/* harmony import */ var _InputStream_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./InputStream.js */ \"./node_modules/antlr4/src/antlr4/InputStream.js\");\n/* harmony import */ var _FileStream_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./FileStream.js */ \"./node_modules/antlr4/src/antlr4/FileStream.js\");\n/* harmony import */ var _CommonTokenStream_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./CommonTokenStream.js */ \"./node_modules/antlr4/src/antlr4/CommonTokenStream.js\");\n/* harmony import */ var _Lexer_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Lexer.js */ \"./node_modules/antlr4/src/antlr4/Lexer.js\");\n/* harmony import */ var _Parser_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Parser.js */ \"./node_modules/antlr4/src/antlr4/Parser.js\");\n/* harmony import */ var _atn_PredictionContextCache_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./atn/PredictionContextCache.js */ \"./node_modules/antlr4/src/antlr4/atn/PredictionContextCache.js\");\n/* harmony import */ var _context_ParserRuleContext_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./context/ParserRuleContext.js */ \"./node_modules/antlr4/src/antlr4/context/ParserRuleContext.js\");\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _atn_LL1Analyzer_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./atn/LL1Analyzer.js */ \"./node_modules/antlr4/src/antlr4/atn/LL1Analyzer.js\");\n/* harmony import */ var _utils_index_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./utils/index.js */ \"./node_modules/antlr4/src/antlr4/utils/index.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst antlr4 = {\n    atn: _atn_index_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"], dfa: _dfa_index_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"], tree: _tree_index_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"], error: _error_index_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"], Token: _Token_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"], CommonToken: _CommonToken_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"], CharStreams: _CharStreams_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"], InputStream: _InputStream_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"], FileStream: _FileStream_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"], CommonTokenStream: _CommonTokenStream_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"], Lexer: _Lexer_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"], Parser: _Parser_js__WEBPACK_IMPORTED_MODULE_14__[\"default\"],\n    PredictionContextCache: _atn_PredictionContextCache_js__WEBPACK_IMPORTED_MODULE_15__[\"default\"], ParserRuleContext: _context_ParserRuleContext_js__WEBPACK_IMPORTED_MODULE_16__[\"default\"], Interval: _misc_Interval_js__WEBPACK_IMPORTED_MODULE_17__[\"default\"], IntervalSet: _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_18__[\"default\"], LL1Analyzer: _atn_LL1Analyzer_js__WEBPACK_IMPORTED_MODULE_19__[\"default\"], Utils: _utils_index_js__WEBPACK_IMPORTED_MODULE_20__[\"default\"]\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (antlr4);\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/misc/AltDict.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/misc/AltDict.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AltDict)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nclass AltDict {\n\n    constructor() {\n        this.data = {};\n    }\n\n    get(key) {\n        return this.data[\"k-\" + key] || null;\n    }\n\n    set(key, value) {\n        this.data[\"k-\" + key] = value;\n    }\n\n    values() {\n        return Object.keys(this.data).filter(key => key.startsWith(\"k-\")).map(key => this.data[key], this);\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/misc/AltDict.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/misc/BitSet.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/misc/BitSet.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BitSet)\n/* harmony export */ });\n/* harmony import */ var _HashCode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./HashCode.js */ \"./node_modules/antlr4/src/antlr4/misc/HashCode.js\");\n/* harmony import */ var _utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/equalArrays.js */ \"./node_modules/antlr4/src/antlr4/utils/equalArrays.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass BitSet {\n\n    constructor() {\n        this.data = [];\n    }\n\n    add(value) {\n        this.data[value] = true;\n    }\n\n    or(set) {\n        Object.keys(set.data).map(alt => this.add(alt), this);\n    }\n\n    remove(value) {\n        delete this.data[value];\n    }\n\n    has(value) {\n        return this.data[value] === true;\n    }\n\n    values() {\n        return Object.keys(this.data);\n    }\n\n    minValue() {\n        return Math.min.apply(null, this.values());\n    }\n\n    hashCode() {\n        return _HashCode_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].hashStuff(this.values());\n    }\n\n    equals(other) {\n        return other instanceof BitSet && (0,_utils_equalArrays_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(this.data, other.data);\n    }\n\n    toString() {\n        return \"{\" + this.values().join(\", \") + \"}\";\n    }\n\n    get length(){\n        return this.values().length;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/misc/BitSet.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/misc/HashCode.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/misc/HashCode.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HashCode)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nclass HashCode {\n\n    constructor() {\n        this.count = 0;\n        this.hash = 0;\n    }\n\n    update() {\n        for(let i=0;i<arguments.length;i++) {\n            const value = arguments[i];\n            if (value == null)\n                continue;\n            if(Array.isArray(value))\n                this.update.apply(this, value);\n            else {\n                let k = 0;\n                switch (typeof(value)) {\n                    case 'undefined':\n                    case 'function':\n                        continue;\n                    case 'number':\n                    case 'boolean':\n                        k = value;\n                        break;\n                    case 'string':\n                        k = value.hashCode();\n                        break;\n                    default:\n                        if(value.updateHashCode)\n                            value.updateHashCode(this);\n                        else\n                            console.log(\"No updateHashCode for \" + value.toString())\n                        continue;\n                }\n                k = k * 0xCC9E2D51;\n                k = (k << 15) | (k >>> (32 - 15));\n                k = k * 0x1B873593;\n                this.count = this.count + 1;\n                let hash = this.hash ^ k;\n                hash = (hash << 13) | (hash >>> (32 - 13));\n                hash = hash * 5 + 0xE6546B64;\n                this.hash = hash;\n            }\n        }\n    }\n\n    finish() {\n        let hash = this.hash ^ (this.count * 4);\n        hash = hash ^ (hash >>> 16);\n        hash = hash * 0x85EBCA6B;\n        hash = hash ^ (hash >>> 13);\n        hash = hash * 0xC2B2AE35;\n        hash = hash ^ (hash >>> 16);\n        return hash;\n    }\n\n    static hashStuff() {\n        const hash = new HashCode();\n        hash.update.apply(hash, arguments);\n        return hash.finish();\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/misc/HashCode.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/misc/HashMap.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/misc/HashMap.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HashMap)\n/* harmony export */ });\n/* harmony import */ var _utils_standardEqualsFunction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/standardEqualsFunction.js */ \"./node_modules/antlr4/src/antlr4/utils/standardEqualsFunction.js\");\n/* harmony import */ var _utils_standardHashCodeFunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/standardHashCodeFunction.js */ \"./node_modules/antlr4/src/antlr4/utils/standardHashCodeFunction.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nconst HASH_KEY_PREFIX = \"h-\";\n\nclass HashMap {\n\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || _utils_standardHashCodeFunction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        this.equalsFunction = equalsFunction || _utils_standardEqualsFunction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n\n    set(key, value) {\n        const hashKey = HASH_KEY_PREFIX + this.hashFunction(key);\n        if (hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key)) {\n                    const oldValue = entry.value;\n                    entry.value = value;\n                    return oldValue;\n                }\n            }\n            entries.push({key:key, value:value});\n            return value;\n        } else {\n            this.data[hashKey] = [{key:key, value:value}];\n            return value;\n        }\n    }\n\n    containsKey(key) {\n        const hashKey = HASH_KEY_PREFIX + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return true;\n            }\n        }\n        return false;\n    }\n\n    get(key) {\n        const hashKey = HASH_KEY_PREFIX + this.hashFunction(key);\n        if(hashKey in this.data) {\n            const entries = this.data[hashKey];\n            for (let i = 0; i < entries.length; i++) {\n                const entry = entries[i];\n                if (this.equalsFunction(key, entry.key))\n                    return entry.value;\n            }\n        }\n        return null;\n    }\n\n    entries() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).flatMap(key => this.data[key], this);\n    }\n\n    getKeys() {\n        return this.entries().map(e => e.key);\n    }\n\n    getValues() {\n        return this.entries().map(e => e.value);\n    }\n\n    toString() {\n        const ss = this.entries().map(e => '{' + e.key + ':' + e.value + '}');\n        return '[' + ss.join(\", \") + ']';\n    }\n\n    get length() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).map(key => this.data[key].length, this).reduce((accum, item) => accum + item, 0);\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/misc/HashMap.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/misc/HashSet.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/misc/HashSet.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ HashSet)\n/* harmony export */ });\n/* harmony import */ var _utils_standardHashCodeFunction_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/standardHashCodeFunction.js */ \"./node_modules/antlr4/src/antlr4/utils/standardHashCodeFunction.js\");\n/* harmony import */ var _utils_standardEqualsFunction_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/standardEqualsFunction.js */ \"./node_modules/antlr4/src/antlr4/utils/standardEqualsFunction.js\");\n/* harmony import */ var _utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/arrayToString.js */ \"./node_modules/antlr4/src/antlr4/utils/arrayToString.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nconst HASH_KEY_PREFIX = \"h-\";\n\nclass HashSet {\n\n    constructor(hashFunction, equalsFunction) {\n        this.data = {};\n        this.hashFunction = hashFunction || _utils_standardHashCodeFunction_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        this.equalsFunction = equalsFunction || _utils_standardEqualsFunction_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n    }\n\n    add(value) {\n        const key = HASH_KEY_PREFIX + this.hashFunction(value);\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n            values.push(value);\n            return value;\n        } else {\n            this.data[key] = [value];\n            return value;\n        }\n    }\n\n    has(value) {\n        return this.get(value) != null;\n    }\n\n    get(value) {\n        const key = HASH_KEY_PREFIX + this.hashFunction(value);\n        if (key in this.data) {\n            const values = this.data[key];\n            for (let i = 0; i < values.length; i++) {\n                if (this.equalsFunction(value, values[i])) {\n                    return values[i];\n                }\n            }\n        }\n        return null;\n    }\n\n    values() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).flatMap(key => this.data[key], this);\n    }\n\n    toString() {\n        return (0,_utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(this.values());\n    }\n\n    get length() {\n        return Object.keys(this.data).filter(key => key.startsWith(HASH_KEY_PREFIX)).map(key => this.data[key].length, this).reduce((accum, item) => accum + item, 0);\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/misc/HashSet.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/misc/Interval.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/misc/Interval.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Interval)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/* stop is not included! */\nclass Interval {\n\n    constructor(start, stop) {\n        this.start = start;\n        this.stop = stop;\n    }\n\n    clone() {\n        return new Interval(this.start, this.stop);\n    }\n\n    contains(item) {\n        return item >= this.start && item < this.stop;\n    }\n\n    toString() {\n        if(this.start===this.stop-1) {\n            return this.start.toString();\n        } else {\n            return this.start.toString() + \"..\" + (this.stop-1).toString();\n        }\n    }\n\n    get length(){\n        return this.stop - this.start;\n    }\n}\n\nInterval.INVALID_INTERVAL = new Interval(-1, -2);\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/misc/Interval.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/misc/IntervalSet.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/misc/IntervalSet.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ IntervalSet)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _Interval_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nclass IntervalSet {\n\tconstructor() {\n\t\tthis.intervals = null;\n\t\tthis.readOnly = false;\n\t}\n\n\tfirst(v) {\n\t\tif (this.intervals === null || this.intervals.length===0) {\n\t\t\treturn _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_TYPE;\n\t\t} else {\n\t\t\treturn this.intervals[0].start;\n\t\t}\n\t}\n\n\taddOne(v) {\n\t\tthis.addInterval(new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](v, v + 1));\n\t}\n\n\taddRange(l, h) {\n\t\tthis.addInterval(new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](l, h + 1));\n\t}\n\n\taddInterval(toAdd) {\n\t\tif (this.intervals === null) {\n\t\t\tthis.intervals = [];\n\t\t\tthis.intervals.push(toAdd.clone());\n\t\t} else {\n\t\t\t// find insert pos\n\t\t\tfor (let pos = 0; pos < this.intervals.length; pos++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// distinct range -> insert\n\t\t\t\tif (toAdd.stop < existing.start) {\n\t\t\t\t\tthis.intervals.splice(pos, 0, toAdd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// contiguous range -> adjust\n\t\t\t\telse if (toAdd.stop === existing.start) {\n\t\t\t\t\tthis.intervals[pos] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](toAdd.start, existing.stop)\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// overlapping range -> adjust and reduce\n\t\t\t\telse if (toAdd.start <= existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](Math.min(existing.start, toAdd.start), Math.max(existing.stop, toAdd.stop));\n\t\t\t\t\tthis.reduce(pos);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// greater than any existing\n\t\t\tthis.intervals.push(toAdd.clone());\n\t\t}\n\t}\n\n\taddSet(other) {\n\t\tif (other.intervals !== null) {\n\t\t\tother.intervals.forEach( toAdd => this.addInterval(toAdd), this);\n\t\t}\n\t\treturn this;\n\t}\n\n\treduce(pos) {\n\t\t// only need to reduce if pos is not the last\n\t\tif (pos < this.intervals.length - 1) {\n\t\t\tconst current = this.intervals[pos];\n\t\t\tconst next = this.intervals[pos + 1];\n\t\t\t// if next contained in current\n\t\t\tif (current.stop >= next.stop) {\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t\tthis.reduce(pos);\n\t\t\t} else if (current.stop >= next.start) {\n\t\t\t\tthis.intervals[pos] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](current.start, next.stop);\n\t\t\t\tthis.intervals.splice(pos + 1, 1);\n\t\t\t}\n\t\t}\n\t}\n\n\tcomplement(start, stop) {\n\t\tconst result = new IntervalSet();\n\t\tresult.addInterval(new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](start, stop + 1));\n\t\tif(this.intervals !== null)\n\t\t\tthis.intervals.forEach(toRemove => result.removeRange(toRemove));\n\t\treturn result;\n\t}\n\n\tcontains(item) {\n\t\tif (this.intervals === null) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\tfor (let k = 0; k < this.intervals.length; k++) {\n\t\t\t\tif(this.intervals[k].contains(item)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tremoveRange(toRemove) {\n\t\tif(toRemove.start===toRemove.stop-1) {\n\t\t\tthis.removeOne(toRemove.start);\n\t\t} else if (this.intervals !== null) {\n\t\t\tlet pos = 0;\n\t\t\tfor(let n=0; n<this.intervals.length; n++) {\n\t\t\t\tconst existing = this.intervals[pos];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (toRemove.stop<=existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for including range, split it\n\t\t\t\telse if(toRemove.start>existing.start && toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](existing.start, toRemove.start);\n\t\t\t\t\tconst x = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](toRemove.stop, existing.stop);\n\t\t\t\t\tthis.intervals.splice(pos, 0, x);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for included range, remove it\n\t\t\t\telse if(toRemove.start<=existing.start && toRemove.stop>=existing.stop) {\n\t\t\t\t\tthis.intervals.splice(pos, 1);\n\t\t\t\t\tpos = pos - 1; // need another pass\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if(toRemove.start<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](existing.start, toRemove.start);\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if(toRemove.stop<existing.stop) {\n\t\t\t\t\tthis.intervals[pos] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](toRemove.stop, existing.stop);\n\t\t\t\t}\n\t\t\t\tpos += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tremoveOne(value) {\n\t\tif (this.intervals !== null) {\n\t\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\t\tconst existing = this.intervals[i];\n\t\t\t\t// intervals are ordered\n\t\t\t\tif (value < existing.start) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for single value range\n\t\t\t\telse if (value === existing.start && value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for lower boundary\n\t\t\t\telse if (value === existing.start) {\n\t\t\t\t\tthis.intervals[i] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](existing.start + 1, existing.stop);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// check for upper boundary\n\t\t\t\telse if (value === existing.stop - 1) {\n\t\t\t\t\tthis.intervals[i] = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](existing.start, existing.stop - 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// split existing range\n\t\t\t\telse if (value < existing.stop - 1) {\n\t\t\t\t\tconst replace = new _Interval_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](existing.start, value);\n\t\t\t\t\texisting.start = value + 1;\n\t\t\t\t\tthis.intervals.splice(i, 0, replace);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString(literalNames, symbolicNames, elemsAreChar) {\n\t\tliteralNames = literalNames || null;\n\t\tsymbolicNames = symbolicNames || null;\n\t\telemsAreChar = elemsAreChar || false;\n\t\tif (this.intervals === null) {\n\t\t\treturn \"{}\";\n\t\t} else if(literalNames!==null || symbolicNames!==null) {\n\t\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t\t} else if(elemsAreChar) {\n\t\t\treturn this.toCharString();\n\t\t} else {\n\t\t\treturn this.toIndexString();\n\t\t}\n\t}\n\n\ttoCharString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(existing.start) + \"'..'\" + String.fromCharCode(existing.stop-1) + \"'\");\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoIndexString() {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tif(existing.stop===existing.start+1) {\n\t\t\t\tif ( existing.start===_Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF ) {\n\t\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t\t} else {\n\t\t\t\t\tnames.push(existing.start.toString());\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnames.push(existing.start.toString() + \"..\" + (existing.stop-1).toString());\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\ttoTokenString(literalNames, symbolicNames) {\n\t\tconst names = [];\n\t\tfor (let i = 0; i < this.intervals.length; i++) {\n\t\t\tconst existing = this.intervals[i];\n\t\t\tfor (let j = existing.start; j < existing.stop; j++) {\n\t\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t\t}\n\t\t}\n\t\tif (names.length > 1) {\n\t\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t\t} else {\n\t\t\treturn names[0];\n\t\t}\n\t}\n\n\telementName(literalNames, symbolicNames, token) {\n\t\tif (token === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EOF) {\n\t\t\treturn \"<EOF>\";\n\t\t} else if (token === _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EPSILON) {\n\t\t\treturn \"<EPSILON>\";\n\t\t} else {\n\t\t\treturn literalNames[token] || symbolicNames[token];\n\t\t}\n\t}\n\n\tget length(){\n\t\treturn this.intervals.map( interval => interval.length ).reduce((acc, val) => acc + val);\n\t}\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/misc/IntervalSet.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/codepointat.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {\n\t\t\t\t/* eslint no-empty: [ \"off\" ] */\n\t\t\t}\n\t\t\treturn result;\n\t\t}());\n\t\tconst codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tconst string = String(this);\n\t\t\tconst size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tlet index = position ? Number(position) : 0;\n\t\t\tif (index !== index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tconst first = string.charCodeAt(index);\n\t\t\tlet second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/polyfills/codepointat.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tconst defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\tlet result;\n\t\t\ttry {\n\t\t\t\tconst object = {};\n\t\t\t\tconst $defineProperty = Object.defineProperty;\n\t\t\t\tresult = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {\n\t\t\t\t/* eslint no-empty: [ \"off\" ] */\n\t\t\t}\n\t\t\treturn result;\n\t\t}());\n\t\tconst stringFromCharCode = String.fromCharCode;\n\t\tconst floor = Math.floor;\n\t\tconst fromCodePoint = function(_) {\n\t\t\tconst MAX_SIZE = 0x4000;\n\t\t\tconst codeUnits = [];\n\t\t\tlet highSurrogate;\n\t\t\tlet lowSurrogate;\n\t\t\tlet index = -1;\n\t\t\tconst length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tlet result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tlet codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) !== codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 === length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/ATNState.js":
/*!**********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/ATNState.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ATNState)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The following images show the relation of states and\n * {@link ATNState//transitions} for various grammar constructs.\n *\n * <ul>\n *\n * <li>Solid edges marked with an &//0949; indicate a required\n * {@link EpsilonTransition}.</li>\n *\n * <li>Dashed edges indicate locations where any transition derived from\n * {@link Transition} might appear.</li>\n *\n * <li>Dashed nodes are place holders for either a sequence of linked\n * {@link BasicState} states or the inclusion of a block representing a nested\n * construct in one of the forms below.</li>\n *\n * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n * any number of alternatives (one or more). Nodes without the {@code ...} only\n * support the exact number of alternatives shown in the diagram.</li>\n *\n * </ul>\n *\n * <h2>Basic Blocks</h2>\n *\n * <h3>Rule</h3>\n *\n * <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Block of 1 or more alternatives</h3>\n *\n * <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Greedy Loops</h2>\n *\n * <h3>Greedy Closure: {@code (...)*}</h3>\n *\n * <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Positive Closure: {@code (...)+}</h3>\n *\n * <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Greedy Optional: {@code (...)?}</h3>\n *\n * <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h2>Non-Greedy Loops</h2>\n *\n * <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n *\n * <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n *\n * <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n *\n * <h3>Non-Greedy Optional: {@code (...)??}</h3>\n *\n * <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n */\nclass ATNState {\n    constructor() {\n        // Which ATN are we in?\n        this.atn = null;\n        this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n        this.stateType = null;\n        this.ruleIndex = 0; // at runtime, we don't have Rule objects\n        this.epsilonOnlyTransitions = false;\n        // Track the transitions emanating from this ATN state.\n        this.transitions = [];\n        // Used to cache lookahead during parsing, not used during construction\n        this.nextTokenWithinRule = null;\n    }\n\n    toString() {\n        return this.stateNumber;\n    }\n\n    equals(other) {\n        if (other instanceof ATNState) {\n            return this.stateNumber===other.stateNumber;\n        } else {\n            return false;\n        }\n    }\n\n    isNonGreedyExitState() {\n        return false;\n    }\n\n    addTransition(trans, index) {\n        if(index===undefined) {\n            index = -1;\n        }\n        if (this.transitions.length===0) {\n            this.epsilonOnlyTransitions = trans.isEpsilon;\n        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {\n            this.epsilonOnlyTransitions = false;\n        }\n        if (index===-1) {\n            this.transitions.push(trans);\n        } else {\n            this.transitions.splice(index, 1, trans);\n        }\n    }\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\" ];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/ATNState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/BasicBlockStartState.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/BasicBlockStartState.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BasicBlockStartState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* harmony import */ var _BlockStartState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BlockStartState.js */ \"./node_modules/antlr4/src/antlr4/state/BlockStartState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass BasicBlockStartState extends _BlockStartState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BLOCK_START;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/BasicBlockStartState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/BasicState.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/BasicState.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BasicState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass BasicState extends _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BASIC;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/BasicState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/BlockEndState.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/BlockEndState.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BlockEndState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/**\n * Terminal node of a simple {@code (a|b|c)} block\n */\nclass BlockEndState extends _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].BLOCK_END;\n        this.startState = null;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/BlockEndState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/BlockStartState.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/BlockStartState.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BlockStartState)\n/* harmony export */ });\n/* harmony import */ var _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionState.js */ \"./node_modules/antlr4/src/antlr4/state/DecisionState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/**\n *  The start of a regular {@code (...)} block\n */\nclass BlockStartState extends _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.endState = null;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/BlockStartState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/DecisionState.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/DecisionState.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DecisionState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass DecisionState extends _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.decision = -1;\n        this.nonGreedy = false;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/DecisionState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/LoopEndState.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/LoopEndState.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ LoopEndState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/**\n * Mark the end of a * or + loop\n */\nclass LoopEndState extends _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].LOOP_END;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/LoopEndState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/PlusBlockStartState.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/PlusBlockStartState.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlusBlockStartState)\n/* harmony export */ });\n/* harmony import */ var _BlockStartState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BlockStartState.js */ \"./node_modules/antlr4/src/antlr4/state/BlockStartState.js\");\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Start of {@code (A|B|...)+} loop. Technically a decision state, but\n * we don't use for code generation; somebody might need it, so I'm defining\n * it for completeness. In reality, the {@link PlusLoopbackState} node is the\n * real decision-making note for {@code A+}\n */\nclass PlusBlockStartState extends _BlockStartState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PLUS_BLOCK_START;\n        this.loopBackState = null;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/PlusBlockStartState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/PlusLoopbackState.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/PlusLoopbackState.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PlusLoopbackState)\n/* harmony export */ });\n/* harmony import */ var _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionState.js */ \"./node_modules/antlr4/src/antlr4/state/DecisionState.js\");\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n * one to the loop back to start of the block and one to exit.\n */\nclass PlusLoopbackState extends _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PLUS_LOOP_BACK;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/PlusLoopbackState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/RuleStartState.js":
/*!****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/RuleStartState.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RuleStartState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass RuleStartState extends _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RULE_START;\n        this.stopState = null;\n        this.isPrecedenceRule = false;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/RuleStartState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/RuleStopState.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/RuleStopState.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RuleStopState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/**\n * The last node in the ATN for a rule, unless that rule is the start symbol.\n * In that case, there is one transition to EOF. Later, we might encode\n * references to all calls to this rule to compute FOLLOW sets for\n * error handling\n */\nclass RuleStopState extends _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RULE_STOP;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/RuleStopState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/StarBlockStartState.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/StarBlockStartState.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StarBlockStartState)\n/* harmony export */ });\n/* harmony import */ var _BlockStartState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./BlockStartState.js */ \"./node_modules/antlr4/src/antlr4/state/BlockStartState.js\");\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * The block that begins a closure loop\n */\nclass StarBlockStartState extends _BlockStartState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].STAR_BLOCK_START;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/StarBlockStartState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/StarLoopEntryState.js":
/*!********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/StarLoopEntryState.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StarLoopEntryState)\n/* harmony export */ });\n/* harmony import */ var _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionState.js */ \"./node_modules/antlr4/src/antlr4/state/DecisionState.js\");\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass StarLoopEntryState extends _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].STAR_LOOP_ENTRY;\n        this.loopBackState = null;\n        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n        this.isPrecedenceDecision = null;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/StarLoopEntryState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/StarLoopbackState.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/StarLoopbackState.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StarLoopbackState)\n/* harmony export */ });\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass StarLoopbackState extends _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].STAR_LOOP_BACK;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/StarLoopbackState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/state/TokensStartState.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/state/TokensStartState.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TokensStartState)\n/* harmony export */ });\n/* harmony import */ var _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./DecisionState.js */ \"./node_modules/antlr4/src/antlr4/state/DecisionState.js\");\n/* harmony import */ var _ATNState_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ATNState.js */ \"./node_modules/antlr4/src/antlr4/state/ATNState.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n/**\n * The Tokens rule start state linking to each lexer rule start state\n */\nclass TokensStartState extends _DecisionState_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor() {\n        super();\n        this.stateType = _ATNState_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].TOKEN_START;\n        return this;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/state/TokensStartState.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/ActionTransition.js":
/*!***********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/ActionTransition.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ActionTransition)\n/* harmony export */ });\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass ActionTransition extends _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(target, ruleIndex, actionIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ACTION;\n        this.ruleIndex = ruleIndex;\n        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;\n        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/ActionTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/AtomTransition.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/AtomTransition.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ AtomTransition)\n/* harmony export */ });\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass AtomTransition extends _Transition_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(target, label) {\n        super(target);\n        // The token type or character value; or, signifies special label.\n        this.label_ = label;\n        this.label = this.makeLabel();\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].ATOM;\n    }\n\n    makeLabel() {\n        const s = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        s.addOne(this.label_);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label_ === symbol;\n    }\n\n    toString() {\n        return this.label_;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/AtomTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/EpsilonTransition.js":
/*!************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/EpsilonTransition.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ EpsilonTransition)\n/* harmony export */ });\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass EpsilonTransition extends _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(target, outermostPrecedenceReturn) {\n        super(target);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].EPSILON;\n        this.isEpsilon = true;\n        this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    toString() {\n        return \"epsilon\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/EpsilonTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/NotSetTransition.js":
/*!***********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/NotSetTransition.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ NotSetTransition)\n/* harmony export */ });\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* harmony import */ var _SetTransition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SetTransition.js */ \"./node_modules/antlr4/src/antlr4/transition/SetTransition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass NotSetTransition extends _SetTransition_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(target, set) {\n        super(target, set);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].NOT_SET;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&\n            !super.matches(symbol, minVocabSymbol, maxVocabSymbol);\n    }\n\n    toString() {\n        return '~' + super.toString();\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/NotSetTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/PrecedencePredicateTransition.js":
/*!************************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/PrecedencePredicateTransition.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PrecedencePredicateTransition)\n/* harmony export */ });\n/* harmony import */ var _atn_PrecedencePredicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/PrecedencePredicate.js */ \"./node_modules/antlr4/src/antlr4/atn/PrecedencePredicate.js\");\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* harmony import */ var _atn_AbstractPredicateTransition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../atn/AbstractPredicateTransition.js */ \"./node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nclass PrecedencePredicateTransition extends _atn_AbstractPredicateTransition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(target, precedence) {\n        super(target);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PRECEDENCE;\n        this.precedence = precedence;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new _atn_PrecedencePredicate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.precedence);\n    }\n\n    toString() {\n        return this.precedence + \" >= _p\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/PrecedencePredicateTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/PredicateTransition.js":
/*!**************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/PredicateTransition.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ PredicateTransition)\n/* harmony export */ });\n/* harmony import */ var _atn_Predicate_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../atn/Predicate.js */ \"./node_modules/antlr4/src/antlr4/atn/Predicate.js\");\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* harmony import */ var _atn_AbstractPredicateTransition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../atn/AbstractPredicateTransition.js */ \"./node_modules/antlr4/src/antlr4/atn/AbstractPredicateTransition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nclass PredicateTransition extends _atn_AbstractPredicateTransition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(target, ruleIndex, predIndex, isCtxDependent) {\n        super(target);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].PREDICATE;\n        this.ruleIndex = ruleIndex;\n        this.predIndex = predIndex;\n        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n\n    getPredicate() {\n        return new _atn_Predicate_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.ruleIndex, this.predIndex, this.isCtxDependent);\n    }\n\n    toString() {\n        return \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/PredicateTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/RangeTransition.js":
/*!**********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/RangeTransition.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RangeTransition)\n/* harmony export */ });\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass RangeTransition extends _Transition_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] {\n    constructor(target, start, stop) {\n        super(target);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].RANGE;\n        this.start = start;\n        this.stop = stop;\n        this.label = this.makeLabel();\n    }\n\n    makeLabel() {\n        const s = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n        s.addRange(this.start, this.stop);\n        return s;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= this.start && symbol <= this.stop;\n    }\n\n    toString() {\n        return \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/RangeTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/RuleTransition.js":
/*!*********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/RuleTransition.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RuleTransition)\n/* harmony export */ });\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass RuleTransition extends _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(ruleStart, ruleIndex, precedence, followState) {\n        super(ruleStart);\n        // ptr to the rule definition object for this rule ref\n        this.ruleIndex = ruleIndex;\n        this.precedence = precedence;\n        // what node to begin computations following ref to rule\n        this.followState = followState;\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RULE;\n        this.isEpsilon = true;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return false;\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/RuleTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/SetTransition.js":
/*!********************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/SetTransition.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SetTransition)\n/* harmony export */ });\n/* harmony import */ var _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/IntervalSet.js */ \"./node_modules/antlr4/src/antlr4/misc/IntervalSet.js\");\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n// A transition containing a set of values.\n\n\n\n\nclass SetTransition extends _Transition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(target, set) {\n        super(target);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"].SET;\n        if (set !==undefined && set !==null) {\n            this.label = set;\n        } else {\n            this.label = new _misc_IntervalSet_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]();\n            this.label.addOne(_Token_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].INVALID_TYPE);\n        }\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return this.label.contains(symbol);\n    }\n\n    toString() {\n        return this.label.toString();\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/SetTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/Transition.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/Transition.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Transition)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * An ATN transition between any two ATN states.  Subclasses define\n * atom, set, epsilon, action, predicate, rule transitions.\n *\n * <p>This is a one way link.  It emanates from a state (usually via a list of\n * transitions) and has a target state.</p>\n *\n * <p>Since we never have to change the ATN transitions once we construct it,\n * we can fix these transitions as specific classes. The DFA transitions\n * on the other hand need to update the labels as it adds transitions to\n * the states. We'll use the term Edge for the DFA to distinguish them from\n * ATN transitions.</p>\n */\nclass Transition {\n    constructor(target) {\n        // The target of this transition.\n        if (target===undefined || target===null) {\n            throw \"target cannot be null.\";\n        }\n        this.target = target;\n        // Are we epsilon, action, sempred?\n        this.isEpsilon = false;\n        this.label = null;\n    }\n}\n\n// constants for serialization\n\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\n// e.g., {isType(input.LT(1))}?\nTransition.PREDICATE = 4;\nTransition.ATOM = 5;\nTransition.ACTION = 6;\n// ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.SET = 7;\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ];\n\nTransition.serializationTypes = {\n        EpsilonTransition: Transition.EPSILON,\n        RangeTransition: Transition.RANGE,\n        RuleTransition: Transition.RULE,\n        PredicateTransition: Transition.PREDICATE,\n        AtomTransition: Transition.ATOM,\n        ActionTransition: Transition.ACTION,\n        SetTransition: Transition.SET,\n        NotSetTransition: Transition.NOT_SET,\n        WildcardTransition: Transition.WILDCARD,\n        PrecedencePredicateTransition: Transition.PRECEDENCE\n    };\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/Transition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/transition/WildcardTransition.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/transition/WildcardTransition.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ WildcardTransition)\n/* harmony export */ });\n/* harmony import */ var _Transition_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Transition.js */ \"./node_modules/antlr4/src/antlr4/transition/Transition.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass WildcardTransition extends _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(target) {\n        super(target);\n        this.serializationType = _Transition_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].WILDCARD;\n    }\n\n    matches(symbol, minVocabSymbol, maxVocabSymbol) {\n        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n    }\n\n    toString() {\n        return \".\";\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/transition/WildcardTransition.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/ErrorNode.js":
/*!**********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/ErrorNode.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ErrorNode)\n/* harmony export */ });\n/* harmony import */ var _TerminalNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TerminalNode.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass ErrorNode extends _TerminalNode_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/ErrorNode.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/ErrorNodeImpl.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/ErrorNodeImpl.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ErrorNodeImpl)\n/* harmony export */ });\n/* harmony import */ var _TerminalNodeImpl_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TerminalNodeImpl.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNodeImpl.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n/**\n * Represents a token that was consumed during resynchronization\n * rather than during a valid match operation. For example,\n * we will create this kind of a node during single token insertion\n * and deletion as well as during \"consume until error recovery set\"\n * upon no viable alternative exceptions.\n */\n\n\nclass ErrorNodeImpl extends _TerminalNodeImpl_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n    constructor(token) {\n        super(token);\n    }\n\n    isErrorNode() {\n        return true;\n    }\n\n    accept(visitor) {\n        return visitor.visitErrorNode(this);\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/ErrorNodeImpl.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/ParseTree.js":
/*!**********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/ParseTree.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ParseTree)\n/* harmony export */ });\n/* harmony import */ var _SyntaxTree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SyntaxTree.js */ \"./node_modules/antlr4/src/antlr4/tree/SyntaxTree.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass ParseTree extends _SyntaxTree_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/ParseTree.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/ParseTreeListener.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/ParseTreeListener.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ParseTreeListener)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nclass ParseTreeListener {\n    visitTerminal(node) {\n    }\n\n    visitErrorNode(node) {\n    }\n\n    enterEveryRule(node) {\n    }\n\n    exitEveryRule(node) {\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/ParseTreeListener.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/ParseTreeVisitor.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/ParseTreeVisitor.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ParseTreeVisitor)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nclass ParseTreeVisitor {\n    visit(ctx) {\n        if (Array.isArray(ctx)) {\n            return ctx.map(function(child) {\n                return child.accept(this);\n            }, this);\n        } else {\n            return ctx.accept(this);\n        }\n    }\n\n    visitChildren(ctx) {\n        if (ctx.children) {\n            return this.visit(ctx.children);\n        } else {\n            return null;\n        }\n    }\n\n    visitTerminal(node) {\n    }\n\n    visitErrorNode(node) {\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/ParseTreeVisitor.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/ParseTreeWalker.js":
/*!****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/ParseTreeWalker.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ ParseTreeWalker)\n/* harmony export */ });\n/* harmony import */ var _TerminalNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./TerminalNode.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNode.js\");\n/* harmony import */ var _ErrorNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ErrorNode.js */ \"./node_modules/antlr4/src/antlr4/tree/ErrorNode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\nclass ParseTreeWalker {\n\n    /**\n     * Performs a walk on the given parse tree starting at the root and going down recursively\n     * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before\n     * recursively walking down into child nodes, then\n     * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.\n     * @param listener The listener used by the walker to process grammar rules\n     * @param t The parse tree to be walked on\n     */\n    walk(listener, t) {\n        const errorNode = t instanceof _ErrorNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"] ||\n            (t.isErrorNode !== undefined && t.isErrorNode());\n        if (errorNode) {\n            listener.visitErrorNode(t);\n        } else if (t instanceof _TerminalNode_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]) {\n            listener.visitTerminal(t);\n        } else {\n            this.enterRule(listener, t);\n            for (let i = 0; i < t.getChildCount(); i++) {\n                const child = t.getChild(i);\n                this.walk(listener, child);\n            }\n            this.exitRule(listener, t);\n        }\n    }\n\n    /**\n     * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}\n     * then by triggering the event specific to the given parse tree node\n     * @param listener The listener responding to the trigger events\n     * @param r The grammar rule containing the rule context\n     */\n    enterRule(listener, r) {\n        const ctx = r.getRuleContext();\n        listener.enterEveryRule(ctx);\n        ctx.enterRule(listener);\n    }\n\n    /**\n     * Exits a grammar rule by first triggering the event specific to the given parse tree node\n     * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}\n     * @param listener The listener responding to the trigger events\n     * @param r The grammar rule containing the rule context\n     */\n    exitRule(listener, r) {\n        const ctx = r.getRuleContext();\n        ctx.exitRule(listener);\n        listener.exitEveryRule(ctx);\n    }\n}\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/ParseTreeWalker.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/RuleNode.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/RuleNode.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RuleNode)\n/* harmony export */ });\n/* harmony import */ var _ParseTree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ParseTree.js */ \"./node_modules/antlr4/src/antlr4/tree/ParseTree.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass RuleNode extends _ParseTree_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n\n    getRuleContext(){\n        throw new Error(\"missing interface implementation\")\n    }\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/RuleNode.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/SyntaxTree.js":
/*!***********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/SyntaxTree.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SyntaxTree)\n/* harmony export */ });\n/* harmony import */ var _Tree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tree.js */ \"./node_modules/antlr4/src/antlr4/tree/Tree.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass SyntaxTree extends _Tree_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/SyntaxTree.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/TerminalNode.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/TerminalNode.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TerminalNode)\n/* harmony export */ });\n/* harmony import */ var _ParseTree_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ParseTree.js */ \"./node_modules/antlr4/src/antlr4/tree/ParseTree.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass TerminalNode extends _ParseTree_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/TerminalNode.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/TerminalNodeImpl.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/TerminalNodeImpl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TerminalNodeImpl)\n/* harmony export */ });\n/* harmony import */ var _misc_Interval_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/Interval.js */ \"./node_modules/antlr4/src/antlr4/misc/Interval.js\");\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _TerminalNode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TerminalNode.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNode.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\nclass TerminalNodeImpl extends _TerminalNode_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"] {\n    constructor(symbol) {\n        super();\n        this.parentCtx = null;\n        this.symbol = symbol;\n    }\n\n    getChild(i) {\n        return null;\n    }\n\n    getSymbol() {\n        return this.symbol;\n    }\n\n    getParent() {\n        return this.parentCtx;\n    }\n\n    getPayload() {\n        return this.symbol;\n    }\n\n    getSourceInterval() {\n        if (this.symbol === null) {\n            return _misc_Interval_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].INVALID_INTERVAL;\n        }\n        const tokenIndex = this.symbol.tokenIndex;\n        return new _misc_Interval_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"](tokenIndex, tokenIndex);\n    }\n\n    getChildCount() {\n        return 0;\n    }\n\n    accept(visitor) {\n        return visitor.visitTerminal(this);\n    }\n\n    getText() {\n        return this.symbol.text;\n    }\n\n    toString() {\n        if (this.symbol.type === _Token_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"].EOF) {\n            return \"<EOF>\";\n        } else {\n            return this.symbol.text;\n        }\n    }\n}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/TerminalNodeImpl.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Tree.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Tree.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Tree)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/**\n * The basic notion of a tree has a parent, a payload, and a list of children.\n * It is the most abstract interface for all the trees used by ANTLR.\n */\nclass Tree {}\n\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/Tree.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Trees.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Trees.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _Token_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Token.js */ \"./node_modules/antlr4/src/antlr4/Token.js\");\n/* harmony import */ var _ErrorNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ErrorNode.js */ \"./node_modules/antlr4/src/antlr4/tree/ErrorNode.js\");\n/* harmony import */ var _TerminalNode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TerminalNode.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNode.js\");\n/* harmony import */ var _RuleNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RuleNode.js */ \"./node_modules/antlr4/src/antlr4/tree/RuleNode.js\");\n/* harmony import */ var _utils_escapeWhitespace_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/escapeWhitespace.js */ \"./node_modules/antlr4/src/antlr4/utils/escapeWhitespace.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nconst Trees = {\n    /**\n     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n     *  node payloads to get the text for the nodes.  Detect\n     *  parse trees and extract data appropriately.\n     */\n    toStringTree: function(tree, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        let s = Trees.getNodeText(tree, ruleNames);\n        s = (0,_utils_escapeWhitespace_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(s, false);\n        const c = tree.getChildCount();\n        if(c===0) {\n            return s;\n        }\n        let res = \"(\" + s + ' ';\n        if(c>0) {\n            s = Trees.toStringTree(tree.getChild(0), ruleNames);\n            res = res.concat(s);\n        }\n        for(let i=1;i<c;i++) {\n            s = Trees.toStringTree(tree.getChild(i), ruleNames);\n            res = res.concat(' ' + s);\n        }\n        res = res.concat(\")\");\n        return res;\n    },\n\n    getNodeText: function(t, ruleNames, recog) {\n        ruleNames = ruleNames || null;\n        recog = recog || null;\n        if(recog!==null) {\n            ruleNames = recog.ruleNames;\n        }\n        if(ruleNames!==null) {\n            if (t instanceof _RuleNode_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]) {\n                const context = t.getRuleContext()\n                const altNumber = context.getAltNumber();\n                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency\n                if ( altNumber != 0 ) {\n                    return ruleNames[t.ruleIndex]+\":\"+altNumber;\n                }\n                return ruleNames[t.ruleIndex];\n            } else if ( t instanceof _ErrorNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]) {\n                return t.toString();\n            } else if(t instanceof _TerminalNode_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]) {\n                if(t.symbol!==null) {\n                    return t.symbol.text;\n                }\n            }\n        }\n        // no recog for rule names\n        const payload = t.getPayload();\n        if (payload instanceof _Token_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] ) {\n            return payload.text;\n        }\n        return t.getPayload().toString();\n    },\n\n    /**\n     * Return ordered list of all children of this node\n     */\n    getChildren: function(t) {\n        const list = [];\n        for(let i=0;i<t.getChildCount();i++) {\n            list.push(t.getChild(i));\n        }\n        return list;\n    },\n\n    /**\n     * Return a list of all ancestors of this node.  The first node of\n     * list is the root and the last is the parent of this node.\n     */\n    getAncestors: function(t) {\n        let ancestors = [];\n        t = t.getParent();\n        while(t!==null) {\n            ancestors = [t].concat(ancestors);\n            t = t.getParent();\n        }\n        return ancestors;\n    },\n\n    findAllTokenNodes: function(t, ttype) {\n        return Trees.findAllNodes(t, ttype, true);\n    },\n\n    findAllRuleNodes: function(t, ruleIndex) {\n        return Trees.findAllNodes(t, ruleIndex, false);\n    },\n\n    findAllNodes: function(t, index, findTokens) {\n        const nodes = [];\n        Trees._findAllNodes(t, index, findTokens, nodes);\n        return nodes;\n    },\n\n    _findAllNodes: function(t, index, findTokens, nodes) {\n        // check this node (the root) first\n        if(findTokens && (t instanceof _TerminalNode_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])) {\n            if(t.symbol.type===index) {\n                nodes.push(t);\n            }\n        } else if(!findTokens && (t instanceof _RuleNode_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])) {\n            if(t.ruleIndex===index) {\n                nodes.push(t);\n            }\n        }\n        // check children\n        for(let i=0;i<t.getChildCount();i++) {\n            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n        }\n    },\n\n    descendants: function(t) {\n        let nodes = [t];\n        for(let i=0;i<t.getChildCount();i++) {\n            nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n        }\n        return nodes;\n    }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Trees);\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/Trees.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/index.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _RuleNode_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RuleNode.js */ \"./node_modules/antlr4/src/antlr4/tree/RuleNode.js\");\n/* harmony import */ var _ErrorNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ErrorNode.js */ \"./node_modules/antlr4/src/antlr4/tree/ErrorNode.js\");\n/* harmony import */ var _TerminalNode_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TerminalNode.js */ \"./node_modules/antlr4/src/antlr4/tree/TerminalNode.js\");\n/* harmony import */ var _ParseTreeListener_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ParseTreeListener.js */ \"./node_modules/antlr4/src/antlr4/tree/ParseTreeListener.js\");\n/* harmony import */ var _ParseTreeVisitor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ParseTreeVisitor.js */ \"./node_modules/antlr4/src/antlr4/tree/ParseTreeVisitor.js\");\n/* harmony import */ var _ParseTreeWalker_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ParseTreeWalker.js */ \"./node_modules/antlr4/src/antlr4/tree/ParseTreeWalker.js\");\n/* harmony import */ var _Trees_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Trees.js */ \"./node_modules/antlr4/src/antlr4/tree/Trees.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ Trees: _Trees_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"], RuleNode: _RuleNode_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"], ErrorNode: _ErrorNode_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"], TerminalNode: _TerminalNode_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"], ParseTreeListener: _ParseTreeListener_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"], ParseTreeVisitor: _ParseTreeVisitor_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"], ParseTreeWalker: _ParseTreeWalker_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"] });\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/tree/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/DoubleDict.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/DoubleDict.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ DoubleDict)\n/* harmony export */ });\n/* harmony import */ var _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../misc/HashMap.js */ \"./node_modules/antlr4/src/antlr4/misc/HashMap.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nclass DoubleDict {\n\n    constructor(defaultMapCtor) {\n        this.defaultMapCtor = defaultMapCtor || _misc_HashMap_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        this.cacheMap = new this.defaultMapCtor();\n    }\n\n    get(a, b) {\n        const d = this.cacheMap.get(a) || null;\n        return d === null ? null : (d.get(b) || null);\n    }\n\n    set(a, b, o) {\n        let d = this.cacheMap.get(a) || null;\n        if (d === null) {\n            d = new this.defaultMapCtor();\n            this.cacheMap.set(a, d);\n        }\n        d.set(b, o);\n    }\n\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/DoubleDict.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/arrayToString.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/arrayToString.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ arrayToString)\n/* harmony export */ });\n/* harmony import */ var _valueToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./valueToString.js */ \"./node_modules/antlr4/src/antlr4/utils/valueToString.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\nfunction arrayToString(a) {\n    return Array.isArray(a) ? (\"[\" + a.map(_valueToString_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]).join(\", \") + \"]\") : \"null\";\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/arrayToString.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/equalArrays.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/equalArrays.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ equalArrays)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction equalArrays(a, b) {\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a === b)\n        return true;\n    if (a.length !== b.length)\n        return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === b[i])\n            continue;\n        if (!a[i].equals || !a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/equalArrays.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/escapeWhitespace.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/escapeWhitespace.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ escapeWhitespace)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(/ /g, \"\\u00B7\");\n    }\n    return s;\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/escapeWhitespace.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/arrayToString.js */ \"./node_modules/antlr4/src/antlr4/utils/arrayToString.js\");\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ arrayToString: _utils_arrayToString_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"] });\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/index.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/standardEqualsFunction.js":
/*!************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/standardEqualsFunction.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ standardEqualsFunction)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction standardEqualsFunction(a, b) {\n    return a ? a.equals(b) : a===b;\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/standardEqualsFunction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/standardHashCodeFunction.js":
/*!**************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/standardHashCodeFunction.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ standardHashCodeFunction)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction standardHashCodeFunction(a) {\n    return a ? a.hashCode() : -1;\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/standardHashCodeFunction.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/stringHashCode.js":
/*!****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/stringHashCode.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    const key = this.toString();\n    let h1b, k1;\n\n    const remainder = key.length & 3; // key.length % 4\n    const bytes = key.length - remainder;\n    let h1 = String.prototype.seed;\n    const c1 = 0xcc9e2d51;\n    const c2 = 0x1b873593;\n    let i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        // no-break\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        // no-break\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/stringHashCode.js?");

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/utils/valueToString.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/utils/valueToString.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ valueToString)\n/* harmony export */ });\n/* Copyright (c) 2012-2022 The ANTLR Project Contributors. All rights reserved.\n * Use is of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nfunction valueToString(v) {\n    return v === null ? \"null\" : v;\n}\n\n\n//# sourceURL=webpack://idvjs/./node_modules/antlr4/src/antlr4/utils/valueToString.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./static/js/helpers.js");
/******/ 	
/******/ })()
;