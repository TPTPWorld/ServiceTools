// Generated from TPTP.g4 by ANTLR 4.10.1
// jshint ignore: start
import antlr4 from 'antlr4';
import TPTPListener from './TPTPListener.js';
const serializedATN = [4,1,98,1819,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,1,0,5,0,468,8,0,10,0,12,0,471,9,0,1,0,1,0,1,1,1,1,3,1,477,8,
1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,485,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,494,
8,3,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,507,8,5,1,5,1,5,1,6,
1,6,1,6,1,6,1,6,1,6,1,6,3,6,518,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
3,7,529,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,540,8,8,1,8,1,8,1,9,
1,9,1,9,1,9,1,9,1,9,1,9,3,9,551,8,9,1,9,1,9,1,10,1,10,1,10,3,10,558,8,10,
1,11,1,11,1,12,1,12,1,12,3,12,565,8,12,1,13,1,13,1,13,1,13,1,13,1,13,3,13,
573,8,13,1,14,1,14,1,14,3,14,578,8,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
3,16,587,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,5,17,597,8,17,10,17,
12,17,600,9,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,18,610,8,18,10,
18,12,18,613,9,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,623,8,19,
10,19,12,19,626,9,19,1,20,1,20,1,20,3,20,631,8,20,1,21,1,21,3,21,635,8,21,
1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,644,8,22,1,23,1,23,1,23,1,24,1,24,
1,24,1,24,1,24,1,24,1,25,1,25,1,25,5,25,658,8,25,10,25,12,25,661,9,25,1,
26,1,26,3,26,665,8,26,1,27,1,27,1,27,1,27,1,28,1,28,3,28,673,8,28,1,29,1,
29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,3,31,686,8,31,1,32,1,32,
3,32,690,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,700,8,33,1,34,
1,34,3,34,704,8,34,1,35,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,37,1,37,
1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,3,38,725,8,38,1,39,1,39,1,39,1,39,
1,39,3,39,732,8,39,1,40,1,40,1,40,1,40,1,40,3,40,739,8,40,1,41,1,41,1,41,
1,41,1,42,1,42,1,42,1,42,1,42,3,42,750,8,42,1,43,1,43,1,43,1,43,1,43,1,43,
3,43,758,8,43,1,44,1,44,1,44,1,44,1,44,3,44,765,8,44,1,45,1,45,1,45,1,45,
1,45,3,45,772,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
1,46,1,46,1,46,1,46,3,46,789,8,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,3,48,
798,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,808,8,49,1,50,1,50,
1,50,3,50,813,8,50,1,51,1,51,1,52,1,52,1,53,1,53,1,53,3,53,822,8,53,1,54,
1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,832,8,54,1,55,1,55,1,55,1,55,1,55,
1,55,1,55,1,55,5,55,842,8,55,10,55,12,55,845,9,55,1,56,1,56,1,56,1,56,1,
56,1,56,1,56,1,56,5,56,855,8,56,10,56,12,56,858,9,56,1,57,1,57,1,57,1,57,
1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,60,1,60,1,60,3,60,875,8,60,1,61,
1,61,1,61,1,61,1,61,1,61,3,61,883,8,61,1,62,1,62,3,62,887,8,62,1,63,1,63,
1,63,1,63,1,64,1,64,3,64,895,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
5,65,905,8,65,10,65,12,65,908,9,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
66,5,66,918,8,66,10,66,12,66,921,9,66,1,67,1,67,1,67,3,67,926,8,67,1,68,
1,68,3,68,930,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,939,8,69,1,70,
1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,955,
8,72,1,73,1,73,3,73,959,8,73,1,74,1,74,1,74,1,74,1,75,1,75,3,75,967,8,75,
1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,78,1,78,1,78,3,78,979,8,78,1,79,1,79,
1,79,1,79,1,79,1,79,3,79,987,8,79,1,80,1,80,3,80,991,8,80,1,81,1,81,1,81,
1,81,1,81,1,81,1,81,1,81,3,81,1001,8,81,1,82,1,82,1,82,1,82,1,83,1,83,1,
83,1,83,1,83,1,83,3,83,1013,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
1,85,1,85,1,85,1,85,1,85,3,85,1028,8,85,1,86,1,86,1,86,1,86,1,86,3,86,1035,
8,86,1,87,1,87,1,87,1,87,1,87,3,87,1042,8,87,1,88,1,88,1,88,1,88,1,89,1,
89,3,89,1050,8,89,1,90,1,90,1,90,1,90,1,90,3,90,1057,8,90,1,91,1,91,1,91,
1,91,1,91,1,91,1,92,1,92,1,92,1,92,3,92,1069,8,92,1,93,1,93,1,93,1,93,1,
93,1,93,1,93,1,93,3,93,1079,8,93,1,94,1,94,1,94,1,94,1,94,3,94,1086,8,94,
1,95,1,95,1,95,1,95,1,95,3,95,1093,8,95,1,96,1,96,1,96,1,96,1,96,1,96,1,
96,1,96,3,96,1103,8,96,1,97,1,97,3,97,1107,8,97,1,98,1,98,1,98,1,98,1,98,
1,98,3,98,1115,8,98,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,100,1,100,1,100,
1,100,1,100,1,100,3,100,1130,8,100,1,101,1,101,1,101,1,101,1,101,3,101,1137,
8,101,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,1,102,
1,102,1,102,3,102,1152,8,102,1,103,1,103,1,103,1,103,1,103,3,103,1159,8,
103,1,104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,
105,5,105,1173,8,105,10,105,12,105,1176,9,105,1,106,1,106,1,106,1,106,1,
107,1,107,1,107,1,107,1,107,3,107,1187,8,107,1,108,1,108,1,108,1,108,1,109,
1,109,1,109,1,109,1,110,1,110,1,110,1,110,1,111,1,111,3,111,1203,8,111,1,
112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,112,1,
112,1,112,1,112,3,112,1220,8,112,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
1,113,1,113,1,113,3,113,1232,8,113,1,114,1,114,1,115,1,115,1,115,1,115,1,
115,3,115,1241,8,115,1,116,1,116,3,116,1245,8,116,1,117,1,117,1,117,1,118,
1,118,1,118,1,118,1,119,1,119,1,119,1,119,1,120,1,120,1,121,1,121,3,121,
1262,8,121,1,122,1,122,3,122,1266,8,122,1,123,1,123,3,123,1270,8,123,1,124,
1,124,1,124,1,124,1,124,1,124,1,124,1,125,1,125,3,125,1281,8,125,1,126,1,
126,1,126,3,126,1286,8,126,1,127,1,127,3,127,1290,8,127,1,128,1,128,1,128,
1,128,1,129,1,129,3,129,1298,8,129,1,130,1,130,1,130,1,130,1,130,1,130,1,
130,1,130,5,130,1308,8,130,10,130,12,130,1311,9,130,1,131,1,131,1,131,1,
131,1,131,1,131,1,131,1,131,5,131,1321,8,131,10,131,12,131,1324,9,131,1,
132,1,132,1,132,1,132,3,132,1330,8,132,1,133,1,133,1,133,1,133,1,134,1,134,
3,134,1338,8,134,1,135,1,135,1,135,1,135,1,135,1,135,3,135,1346,8,135,1,
136,1,136,1,136,1,136,1,136,1,136,1,136,1,137,1,137,1,137,1,137,1,137,3,
137,1360,8,137,1,138,1,138,1,138,3,138,1365,8,138,1,139,1,139,1,140,1,140,
3,140,1371,8,140,1,141,1,141,1,142,1,142,1,142,1,142,1,143,1,143,1,144,1,
144,1,144,1,144,1,144,1,144,3,144,1387,8,144,1,145,1,145,3,145,1391,8,145,
1,146,1,146,1,147,1,147,1,147,1,147,1,147,1,147,3,147,1401,8,147,1,148,1,
148,1,148,1,148,1,148,1,148,3,148,1409,8,148,1,149,1,149,1,149,1,149,1,149,
3,149,1416,8,149,1,150,1,150,3,150,1420,8,150,1,151,1,151,1,151,3,151,1425,
8,151,1,152,1,152,1,152,1,152,1,152,1,152,1,152,1,152,3,152,1435,8,152,1,
153,1,153,1,153,1,153,1,153,3,153,1442,8,153,1,154,1,154,1,154,1,154,1,154,
3,154,1449,8,154,1,155,1,155,1,155,1,155,1,155,3,155,1456,8,155,1,156,1,
156,1,156,1,156,1,156,1,156,5,156,1464,8,156,10,156,12,156,1467,9,156,1,
157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,1,157,3,157,1478,8,157,1,158,
1,158,1,158,3,158,1483,8,158,1,159,1,159,1,160,1,160,1,161,1,161,1,162,1,
162,1,163,1,163,1,164,1,164,1,165,1,165,1,166,1,166,1,167,1,167,1,168,1,
168,1,169,1,169,3,169,1507,8,169,1,170,1,170,3,170,1511,8,170,1,171,1,171,
1,172,1,172,1,173,1,173,1,174,1,174,1,175,1,175,1,176,1,176,1,177,1,177,
1,178,1,178,1,179,1,179,1,180,1,180,3,180,1533,8,180,1,181,1,181,1,182,1,
182,3,182,1539,8,182,1,183,1,183,1,184,1,184,1,184,1,184,1,184,1,184,1,184,
1,184,3,184,1551,8,184,1,185,1,185,1,185,5,185,1556,8,185,10,185,12,185,
1559,9,185,1,186,1,186,3,186,1563,8,186,1,187,1,187,1,187,1,187,1,187,1,
187,1,187,1,187,1,188,1,188,1,189,1,189,1,189,1,189,1,189,3,189,1580,8,189,
1,190,1,190,1,190,5,190,1585,8,190,10,190,12,190,1588,9,190,1,191,1,191,
3,191,1592,8,191,1,192,1,192,1,192,1,193,1,193,1,193,3,193,1600,8,193,1,
193,1,193,1,194,1,194,1,195,1,195,1,195,3,195,1609,8,195,1,196,1,196,1,196,
3,196,1614,8,196,1,196,1,196,1,197,1,197,1,197,1,198,1,198,1,198,3,198,1624,
8,198,1,198,1,198,1,199,1,199,1,200,1,200,1,200,3,200,1633,8,200,1,200,1,
200,1,201,1,201,1,202,1,202,1,202,1,203,1,203,1,203,1,203,1,203,1,203,3,
203,1648,8,203,1,204,1,204,1,204,5,204,1653,8,204,10,204,12,204,1656,9,204,
1,205,1,205,1,205,3,205,1661,8,205,1,206,1,206,3,206,1665,8,206,1,207,1,
207,1,207,1,207,1,208,1,208,1,208,1,208,1,209,1,209,1,209,1,209,3,209,1679,
8,209,1,210,1,210,1,210,1,210,1,210,3,210,1686,8,210,1,211,1,211,1,212,1,
212,1,212,1,212,1,212,1,212,1,212,1,213,1,213,1,213,1,213,1,213,1,213,1,
214,1,214,1,214,1,214,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,215,1,
216,1,216,1,216,5,216,1718,8,216,10,216,12,216,1721,9,216,1,217,1,217,3,
217,1725,8,217,1,218,1,218,1,218,3,218,1730,8,218,1,218,1,218,1,219,1,219,
1,219,1,219,1,219,1,220,1,220,1,220,5,220,1742,8,220,10,220,12,220,1745,
9,220,1,221,1,221,1,221,1,221,1,221,1,221,3,221,1753,8,221,1,222,1,222,1,
222,1,222,1,222,1,222,3,222,1761,8,222,1,223,1,223,1,223,1,223,1,223,1,224,
1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,
1,224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,1788,8,224,1,225,1,225,1,
225,1,225,1,225,3,225,1795,8,225,1,226,1,226,1,226,5,226,1800,8,226,10,226,
12,226,1803,9,226,1,227,1,227,3,227,1807,8,227,1,228,1,228,1,229,1,229,1,
230,1,230,1,231,1,231,1,232,1,232,1,232,0,11,34,36,38,110,112,130,132,210,
260,262,312,233,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,
202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,
238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,
274,276,278,280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,
310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,
346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,
382,384,386,388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,
418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,
454,456,458,460,462,464,0,9,2,0,51,51,56,56,3,0,58,58,60,60,62,62,2,0,54,
54,57,57,1,0,43,48,1,0,41,42,2,0,53,53,65,65,5,0,50,50,55,55,59,59,61,61,
63,63,1,0,93,94,3,0,73,73,76,76,79,79,1802,0,469,1,0,0,0,2,476,1,0,0,0,4,
484,1,0,0,0,6,486,1,0,0,0,8,497,1,0,0,0,10,499,1,0,0,0,12,510,1,0,0,0,14,
521,1,0,0,0,16,532,1,0,0,0,18,543,1,0,0,0,20,554,1,0,0,0,22,559,1,0,0,0,
24,564,1,0,0,0,26,572,1,0,0,0,28,577,1,0,0,0,30,579,1,0,0,0,32,586,1,0,0,
0,34,588,1,0,0,0,36,601,1,0,0,0,38,614,1,0,0,0,40,630,1,0,0,0,42,634,1,0,
0,0,44,643,1,0,0,0,46,645,1,0,0,0,48,648,1,0,0,0,50,654,1,0,0,0,52,664,1,
0,0,0,54,666,1,0,0,0,56,672,1,0,0,0,58,674,1,0,0,0,60,677,1,0,0,0,62,685,
1,0,0,0,64,689,1,0,0,0,66,699,1,0,0,0,68,703,1,0,0,0,70,705,1,0,0,0,72,709,
1,0,0,0,74,711,1,0,0,0,76,724,1,0,0,0,78,731,1,0,0,0,80,738,1,0,0,0,82,740,
1,0,0,0,84,749,1,0,0,0,86,757,1,0,0,0,88,764,1,0,0,0,90,771,1,0,0,0,92,788,
1,0,0,0,94,790,1,0,0,0,96,797,1,0,0,0,98,807,1,0,0,0,100,812,1,0,0,0,102,
814,1,0,0,0,104,816,1,0,0,0,106,821,1,0,0,0,108,831,1,0,0,0,110,833,1,0,
0,0,112,846,1,0,0,0,114,859,1,0,0,0,116,863,1,0,0,0,118,867,1,0,0,0,120,
874,1,0,0,0,122,882,1,0,0,0,124,886,1,0,0,0,126,888,1,0,0,0,128,894,1,0,
0,0,130,896,1,0,0,0,132,909,1,0,0,0,134,925,1,0,0,0,136,929,1,0,0,0,138,
938,1,0,0,0,140,940,1,0,0,0,142,942,1,0,0,0,144,954,1,0,0,0,146,958,1,0,
0,0,148,960,1,0,0,0,150,966,1,0,0,0,152,968,1,0,0,0,154,971,1,0,0,0,156,
978,1,0,0,0,158,986,1,0,0,0,160,990,1,0,0,0,162,1000,1,0,0,0,164,1002,1,
0,0,0,166,1012,1,0,0,0,168,1014,1,0,0,0,170,1027,1,0,0,0,172,1034,1,0,0,
0,174,1041,1,0,0,0,176,1043,1,0,0,0,178,1049,1,0,0,0,180,1056,1,0,0,0,182,
1058,1,0,0,0,184,1068,1,0,0,0,186,1078,1,0,0,0,188,1085,1,0,0,0,190,1092,
1,0,0,0,192,1102,1,0,0,0,194,1106,1,0,0,0,196,1114,1,0,0,0,198,1116,1,0,
0,0,200,1129,1,0,0,0,202,1136,1,0,0,0,204,1151,1,0,0,0,206,1158,1,0,0,0,
208,1160,1,0,0,0,210,1164,1,0,0,0,212,1177,1,0,0,0,214,1186,1,0,0,0,216,
1188,1,0,0,0,218,1192,1,0,0,0,220,1196,1,0,0,0,222,1202,1,0,0,0,224,1219,
1,0,0,0,226,1231,1,0,0,0,228,1233,1,0,0,0,230,1240,1,0,0,0,232,1244,1,0,
0,0,234,1246,1,0,0,0,236,1249,1,0,0,0,238,1253,1,0,0,0,240,1257,1,0,0,0,
242,1261,1,0,0,0,244,1265,1,0,0,0,246,1269,1,0,0,0,248,1271,1,0,0,0,250,
1280,1,0,0,0,252,1285,1,0,0,0,254,1289,1,0,0,0,256,1291,1,0,0,0,258,1297,
1,0,0,0,260,1299,1,0,0,0,262,1312,1,0,0,0,264,1329,1,0,0,0,266,1331,1,0,
0,0,268,1337,1,0,0,0,270,1345,1,0,0,0,272,1347,1,0,0,0,274,1359,1,0,0,0,
276,1364,1,0,0,0,278,1366,1,0,0,0,280,1370,1,0,0,0,282,1372,1,0,0,0,284,
1374,1,0,0,0,286,1378,1,0,0,0,288,1386,1,0,0,0,290,1390,1,0,0,0,292,1392,
1,0,0,0,294,1400,1,0,0,0,296,1408,1,0,0,0,298,1415,1,0,0,0,300,1419,1,0,
0,0,302,1424,1,0,0,0,304,1434,1,0,0,0,306,1441,1,0,0,0,308,1448,1,0,0,0,
310,1455,1,0,0,0,312,1457,1,0,0,0,314,1477,1,0,0,0,316,1482,1,0,0,0,318,
1484,1,0,0,0,320,1486,1,0,0,0,322,1488,1,0,0,0,324,1490,1,0,0,0,326,1492,
1,0,0,0,328,1494,1,0,0,0,330,1496,1,0,0,0,332,1498,1,0,0,0,334,1500,1,0,
0,0,336,1502,1,0,0,0,338,1506,1,0,0,0,340,1510,1,0,0,0,342,1512,1,0,0,0,
344,1514,1,0,0,0,346,1516,1,0,0,0,348,1518,1,0,0,0,350,1520,1,0,0,0,352,
1522,1,0,0,0,354,1524,1,0,0,0,356,1526,1,0,0,0,358,1528,1,0,0,0,360,1532,
1,0,0,0,362,1534,1,0,0,0,364,1538,1,0,0,0,366,1540,1,0,0,0,368,1550,1,0,
0,0,370,1552,1,0,0,0,372,1562,1,0,0,0,374,1564,1,0,0,0,376,1572,1,0,0,0,
378,1579,1,0,0,0,380,1581,1,0,0,0,382,1589,1,0,0,0,384,1593,1,0,0,0,386,
1596,1,0,0,0,388,1603,1,0,0,0,390,1608,1,0,0,0,392,1610,1,0,0,0,394,1617,
1,0,0,0,396,1620,1,0,0,0,398,1627,1,0,0,0,400,1629,1,0,0,0,402,1636,1,0,
0,0,404,1638,1,0,0,0,406,1647,1,0,0,0,408,1649,1,0,0,0,410,1660,1,0,0,0,
412,1664,1,0,0,0,414,1666,1,0,0,0,416,1670,1,0,0,0,418,1678,1,0,0,0,420,
1685,1,0,0,0,422,1687,1,0,0,0,424,1689,1,0,0,0,426,1696,1,0,0,0,428,1702,
1,0,0,0,430,1706,1,0,0,0,432,1714,1,0,0,0,434,1724,1,0,0,0,436,1726,1,0,
0,0,438,1733,1,0,0,0,440,1738,1,0,0,0,442,1752,1,0,0,0,444,1760,1,0,0,0,
446,1762,1,0,0,0,448,1787,1,0,0,0,450,1794,1,0,0,0,452,1796,1,0,0,0,454,
1806,1,0,0,0,456,1808,1,0,0,0,458,1810,1,0,0,0,460,1812,1,0,0,0,462,1814,
1,0,0,0,464,1816,1,0,0,0,466,468,3,2,1,0,467,466,1,0,0,0,468,471,1,0,0,0,
469,467,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,469,1,0,0,0,472,473,
5,0,0,1,473,1,1,0,0,0,474,477,3,4,2,0,475,477,3,436,218,0,476,474,1,0,0,
0,476,475,1,0,0,0,477,3,1,0,0,0,478,485,3,10,5,0,479,485,3,12,6,0,480,485,
3,14,7,0,481,485,3,16,8,0,482,485,3,18,9,0,483,485,3,6,3,0,484,478,1,0,0,
0,484,479,1,0,0,0,484,480,1,0,0,0,484,481,1,0,0,0,484,482,1,0,0,0,484,483,
1,0,0,0,485,5,1,0,0,0,486,487,5,1,0,0,487,488,3,454,227,0,488,489,5,2,0,
0,489,490,3,22,11,0,490,491,5,2,0,0,491,493,3,8,4,0,492,494,3,20,10,0,493,
492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,496,5,3,0,0,496,7,1,0,0,
0,497,498,3,250,125,0,498,9,1,0,0,0,499,500,5,4,0,0,500,501,3,454,227,0,
501,502,5,2,0,0,502,503,3,22,11,0,503,504,5,2,0,0,504,506,3,24,12,0,505,
507,3,20,10,0,506,505,1,0,0,0,506,507,1,0,0,0,507,508,1,0,0,0,508,509,5,
3,0,0,509,11,1,0,0,0,510,511,5,5,0,0,511,512,3,454,227,0,512,513,5,2,0,0,
513,514,3,22,11,0,514,515,5,2,0,0,515,517,3,120,60,0,516,518,3,20,10,0,517,
516,1,0,0,0,517,518,1,0,0,0,518,519,1,0,0,0,519,520,5,3,0,0,520,13,1,0,0,
0,521,522,5,6,0,0,522,523,3,454,227,0,523,524,5,2,0,0,524,525,3,22,11,0,
525,526,5,2,0,0,526,528,3,244,122,0,527,529,3,20,10,0,528,527,1,0,0,0,528,
529,1,0,0,0,529,530,1,0,0,0,530,531,5,3,0,0,531,15,1,0,0,0,532,533,5,7,0,
0,533,534,3,454,227,0,534,535,5,2,0,0,535,536,3,22,11,0,536,537,5,2,0,0,
537,539,3,250,125,0,538,540,3,20,10,0,539,538,1,0,0,0,539,540,1,0,0,0,540,
541,1,0,0,0,541,542,5,3,0,0,542,17,1,0,0,0,543,544,5,8,0,0,544,545,3,454,
227,0,545,546,5,2,0,0,546,547,3,22,11,0,547,548,5,2,0,0,548,550,3,310,155,
0,549,551,3,20,10,0,550,549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,
553,5,3,0,0,553,19,1,0,0,0,554,555,5,2,0,0,555,557,3,368,184,0,556,558,3,
404,202,0,557,556,1,0,0,0,557,558,1,0,0,0,558,21,1,0,0,0,559,560,5,93,0,
0,560,23,1,0,0,0,561,565,3,26,13,0,562,565,3,98,49,0,563,565,3,114,57,0,
564,561,1,0,0,0,564,562,1,0,0,0,564,563,1,0,0,0,565,25,1,0,0,0,566,573,3,
44,22,0,567,573,3,56,28,0,568,573,3,28,14,0,569,573,3,70,35,0,570,573,3,
116,58,0,571,573,3,118,59,0,572,566,1,0,0,0,572,567,1,0,0,0,572,568,1,0,
0,0,572,569,1,0,0,0,572,570,1,0,0,0,572,571,1,0,0,0,573,27,1,0,0,0,574,578,
3,30,15,0,575,578,3,32,16,0,576,578,3,106,53,0,577,574,1,0,0,0,577,575,1,
0,0,0,577,576,1,0,0,0,578,29,1,0,0,0,579,580,3,40,20,0,580,581,3,324,162,
0,581,582,3,40,20,0,582,31,1,0,0,0,583,587,3,34,17,0,584,587,3,36,18,0,585,
587,3,38,19,0,586,583,1,0,0,0,586,584,1,0,0,0,586,585,1,0,0,0,587,33,1,0,
0,0,588,589,6,17,-1,0,589,590,3,40,20,0,590,591,5,41,0,0,591,592,3,40,20,
0,592,598,1,0,0,0,593,594,10,1,0,0,594,595,5,41,0,0,595,597,3,40,20,0,596,
593,1,0,0,0,597,600,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,35,1,0,0,
0,600,598,1,0,0,0,601,602,6,18,-1,0,602,603,3,40,20,0,603,604,5,42,0,0,604,
605,3,40,20,0,605,611,1,0,0,0,606,607,10,1,0,0,607,608,5,42,0,0,608,610,
3,40,20,0,609,606,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,612,1,0,0,
0,612,37,1,0,0,0,613,611,1,0,0,0,614,615,6,19,-1,0,615,616,3,40,20,0,616,
617,5,64,0,0,617,618,3,40,20,0,618,624,1,0,0,0,619,620,10,1,0,0,620,621,
5,64,0,0,621,623,3,40,20,0,622,619,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,
0,624,625,1,0,0,0,625,39,1,0,0,0,626,624,1,0,0,0,627,631,3,44,22,0,628,631,
3,56,28,0,629,631,3,70,35,0,630,627,1,0,0,0,630,628,1,0,0,0,630,629,1,0,
0,0,631,41,1,0,0,0,632,635,3,44,22,0,633,635,3,58,29,0,634,632,1,0,0,0,634,
633,1,0,0,0,635,43,1,0,0,0,636,644,3,46,23,0,637,644,3,62,31,0,638,644,3,
366,183,0,639,640,5,9,0,0,640,641,3,26,13,0,641,642,5,10,0,0,642,644,1,0,
0,0,643,636,1,0,0,0,643,637,1,0,0,0,643,638,1,0,0,0,643,639,1,0,0,0,644,
45,1,0,0,0,645,646,3,48,24,0,646,647,3,40,20,0,647,47,1,0,0,0,648,649,3,
316,158,0,649,650,5,11,0,0,650,651,3,50,25,0,651,652,5,12,0,0,652,653,5,
13,0,0,653,49,1,0,0,0,654,659,3,52,26,0,655,656,5,2,0,0,656,658,3,52,26,
0,657,655,1,0,0,0,658,661,1,0,0,0,659,657,1,0,0,0,659,660,1,0,0,0,660,51,
1,0,0,0,661,659,1,0,0,0,662,665,3,54,27,0,663,665,3,366,183,0,664,662,1,
0,0,0,664,663,1,0,0,0,665,53,1,0,0,0,666,667,3,366,183,0,667,668,5,13,0,
0,668,669,3,100,50,0,669,55,1,0,0,0,670,673,3,58,29,0,671,673,3,60,30,0,
672,670,1,0,0,0,672,671,1,0,0,0,673,57,1,0,0,0,674,675,3,328,164,0,675,676,
3,42,21,0,676,59,1,0,0,0,677,678,3,86,43,0,678,679,5,52,0,0,679,680,3,86,
43,0,680,61,1,0,0,0,681,686,3,64,32,0,682,686,3,66,33,0,683,686,3,72,36,
0,684,686,3,92,46,0,685,681,1,0,0,0,685,682,1,0,0,0,685,683,1,0,0,0,685,
684,1,0,0,0,686,63,1,0,0,0,687,690,3,348,174,0,688,690,3,90,45,0,689,687,
1,0,0,0,689,688,1,0,0,0,690,65,1,0,0,0,691,700,3,352,176,0,692,700,3,68,
34,0,693,694,5,9,0,0,694,695,3,88,44,0,695,696,5,10,0,0,696,700,1,0,0,0,
697,700,3,222,111,0,698,700,3,74,37,0,699,691,1,0,0,0,699,692,1,0,0,0,699,
693,1,0,0,0,699,697,1,0,0,0,699,698,1,0,0,0,700,67,1,0,0,0,701,704,3,364,
182,0,702,704,3,362,181,0,703,701,1,0,0,0,703,702,1,0,0,0,704,69,1,0,0,0,
705,706,3,86,43,0,706,707,3,346,173,0,707,708,3,86,43,0,708,71,1,0,0,0,709,
710,3,356,178,0,710,73,1,0,0,0,711,712,5,14,0,0,712,713,3,76,38,0,713,714,
5,2,0,0,714,715,3,80,40,0,715,716,5,2,0,0,716,717,3,26,13,0,717,718,5,10,
0,0,718,75,1,0,0,0,719,725,3,98,49,0,720,721,5,11,0,0,721,722,3,78,39,0,
722,723,5,12,0,0,723,725,1,0,0,0,724,719,1,0,0,0,724,720,1,0,0,0,725,77,
1,0,0,0,726,732,3,98,49,0,727,728,3,98,49,0,728,729,5,2,0,0,729,730,3,78,
39,0,730,732,1,0,0,0,731,726,1,0,0,0,731,727,1,0,0,0,732,79,1,0,0,0,733,
739,3,82,41,0,734,735,5,11,0,0,735,736,3,84,42,0,736,737,5,12,0,0,737,739,
1,0,0,0,738,733,1,0,0,0,738,734,1,0,0,0,739,81,1,0,0,0,740,741,3,26,13,0,
741,742,5,65,0,0,742,743,3,26,13,0,743,83,1,0,0,0,744,750,3,82,41,0,745,
746,3,82,41,0,746,747,5,2,0,0,747,748,3,84,42,0,748,750,1,0,0,0,749,744,
1,0,0,0,749,745,1,0,0,0,750,85,1,0,0,0,751,758,3,62,31,0,752,758,3,366,183,
0,753,754,5,9,0,0,754,755,3,26,13,0,755,756,5,10,0,0,756,758,1,0,0,0,757,
751,1,0,0,0,757,752,1,0,0,0,757,753,1,0,0,0,758,87,1,0,0,0,759,765,3,324,
162,0,760,765,3,326,163,0,761,765,5,53,0,0,762,765,5,52,0,0,763,765,3,328,
164,0,764,759,1,0,0,0,764,760,1,0,0,0,764,761,1,0,0,0,764,762,1,0,0,0,764,
763,1,0,0,0,765,89,1,0,0,0,766,772,5,15,0,0,767,768,5,11,0,0,768,769,3,96,
48,0,769,770,5,12,0,0,770,772,1,0,0,0,771,766,1,0,0,0,771,767,1,0,0,0,772,
91,1,0,0,0,773,774,3,350,175,0,774,775,5,9,0,0,775,776,3,94,47,0,776,777,
5,10,0,0,777,789,1,0,0,0,778,779,3,354,177,0,779,780,5,9,0,0,780,781,3,94,
47,0,781,782,5,10,0,0,782,789,1,0,0,0,783,784,3,358,179,0,784,785,5,9,0,
0,785,786,3,94,47,0,786,787,5,10,0,0,787,789,1,0,0,0,788,773,1,0,0,0,788,
778,1,0,0,0,788,783,1,0,0,0,789,93,1,0,0,0,790,791,3,96,48,0,791,95,1,0,
0,0,792,798,3,26,13,0,793,794,3,26,13,0,794,795,5,2,0,0,795,796,3,96,48,
0,796,798,1,0,0,0,797,792,1,0,0,0,797,793,1,0,0,0,798,97,1,0,0,0,799,800,
3,340,170,0,800,801,5,13,0,0,801,802,3,100,50,0,802,808,1,0,0,0,803,804,
5,9,0,0,804,805,3,98,49,0,805,806,5,10,0,0,806,808,1,0,0,0,807,799,1,0,0,
0,807,803,1,0,0,0,808,99,1,0,0,0,809,813,3,102,51,0,810,813,3,108,54,0,811,
813,3,104,52,0,812,809,1,0,0,0,812,810,1,0,0,0,812,811,1,0,0,0,813,101,1,
0,0,0,814,815,3,44,22,0,815,103,1,0,0,0,816,817,3,38,19,0,817,105,1,0,0,
0,818,822,3,108,54,0,819,822,3,110,55,0,820,822,3,112,56,0,821,818,1,0,0,
0,821,819,1,0,0,0,821,820,1,0,0,0,822,107,1,0,0,0,823,824,3,102,51,0,824,
825,5,67,0,0,825,826,3,102,51,0,826,832,1,0,0,0,827,828,3,102,51,0,828,829,
5,67,0,0,829,830,3,108,54,0,830,832,1,0,0,0,831,823,1,0,0,0,831,827,1,0,
0,0,832,109,1,0,0,0,833,834,6,55,-1,0,834,835,3,102,51,0,835,836,5,68,0,
0,836,837,3,102,51,0,837,843,1,0,0,0,838,839,10,1,0,0,839,840,5,68,0,0,840,
842,3,102,51,0,841,838,1,0,0,0,842,845,1,0,0,0,843,841,1,0,0,0,843,844,1,
0,0,0,844,111,1,0,0,0,845,843,1,0,0,0,846,847,6,56,-1,0,847,848,3,102,51,
0,848,849,5,69,0,0,849,850,3,102,51,0,850,856,1,0,0,0,851,852,10,1,0,0,852,
853,5,69,0,0,853,855,3,102,51,0,854,851,1,0,0,0,855,858,1,0,0,0,856,854,
1,0,0,0,856,857,1,0,0,0,857,113,1,0,0,0,858,856,1,0,0,0,859,860,3,340,170,
0,860,861,5,71,0,0,861,862,3,338,169,0,862,115,1,0,0,0,863,864,3,62,31,0,
864,865,5,66,0,0,865,866,3,26,13,0,866,117,1,0,0,0,867,868,3,90,45,0,868,
869,5,72,0,0,869,870,3,90,45,0,870,119,1,0,0,0,871,875,3,122,61,0,872,875,
3,192,96,0,873,875,3,216,108,0,874,871,1,0,0,0,874,872,1,0,0,0,874,873,1,
0,0,0,875,121,1,0,0,0,876,883,3,138,69,0,877,883,3,150,75,0,878,883,3,124,
62,0,879,883,3,164,82,0,880,883,3,218,109,0,881,883,3,220,110,0,882,876,
1,0,0,0,882,877,1,0,0,0,882,878,1,0,0,0,882,879,1,0,0,0,882,880,1,0,0,0,
882,881,1,0,0,0,883,123,1,0,0,0,884,887,3,126,63,0,885,887,3,128,64,0,886,
884,1,0,0,0,886,885,1,0,0,0,887,125,1,0,0,0,888,889,3,134,67,0,889,890,3,
324,162,0,890,891,3,134,67,0,891,127,1,0,0,0,892,895,3,130,65,0,893,895,
3,132,66,0,894,892,1,0,0,0,894,893,1,0,0,0,895,129,1,0,0,0,896,897,6,65,
-1,0,897,898,3,134,67,0,898,899,5,41,0,0,899,900,3,134,67,0,900,906,1,0,
0,0,901,902,10,1,0,0,902,903,5,41,0,0,903,905,3,134,67,0,904,901,1,0,0,0,
905,908,1,0,0,0,906,904,1,0,0,0,906,907,1,0,0,0,907,131,1,0,0,0,908,906,
1,0,0,0,909,910,6,66,-1,0,910,911,3,134,67,0,911,912,5,42,0,0,912,913,3,
134,67,0,913,919,1,0,0,0,914,915,10,1,0,0,915,916,5,42,0,0,916,918,3,134,
67,0,917,914,1,0,0,0,918,921,1,0,0,0,919,917,1,0,0,0,919,920,1,0,0,0,920,
133,1,0,0,0,921,919,1,0,0,0,922,926,3,138,69,0,923,926,3,150,75,0,924,926,
3,164,82,0,925,922,1,0,0,0,925,923,1,0,0,0,925,924,1,0,0,0,926,135,1,0,0,
0,927,930,3,138,69,0,928,930,3,152,76,0,929,927,1,0,0,0,929,928,1,0,0,0,
930,137,1,0,0,0,931,939,3,142,71,0,932,939,3,156,78,0,933,939,3,140,70,0,
934,935,5,9,0,0,935,936,3,122,61,0,936,937,5,10,0,0,937,939,1,0,0,0,938,
931,1,0,0,0,938,932,1,0,0,0,938,933,1,0,0,0,938,934,1,0,0,0,939,139,1,0,
0,0,940,941,3,366,183,0,941,141,1,0,0,0,942,943,3,322,161,0,943,944,5,11,
0,0,944,945,3,144,72,0,945,946,5,12,0,0,946,947,5,13,0,0,947,948,3,134,67,
0,948,143,1,0,0,0,949,955,3,146,73,0,950,951,3,146,73,0,951,952,5,2,0,0,
952,953,3,144,72,0,953,955,1,0,0,0,954,949,1,0,0,0,954,950,1,0,0,0,955,145,
1,0,0,0,956,959,3,148,74,0,957,959,3,366,183,0,958,956,1,0,0,0,958,957,1,
0,0,0,959,147,1,0,0,0,960,961,3,366,183,0,961,962,5,13,0,0,962,963,3,204,
102,0,963,149,1,0,0,0,964,967,3,152,76,0,965,967,3,154,77,0,966,964,1,0,
0,0,966,965,1,0,0,0,967,151,1,0,0,0,968,969,3,328,164,0,969,970,3,136,68,
0,970,153,1,0,0,0,971,972,3,186,93,0,972,973,5,52,0,0,973,974,3,186,93,0,
974,155,1,0,0,0,975,979,3,158,79,0,976,979,3,160,80,0,977,979,3,166,83,0,
978,975,1,0,0,0,978,976,1,0,0,0,978,977,1,0,0,0,979,157,1,0,0,0,980,987,
3,348,174,0,981,982,3,350,175,0,982,983,5,9,0,0,983,984,3,190,95,0,984,985,
5,10,0,0,985,987,1,0,0,0,986,980,1,0,0,0,986,981,1,0,0,0,987,159,1,0,0,0,
988,991,3,162,81,0,989,991,3,222,111,0,990,988,1,0,0,0,990,989,1,0,0,0,991,
161,1,0,0,0,992,1001,3,352,176,0,993,994,3,354,177,0,994,995,5,9,0,0,995,
996,3,190,95,0,996,997,5,10,0,0,997,1001,1,0,0,0,998,1001,3,182,91,0,999,
1001,3,168,84,0,1000,992,1,0,0,0,1000,993,1,0,0,0,1000,998,1,0,0,0,1000,
999,1,0,0,0,1001,163,1,0,0,0,1002,1003,3,186,93,0,1003,1004,3,346,173,0,
1004,1005,3,186,93,0,1005,165,1,0,0,0,1006,1013,3,356,178,0,1007,1008,3,
358,179,0,1008,1009,5,9,0,0,1009,1010,3,190,95,0,1010,1011,5,10,0,0,1011,
1013,1,0,0,0,1012,1006,1,0,0,0,1012,1007,1,0,0,0,1013,167,1,0,0,0,1014,1015,
5,14,0,0,1015,1016,3,170,85,0,1016,1017,5,2,0,0,1017,1018,3,174,87,0,1018,
1019,5,2,0,0,1019,1020,3,184,92,0,1020,1021,5,10,0,0,1021,169,1,0,0,0,1022,
1028,3,192,96,0,1023,1024,5,11,0,0,1024,1025,3,172,86,0,1025,1026,5,12,0,
0,1026,1028,1,0,0,0,1027,1022,1,0,0,0,1027,1023,1,0,0,0,1028,171,1,0,0,0,
1029,1035,3,192,96,0,1030,1031,3,192,96,0,1031,1032,5,2,0,0,1032,1033,3,
172,86,0,1033,1035,1,0,0,0,1034,1029,1,0,0,0,1034,1030,1,0,0,0,1035,173,
1,0,0,0,1036,1042,3,176,88,0,1037,1038,5,11,0,0,1038,1039,3,180,90,0,1039,
1040,5,12,0,0,1040,1042,1,0,0,0,1041,1036,1,0,0,0,1041,1037,1,0,0,0,1042,
175,1,0,0,0,1043,1044,3,178,89,0,1044,1045,5,65,0,0,1045,1046,3,184,92,0,
1046,177,1,0,0,0,1047,1050,3,158,79,0,1048,1050,3,188,94,0,1049,1047,1,0,
0,0,1049,1048,1,0,0,0,1050,179,1,0,0,0,1051,1057,3,176,88,0,1052,1053,3,
176,88,0,1053,1054,5,2,0,0,1054,1055,3,180,90,0,1055,1057,1,0,0,0,1056,1051,
1,0,0,0,1056,1052,1,0,0,0,1057,181,1,0,0,0,1058,1059,3,222,111,0,1059,1060,
5,64,0,0,1060,1061,5,9,0,0,1061,1062,3,190,95,0,1062,1063,5,10,0,0,1063,
183,1,0,0,0,1064,1069,3,122,61,0,1065,1069,3,364,182,0,1066,1069,3,188,94,
0,1067,1069,3,236,118,0,1068,1064,1,0,0,0,1068,1065,1,0,0,0,1068,1066,1,
0,0,0,1068,1067,1,0,0,0,1069,185,1,0,0,0,1070,1079,3,156,78,0,1071,1079,
3,364,182,0,1072,1079,3,188,94,0,1073,1079,3,366,183,0,1074,1075,5,9,0,0,
1075,1076,3,122,61,0,1076,1077,5,10,0,0,1077,1079,1,0,0,0,1078,1070,1,0,
0,0,1078,1071,1,0,0,0,1078,1072,1,0,0,0,1078,1073,1,0,0,0,1078,1074,1,0,
0,0,1079,187,1,0,0,0,1080,1086,5,15,0,0,1081,1082,5,11,0,0,1082,1083,3,190,
95,0,1083,1084,5,12,0,0,1084,1086,1,0,0,0,1085,1080,1,0,0,0,1085,1081,1,
0,0,0,1086,189,1,0,0,0,1087,1093,3,184,92,0,1088,1089,3,184,92,0,1089,1090,
5,2,0,0,1090,1091,3,190,95,0,1091,1093,1,0,0,0,1092,1087,1,0,0,0,1092,1088,
1,0,0,0,1093,191,1,0,0,0,1094,1095,3,340,170,0,1095,1096,5,13,0,0,1096,1097,
3,194,97,0,1097,1103,1,0,0,0,1098,1099,5,9,0,0,1099,1100,3,192,96,0,1100,
1101,5,10,0,0,1101,1103,1,0,0,0,1102,1094,1,0,0,0,1102,1098,1,0,0,0,1103,
193,1,0,0,0,1104,1107,3,204,102,0,1105,1107,3,196,98,0,1106,1104,1,0,0,0,
1106,1105,1,0,0,0,1107,195,1,0,0,0,1108,1115,3,208,104,0,1109,1115,1,0,0,
0,1110,1111,5,9,0,0,1111,1112,3,196,98,0,1112,1113,5,10,0,0,1113,1115,1,
0,0,0,1114,1108,1,0,0,0,1114,1109,1,0,0,0,1114,1110,1,0,0,0,1115,197,1,0,
0,0,1116,1117,5,51,0,0,1117,1118,5,11,0,0,1118,1119,3,144,72,0,1119,1120,
5,12,0,0,1120,1121,5,13,0,0,1121,1122,3,200,100,0,1122,199,1,0,0,0,1123,
1130,3,204,102,0,1124,1125,5,9,0,0,1125,1126,3,208,104,0,1126,1127,5,10,
0,0,1127,1130,1,0,0,0,1128,1130,3,198,99,0,1129,1123,1,0,0,0,1129,1124,1,
0,0,0,1129,1128,1,0,0,0,1130,201,1,0,0,0,1131,1137,3,204,102,0,1132,1133,
5,9,0,0,1133,1134,3,210,105,0,1134,1135,5,10,0,0,1135,1137,1,0,0,0,1136,
1131,1,0,0,0,1136,1132,1,0,0,0,1137,203,1,0,0,0,1138,1152,3,330,165,0,1139,
1152,3,334,167,0,1140,1152,3,366,183,0,1141,1142,3,332,166,0,1142,1143,5,
9,0,0,1143,1144,3,206,103,0,1144,1145,5,10,0,0,1145,1152,1,0,0,0,1146,1147,
5,9,0,0,1147,1148,3,204,102,0,1148,1149,5,10,0,0,1149,1152,1,0,0,0,1150,
1152,3,212,106,0,1151,1138,1,0,0,0,1151,1139,1,0,0,0,1151,1140,1,0,0,0,1151,
1141,1,0,0,0,1151,1146,1,0,0,0,1151,1150,1,0,0,0,1152,205,1,0,0,0,1153,1159,
3,204,102,0,1154,1155,3,204,102,0,1155,1156,5,2,0,0,1156,1157,3,206,103,
0,1157,1159,1,0,0,0,1158,1153,1,0,0,0,1158,1154,1,0,0,0,1159,207,1,0,0,0,
1160,1161,3,202,101,0,1161,1162,5,67,0,0,1162,1163,3,204,102,0,1163,209,
1,0,0,0,1164,1165,6,105,-1,0,1165,1166,3,202,101,0,1166,1167,5,68,0,0,1167,
1168,3,204,102,0,1168,1174,1,0,0,0,1169,1170,10,1,0,0,1170,1171,5,68,0,0,
1171,1173,3,204,102,0,1172,1169,1,0,0,0,1173,1176,1,0,0,0,1174,1172,1,0,
0,0,1174,1175,1,0,0,0,1175,211,1,0,0,0,1176,1174,1,0,0,0,1177,1178,5,11,
0,0,1178,1179,3,214,107,0,1179,1180,5,12,0,0,1180,213,1,0,0,0,1181,1187,
3,194,97,0,1182,1183,3,194,97,0,1183,1184,5,2,0,0,1184,1185,3,214,107,0,
1185,1187,1,0,0,0,1186,1181,1,0,0,0,1186,1182,1,0,0,0,1187,215,1,0,0,0,1188,
1189,3,340,170,0,1189,1190,5,71,0,0,1190,1191,3,338,169,0,1191,217,1,0,0,
0,1192,1193,3,156,78,0,1193,1194,5,66,0,0,1194,1195,3,184,92,0,1195,219,
1,0,0,0,1196,1197,3,188,94,0,1197,1198,5,72,0,0,1198,1199,3,188,94,0,1199,
221,1,0,0,0,1200,1203,3,224,112,0,1201,1203,3,226,113,0,1202,1200,1,0,0,
0,1202,1201,1,0,0,0,1203,223,1,0,0,0,1204,1220,5,16,0,0,1205,1220,5,17,0,
0,1206,1220,5,18,0,0,1207,1208,5,11,0,0,1208,1209,3,234,117,0,1209,1210,
5,12,0,0,1210,1220,1,0,0,0,1211,1212,5,19,0,0,1212,1213,3,234,117,0,1213,
1214,5,67,0,0,1214,1220,1,0,0,0,1215,1216,5,20,0,0,1216,1217,3,234,117,0,
1217,1218,5,21,0,0,1218,1220,1,0,0,0,1219,1204,1,0,0,0,1219,1205,1,0,0,0,
1219,1206,1,0,0,0,1219,1207,1,0,0,0,1219,1211,1,0,0,0,1219,1215,1,0,0,0,
1220,225,1,0,0,0,1221,1222,5,20,0,0,1222,1223,3,228,114,0,1223,1224,5,21,
0,0,1224,1232,1,0,0,0,1225,1226,5,20,0,0,1226,1227,3,228,114,0,1227,1228,
5,9,0,0,1228,1229,3,230,115,0,1229,1230,5,22,0,0,1230,1232,1,0,0,0,1231,
1221,1,0,0,0,1231,1225,1,0,0,0,1232,227,1,0,0,0,1233,1234,3,360,180,0,1234,
229,1,0,0,0,1235,1241,3,232,116,0,1236,1237,3,232,116,0,1237,1238,5,2,0,
0,1238,1239,3,230,115,0,1239,1241,1,0,0,0,1240,1235,1,0,0,0,1240,1236,1,
0,0,0,1241,231,1,0,0,0,1242,1245,3,234,117,0,1243,1245,3,236,118,0,1244,
1242,1,0,0,0,1244,1243,1,0,0,0,1245,233,1,0,0,0,1246,1247,5,70,0,0,1247,
1248,3,186,93,0,1248,235,1,0,0,0,1249,1250,3,360,180,0,1250,1251,5,65,0,
0,1251,1252,3,186,93,0,1252,237,1,0,0,0,1253,1254,3,240,120,0,1254,1255,
5,66,0,0,1255,1256,3,242,121,0,1256,239,1,0,0,0,1257,1258,3,352,176,0,1258,
241,1,0,0,0,1259,1262,3,352,176,0,1260,1262,3,188,94,0,1261,1259,1,0,0,0,
1261,1260,1,0,0,0,1262,243,1,0,0,0,1263,1266,3,246,123,0,1264,1266,3,192,
96,0,1265,1263,1,0,0,0,1265,1264,1,0,0,0,1266,245,1,0,0,0,1267,1270,3,248,
124,0,1268,1270,3,310,155,0,1269,1267,1,0,0,0,1269,1268,1,0,0,0,1270,247,
1,0,0,0,1271,1272,5,54,0,0,1272,1273,5,11,0,0,1273,1274,3,144,72,0,1274,
1275,5,12,0,0,1275,1276,5,13,0,0,1276,1277,3,246,123,0,1277,249,1,0,0,0,
1278,1281,3,252,126,0,1279,1281,3,304,152,0,1280,1278,1,0,0,0,1280,1279,
1,0,0,0,1281,251,1,0,0,0,1282,1286,3,254,127,0,1283,1286,3,264,132,0,1284,
1286,3,270,135,0,1285,1282,1,0,0,0,1285,1283,1,0,0,0,1285,1284,1,0,0,0,1286,
253,1,0,0,0,1287,1290,3,256,128,0,1288,1290,3,258,129,0,1289,1287,1,0,0,
0,1289,1288,1,0,0,0,1290,255,1,0,0,0,1291,1292,3,268,134,0,1292,1293,3,324,
162,0,1293,1294,3,268,134,0,1294,257,1,0,0,0,1295,1298,3,260,130,0,1296,
1298,3,262,131,0,1297,1295,1,0,0,0,1297,1296,1,0,0,0,1298,259,1,0,0,0,1299,
1300,6,130,-1,0,1300,1301,3,268,134,0,1301,1302,5,41,0,0,1302,1303,3,268,
134,0,1303,1309,1,0,0,0,1304,1305,10,1,0,0,1305,1306,5,41,0,0,1306,1308,
3,268,134,0,1307,1304,1,0,0,0,1308,1311,1,0,0,0,1309,1307,1,0,0,0,1309,1310,
1,0,0,0,1310,261,1,0,0,0,1311,1309,1,0,0,0,1312,1313,6,131,-1,0,1313,1314,
3,268,134,0,1314,1315,5,42,0,0,1315,1316,3,268,134,0,1316,1322,1,0,0,0,1317,
1318,10,1,0,0,1318,1319,5,42,0,0,1319,1321,3,268,134,0,1320,1317,1,0,0,0,
1321,1324,1,0,0,0,1322,1320,1,0,0,0,1322,1323,1,0,0,0,1323,263,1,0,0,0,1324,
1322,1,0,0,0,1325,1326,3,328,164,0,1326,1327,3,268,134,0,1327,1330,1,0,0,
0,1328,1330,3,266,133,0,1329,1325,1,0,0,0,1329,1328,1,0,0,0,1330,265,1,0,
0,0,1331,1332,3,300,150,0,1332,1333,5,52,0,0,1333,1334,3,300,150,0,1334,
267,1,0,0,0,1335,1338,3,270,135,0,1336,1338,3,264,132,0,1337,1335,1,0,0,
0,1337,1336,1,0,0,0,1338,269,1,0,0,0,1339,1346,3,272,136,0,1340,1346,3,276,
138,0,1341,1342,5,9,0,0,1342,1343,3,252,126,0,1343,1344,5,10,0,0,1344,1346,
1,0,0,0,1345,1339,1,0,0,0,1345,1340,1,0,0,0,1345,1341,1,0,0,0,1346,271,1,
0,0,0,1347,1348,3,322,161,0,1348,1349,5,11,0,0,1349,1350,3,274,137,0,1350,
1351,5,12,0,0,1351,1352,5,13,0,0,1352,1353,3,268,134,0,1353,273,1,0,0,0,
1354,1360,3,366,183,0,1355,1356,3,366,183,0,1356,1357,5,2,0,0,1357,1358,
3,274,137,0,1358,1360,1,0,0,0,1359,1354,1,0,0,0,1359,1355,1,0,0,0,1360,275,
1,0,0,0,1361,1365,3,278,139,0,1362,1365,3,280,140,0,1363,1365,3,286,143,
0,1364,1361,1,0,0,0,1364,1362,1,0,0,0,1364,1363,1,0,0,0,1365,277,1,0,0,0,
1366,1367,3,288,144,0,1367,279,1,0,0,0,1368,1371,3,282,141,0,1369,1371,3,
284,142,0,1370,1368,1,0,0,0,1370,1369,1,0,0,0,1371,281,1,0,0,0,1372,1373,
3,294,147,0,1373,283,1,0,0,0,1374,1375,3,300,150,0,1375,1376,3,346,173,0,
1376,1377,3,300,150,0,1377,285,1,0,0,0,1378,1379,3,296,148,0,1379,287,1,
0,0,0,1380,1387,3,348,174,0,1381,1382,3,350,175,0,1382,1383,5,9,0,0,1383,
1384,3,298,149,0,1384,1385,5,10,0,0,1385,1387,1,0,0,0,1386,1380,1,0,0,0,
1386,1381,1,0,0,0,1387,289,1,0,0,0,1388,1391,3,364,182,0,1389,1391,3,292,
146,0,1390,1388,1,0,0,0,1390,1389,1,0,0,0,1391,291,1,0,0,0,1392,1393,3,294,
147,0,1393,293,1,0,0,0,1394,1401,3,352,176,0,1395,1396,3,354,177,0,1396,
1397,5,9,0,0,1397,1398,3,298,149,0,1398,1399,5,10,0,0,1399,1401,1,0,0,0,
1400,1394,1,0,0,0,1400,1395,1,0,0,0,1401,295,1,0,0,0,1402,1409,3,356,178,
0,1403,1404,3,358,179,0,1404,1405,5,9,0,0,1405,1406,3,298,149,0,1406,1407,
5,10,0,0,1407,1409,1,0,0,0,1408,1402,1,0,0,0,1408,1403,1,0,0,0,1409,297,
1,0,0,0,1410,1416,3,300,150,0,1411,1412,3,300,150,0,1412,1413,5,2,0,0,1413,
1414,3,298,149,0,1414,1416,1,0,0,0,1415,1410,1,0,0,0,1415,1411,1,0,0,0,1416,
299,1,0,0,0,1417,1420,3,302,151,0,1418,1420,3,366,183,0,1419,1417,1,0,0,
0,1419,1418,1,0,0,0,1420,301,1,0,0,0,1421,1425,3,288,144,0,1422,1425,3,290,
145,0,1423,1425,3,296,148,0,1424,1421,1,0,0,0,1424,1422,1,0,0,0,1424,1423,
1,0,0,0,1425,303,1,0,0,0,1426,1427,3,306,153,0,1427,1428,5,72,0,0,1428,1429,
3,306,153,0,1429,1435,1,0,0,0,1430,1431,5,9,0,0,1431,1432,3,304,152,0,1432,
1433,5,10,0,0,1433,1435,1,0,0,0,1434,1426,1,0,0,0,1434,1430,1,0,0,0,1435,
305,1,0,0,0,1436,1442,5,23,0,0,1437,1438,5,20,0,0,1438,1439,3,308,154,0,
1439,1440,5,21,0,0,1440,1442,1,0,0,0,1441,1436,1,0,0,0,1441,1437,1,0,0,0,
1442,307,1,0,0,0,1443,1449,3,252,126,0,1444,1445,3,252,126,0,1445,1446,5,
2,0,0,1446,1447,3,308,154,0,1447,1449,1,0,0,0,1448,1443,1,0,0,0,1448,1444,
1,0,0,0,1449,309,1,0,0,0,1450,1456,3,312,156,0,1451,1452,5,9,0,0,1452,1453,
3,312,156,0,1453,1454,5,10,0,0,1454,1456,1,0,0,0,1455,1450,1,0,0,0,1455,
1451,1,0,0,0,1456,311,1,0,0,0,1457,1458,6,156,-1,0,1458,1459,3,314,157,0,
1459,1465,1,0,0,0,1460,1461,10,1,0,0,1461,1462,5,41,0,0,1462,1464,3,314,
157,0,1463,1460,1,0,0,0,1464,1467,1,0,0,0,1465,1463,1,0,0,0,1465,1466,1,
0,0,0,1466,313,1,0,0,0,1467,1465,1,0,0,0,1468,1478,3,276,138,0,1469,1470,
5,49,0,0,1470,1478,3,276,138,0,1471,1472,5,49,0,0,1472,1473,5,9,0,0,1473,
1474,3,276,138,0,1474,1475,5,10,0,0,1475,1478,1,0,0,0,1476,1478,3,266,133,
0,1477,1468,1,0,0,0,1477,1469,1,0,0,0,1477,1471,1,0,0,0,1477,1476,1,0,0,
0,1478,315,1,0,0,0,1479,1483,3,322,161,0,1480,1483,3,320,160,0,1481,1483,
3,318,159,0,1482,1479,1,0,0,0,1482,1480,1,0,0,0,1482,1481,1,0,0,0,1483,317,
1,0,0,0,1484,1485,7,0,0,0,1485,319,1,0,0,0,1486,1487,7,1,0,0,1487,321,1,
0,0,0,1488,1489,7,2,0,0,1489,323,1,0,0,0,1490,1491,7,3,0,0,1491,325,1,0,
0,0,1492,1493,7,4,0,0,1493,327,1,0,0,0,1494,1495,5,49,0,0,1495,329,1,0,0,
0,1496,1497,3,332,166,0,1497,331,1,0,0,0,1498,1499,3,456,228,0,1499,333,
1,0,0,0,1500,1501,5,90,0,0,1501,335,1,0,0,0,1502,1503,3,460,230,0,1503,337,
1,0,0,0,1504,1507,3,340,170,0,1505,1507,3,352,176,0,1506,1504,1,0,0,0,1506,
1505,1,0,0,0,1507,339,1,0,0,0,1508,1511,3,348,174,0,1509,1511,3,356,178,
0,1510,1508,1,0,0,0,1510,1509,1,0,0,0,1511,341,1,0,0,0,1512,1513,5,90,0,
0,1513,343,1,0,0,0,1514,1515,5,90,0,0,1515,345,1,0,0,0,1516,1517,7,5,0,0,
1517,347,1,0,0,0,1518,1519,3,350,175,0,1519,349,1,0,0,0,1520,1521,3,456,
228,0,1521,351,1,0,0,0,1522,1523,3,354,177,0,1523,353,1,0,0,0,1524,1525,
3,458,229,0,1525,355,1,0,0,0,1526,1527,3,358,179,0,1527,357,1,0,0,0,1528,
1529,3,460,230,0,1529,359,1,0,0,0,1530,1533,3,352,176,0,1531,1533,3,356,
178,0,1532,1530,1,0,0,0,1532,1531,1,0,0,0,1533,361,1,0,0,0,1534,1535,7,6,
0,0,1535,363,1,0,0,0,1536,1539,3,462,231,0,1537,1539,5,95,0,0,1538,1536,
1,0,0,0,1538,1537,1,0,0,0,1539,365,1,0,0,0,1540,1541,5,92,0,0,1541,367,1,
0,0,0,1542,1551,3,372,186,0,1543,1551,3,386,193,0,1544,1551,3,390,195,0,
1545,1551,5,93,0,0,1546,1547,5,11,0,0,1547,1548,3,370,185,0,1548,1549,5,
12,0,0,1549,1551,1,0,0,0,1550,1542,1,0,0,0,1550,1543,1,0,0,0,1550,1544,1,
0,0,0,1550,1545,1,0,0,0,1550,1546,1,0,0,0,1551,369,1,0,0,0,1552,1557,3,368,
184,0,1553,1554,5,2,0,0,1554,1556,3,368,184,0,1555,1553,1,0,0,0,1556,1559,
1,0,0,0,1557,1555,1,0,0,0,1557,1558,1,0,0,0,1558,371,1,0,0,0,1559,1557,1,
0,0,0,1560,1563,3,454,227,0,1561,1563,3,374,187,0,1562,1560,1,0,0,0,1562,
1561,1,0,0,0,1563,373,1,0,0,0,1564,1565,5,24,0,0,1565,1566,3,376,188,0,1566,
1567,5,2,0,0,1567,1568,3,406,203,0,1568,1569,5,2,0,0,1569,1570,3,378,189,
0,1570,1571,5,10,0,0,1571,375,1,0,0,0,1572,1573,3,456,228,0,1573,377,1,0,
0,0,1574,1580,5,15,0,0,1575,1576,5,11,0,0,1576,1577,3,380,190,0,1577,1578,
5,12,0,0,1578,1580,1,0,0,0,1579,1574,1,0,0,0,1579,1575,1,0,0,0,1580,379,
1,0,0,0,1581,1586,3,382,191,0,1582,1583,5,2,0,0,1583,1585,3,382,191,0,1584,
1582,1,0,0,0,1585,1588,1,0,0,0,1586,1584,1,0,0,0,1586,1587,1,0,0,0,1587,
381,1,0,0,0,1588,1586,1,0,0,0,1589,1591,3,368,184,0,1590,1592,3,384,192,
0,1591,1590,1,0,0,0,1591,1592,1,0,0,0,1592,383,1,0,0,0,1593,1594,5,13,0,
0,1594,1595,3,450,225,0,1595,385,1,0,0,0,1596,1597,5,25,0,0,1597,1599,3,
388,194,0,1598,1600,3,404,202,0,1599,1598,1,0,0,0,1599,1600,1,0,0,0,1600,
1601,1,0,0,0,1601,1602,5,10,0,0,1602,387,1,0,0,0,1603,1604,5,93,0,0,1604,
389,1,0,0,0,1605,1609,3,392,196,0,1606,1609,3,396,198,0,1607,1609,3,400,
200,0,1608,1605,1,0,0,0,1608,1606,1,0,0,0,1608,1607,1,0,0,0,1609,391,1,0,
0,0,1610,1611,5,26,0,0,1611,1613,3,464,232,0,1612,1614,3,394,197,0,1613,
1612,1,0,0,0,1613,1614,1,0,0,0,1614,1615,1,0,0,0,1615,1616,5,10,0,0,1616,
393,1,0,0,0,1617,1618,5,2,0,0,1618,1619,3,454,227,0,1619,395,1,0,0,0,1620,
1621,5,27,0,0,1621,1623,3,398,199,0,1622,1624,3,404,202,0,1623,1622,1,0,
0,0,1623,1624,1,0,0,0,1624,1625,1,0,0,0,1625,1626,5,10,0,0,1626,397,1,0,
0,0,1627,1628,5,93,0,0,1628,399,1,0,0,0,1629,1630,5,28,0,0,1630,1632,3,402,
201,0,1631,1633,3,404,202,0,1632,1631,1,0,0,0,1632,1633,1,0,0,0,1633,1634,
1,0,0,0,1634,1635,5,10,0,0,1635,401,1,0,0,0,1636,1637,3,456,228,0,1637,403,
1,0,0,0,1638,1639,5,2,0,0,1639,1640,3,406,203,0,1640,405,1,0,0,0,1641,1648,
5,15,0,0,1642,1643,5,11,0,0,1643,1644,3,408,204,0,1644,1645,5,12,0,0,1645,
1648,1,0,0,0,1646,1648,3,450,225,0,1647,1641,1,0,0,0,1647,1642,1,0,0,0,1647,
1646,1,0,0,0,1648,407,1,0,0,0,1649,1654,3,410,205,0,1650,1651,5,2,0,0,1651,
1653,3,410,205,0,1652,1650,1,0,0,0,1653,1656,1,0,0,0,1654,1652,1,0,0,0,1654,
1655,1,0,0,0,1655,409,1,0,0,0,1656,1654,1,0,0,0,1657,1661,3,412,206,0,1658,
1661,3,418,209,0,1659,1661,3,446,223,0,1660,1657,1,0,0,0,1660,1658,1,0,0,
0,1660,1659,1,0,0,0,1661,411,1,0,0,0,1662,1665,3,414,207,0,1663,1665,3,416,
208,0,1664,1662,1,0,0,0,1664,1663,1,0,0,0,1665,413,1,0,0,0,1666,1667,5,29,
0,0,1667,1668,3,456,228,0,1668,1669,5,10,0,0,1669,415,1,0,0,0,1670,1671,
5,30,0,0,1671,1672,3,456,228,0,1672,1673,5,10,0,0,1673,417,1,0,0,0,1674,
1679,3,420,210,0,1675,1679,3,426,213,0,1676,1679,3,430,215,0,1677,1679,3,
428,214,0,1678,1674,1,0,0,0,1678,1675,1,0,0,0,1678,1676,1,0,0,0,1678,1677,
1,0,0,0,1679,419,1,0,0,0,1680,1681,5,31,0,0,1681,1682,3,422,211,0,1682,1683,
5,10,0,0,1683,1686,1,0,0,0,1684,1686,3,424,212,0,1685,1680,1,0,0,0,1685,
1684,1,0,0,0,1686,421,1,0,0,0,1687,1688,5,93,0,0,1688,423,1,0,0,0,1689,1690,
3,376,188,0,1690,1691,5,9,0,0,1691,1692,3,456,228,0,1692,1693,5,2,0,0,1693,
1694,3,450,225,0,1694,1695,5,10,0,0,1695,425,1,0,0,0,1696,1697,5,32,0,0,
1697,1698,5,11,0,0,1698,1699,3,440,220,0,1699,1700,5,12,0,0,1700,1701,5,
10,0,0,1701,427,1,0,0,0,1702,1703,5,33,0,0,1703,1704,3,392,196,0,1704,1705,
5,10,0,0,1705,429,1,0,0,0,1706,1707,5,34,0,0,1707,1708,3,456,228,0,1708,
1709,5,2,0,0,1709,1710,5,11,0,0,1710,1711,3,432,216,0,1711,1712,5,12,0,0,
1712,1713,5,10,0,0,1713,431,1,0,0,0,1714,1719,3,434,217,0,1715,1716,5,2,
0,0,1716,1718,3,434,217,0,1717,1715,1,0,0,0,1718,1721,1,0,0,0,1719,1717,
1,0,0,0,1719,1720,1,0,0,0,1720,433,1,0,0,0,1721,1719,1,0,0,0,1722,1725,3,
350,175,0,1723,1725,3,366,183,0,1724,1722,1,0,0,0,1724,1723,1,0,0,0,1725,
435,1,0,0,0,1726,1727,5,35,0,0,1727,1729,3,464,232,0,1728,1730,3,438,219,
0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1731,1,0,0,0,1731,1732,5,3,0,
0,1732,437,1,0,0,0,1733,1734,5,2,0,0,1734,1735,5,11,0,0,1735,1736,3,440,
220,0,1736,1737,5,12,0,0,1737,439,1,0,0,0,1738,1743,3,454,227,0,1739,1740,
5,2,0,0,1740,1742,3,454,227,0,1741,1739,1,0,0,0,1742,1745,1,0,0,0,1743,1741,
1,0,0,0,1743,1744,1,0,0,0,1744,441,1,0,0,0,1745,1743,1,0,0,0,1746,1753,3,
444,222,0,1747,1748,3,444,222,0,1748,1749,5,13,0,0,1749,1750,3,442,221,0,
1750,1753,1,0,0,0,1751,1753,3,450,225,0,1752,1746,1,0,0,0,1752,1747,1,0,
0,0,1752,1751,1,0,0,0,1753,443,1,0,0,0,1754,1761,3,456,228,0,1755,1761,3,
446,223,0,1756,1761,3,366,183,0,1757,1761,3,462,231,0,1758,1761,5,95,0,0,
1759,1761,3,448,224,0,1760,1754,1,0,0,0,1760,1755,1,0,0,0,1760,1756,1,0,
0,0,1760,1757,1,0,0,0,1760,1758,1,0,0,0,1760,1759,1,0,0,0,1761,445,1,0,0,
0,1762,1763,3,456,228,0,1763,1764,5,9,0,0,1764,1765,3,452,226,0,1765,1766,
5,10,0,0,1766,447,1,0,0,0,1767,1768,5,36,0,0,1768,1769,3,24,12,0,1769,1770,
5,10,0,0,1770,1788,1,0,0,0,1771,1772,5,37,0,0,1772,1773,3,120,60,0,1773,
1774,5,10,0,0,1774,1788,1,0,0,0,1775,1776,5,38,0,0,1776,1777,3,250,125,0,
1777,1778,5,10,0,0,1778,1788,1,0,0,0,1779,1780,5,39,0,0,1780,1781,3,310,
155,0,1781,1782,5,10,0,0,1782,1788,1,0,0,0,1783,1784,5,40,0,0,1784,1785,
3,300,150,0,1785,1786,5,10,0,0,1786,1788,1,0,0,0,1787,1767,1,0,0,0,1787,
1771,1,0,0,0,1787,1775,1,0,0,0,1787,1779,1,0,0,0,1787,1783,1,0,0,0,1788,
449,1,0,0,0,1789,1795,5,15,0,0,1790,1791,5,11,0,0,1791,1792,3,452,226,0,
1792,1793,5,12,0,0,1793,1795,1,0,0,0,1794,1789,1,0,0,0,1794,1790,1,0,0,0,
1795,451,1,0,0,0,1796,1801,3,442,221,0,1797,1798,5,2,0,0,1798,1800,3,442,
221,0,1799,1797,1,0,0,0,1800,1803,1,0,0,0,1801,1799,1,0,0,0,1801,1802,1,
0,0,0,1802,453,1,0,0,0,1803,1801,1,0,0,0,1804,1807,3,456,228,0,1805,1807,
5,79,0,0,1806,1804,1,0,0,0,1806,1805,1,0,0,0,1807,455,1,0,0,0,1808,1809,
7,7,0,0,1809,457,1,0,0,0,1810,1811,5,90,0,0,1811,459,1,0,0,0,1812,1813,5,
91,0,0,1813,461,1,0,0,0,1814,1815,7,8,0,0,1815,463,1,0,0,0,1816,1817,5,94,
0,0,1817,465,1,0,0,0,142,469,476,484,493,506,517,528,539,550,557,564,572,
577,586,598,611,624,630,634,643,659,664,672,685,689,699,703,724,731,738,
749,757,764,771,788,797,807,812,821,831,843,856,874,882,886,894,906,919,
925,929,938,954,958,966,978,986,990,1000,1012,1027,1034,1041,1049,1056,1068,
1078,1085,1092,1102,1106,1114,1129,1136,1151,1158,1174,1186,1202,1219,1231,
1240,1244,1261,1265,1269,1280,1285,1289,1297,1309,1322,1329,1337,1345,1359,
1364,1370,1386,1390,1400,1408,1415,1419,1424,1434,1441,1448,1455,1465,1477,
1482,1506,1510,1532,1538,1550,1557,1562,1579,1586,1591,1599,1608,1613,1623,
1632,1647,1654,1660,1664,1678,1685,1719,1724,1729,1743,1752,1760,1787,1794,
1801,1806];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class TPTPParser extends antlr4.Parser {

    static grammarFileName = "TPTP.g4";
    static literalNames = [ null, "'tpi('", "','", "').'", "'thf('", "'tff('", 
                            "'tcf('", "'fof('", "'cnf('", "'('", "')'", 
                            "'['", "']'", "':'", "'$let('", "'[]'", "'[.]'", 
                            "'<.>'", "'{.}'", "'<'", "'{'", "'}'", "')}'", 
                            "'{}'", "'inference('", "'introduced('", "'file('", 
                            "'theory('", "'creator('", "'description('", 
                            "'iquote('", "'status('", "'assumptions('", 
                            "'refutation('", "'new_symbols('", "'include('", 
                            "'$thf('", "'$tff('", "'$fof('", "'$cnf('", 
                            "'$fot('", "'|'", "'&'", "'<=>'", "'=>'", "'<='", 
                            "'<~>'", "'~|'", "'~&'", "'~'", "'!!'", "'!>'", 
                            "'!='", "'='", "'!'", "'??'", "'?*'", "'?'", 
                            "'^'", "'@@+'", "'@+'", "'@@-'", "'@-'", "'@='", 
                            "'@'", "':='", "'=='", "'>'", "'*'", "'+'", 
                            "'#'", "'<<'", "'-->'" ];
    static symbolicNames = [ null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, null, null, null, null, null, null, null, 
                             null, "Or", "And", "Iff", "Impl", "If", "Niff", 
                             "Nor", "Nand", "Not", "ForallComb", "TyForall", 
                             "Infix_inequality", "Infix_equality", "Forall", 
                             "ExistsComb", "TyExists", "Exists", "Lambda", 
                             "ChoiceComb", "Choice", "DescriptionComb", 
                             "Description", "EqComb", "App", "Assignment", 
                             "Identical", "Arrow", "Star", "Plus", "Hash", 
                             "Subtype_sign", "Gentzen_arrow", "Real", "Signed_real", 
                             "Unsigned_real", "Rational", "Signed_rational", 
                             "Unsigned_rational", "Integer", "Signed_integer", 
                             "Unsigned_integer", "Decimal", "Positive_decimal", 
                             "Decimal_exponent", "Decimal_fraction", "Dot_decimal", 
                             "Exp_integer", "Signed_exp_integer", "Unsigned_exp_integer", 
                             "Dollar_word", "Dollar_dollar_word", "Upper_word", 
                             "Lower_word", "Single_quoted", "Distinct_object", 
                             "WS", "Line_comment", "Block_comment" ];
    static ruleNames = [ "tptp_file", "tptp_input", "annotated_formula", 
                         "tpi_annotated", "tpi_formula", "thf_annotated", 
                         "tff_annotated", "tcf_annotated", "fof_annotated", 
                         "cnf_annotated", "annotations", "formula_role", 
                         "thf_formula", "thf_logic_formula", "thf_binary_formula", 
                         "thf_binary_nonassoc", "thf_binary_assoc", "thf_or_formula", 
                         "thf_and_formula", "thf_apply_formula", "thf_unit_formula", 
                         "thf_preunit_formula", "thf_unitary_formula", "thf_quantified_formula", 
                         "thf_quantification", "thf_variable_list", "thf_variable", 
                         "thf_typed_variable", "thf_unary_formula", "thf_prefix_unary", 
                         "thf_infix_unary", "thf_atomic_formula", "thf_plain_atomic", 
                         "thf_defined_atomic", "thf_defined_term", "thf_defined_infix", 
                         "thf_system_atomic", "thf_let", "thf_let_types", 
                         "thf_atom_typing_list", "thf_let_defns", "thf_let_defn", 
                         "thf_let_defn_list", "thf_unitary_term", "thf_conn_term", 
                         "thf_tuple", "thf_fof_function", "thf_arguments", 
                         "thf_formula_list", "thf_atom_typing", "thf_top_level_type", 
                         "thf_unitary_type", "thf_apply_type", "thf_binary_type", 
                         "thf_mapping_type", "thf_xprod_type", "thf_union_type", 
                         "thf_subtype", "thf_definition", "thf_sequent", 
                         "tff_formula", "tff_logic_formula", "tff_binary_formula", 
                         "tff_binary_nonassoc", "tff_binary_assoc", "tff_or_formula", 
                         "tff_and_formula", "tff_unit_formula", "tff_preunit_formula", 
                         "tff_unitary_formula", "txf_unitary_formula", "tff_quantified_formula", 
                         "tff_variable_list", "tff_variable", "tff_typed_variable", 
                         "tff_unary_formula", "tff_prefix_unary", "tff_infix_unary", 
                         "tff_atomic_formula", "tff_plain_atomic", "tff_defined_atomic", 
                         "tff_defined_plain", "tff_defined_infix", "tff_system_atomic", 
                         "txf_let", "txf_let_types", "tff_atom_typing_list", 
                         "txf_let_defns", "txf_let_defn", "txf_let_LHS", 
                         "txf_let_defn_list", "txf_ntf_atom", "tff_term", 
                         "tff_unitary_term", "txf_tuple", "tff_arguments", 
                         "tff_atom_typing", "tff_top_level_type", "tff_non_atomic_type", 
                         "tf1_quantified_type", "tff_monotype", "tff_unitary_type", 
                         "tff_atomic_type", "tff_type_arguments", "tff_mapping_type", 
                         "tff_xprod_type", "txf_tuple_type", "tff_type_list", 
                         "tff_subtype", "txf_definition", "txf_sequent", 
                         "ntf_connective", "ntf_short_connective", "ntf_long_connective", 
                         "ntf_connective_name", "ntf_parameter_list", "ntf_parameter", 
                         "ntf_index", "ntf_key_pair", "logic_defn_rule", 
                         "logic_defn_LHS", "logic_defn_RHS", "tcf_formula", 
                         "tcf_logic_formula", "tcf_quantified_formula", 
                         "fof_formula", "fof_logic_formula", "fof_binary_formula", 
                         "fof_binary_nonassoc", "fof_binary_assoc", "fof_or_formula", 
                         "fof_and_formula", "fof_unary_formula", "fof_infix_unary", 
                         "fof_unit_formula", "fof_unitary_formula", "fof_quantified_formula", 
                         "fof_variable_list", "fof_atomic_formula", "fof_plain_atomic_formula", 
                         "fof_defined_atomic_formula", "fof_defined_plain_formula", 
                         "fof_defined_infix_formula", "fof_system_atomic_formula", 
                         "fof_plain_term", "fof_defined_term", "fof_defined_atomic_term", 
                         "fof_defined_plain_term", "fof_system_term", "fof_arguments", 
                         "fof_term", "fof_function_term", "fof_sequent", 
                         "fof_formula_tuple", "fof_formula_tuple_list", 
                         "cnf_formula", "cnf_disjunction", "cnf_literal", 
                         "thf_quantifier", "th1_quantifier", "th0_quantifier", 
                         "fof_quantifier", "nonassoc_connective", "assoc_connective", 
                         "unary_connective", "type_constant", "type_functor", 
                         "defined_type", "system_type", "atom", "untyped_atom", 
                         "defined_proposition", "defined_predicate", "defined_infix_pred", 
                         "constant", "functor", "defined_constant", "defined_functor", 
                         "system_constant", "system_functor", "def_or_sys_constant", 
                         "th1_defined_term", "defined_term", "variable", 
                         "source", "sources", "dag_source", "inference_record", 
                         "inference_rule", "inference_parents", "parent_list", 
                         "parent_info", "parent_details", "internal_source", 
                         "intro_type", "external_source", "file_source", 
                         "file_info", "theory", "theory_name", "creator_source", 
                         "creator_name", "optional_info", "useful_info", 
                         "info_items", "info_item", "formula_item", "description_item", 
                         "iquote_item", "inference_item", "inference_status", 
                         "status_value", "inference_info", "assumptions_record", 
                         "refutation", "new_symbol_record", "new_symbol_list", 
                         "principal_symbol", "include", "formula_selection", 
                         "name_list", "general_term", "general_data", "general_function", 
                         "formula_data", "general_list", "general_terms", 
                         "name", "atomic_word", "atomic_defined_word", "atomic_system_word", 
                         "number", "file_name" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = TPTPParser.ruleNames;
        this.literalNames = TPTPParser.literalNames;
        this.symbolicNames = TPTPParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 17:
    	    		return this.thf_or_formula_sempred(localctx, predIndex);
    	case 18:
    	    		return this.thf_and_formula_sempred(localctx, predIndex);
    	case 19:
    	    		return this.thf_apply_formula_sempred(localctx, predIndex);
    	case 55:
    	    		return this.thf_xprod_type_sempred(localctx, predIndex);
    	case 56:
    	    		return this.thf_union_type_sempred(localctx, predIndex);
    	case 65:
    	    		return this.tff_or_formula_sempred(localctx, predIndex);
    	case 66:
    	    		return this.tff_and_formula_sempred(localctx, predIndex);
    	case 105:
    	    		return this.tff_xprod_type_sempred(localctx, predIndex);
    	case 130:
    	    		return this.fof_or_formula_sempred(localctx, predIndex);
    	case 131:
    	    		return this.fof_and_formula_sempred(localctx, predIndex);
    	case 156:
    	    		return this.cnf_disjunction_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    thf_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 1:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_apply_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 2:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_xprod_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 3:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    thf_union_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tff_xprod_type_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fof_or_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fof_and_formula_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    cnf_disjunction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	tptp_file() {
	    let localctx = new Tptp_fileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, TPTPParser.RULE_tptp_file);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << TPTPParser.T__0) | (1 << TPTPParser.T__3) | (1 << TPTPParser.T__4) | (1 << TPTPParser.T__5) | (1 << TPTPParser.T__6) | (1 << TPTPParser.T__7))) !== 0) || _la===TPTPParser.T__34) {
	            this.state = 466;
	            this.tptp_input();
	            this.state = 471;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 472;
	        this.match(TPTPParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tptp_input() {
	    let localctx = new Tptp_inputContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, TPTPParser.RULE_tptp_input);
	    try {
	        this.state = 476;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__0:
	        case TPTPParser.T__3:
	        case TPTPParser.T__4:
	        case TPTPParser.T__5:
	        case TPTPParser.T__6:
	        case TPTPParser.T__7:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 474;
	            this.annotated_formula();
	            break;
	        case TPTPParser.T__34:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 475;
	            this.include();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotated_formula() {
	    let localctx = new Annotated_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, TPTPParser.RULE_annotated_formula);
	    try {
	        this.state = 484;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__3:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 478;
	            this.thf_annotated();
	            break;
	        case TPTPParser.T__4:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 479;
	            this.tff_annotated();
	            break;
	        case TPTPParser.T__5:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 480;
	            this.tcf_annotated();
	            break;
	        case TPTPParser.T__6:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 481;
	            this.fof_annotated();
	            break;
	        case TPTPParser.T__7:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 482;
	            this.cnf_annotated();
	            break;
	        case TPTPParser.T__0:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 483;
	            this.tpi_annotated();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tpi_annotated() {
	    let localctx = new Tpi_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, TPTPParser.RULE_tpi_annotated);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 486;
	        this.match(TPTPParser.T__0);
	        this.state = 487;
	        this.name();
	        this.state = 488;
	        this.match(TPTPParser.T__1);
	        this.state = 489;
	        this.formula_role();
	        this.state = 490;
	        this.match(TPTPParser.T__1);
	        this.state = 491;
	        this.tpi_formula();
	        this.state = 493;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 492;
	            this.annotations();
	        }

	        this.state = 495;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tpi_formula() {
	    let localctx = new Tpi_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, TPTPParser.RULE_tpi_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 497;
	        this.fof_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_annotated() {
	    let localctx = new Thf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, TPTPParser.RULE_thf_annotated);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 499;
	        this.match(TPTPParser.T__3);
	        this.state = 500;
	        this.name();
	        this.state = 501;
	        this.match(TPTPParser.T__1);
	        this.state = 502;
	        this.formula_role();
	        this.state = 503;
	        this.match(TPTPParser.T__1);
	        this.state = 504;
	        this.thf_formula();
	        this.state = 506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 505;
	            this.annotations();
	        }

	        this.state = 508;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_annotated() {
	    let localctx = new Tff_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, TPTPParser.RULE_tff_annotated);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 510;
	        this.match(TPTPParser.T__4);
	        this.state = 511;
	        this.name();
	        this.state = 512;
	        this.match(TPTPParser.T__1);
	        this.state = 513;
	        this.formula_role();
	        this.state = 514;
	        this.match(TPTPParser.T__1);
	        this.state = 515;
	        this.tff_formula();
	        this.state = 517;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 516;
	            this.annotations();
	        }

	        this.state = 519;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_annotated() {
	    let localctx = new Tcf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, TPTPParser.RULE_tcf_annotated);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 521;
	        this.match(TPTPParser.T__5);
	        this.state = 522;
	        this.name();
	        this.state = 523;
	        this.match(TPTPParser.T__1);
	        this.state = 524;
	        this.formula_role();
	        this.state = 525;
	        this.match(TPTPParser.T__1);
	        this.state = 526;
	        this.tcf_formula();
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 527;
	            this.annotations();
	        }

	        this.state = 530;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_annotated() {
	    let localctx = new Fof_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, TPTPParser.RULE_fof_annotated);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 532;
	        this.match(TPTPParser.T__6);
	        this.state = 533;
	        this.name();
	        this.state = 534;
	        this.match(TPTPParser.T__1);
	        this.state = 535;
	        this.formula_role();
	        this.state = 536;
	        this.match(TPTPParser.T__1);
	        this.state = 537;
	        this.fof_formula();
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 538;
	            this.annotations();
	        }

	        this.state = 541;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cnf_annotated() {
	    let localctx = new Cnf_annotatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, TPTPParser.RULE_cnf_annotated);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.match(TPTPParser.T__7);
	        this.state = 544;
	        this.name();
	        this.state = 545;
	        this.match(TPTPParser.T__1);
	        this.state = 546;
	        this.formula_role();
	        this.state = 547;
	        this.match(TPTPParser.T__1);
	        this.state = 548;
	        this.cnf_formula();
	        this.state = 550;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 549;
	            this.annotations();
	        }

	        this.state = 552;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	annotations() {
	    let localctx = new AnnotationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, TPTPParser.RULE_annotations);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 554;
	        this.match(TPTPParser.T__1);
	        this.state = 555;
	        this.source();
	        this.state = 557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 556;
	            this.optional_info();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_role() {
	    let localctx = new Formula_roleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, TPTPParser.RULE_formula_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 559;
	        this.match(TPTPParser.Lower_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_formula() {
	    let localctx = new Thf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, TPTPParser.RULE_thf_formula);
	    try {
	        this.state = 564;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,10,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 561;
	            this.thf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 562;
	            this.thf_atom_typing();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 563;
	            this.thf_subtype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_logic_formula() {
	    let localctx = new Thf_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, TPTPParser.RULE_thf_logic_formula);
	    try {
	        this.state = 572;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 566;
	            this.thf_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 567;
	            this.thf_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 568;
	            this.thf_binary_formula();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 569;
	            this.thf_defined_infix();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 570;
	            this.thf_definition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 571;
	            this.thf_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_formula() {
	    let localctx = new Thf_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, TPTPParser.RULE_thf_binary_formula);
	    try {
	        this.state = 577;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 574;
	            this.thf_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 575;
	            this.thf_binary_assoc();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 576;
	            this.thf_binary_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_nonassoc() {
	    let localctx = new Thf_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, TPTPParser.RULE_thf_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 579;
	        this.thf_unit_formula();
	        this.state = 580;
	        this.nonassoc_connective();
	        this.state = 581;
	        this.thf_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_assoc() {
	    let localctx = new Thf_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, TPTPParser.RULE_thf_binary_assoc);
	    try {
	        this.state = 586;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 583;
	            this.thf_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 584;
	            this.thf_and_formula(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 585;
	            this.thf_apply_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	thf_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 34;
	    this.enterRecursionRule(localctx, 34, TPTPParser.RULE_thf_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 589;
	        this.thf_unit_formula();
	        this.state = 590;
	        this.match(TPTPParser.Or);
	        this.state = 591;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 598;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,14,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_or_formula);
	                this.state = 593;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 594;
	                this.match(TPTPParser.Or);
	                this.state = 595;
	                this.thf_unit_formula(); 
	            }
	            this.state = 600;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,14,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 36;
	    this.enterRecursionRule(localctx, 36, TPTPParser.RULE_thf_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 602;
	        this.thf_unit_formula();
	        this.state = 603;
	        this.match(TPTPParser.And);
	        this.state = 604;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 611;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,15,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_and_formula);
	                this.state = 606;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 607;
	                this.match(TPTPParser.And);
	                this.state = 608;
	                this.thf_unit_formula(); 
	            }
	            this.state = 613;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,15,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_apply_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_apply_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 38;
	    this.enterRecursionRule(localctx, 38, TPTPParser.RULE_thf_apply_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 615;
	        this.thf_unit_formula();
	        this.state = 616;
	        this.match(TPTPParser.App);
	        this.state = 617;
	        this.thf_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 624;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,16,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_apply_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_apply_formula);
	                this.state = 619;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 620;
	                this.match(TPTPParser.App);
	                this.state = 621;
	                this.thf_unit_formula(); 
	            }
	            this.state = 626;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,16,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	thf_unit_formula() {
	    let localctx = new Thf_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, TPTPParser.RULE_thf_unit_formula);
	    try {
	        this.state = 630;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,17,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 627;
	            this.thf_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 628;
	            this.thf_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 629;
	            this.thf_defined_infix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_preunit_formula() {
	    let localctx = new Thf_preunit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, TPTPParser.RULE_thf_preunit_formula);
	    try {
	        this.state = 634;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__8:
	        case TPTPParser.T__10:
	        case TPTPParser.T__13:
	        case TPTPParser.T__14:
	        case TPTPParser.T__15:
	        case TPTPParser.T__16:
	        case TPTPParser.T__17:
	        case TPTPParser.T__18:
	        case TPTPParser.T__19:
	        case TPTPParser.ForallComb:
	        case TPTPParser.TyForall:
	        case TPTPParser.Forall:
	        case TPTPParser.ExistsComb:
	        case TPTPParser.TyExists:
	        case TPTPParser.Exists:
	        case TPTPParser.Lambda:
	        case TPTPParser.ChoiceComb:
	        case TPTPParser.Choice:
	        case TPTPParser.DescriptionComb:
	        case TPTPParser.Description:
	        case TPTPParser.EqComb:
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 632;
	            this.thf_unitary_formula();
	            break;
	        case TPTPParser.Not:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 633;
	            this.thf_prefix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_formula() {
	    let localctx = new Thf_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, TPTPParser.RULE_thf_unitary_formula);
	    try {
	        this.state = 643;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 636;
	            this.thf_quantified_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 637;
	            this.thf_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 638;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 639;
	            this.match(TPTPParser.T__8);
	            this.state = 640;
	            this.thf_logic_formula();
	            this.state = 641;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantified_formula() {
	    let localctx = new Thf_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, TPTPParser.RULE_thf_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 645;
	        this.thf_quantification();
	        this.state = 646;
	        this.thf_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantification() {
	    let localctx = new Thf_quantificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, TPTPParser.RULE_thf_quantification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 648;
	        this.thf_quantifier();
	        this.state = 649;
	        this.match(TPTPParser.T__10);
	        this.state = 650;
	        this.thf_variable_list();
	        this.state = 651;
	        this.match(TPTPParser.T__11);
	        this.state = 652;
	        this.match(TPTPParser.T__12);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_variable_list() {
	    let localctx = new Thf_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, TPTPParser.RULE_thf_variable_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 654;
	        this.thf_variable();
	        this.state = 659;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TPTPParser.T__1) {
	            this.state = 655;
	            this.match(TPTPParser.T__1);
	            this.state = 656;
	            this.thf_variable();
	            this.state = 661;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_variable() {
	    let localctx = new Thf_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, TPTPParser.RULE_thf_variable);
	    try {
	        this.state = 664;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,21,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 662;
	            this.thf_typed_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 663;
	            this.variable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_typed_variable() {
	    let localctx = new Thf_typed_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, TPTPParser.RULE_thf_typed_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 666;
	        this.variable();
	        this.state = 667;
	        this.match(TPTPParser.T__12);
	        this.state = 668;
	        this.thf_top_level_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unary_formula() {
	    let localctx = new Thf_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, TPTPParser.RULE_thf_unary_formula);
	    try {
	        this.state = 672;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Not:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 670;
	            this.thf_prefix_unary();
	            break;
	        case TPTPParser.T__8:
	        case TPTPParser.T__10:
	        case TPTPParser.T__13:
	        case TPTPParser.T__14:
	        case TPTPParser.T__15:
	        case TPTPParser.T__16:
	        case TPTPParser.T__17:
	        case TPTPParser.T__18:
	        case TPTPParser.T__19:
	        case TPTPParser.ForallComb:
	        case TPTPParser.ExistsComb:
	        case TPTPParser.ChoiceComb:
	        case TPTPParser.DescriptionComb:
	        case TPTPParser.EqComb:
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 671;
	            this.thf_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_prefix_unary() {
	    let localctx = new Thf_prefix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, TPTPParser.RULE_thf_prefix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 674;
	        this.unary_connective();
	        this.state = 675;
	        this.thf_preunit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_infix_unary() {
	    let localctx = new Thf_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, TPTPParser.RULE_thf_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 677;
	        this.thf_unitary_term();
	        this.state = 678;
	        this.match(TPTPParser.Infix_inequality);
	        this.state = 679;
	        this.thf_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atomic_formula() {
	    let localctx = new Thf_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, TPTPParser.RULE_thf_atomic_formula);
	    try {
	        this.state = 685;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 681;
	            this.thf_plain_atomic();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 682;
	            this.thf_defined_atomic();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 683;
	            this.thf_system_atomic();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 684;
	            this.thf_fof_function();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_plain_atomic() {
	    let localctx = new Thf_plain_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, TPTPParser.RULE_thf_plain_atomic);
	    try {
	        this.state = 689;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 687;
	            this.constant();
	            break;
	        case TPTPParser.T__10:
	        case TPTPParser.T__14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 688;
	            this.thf_tuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_atomic() {
	    let localctx = new Thf_defined_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, TPTPParser.RULE_thf_defined_atomic);
	    try {
	        this.state = 699;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Dollar_word:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 691;
	            this.defined_constant();
	            break;
	        case TPTPParser.ForallComb:
	        case TPTPParser.ExistsComb:
	        case TPTPParser.ChoiceComb:
	        case TPTPParser.DescriptionComb:
	        case TPTPParser.EqComb:
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 692;
	            this.thf_defined_term();
	            break;
	        case TPTPParser.T__8:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 693;
	            this.match(TPTPParser.T__8);
	            this.state = 694;
	            this.thf_conn_term();
	            this.state = 695;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.T__10:
	        case TPTPParser.T__15:
	        case TPTPParser.T__16:
	        case TPTPParser.T__17:
	        case TPTPParser.T__18:
	        case TPTPParser.T__19:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 697;
	            this.ntf_connective();
	            break;
	        case TPTPParser.T__13:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 698;
	            this.thf_let();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_term() {
	    let localctx = new Thf_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, TPTPParser.RULE_thf_defined_term);
	    try {
	        this.state = 703;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 701;
	            this.defined_term();
	            break;
	        case TPTPParser.ForallComb:
	        case TPTPParser.ExistsComb:
	        case TPTPParser.ChoiceComb:
	        case TPTPParser.DescriptionComb:
	        case TPTPParser.EqComb:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 702;
	            this.th1_defined_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_defined_infix() {
	    let localctx = new Thf_defined_infixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, TPTPParser.RULE_thf_defined_infix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 705;
	        this.thf_unitary_term();
	        this.state = 706;
	        this.defined_infix_pred();
	        this.state = 707;
	        this.thf_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_system_atomic() {
	    let localctx = new Thf_system_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, TPTPParser.RULE_thf_system_atomic);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 709;
	        this.system_constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let() {
	    let localctx = new Thf_letContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, TPTPParser.RULE_thf_let);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 711;
	        this.match(TPTPParser.T__13);
	        this.state = 712;
	        this.thf_let_types();
	        this.state = 713;
	        this.match(TPTPParser.T__1);
	        this.state = 714;
	        this.thf_let_defns();
	        this.state = 715;
	        this.match(TPTPParser.T__1);
	        this.state = 716;
	        this.thf_logic_formula();
	        this.state = 717;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_types() {
	    let localctx = new Thf_let_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, TPTPParser.RULE_thf_let_types);
	    try {
	        this.state = 724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__8:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 719;
	            this.thf_atom_typing();
	            break;
	        case TPTPParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 720;
	            this.match(TPTPParser.T__10);
	            this.state = 721;
	            this.thf_atom_typing_list();
	            this.state = 722;
	            this.match(TPTPParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atom_typing_list() {
	    let localctx = new Thf_atom_typing_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, TPTPParser.RULE_thf_atom_typing_list);
	    try {
	        this.state = 731;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 726;
	            this.thf_atom_typing();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 727;
	            this.thf_atom_typing();
	            this.state = 728;
	            this.match(TPTPParser.T__1);
	            this.state = 729;
	            this.thf_atom_typing_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defns() {
	    let localctx = new Thf_let_defnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, TPTPParser.RULE_thf_let_defns);
	    try {
	        this.state = 738;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 733;
	            this.thf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 734;
	            this.match(TPTPParser.T__10);
	            this.state = 735;
	            this.thf_let_defn_list();
	            this.state = 736;
	            this.match(TPTPParser.T__11);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defn() {
	    let localctx = new Thf_let_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, TPTPParser.RULE_thf_let_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        this.thf_logic_formula();
	        this.state = 741;
	        this.match(TPTPParser.Assignment);
	        this.state = 742;
	        this.thf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_let_defn_list() {
	    let localctx = new Thf_let_defn_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, TPTPParser.RULE_thf_let_defn_list);
	    try {
	        this.state = 749;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 744;
	            this.thf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 745;
	            this.thf_let_defn();
	            this.state = 746;
	            this.match(TPTPParser.T__1);
	            this.state = 747;
	            this.thf_let_defn_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_term() {
	    let localctx = new Thf_unitary_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, TPTPParser.RULE_thf_unitary_term);
	    try {
	        this.state = 757;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 751;
	            this.thf_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 752;
	            this.variable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 753;
	            this.match(TPTPParser.T__8);
	            this.state = 754;
	            this.thf_logic_formula();
	            this.state = 755;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_conn_term() {
	    let localctx = new Thf_conn_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, TPTPParser.RULE_thf_conn_term);
	    try {
	        this.state = 764;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Iff:
	        case TPTPParser.Impl:
	        case TPTPParser.If:
	        case TPTPParser.Niff:
	        case TPTPParser.Nor:
	        case TPTPParser.Nand:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 759;
	            this.nonassoc_connective();
	            break;
	        case TPTPParser.Or:
	        case TPTPParser.And:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 760;
	            this.assoc_connective();
	            break;
	        case TPTPParser.Infix_equality:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 761;
	            this.match(TPTPParser.Infix_equality);
	            break;
	        case TPTPParser.Infix_inequality:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 762;
	            this.match(TPTPParser.Infix_inequality);
	            break;
	        case TPTPParser.Not:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 763;
	            this.unary_connective();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_tuple() {
	    let localctx = new Thf_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, TPTPParser.RULE_thf_tuple);
	    try {
	        this.state = 771;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 766;
	            this.match(TPTPParser.T__14);
	            break;
	        case TPTPParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 767;
	            this.match(TPTPParser.T__10);
	            this.state = 768;
	            this.thf_formula_list();
	            this.state = 769;
	            this.match(TPTPParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_fof_function() {
	    let localctx = new Thf_fof_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, TPTPParser.RULE_thf_fof_function);
	    try {
	        this.state = 788;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 773;
	            this.functor();
	            this.state = 774;
	            this.match(TPTPParser.T__8);
	            this.state = 775;
	            this.thf_arguments();
	            this.state = 776;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.Dollar_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 778;
	            this.defined_functor();
	            this.state = 779;
	            this.match(TPTPParser.T__8);
	            this.state = 780;
	            this.thf_arguments();
	            this.state = 781;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.Dollar_dollar_word:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 783;
	            this.system_functor();
	            this.state = 784;
	            this.match(TPTPParser.T__8);
	            this.state = 785;
	            this.thf_arguments();
	            this.state = 786;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_arguments() {
	    let localctx = new Thf_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, TPTPParser.RULE_thf_arguments);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 790;
	        this.thf_formula_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_formula_list() {
	    let localctx = new Thf_formula_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, TPTPParser.RULE_thf_formula_list);
	    try {
	        this.state = 797;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 792;
	            this.thf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 793;
	            this.thf_logic_formula();
	            this.state = 794;
	            this.match(TPTPParser.T__1);
	            this.state = 795;
	            this.thf_formula_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_atom_typing() {
	    let localctx = new Thf_atom_typingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, TPTPParser.RULE_thf_atom_typing);
	    try {
	        this.state = 807;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 799;
	            this.untyped_atom();
	            this.state = 800;
	            this.match(TPTPParser.T__12);
	            this.state = 801;
	            this.thf_top_level_type();
	            break;
	        case TPTPParser.T__8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 803;
	            this.match(TPTPParser.T__8);
	            this.state = 804;
	            this.thf_atom_typing();
	            this.state = 805;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_top_level_type() {
	    let localctx = new Thf_top_level_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, TPTPParser.RULE_thf_top_level_type);
	    try {
	        this.state = 812;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 809;
	            this.thf_unitary_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 810;
	            this.thf_mapping_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 811;
	            this.thf_apply_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_unitary_type() {
	    let localctx = new Thf_unitary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, TPTPParser.RULE_thf_unitary_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.thf_unitary_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_apply_type() {
	    let localctx = new Thf_apply_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, TPTPParser.RULE_thf_apply_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 816;
	        this.thf_apply_formula(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_binary_type() {
	    let localctx = new Thf_binary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, TPTPParser.RULE_thf_binary_type);
	    try {
	        this.state = 821;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 818;
	            this.thf_mapping_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 819;
	            this.thf_xprod_type(0);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 820;
	            this.thf_union_type(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_mapping_type() {
	    let localctx = new Thf_mapping_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, TPTPParser.RULE_thf_mapping_type);
	    try {
	        this.state = 831;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 823;
	            this.thf_unitary_type();
	            this.state = 824;
	            this.match(TPTPParser.Arrow);
	            this.state = 825;
	            this.thf_unitary_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 827;
	            this.thf_unitary_type();
	            this.state = 828;
	            this.match(TPTPParser.Arrow);
	            this.state = 829;
	            this.thf_mapping_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	thf_xprod_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_xprod_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 110;
	    this.enterRecursionRule(localctx, 110, TPTPParser.RULE_thf_xprod_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 834;
	        this.thf_unitary_type();
	        this.state = 835;
	        this.match(TPTPParser.Star);
	        this.state = 836;
	        this.thf_unitary_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 843;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,40,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_xprod_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_xprod_type);
	                this.state = 838;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 839;
	                this.match(TPTPParser.Star);
	                this.state = 840;
	                this.thf_unitary_type(); 
	            }
	            this.state = 845;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,40,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	thf_union_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Thf_union_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 112;
	    this.enterRecursionRule(localctx, 112, TPTPParser.RULE_thf_union_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 847;
	        this.thf_unitary_type();
	        this.state = 848;
	        this.match(TPTPParser.Plus);
	        this.state = 849;
	        this.thf_unitary_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 856;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,41,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Thf_union_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_thf_union_type);
	                this.state = 851;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 852;
	                this.match(TPTPParser.Plus);
	                this.state = 853;
	                this.thf_unitary_type(); 
	            }
	            this.state = 858;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,41,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	thf_subtype() {
	    let localctx = new Thf_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, TPTPParser.RULE_thf_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 859;
	        this.untyped_atom();
	        this.state = 860;
	        this.match(TPTPParser.Subtype_sign);
	        this.state = 861;
	        this.atom();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_definition() {
	    let localctx = new Thf_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, TPTPParser.RULE_thf_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 863;
	        this.thf_atomic_formula();
	        this.state = 864;
	        this.match(TPTPParser.Identical);
	        this.state = 865;
	        this.thf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_sequent() {
	    let localctx = new Thf_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, TPTPParser.RULE_thf_sequent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 867;
	        this.thf_tuple();
	        this.state = 868;
	        this.match(TPTPParser.Gentzen_arrow);
	        this.state = 869;
	        this.thf_tuple();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_formula() {
	    let localctx = new Tff_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, TPTPParser.RULE_tff_formula);
	    try {
	        this.state = 874;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 871;
	            this.tff_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 872;
	            this.tff_atom_typing();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 873;
	            this.tff_subtype();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_logic_formula() {
	    let localctx = new Tff_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, TPTPParser.RULE_tff_logic_formula);
	    try {
	        this.state = 882;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 876;
	            this.tff_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 877;
	            this.tff_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 878;
	            this.tff_binary_formula();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 879;
	            this.tff_defined_infix();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 880;
	            this.txf_definition();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 881;
	            this.txf_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_formula() {
	    let localctx = new Tff_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, TPTPParser.RULE_tff_binary_formula);
	    try {
	        this.state = 886;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 884;
	            this.tff_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 885;
	            this.tff_binary_assoc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_nonassoc() {
	    let localctx = new Tff_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, TPTPParser.RULE_tff_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 888;
	        this.tff_unit_formula();
	        this.state = 889;
	        this.nonassoc_connective();
	        this.state = 890;
	        this.tff_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_binary_assoc() {
	    let localctx = new Tff_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, TPTPParser.RULE_tff_binary_assoc);
	    try {
	        this.state = 894;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 892;
	            this.tff_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 893;
	            this.tff_and_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	tff_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 130;
	    this.enterRecursionRule(localctx, 130, TPTPParser.RULE_tff_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 897;
	        this.tff_unit_formula();
	        this.state = 898;
	        this.match(TPTPParser.Or);
	        this.state = 899;
	        this.tff_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 906;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,46,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_tff_or_formula);
	                this.state = 901;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 902;
	                this.match(TPTPParser.Or);
	                this.state = 903;
	                this.tff_unit_formula(); 
	            }
	            this.state = 908;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,46,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	tff_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 132;
	    this.enterRecursionRule(localctx, 132, TPTPParser.RULE_tff_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 910;
	        this.tff_unit_formula();
	        this.state = 911;
	        this.match(TPTPParser.And);
	        this.state = 912;
	        this.tff_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 919;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,47,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_tff_and_formula);
	                this.state = 914;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 915;
	                this.match(TPTPParser.And);
	                this.state = 916;
	                this.tff_unit_formula(); 
	            }
	            this.state = 921;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,47,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	tff_unit_formula() {
	    let localctx = new Tff_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, TPTPParser.RULE_tff_unit_formula);
	    try {
	        this.state = 925;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 922;
	            this.tff_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 923;
	            this.tff_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 924;
	            this.tff_defined_infix();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_preunit_formula() {
	    let localctx = new Tff_preunit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, TPTPParser.RULE_tff_preunit_formula);
	    try {
	        this.state = 929;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__8:
	        case TPTPParser.T__10:
	        case TPTPParser.T__13:
	        case TPTPParser.T__15:
	        case TPTPParser.T__16:
	        case TPTPParser.T__17:
	        case TPTPParser.T__18:
	        case TPTPParser.T__19:
	        case TPTPParser.Forall:
	        case TPTPParser.Exists:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 927;
	            this.tff_unitary_formula();
	            break;
	        case TPTPParser.Not:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 928;
	            this.tff_prefix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_formula() {
	    let localctx = new Tff_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, TPTPParser.RULE_tff_unitary_formula);
	    try {
	        this.state = 938;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Forall:
	        case TPTPParser.Exists:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 931;
	            this.tff_quantified_formula();
	            break;
	        case TPTPParser.T__10:
	        case TPTPParser.T__13:
	        case TPTPParser.T__15:
	        case TPTPParser.T__16:
	        case TPTPParser.T__17:
	        case TPTPParser.T__18:
	        case TPTPParser.T__19:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 932;
	            this.tff_atomic_formula();
	            break;
	        case TPTPParser.Upper_word:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 933;
	            this.txf_unitary_formula();
	            break;
	        case TPTPParser.T__8:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 934;
	            this.match(TPTPParser.T__8);
	            this.state = 935;
	            this.tff_logic_formula();
	            this.state = 936;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_unitary_formula() {
	    let localctx = new Txf_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, TPTPParser.RULE_txf_unitary_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 940;
	        this.variable();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_quantified_formula() {
	    let localctx = new Tff_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, TPTPParser.RULE_tff_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 942;
	        this.fof_quantifier();
	        this.state = 943;
	        this.match(TPTPParser.T__10);
	        this.state = 944;
	        this.tff_variable_list();
	        this.state = 945;
	        this.match(TPTPParser.T__11);
	        this.state = 946;
	        this.match(TPTPParser.T__12);
	        this.state = 947;
	        this.tff_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_variable_list() {
	    let localctx = new Tff_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, TPTPParser.RULE_tff_variable_list);
	    try {
	        this.state = 954;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 949;
	            this.tff_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 950;
	            this.tff_variable();
	            this.state = 951;
	            this.match(TPTPParser.T__1);
	            this.state = 952;
	            this.tff_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_variable() {
	    let localctx = new Tff_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, TPTPParser.RULE_tff_variable);
	    try {
	        this.state = 958;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 956;
	            this.tff_typed_variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 957;
	            this.variable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_typed_variable() {
	    let localctx = new Tff_typed_variableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, TPTPParser.RULE_tff_typed_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 960;
	        this.variable();
	        this.state = 961;
	        this.match(TPTPParser.T__12);
	        this.state = 962;
	        this.tff_atomic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unary_formula() {
	    let localctx = new Tff_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, TPTPParser.RULE_tff_unary_formula);
	    try {
	        this.state = 966;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Not:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 964;
	            this.tff_prefix_unary();
	            break;
	        case TPTPParser.T__8:
	        case TPTPParser.T__10:
	        case TPTPParser.T__13:
	        case TPTPParser.T__14:
	        case TPTPParser.T__15:
	        case TPTPParser.T__16:
	        case TPTPParser.T__17:
	        case TPTPParser.T__18:
	        case TPTPParser.T__19:
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 965;
	            this.tff_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_prefix_unary() {
	    let localctx = new Tff_prefix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, TPTPParser.RULE_tff_prefix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 968;
	        this.unary_connective();
	        this.state = 969;
	        this.tff_preunit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_infix_unary() {
	    let localctx = new Tff_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, TPTPParser.RULE_tff_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 971;
	        this.tff_unitary_term();
	        this.state = 972;
	        this.match(TPTPParser.Infix_inequality);
	        this.state = 973;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atomic_formula() {
	    let localctx = new Tff_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, TPTPParser.RULE_tff_atomic_formula);
	    try {
	        this.state = 978;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 975;
	            this.tff_plain_atomic();
	            break;
	        case TPTPParser.T__10:
	        case TPTPParser.T__13:
	        case TPTPParser.T__15:
	        case TPTPParser.T__16:
	        case TPTPParser.T__17:
	        case TPTPParser.T__18:
	        case TPTPParser.T__19:
	        case TPTPParser.Dollar_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 976;
	            this.tff_defined_atomic();
	            break;
	        case TPTPParser.Dollar_dollar_word:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 977;
	            this.tff_system_atomic();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_plain_atomic() {
	    let localctx = new Tff_plain_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, TPTPParser.RULE_tff_plain_atomic);
	    try {
	        this.state = 986;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 980;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 981;
	            this.functor();
	            this.state = 982;
	            this.match(TPTPParser.T__8);
	            this.state = 983;
	            this.tff_arguments();
	            this.state = 984;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_atomic() {
	    let localctx = new Tff_defined_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, TPTPParser.RULE_tff_defined_atomic);
	    try {
	        this.state = 990;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 988;
	            this.tff_defined_plain();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 989;
	            this.ntf_connective();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_plain() {
	    let localctx = new Tff_defined_plainContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, TPTPParser.RULE_tff_defined_plain);
	    try {
	        this.state = 1000;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 992;
	            this.defined_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 993;
	            this.defined_functor();
	            this.state = 994;
	            this.match(TPTPParser.T__8);
	            this.state = 995;
	            this.tff_arguments();
	            this.state = 996;
	            this.match(TPTPParser.T__9);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 998;
	            this.txf_ntf_atom();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 999;
	            this.txf_let();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_defined_infix() {
	    let localctx = new Tff_defined_infixContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, TPTPParser.RULE_tff_defined_infix);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1002;
	        this.tff_unitary_term();
	        this.state = 1003;
	        this.defined_infix_pred();
	        this.state = 1004;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_system_atomic() {
	    let localctx = new Tff_system_atomicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, TPTPParser.RULE_tff_system_atomic);
	    try {
	        this.state = 1012;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,58,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1006;
	            this.system_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1007;
	            this.system_functor();
	            this.state = 1008;
	            this.match(TPTPParser.T__8);
	            this.state = 1009;
	            this.tff_arguments();
	            this.state = 1010;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let() {
	    let localctx = new Txf_letContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, TPTPParser.RULE_txf_let);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1014;
	        this.match(TPTPParser.T__13);
	        this.state = 1015;
	        this.txf_let_types();
	        this.state = 1016;
	        this.match(TPTPParser.T__1);
	        this.state = 1017;
	        this.txf_let_defns();
	        this.state = 1018;
	        this.match(TPTPParser.T__1);
	        this.state = 1019;
	        this.tff_term();
	        this.state = 1020;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_types() {
	    let localctx = new Txf_let_typesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, TPTPParser.RULE_txf_let_types);
	    try {
	        this.state = 1027;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__8:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1022;
	            this.tff_atom_typing();
	            break;
	        case TPTPParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1023;
	            this.match(TPTPParser.T__10);
	            this.state = 1024;
	            this.tff_atom_typing_list();
	            this.state = 1025;
	            this.match(TPTPParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atom_typing_list() {
	    let localctx = new Tff_atom_typing_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, TPTPParser.RULE_tff_atom_typing_list);
	    try {
	        this.state = 1034;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,60,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1029;
	            this.tff_atom_typing();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1030;
	            this.tff_atom_typing();
	            this.state = 1031;
	            this.match(TPTPParser.T__1);
	            this.state = 1032;
	            this.tff_atom_typing_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defns() {
	    let localctx = new Txf_let_defnsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, TPTPParser.RULE_txf_let_defns);
	    try {
	        this.state = 1041;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1036;
	            this.txf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1037;
	            this.match(TPTPParser.T__10);
	            this.state = 1038;
	            this.txf_let_defn_list();
	            this.state = 1039;
	            this.match(TPTPParser.T__11);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defn() {
	    let localctx = new Txf_let_defnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, TPTPParser.RULE_txf_let_defn);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1043;
	        this.txf_let_LHS();
	        this.state = 1044;
	        this.match(TPTPParser.Assignment);
	        this.state = 1045;
	        this.tff_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_LHS() {
	    let localctx = new Txf_let_LHSContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, TPTPParser.RULE_txf_let_LHS);
	    try {
	        this.state = 1049;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1047;
	            this.tff_plain_atomic();
	            break;
	        case TPTPParser.T__10:
	        case TPTPParser.T__14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1048;
	            this.txf_tuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_let_defn_list() {
	    let localctx = new Txf_let_defn_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, TPTPParser.RULE_txf_let_defn_list);
	    try {
	        this.state = 1056;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1051;
	            this.txf_let_defn();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1052;
	            this.txf_let_defn();
	            this.state = 1053;
	            this.match(TPTPParser.T__1);
	            this.state = 1054;
	            this.txf_let_defn_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_ntf_atom() {
	    let localctx = new Txf_ntf_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, TPTPParser.RULE_txf_ntf_atom);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1058;
	        this.ntf_connective();
	        this.state = 1059;
	        this.match(TPTPParser.App);
	        this.state = 1060;
	        this.match(TPTPParser.T__8);
	        this.state = 1061;
	        this.tff_arguments();
	        this.state = 1062;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_term() {
	    let localctx = new Tff_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, TPTPParser.RULE_tff_term);
	    try {
	        this.state = 1068;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1064;
	            this.tff_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1065;
	            this.defined_term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1066;
	            this.txf_tuple();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1067;
	            this.ntf_key_pair();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_term() {
	    let localctx = new Tff_unitary_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, TPTPParser.RULE_tff_unitary_term);
	    try {
	        this.state = 1078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1070;
	            this.tff_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1071;
	            this.defined_term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1072;
	            this.txf_tuple();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1073;
	            this.variable();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1074;
	            this.match(TPTPParser.T__8);
	            this.state = 1075;
	            this.tff_logic_formula();
	            this.state = 1076;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_tuple() {
	    let localctx = new Txf_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, TPTPParser.RULE_txf_tuple);
	    try {
	        this.state = 1085;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1080;
	            this.match(TPTPParser.T__14);
	            break;
	        case TPTPParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1081;
	            this.match(TPTPParser.T__10);
	            this.state = 1082;
	            this.tff_arguments();
	            this.state = 1083;
	            this.match(TPTPParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_arguments() {
	    let localctx = new Tff_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, TPTPParser.RULE_tff_arguments);
	    try {
	        this.state = 1092;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1087;
	            this.tff_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1088;
	            this.tff_term();
	            this.state = 1089;
	            this.match(TPTPParser.T__1);
	            this.state = 1090;
	            this.tff_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atom_typing() {
	    let localctx = new Tff_atom_typingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, TPTPParser.RULE_tff_atom_typing);
	    try {
	        this.state = 1102;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1094;
	            this.untyped_atom();
	            this.state = 1095;
	            this.match(TPTPParser.T__12);
	            this.state = 1096;
	            this.tff_top_level_type();
	            break;
	        case TPTPParser.T__8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1098;
	            this.match(TPTPParser.T__8);
	            this.state = 1099;
	            this.tff_atom_typing();
	            this.state = 1100;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_top_level_type() {
	    let localctx = new Tff_top_level_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, TPTPParser.RULE_tff_top_level_type);
	    try {
	        this.state = 1106;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1104;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1105;
	            this.tff_non_atomic_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_non_atomic_type() {
	    let localctx = new Tff_non_atomic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, TPTPParser.RULE_tff_non_atomic_type);
	    try {
	        this.state = 1114;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1108;
	            this.tff_mapping_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1110;
	            this.match(TPTPParser.T__8);
	            this.state = 1111;
	            this.tff_non_atomic_type();
	            this.state = 1112;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tf1_quantified_type() {
	    let localctx = new Tf1_quantified_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, TPTPParser.RULE_tf1_quantified_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1116;
	        this.match(TPTPParser.TyForall);
	        this.state = 1117;
	        this.match(TPTPParser.T__10);
	        this.state = 1118;
	        this.tff_variable_list();
	        this.state = 1119;
	        this.match(TPTPParser.T__11);
	        this.state = 1120;
	        this.match(TPTPParser.T__12);
	        this.state = 1121;
	        this.tff_monotype();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_monotype() {
	    let localctx = new Tff_monotypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, TPTPParser.RULE_tff_monotype);
	    try {
	        this.state = 1129;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,71,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1123;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1124;
	            this.match(TPTPParser.T__8);
	            this.state = 1125;
	            this.tff_mapping_type();
	            this.state = 1126;
	            this.match(TPTPParser.T__9);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1128;
	            this.tf1_quantified_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_unitary_type() {
	    let localctx = new Tff_unitary_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, TPTPParser.RULE_tff_unitary_type);
	    try {
	        this.state = 1136;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,72,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1131;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1132;
	            this.match(TPTPParser.T__8);
	            this.state = 1133;
	            this.tff_xprod_type(0);
	            this.state = 1134;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_atomic_type() {
	    let localctx = new Tff_atomic_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, TPTPParser.RULE_tff_atomic_type);
	    try {
	        this.state = 1151;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1138;
	            this.type_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1139;
	            this.defined_type();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1140;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1141;
	            this.type_functor();
	            this.state = 1142;
	            this.match(TPTPParser.T__8);
	            this.state = 1143;
	            this.tff_type_arguments();
	            this.state = 1144;
	            this.match(TPTPParser.T__9);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1146;
	            this.match(TPTPParser.T__8);
	            this.state = 1147;
	            this.tff_atomic_type();
	            this.state = 1148;
	            this.match(TPTPParser.T__9);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1150;
	            this.txf_tuple_type();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_type_arguments() {
	    let localctx = new Tff_type_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, TPTPParser.RULE_tff_type_arguments);
	    try {
	        this.state = 1158;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,74,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1153;
	            this.tff_atomic_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1154;
	            this.tff_atomic_type();
	            this.state = 1155;
	            this.match(TPTPParser.T__1);
	            this.state = 1156;
	            this.tff_type_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_mapping_type() {
	    let localctx = new Tff_mapping_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, TPTPParser.RULE_tff_mapping_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1160;
	        this.tff_unitary_type();
	        this.state = 1161;
	        this.match(TPTPParser.Arrow);
	        this.state = 1162;
	        this.tff_atomic_type();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	tff_xprod_type(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Tff_xprod_typeContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 210;
	    this.enterRecursionRule(localctx, 210, TPTPParser.RULE_tff_xprod_type, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1165;
	        this.tff_unitary_type();
	        this.state = 1166;
	        this.match(TPTPParser.Star);
	        this.state = 1167;
	        this.tff_atomic_type();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1174;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,75,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Tff_xprod_typeContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_tff_xprod_type);
	                this.state = 1169;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1170;
	                this.match(TPTPParser.Star);
	                this.state = 1171;
	                this.tff_atomic_type(); 
	            }
	            this.state = 1176;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,75,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	txf_tuple_type() {
	    let localctx = new Txf_tuple_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, TPTPParser.RULE_txf_tuple_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1177;
	        this.match(TPTPParser.T__10);
	        this.state = 1178;
	        this.tff_type_list();
	        this.state = 1179;
	        this.match(TPTPParser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_type_list() {
	    let localctx = new Tff_type_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, TPTPParser.RULE_tff_type_list);
	    try {
	        this.state = 1186;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1181;
	            this.tff_top_level_type();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1182;
	            this.tff_top_level_type();
	            this.state = 1183;
	            this.match(TPTPParser.T__1);
	            this.state = 1184;
	            this.tff_type_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tff_subtype() {
	    let localctx = new Tff_subtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, TPTPParser.RULE_tff_subtype);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1188;
	        this.untyped_atom();
	        this.state = 1189;
	        this.match(TPTPParser.Subtype_sign);
	        this.state = 1190;
	        this.atom();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_definition() {
	    let localctx = new Txf_definitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, TPTPParser.RULE_txf_definition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1192;
	        this.tff_atomic_formula();
	        this.state = 1193;
	        this.match(TPTPParser.Identical);
	        this.state = 1194;
	        this.tff_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	txf_sequent() {
	    let localctx = new Txf_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, TPTPParser.RULE_txf_sequent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1196;
	        this.txf_tuple();
	        this.state = 1197;
	        this.match(TPTPParser.Gentzen_arrow);
	        this.state = 1198;
	        this.txf_tuple();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_connective() {
	    let localctx = new Ntf_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, TPTPParser.RULE_ntf_connective);
	    try {
	        this.state = 1202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1200;
	            this.ntf_short_connective();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1201;
	            this.ntf_long_connective();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_short_connective() {
	    let localctx = new Ntf_short_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, TPTPParser.RULE_ntf_short_connective);
	    try {
	        this.state = 1219;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__15:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1204;
	            this.match(TPTPParser.T__15);
	            break;
	        case TPTPParser.T__16:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1205;
	            this.match(TPTPParser.T__16);
	            break;
	        case TPTPParser.T__17:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1206;
	            this.match(TPTPParser.T__17);
	            break;
	        case TPTPParser.T__10:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1207;
	            this.match(TPTPParser.T__10);
	            this.state = 1208;
	            this.ntf_index();
	            this.state = 1209;
	            this.match(TPTPParser.T__11);
	            break;
	        case TPTPParser.T__18:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1211;
	            this.match(TPTPParser.T__18);
	            this.state = 1212;
	            this.ntf_index();
	            this.state = 1213;
	            this.match(TPTPParser.Arrow);
	            break;
	        case TPTPParser.T__19:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1215;
	            this.match(TPTPParser.T__19);
	            this.state = 1216;
	            this.ntf_index();
	            this.state = 1217;
	            this.match(TPTPParser.T__20);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_long_connective() {
	    let localctx = new Ntf_long_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, TPTPParser.RULE_ntf_long_connective);
	    try {
	        this.state = 1231;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1221;
	            this.match(TPTPParser.T__19);
	            this.state = 1222;
	            this.ntf_connective_name();
	            this.state = 1223;
	            this.match(TPTPParser.T__20);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1225;
	            this.match(TPTPParser.T__19);
	            this.state = 1226;
	            this.ntf_connective_name();
	            this.state = 1227;
	            this.match(TPTPParser.T__8);
	            this.state = 1228;
	            this.ntf_parameter_list();
	            this.state = 1229;
	            this.match(TPTPParser.T__21);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_connective_name() {
	    let localctx = new Ntf_connective_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, TPTPParser.RULE_ntf_connective_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1233;
	        this.def_or_sys_constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_parameter_list() {
	    let localctx = new Ntf_parameter_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, TPTPParser.RULE_ntf_parameter_list);
	    try {
	        this.state = 1240;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,80,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1235;
	            this.ntf_parameter();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1236;
	            this.ntf_parameter();
	            this.state = 1237;
	            this.match(TPTPParser.T__1);
	            this.state = 1238;
	            this.ntf_parameter_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_parameter() {
	    let localctx = new Ntf_parameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, TPTPParser.RULE_ntf_parameter);
	    try {
	        this.state = 1244;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Hash:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1242;
	            this.ntf_index();
	            break;
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1243;
	            this.ntf_key_pair();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_index() {
	    let localctx = new Ntf_indexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, TPTPParser.RULE_ntf_index);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1246;
	        this.match(TPTPParser.Hash);
	        this.state = 1247;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ntf_key_pair() {
	    let localctx = new Ntf_key_pairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, TPTPParser.RULE_ntf_key_pair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1249;
	        this.def_or_sys_constant();
	        this.state = 1250;
	        this.match(TPTPParser.Assignment);
	        this.state = 1251;
	        this.tff_unitary_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logic_defn_rule() {
	    let localctx = new Logic_defn_ruleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, TPTPParser.RULE_logic_defn_rule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1253;
	        this.logic_defn_LHS();
	        this.state = 1254;
	        this.match(TPTPParser.Identical);
	        this.state = 1255;
	        this.logic_defn_RHS();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logic_defn_LHS() {
	    let localctx = new Logic_defn_LHSContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, TPTPParser.RULE_logic_defn_LHS);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1257;
	        this.defined_constant();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logic_defn_RHS() {
	    let localctx = new Logic_defn_RHSContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, TPTPParser.RULE_logic_defn_RHS);
	    try {
	        this.state = 1261;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Dollar_word:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1259;
	            this.defined_constant();
	            break;
	        case TPTPParser.T__10:
	        case TPTPParser.T__14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1260;
	            this.txf_tuple();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_formula() {
	    let localctx = new Tcf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, TPTPParser.RULE_tcf_formula);
	    try {
	        this.state = 1265;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1263;
	            this.tcf_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1264;
	            this.tff_atom_typing();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_logic_formula() {
	    let localctx = new Tcf_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, TPTPParser.RULE_tcf_logic_formula);
	    try {
	        this.state = 1269;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Forall:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1267;
	            this.tcf_quantified_formula();
	            break;
	        case TPTPParser.T__8:
	        case TPTPParser.Not:
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1268;
	            this.cnf_formula();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tcf_quantified_formula() {
	    let localctx = new Tcf_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, TPTPParser.RULE_tcf_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1271;
	        this.match(TPTPParser.Forall);
	        this.state = 1272;
	        this.match(TPTPParser.T__10);
	        this.state = 1273;
	        this.tff_variable_list();
	        this.state = 1274;
	        this.match(TPTPParser.T__11);
	        this.state = 1275;
	        this.match(TPTPParser.T__12);
	        this.state = 1276;
	        this.tcf_logic_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula() {
	    let localctx = new Fof_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, TPTPParser.RULE_fof_formula);
	    try {
	        this.state = 1280;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,85,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1278;
	            this.fof_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1279;
	            this.fof_sequent();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_logic_formula() {
	    let localctx = new Fof_logic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, TPTPParser.RULE_fof_logic_formula);
	    try {
	        this.state = 1285;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1282;
	            this.fof_binary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1283;
	            this.fof_unary_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1284;
	            this.fof_unitary_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_formula() {
	    let localctx = new Fof_binary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, TPTPParser.RULE_fof_binary_formula);
	    try {
	        this.state = 1289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,87,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1287;
	            this.fof_binary_nonassoc();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1288;
	            this.fof_binary_assoc();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_nonassoc() {
	    let localctx = new Fof_binary_nonassocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, TPTPParser.RULE_fof_binary_nonassoc);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.fof_unit_formula();
	        this.state = 1292;
	        this.nonassoc_connective();
	        this.state = 1293;
	        this.fof_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_binary_assoc() {
	    let localctx = new Fof_binary_assocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, TPTPParser.RULE_fof_binary_assoc);
	    try {
	        this.state = 1297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1295;
	            this.fof_or_formula(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1296;
	            this.fof_and_formula(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	fof_or_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Fof_or_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 260;
	    this.enterRecursionRule(localctx, 260, TPTPParser.RULE_fof_or_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1300;
	        this.fof_unit_formula();
	        this.state = 1301;
	        this.match(TPTPParser.Or);
	        this.state = 1302;
	        this.fof_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1309;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,89,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Fof_or_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_fof_or_formula);
	                this.state = 1304;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1305;
	                this.match(TPTPParser.Or);
	                this.state = 1306;
	                this.fof_unit_formula(); 
	            }
	            this.state = 1311;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,89,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	fof_and_formula(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Fof_and_formulaContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 262;
	    this.enterRecursionRule(localctx, 262, TPTPParser.RULE_fof_and_formula, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1313;
	        this.fof_unit_formula();
	        this.state = 1314;
	        this.match(TPTPParser.And);
	        this.state = 1315;
	        this.fof_unit_formula();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1322;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,90,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Fof_and_formulaContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_fof_and_formula);
	                this.state = 1317;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1318;
	                this.match(TPTPParser.And);
	                this.state = 1319;
	                this.fof_unit_formula(); 
	            }
	            this.state = 1324;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,90,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	fof_unary_formula() {
	    let localctx = new Fof_unary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, TPTPParser.RULE_fof_unary_formula);
	    try {
	        this.state = 1329;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Not:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1325;
	            this.unary_connective();
	            this.state = 1326;
	            this.fof_unit_formula();
	            break;
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1328;
	            this.fof_infix_unary();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_infix_unary() {
	    let localctx = new Fof_infix_unaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, TPTPParser.RULE_fof_infix_unary);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1331;
	        this.fof_term();
	        this.state = 1332;
	        this.match(TPTPParser.Infix_inequality);
	        this.state = 1333;
	        this.fof_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_unit_formula() {
	    let localctx = new Fof_unit_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, TPTPParser.RULE_fof_unit_formula);
	    try {
	        this.state = 1337;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1335;
	            this.fof_unitary_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1336;
	            this.fof_unary_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_unitary_formula() {
	    let localctx = new Fof_unitary_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, TPTPParser.RULE_fof_unitary_formula);
	    try {
	        this.state = 1345;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Forall:
	        case TPTPParser.Exists:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1339;
	            this.fof_quantified_formula();
	            break;
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1340;
	            this.fof_atomic_formula();
	            break;
	        case TPTPParser.T__8:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1341;
	            this.match(TPTPParser.T__8);
	            this.state = 1342;
	            this.fof_logic_formula();
	            this.state = 1343;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_quantified_formula() {
	    let localctx = new Fof_quantified_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, TPTPParser.RULE_fof_quantified_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1347;
	        this.fof_quantifier();
	        this.state = 1348;
	        this.match(TPTPParser.T__10);
	        this.state = 1349;
	        this.fof_variable_list();
	        this.state = 1350;
	        this.match(TPTPParser.T__11);
	        this.state = 1351;
	        this.match(TPTPParser.T__12);
	        this.state = 1352;
	        this.fof_unit_formula();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_variable_list() {
	    let localctx = new Fof_variable_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, TPTPParser.RULE_fof_variable_list);
	    try {
	        this.state = 1359;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1354;
	            this.variable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1355;
	            this.variable();
	            this.state = 1356;
	            this.match(TPTPParser.T__1);
	            this.state = 1357;
	            this.fof_variable_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_atomic_formula() {
	    let localctx = new Fof_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, TPTPParser.RULE_fof_atomic_formula);
	    try {
	        this.state = 1364;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,95,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1361;
	            this.fof_plain_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1362;
	            this.fof_defined_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1363;
	            this.fof_system_atomic_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_plain_atomic_formula() {
	    let localctx = new Fof_plain_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, TPTPParser.RULE_fof_plain_atomic_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1366;
	        this.fof_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_atomic_formula() {
	    let localctx = new Fof_defined_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, TPTPParser.RULE_fof_defined_atomic_formula);
	    try {
	        this.state = 1370;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1368;
	            this.fof_defined_plain_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1369;
	            this.fof_defined_infix_formula();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_plain_formula() {
	    let localctx = new Fof_defined_plain_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, TPTPParser.RULE_fof_defined_plain_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1372;
	        this.fof_defined_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_infix_formula() {
	    let localctx = new Fof_defined_infix_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, TPTPParser.RULE_fof_defined_infix_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1374;
	        this.fof_term();
	        this.state = 1375;
	        this.defined_infix_pred();
	        this.state = 1376;
	        this.fof_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_system_atomic_formula() {
	    let localctx = new Fof_system_atomic_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, TPTPParser.RULE_fof_system_atomic_formula);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1378;
	        this.fof_system_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_plain_term() {
	    let localctx = new Fof_plain_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, TPTPParser.RULE_fof_plain_term);
	    try {
	        this.state = 1386;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,97,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1380;
	            this.constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1381;
	            this.functor();
	            this.state = 1382;
	            this.match(TPTPParser.T__8);
	            this.state = 1383;
	            this.fof_arguments();
	            this.state = 1384;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_term() {
	    let localctx = new Fof_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, TPTPParser.RULE_fof_defined_term);
	    try {
	        this.state = 1390;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1388;
	            this.defined_term();
	            break;
	        case TPTPParser.Dollar_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1389;
	            this.fof_defined_atomic_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_atomic_term() {
	    let localctx = new Fof_defined_atomic_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, TPTPParser.RULE_fof_defined_atomic_term);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1392;
	        this.fof_defined_plain_term();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_defined_plain_term() {
	    let localctx = new Fof_defined_plain_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, TPTPParser.RULE_fof_defined_plain_term);
	    try {
	        this.state = 1400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1394;
	            this.defined_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1395;
	            this.defined_functor();
	            this.state = 1396;
	            this.match(TPTPParser.T__8);
	            this.state = 1397;
	            this.fof_arguments();
	            this.state = 1398;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_system_term() {
	    let localctx = new Fof_system_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, TPTPParser.RULE_fof_system_term);
	    try {
	        this.state = 1408;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,100,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1402;
	            this.system_constant();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1403;
	            this.system_functor();
	            this.state = 1404;
	            this.match(TPTPParser.T__8);
	            this.state = 1405;
	            this.fof_arguments();
	            this.state = 1406;
	            this.match(TPTPParser.T__9);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_arguments() {
	    let localctx = new Fof_argumentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, TPTPParser.RULE_fof_arguments);
	    try {
	        this.state = 1415;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,101,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1410;
	            this.fof_term();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1411;
	            this.fof_term();
	            this.state = 1412;
	            this.match(TPTPParser.T__1);
	            this.state = 1413;
	            this.fof_arguments();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_term() {
	    let localctx = new Fof_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, TPTPParser.RULE_fof_term);
	    try {
	        this.state = 1419;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1417;
	            this.fof_function_term();
	            break;
	        case TPTPParser.Upper_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1418;
	            this.variable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_function_term() {
	    let localctx = new Fof_function_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, TPTPParser.RULE_fof_function_term);
	    try {
	        this.state = 1424;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1421;
	            this.fof_plain_term();
	            break;
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1422;
	            this.fof_defined_term();
	            break;
	        case TPTPParser.Dollar_dollar_word:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1423;
	            this.fof_system_term();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_sequent() {
	    let localctx = new Fof_sequentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, TPTPParser.RULE_fof_sequent);
	    try {
	        this.state = 1434;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__19:
	        case TPTPParser.T__22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1426;
	            this.fof_formula_tuple();
	            this.state = 1427;
	            this.match(TPTPParser.Gentzen_arrow);
	            this.state = 1428;
	            this.fof_formula_tuple();
	            break;
	        case TPTPParser.T__8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1430;
	            this.match(TPTPParser.T__8);
	            this.state = 1431;
	            this.fof_sequent();
	            this.state = 1432;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula_tuple() {
	    let localctx = new Fof_formula_tupleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, TPTPParser.RULE_fof_formula_tuple);
	    try {
	        this.state = 1441;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__22:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1436;
	            this.match(TPTPParser.T__22);
	            break;
	        case TPTPParser.T__19:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1437;
	            this.match(TPTPParser.T__19);
	            this.state = 1438;
	            this.fof_formula_tuple_list();
	            this.state = 1439;
	            this.match(TPTPParser.T__20);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_formula_tuple_list() {
	    let localctx = new Fof_formula_tuple_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, TPTPParser.RULE_fof_formula_tuple_list);
	    try {
	        this.state = 1448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1443;
	            this.fof_logic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1444;
	            this.fof_logic_formula();
	            this.state = 1445;
	            this.match(TPTPParser.T__1);
	            this.state = 1446;
	            this.fof_formula_tuple_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cnf_formula() {
	    let localctx = new Cnf_formulaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, TPTPParser.RULE_cnf_formula);
	    try {
	        this.state = 1455;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Not:
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	        case TPTPParser.Dollar_word:
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Upper_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1450;
	            this.cnf_disjunction(0);
	            break;
	        case TPTPParser.T__8:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1451;
	            this.match(TPTPParser.T__8);
	            this.state = 1452;
	            this.cnf_disjunction(0);
	            this.state = 1453;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	cnf_disjunction(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new Cnf_disjunctionContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 312;
	    this.enterRecursionRule(localctx, 312, TPTPParser.RULE_cnf_disjunction, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1458;
	        this.cnf_literal();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1465;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,108,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new Cnf_disjunctionContext(this, _parentctx, _parentState);
	                this.pushNewRecursionContext(localctx, _startState, TPTPParser.RULE_cnf_disjunction);
	                this.state = 1460;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1461;
	                this.match(TPTPParser.Or);
	                this.state = 1462;
	                this.cnf_literal(); 
	            }
	            this.state = 1467;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,108,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	cnf_literal() {
	    let localctx = new Cnf_literalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, TPTPParser.RULE_cnf_literal);
	    try {
	        this.state = 1477;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1468;
	            this.fof_atomic_formula();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1469;
	            this.match(TPTPParser.Not);
	            this.state = 1470;
	            this.fof_atomic_formula();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1471;
	            this.match(TPTPParser.Not);
	            this.state = 1472;
	            this.match(TPTPParser.T__8);
	            this.state = 1473;
	            this.fof_atomic_formula();
	            this.state = 1474;
	            this.match(TPTPParser.T__9);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1476;
	            this.fof_infix_unary();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thf_quantifier() {
	    let localctx = new Thf_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, TPTPParser.RULE_thf_quantifier);
	    try {
	        this.state = 1482;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Forall:
	        case TPTPParser.Exists:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1479;
	            this.fof_quantifier();
	            break;
	        case TPTPParser.Lambda:
	        case TPTPParser.Choice:
	        case TPTPParser.Description:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1480;
	            this.th0_quantifier();
	            break;
	        case TPTPParser.TyForall:
	        case TPTPParser.TyExists:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1481;
	            this.th1_quantifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th1_quantifier() {
	    let localctx = new Th1_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, TPTPParser.RULE_th1_quantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1484;
	        _la = this._input.LA(1);
	        if(!(_la===TPTPParser.TyForall || _la===TPTPParser.TyExists)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th0_quantifier() {
	    let localctx = new Th0_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, TPTPParser.RULE_th0_quantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1486;
	        _la = this._input.LA(1);
	        if(!(((((_la - 58)) & ~0x1f) == 0 && ((1 << (_la - 58)) & ((1 << (TPTPParser.Lambda - 58)) | (1 << (TPTPParser.Choice - 58)) | (1 << (TPTPParser.Description - 58)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fof_quantifier() {
	    let localctx = new Fof_quantifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, TPTPParser.RULE_fof_quantifier);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1488;
	        _la = this._input.LA(1);
	        if(!(_la===TPTPParser.Forall || _la===TPTPParser.Exists)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonassoc_connective() {
	    let localctx = new Nonassoc_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, TPTPParser.RULE_nonassoc_connective);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1490;
	        _la = this._input.LA(1);
	        if(!(((((_la - 43)) & ~0x1f) == 0 && ((1 << (_la - 43)) & ((1 << (TPTPParser.Iff - 43)) | (1 << (TPTPParser.Impl - 43)) | (1 << (TPTPParser.If - 43)) | (1 << (TPTPParser.Niff - 43)) | (1 << (TPTPParser.Nor - 43)) | (1 << (TPTPParser.Nand - 43)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assoc_connective() {
	    let localctx = new Assoc_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, TPTPParser.RULE_assoc_connective);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1492;
	        _la = this._input.LA(1);
	        if(!(_la===TPTPParser.Or || _la===TPTPParser.And)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unary_connective() {
	    let localctx = new Unary_connectiveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, TPTPParser.RULE_unary_connective);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1494;
	        this.match(TPTPParser.Not);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_constant() {
	    let localctx = new Type_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, TPTPParser.RULE_type_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1496;
	        this.type_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	type_functor() {
	    let localctx = new Type_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, TPTPParser.RULE_type_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1498;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_type() {
	    let localctx = new Defined_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, TPTPParser.RULE_defined_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1500;
	        this.match(TPTPParser.Dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_type() {
	    let localctx = new System_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, TPTPParser.RULE_system_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1502;
	        this.atomic_system_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atom() {
	    let localctx = new AtomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, TPTPParser.RULE_atom);
	    try {
	        this.state = 1506;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Dollar_dollar_word:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1504;
	            this.untyped_atom();
	            break;
	        case TPTPParser.Dollar_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1505;
	            this.defined_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	untyped_atom() {
	    let localctx = new Untyped_atomContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, TPTPParser.RULE_untyped_atom);
	    try {
	        this.state = 1510;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1508;
	            this.constant();
	            break;
	        case TPTPParser.Dollar_dollar_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1509;
	            this.system_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_proposition() {
	    let localctx = new Defined_propositionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, TPTPParser.RULE_defined_proposition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1512;
	        this.match(TPTPParser.Dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_predicate() {
	    let localctx = new Defined_predicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, TPTPParser.RULE_defined_predicate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1514;
	        this.match(TPTPParser.Dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_infix_pred() {
	    let localctx = new Defined_infix_predContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, TPTPParser.RULE_defined_infix_pred);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1516;
	        _la = this._input.LA(1);
	        if(!(_la===TPTPParser.Infix_equality || _la===TPTPParser.Assignment)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constant() {
	    let localctx = new ConstantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, TPTPParser.RULE_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1518;
	        this.functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functor() {
	    let localctx = new FunctorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, TPTPParser.RULE_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1520;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_constant() {
	    let localctx = new Defined_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, TPTPParser.RULE_defined_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1522;
	        this.defined_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_functor() {
	    let localctx = new Defined_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, TPTPParser.RULE_defined_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1524;
	        this.atomic_defined_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_constant() {
	    let localctx = new System_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, TPTPParser.RULE_system_constant);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1526;
	        this.system_functor();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	system_functor() {
	    let localctx = new System_functorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, TPTPParser.RULE_system_functor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1528;
	        this.atomic_system_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	def_or_sys_constant() {
	    let localctx = new Def_or_sys_constantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, TPTPParser.RULE_def_or_sys_constant);
	    try {
	        this.state = 1532;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Dollar_word:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1530;
	            this.defined_constant();
	            break;
	        case TPTPParser.Dollar_dollar_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1531;
	            this.system_constant();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	th1_defined_term() {
	    let localctx = new Th1_defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, TPTPParser.RULE_th1_defined_term);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1534;
	        _la = this._input.LA(1);
	        if(!(((((_la - 50)) & ~0x1f) == 0 && ((1 << (_la - 50)) & ((1 << (TPTPParser.ForallComb - 50)) | (1 << (TPTPParser.ExistsComb - 50)) | (1 << (TPTPParser.ChoiceComb - 50)) | (1 << (TPTPParser.DescriptionComb - 50)) | (1 << (TPTPParser.EqComb - 50)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defined_term() {
	    let localctx = new Defined_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, TPTPParser.RULE_defined_term);
	    try {
	        this.state = 1538;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Real:
	        case TPTPParser.Rational:
	        case TPTPParser.Integer:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1536;
	            this.number();
	            break;
	        case TPTPParser.Distinct_object:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1537;
	            this.match(TPTPParser.Distinct_object);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, TPTPParser.RULE_variable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1540;
	        this.match(TPTPParser.Upper_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	source() {
	    let localctx = new SourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, TPTPParser.RULE_source);
	    try {
	        this.state = 1550;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1542;
	            this.dag_source();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1543;
	            this.internal_source();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1544;
	            this.external_source();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1545;
	            this.match(TPTPParser.Lower_word);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1546;
	            this.match(TPTPParser.T__10);
	            this.state = 1547;
	            this.sources();
	            this.state = 1548;
	            this.match(TPTPParser.T__11);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sources() {
	    let localctx = new SourcesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, TPTPParser.RULE_sources);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1552;
	        this.source();
	        this.state = 1557;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TPTPParser.T__1) {
	            this.state = 1553;
	            this.match(TPTPParser.T__1);
	            this.state = 1554;
	            this.source();
	            this.state = 1559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dag_source() {
	    let localctx = new Dag_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, TPTPParser.RULE_dag_source);
	    try {
	        this.state = 1562;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Integer:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1560;
	            this.name();
	            break;
	        case TPTPParser.T__23:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1561;
	            this.inference_record();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_record() {
	    let localctx = new Inference_recordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, TPTPParser.RULE_inference_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1564;
	        this.match(TPTPParser.T__23);
	        this.state = 1565;
	        this.inference_rule();
	        this.state = 1566;
	        this.match(TPTPParser.T__1);
	        this.state = 1567;
	        this.useful_info();
	        this.state = 1568;
	        this.match(TPTPParser.T__1);
	        this.state = 1569;
	        this.inference_parents();
	        this.state = 1570;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_rule() {
	    let localctx = new Inference_ruleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, TPTPParser.RULE_inference_rule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1572;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_parents() {
	    let localctx = new Inference_parentsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, TPTPParser.RULE_inference_parents);
	    try {
	        this.state = 1579;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1574;
	            this.match(TPTPParser.T__14);
	            break;
	        case TPTPParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1575;
	            this.match(TPTPParser.T__10);
	            this.state = 1576;
	            this.parent_list();
	            this.state = 1577;
	            this.match(TPTPParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parent_list() {
	    let localctx = new Parent_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, TPTPParser.RULE_parent_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1581;
	        this.parent_info();
	        this.state = 1586;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TPTPParser.T__1) {
	            this.state = 1582;
	            this.match(TPTPParser.T__1);
	            this.state = 1583;
	            this.parent_info();
	            this.state = 1588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parent_info() {
	    let localctx = new Parent_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, TPTPParser.RULE_parent_info);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1589;
	        this.source();
	        this.state = 1591;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__12) {
	            this.state = 1590;
	            this.parent_details();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parent_details() {
	    let localctx = new Parent_detailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, TPTPParser.RULE_parent_details);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1593;
	        this.match(TPTPParser.T__12);
	        this.state = 1594;
	        this.general_list();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	internal_source() {
	    let localctx = new Internal_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, TPTPParser.RULE_internal_source);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1596;
	        this.match(TPTPParser.T__24);
	        this.state = 1597;
	        this.intro_type();
	        this.state = 1599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 1598;
	            this.optional_info();
	        }

	        this.state = 1601;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intro_type() {
	    let localctx = new Intro_typeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, TPTPParser.RULE_intro_type);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1603;
	        this.match(TPTPParser.Lower_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	external_source() {
	    let localctx = new External_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, TPTPParser.RULE_external_source);
	    try {
	        this.state = 1608;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__25:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1605;
	            this.file_source();
	            break;
	        case TPTPParser.T__26:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1606;
	            this.theory();
	            break;
	        case TPTPParser.T__27:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1607;
	            this.creator_source();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_source() {
	    let localctx = new File_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, TPTPParser.RULE_file_source);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1610;
	        this.match(TPTPParser.T__25);
	        this.state = 1611;
	        this.file_name();
	        this.state = 1613;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 1612;
	            this.file_info();
	        }

	        this.state = 1615;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_info() {
	    let localctx = new File_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, TPTPParser.RULE_file_info);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1617;
	        this.match(TPTPParser.T__1);
	        this.state = 1618;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theory() {
	    let localctx = new TheoryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, TPTPParser.RULE_theory);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1620;
	        this.match(TPTPParser.T__26);
	        this.state = 1621;
	        this.theory_name();
	        this.state = 1623;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 1622;
	            this.optional_info();
	        }

	        this.state = 1625;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	theory_name() {
	    let localctx = new Theory_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, TPTPParser.RULE_theory_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1627;
	        this.match(TPTPParser.Lower_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator_source() {
	    let localctx = new Creator_sourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, TPTPParser.RULE_creator_source);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1629;
	        this.match(TPTPParser.T__27);
	        this.state = 1630;
	        this.creator_name();
	        this.state = 1632;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 1631;
	            this.optional_info();
	        }

	        this.state = 1634;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	creator_name() {
	    let localctx = new Creator_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, TPTPParser.RULE_creator_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1636;
	        this.atomic_word();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optional_info() {
	    let localctx = new Optional_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, TPTPParser.RULE_optional_info);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1638;
	        this.match(TPTPParser.T__1);
	        this.state = 1639;
	        this.useful_info();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useful_info() {
	    let localctx = new Useful_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, TPTPParser.RULE_useful_info);
	    try {
	        this.state = 1647;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1641;
	            this.match(TPTPParser.T__14);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1642;
	            this.match(TPTPParser.T__10);
	            this.state = 1643;
	            this.info_items();
	            this.state = 1644;
	            this.match(TPTPParser.T__11);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1646;
	            this.general_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	info_items() {
	    let localctx = new Info_itemsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, TPTPParser.RULE_info_items);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1649;
	        this.info_item();
	        this.state = 1654;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TPTPParser.T__1) {
	            this.state = 1650;
	            this.match(TPTPParser.T__1);
	            this.state = 1651;
	            this.info_item();
	            this.state = 1656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	info_item() {
	    let localctx = new Info_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, TPTPParser.RULE_info_item);
	    try {
	        this.state = 1660;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1657;
	            this.formula_item();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1658;
	            this.inference_item();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1659;
	            this.general_function();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_item() {
	    let localctx = new Formula_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, TPTPParser.RULE_formula_item);
	    try {
	        this.state = 1664;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__28:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1662;
	            this.description_item();
	            break;
	        case TPTPParser.T__29:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1663;
	            this.iquote_item();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	description_item() {
	    let localctx = new Description_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, TPTPParser.RULE_description_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1666;
	        this.match(TPTPParser.T__28);
	        this.state = 1667;
	        this.atomic_word();
	        this.state = 1668;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iquote_item() {
	    let localctx = new Iquote_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, TPTPParser.RULE_iquote_item);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1670;
	        this.match(TPTPParser.T__29);
	        this.state = 1671;
	        this.atomic_word();
	        this.state = 1672;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_item() {
	    let localctx = new Inference_itemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, TPTPParser.RULE_inference_item);
	    try {
	        this.state = 1678;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__30:
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1674;
	            this.inference_status();
	            break;
	        case TPTPParser.T__31:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1675;
	            this.assumptions_record();
	            break;
	        case TPTPParser.T__33:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1676;
	            this.new_symbol_record();
	            break;
	        case TPTPParser.T__32:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1677;
	            this.refutation();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_status() {
	    let localctx = new Inference_statusContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, TPTPParser.RULE_inference_status);
	    try {
	        this.state = 1685;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__30:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1680;
	            this.match(TPTPParser.T__30);
	            this.state = 1681;
	            this.status_value();
	            this.state = 1682;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1684;
	            this.inference_info();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	status_value() {
	    let localctx = new Status_valueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, TPTPParser.RULE_status_value);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1687;
	        this.match(TPTPParser.Lower_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inference_info() {
	    let localctx = new Inference_infoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, TPTPParser.RULE_inference_info);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1689;
	        this.inference_rule();
	        this.state = 1690;
	        this.match(TPTPParser.T__8);
	        this.state = 1691;
	        this.atomic_word();
	        this.state = 1692;
	        this.match(TPTPParser.T__1);
	        this.state = 1693;
	        this.general_list();
	        this.state = 1694;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assumptions_record() {
	    let localctx = new Assumptions_recordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, TPTPParser.RULE_assumptions_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1696;
	        this.match(TPTPParser.T__31);
	        this.state = 1697;
	        this.match(TPTPParser.T__10);
	        this.state = 1698;
	        this.name_list();
	        this.state = 1699;
	        this.match(TPTPParser.T__11);
	        this.state = 1700;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	refutation() {
	    let localctx = new RefutationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, TPTPParser.RULE_refutation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1702;
	        this.match(TPTPParser.T__32);
	        this.state = 1703;
	        this.file_source();
	        this.state = 1704;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_symbol_record() {
	    let localctx = new New_symbol_recordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, TPTPParser.RULE_new_symbol_record);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1706;
	        this.match(TPTPParser.T__33);
	        this.state = 1707;
	        this.atomic_word();
	        this.state = 1708;
	        this.match(TPTPParser.T__1);
	        this.state = 1709;
	        this.match(TPTPParser.T__10);
	        this.state = 1710;
	        this.new_symbol_list();
	        this.state = 1711;
	        this.match(TPTPParser.T__11);
	        this.state = 1712;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	new_symbol_list() {
	    let localctx = new New_symbol_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, TPTPParser.RULE_new_symbol_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1714;
	        this.principal_symbol();
	        this.state = 1719;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TPTPParser.T__1) {
	            this.state = 1715;
	            this.match(TPTPParser.T__1);
	            this.state = 1716;
	            this.principal_symbol();
	            this.state = 1721;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	principal_symbol() {
	    let localctx = new Principal_symbolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, TPTPParser.RULE_principal_symbol);
	    try {
	        this.state = 1724;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1722;
	            this.functor();
	            break;
	        case TPTPParser.Upper_word:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1723;
	            this.variable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	include() {
	    let localctx = new IncludeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, TPTPParser.RULE_include);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1726;
	        this.match(TPTPParser.T__34);
	        this.state = 1727;
	        this.file_name();
	        this.state = 1729;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===TPTPParser.T__1) {
	            this.state = 1728;
	            this.formula_selection();
	        }

	        this.state = 1731;
	        this.match(TPTPParser.T__2);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_selection() {
	    let localctx = new Formula_selectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, TPTPParser.RULE_formula_selection);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1733;
	        this.match(TPTPParser.T__1);
	        this.state = 1734;
	        this.match(TPTPParser.T__10);
	        this.state = 1735;
	        this.name_list();
	        this.state = 1736;
	        this.match(TPTPParser.T__11);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name_list() {
	    let localctx = new Name_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, TPTPParser.RULE_name_list);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1738;
	        this.name();
	        this.state = 1743;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TPTPParser.T__1) {
	            this.state = 1739;
	            this.match(TPTPParser.T__1);
	            this.state = 1740;
	            this.name();
	            this.state = 1745;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_term() {
	    let localctx = new General_termContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, TPTPParser.RULE_general_term);
	    try {
	        this.state = 1752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,136,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1746;
	            this.general_data();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1747;
	            this.general_data();
	            this.state = 1748;
	            this.match(TPTPParser.T__12);
	            this.state = 1749;
	            this.general_term();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1751;
	            this.general_list();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_data() {
	    let localctx = new General_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, TPTPParser.RULE_general_data);
	    try {
	        this.state = 1760;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,137,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1754;
	            this.atomic_word();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1755;
	            this.general_function();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1756;
	            this.variable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1757;
	            this.number();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1758;
	            this.match(TPTPParser.Distinct_object);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1759;
	            this.formula_data();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_function() {
	    let localctx = new General_functionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, TPTPParser.RULE_general_function);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1762;
	        this.atomic_word();
	        this.state = 1763;
	        this.match(TPTPParser.T__8);
	        this.state = 1764;
	        this.general_terms();
	        this.state = 1765;
	        this.match(TPTPParser.T__9);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	formula_data() {
	    let localctx = new Formula_dataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, TPTPParser.RULE_formula_data);
	    try {
	        this.state = 1787;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__35:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1767;
	            this.match(TPTPParser.T__35);
	            this.state = 1768;
	            this.thf_formula();
	            this.state = 1769;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.T__36:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1771;
	            this.match(TPTPParser.T__36);
	            this.state = 1772;
	            this.tff_formula();
	            this.state = 1773;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.T__37:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1775;
	            this.match(TPTPParser.T__37);
	            this.state = 1776;
	            this.fof_formula();
	            this.state = 1777;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.T__38:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1779;
	            this.match(TPTPParser.T__38);
	            this.state = 1780;
	            this.cnf_formula();
	            this.state = 1781;
	            this.match(TPTPParser.T__9);
	            break;
	        case TPTPParser.T__39:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1783;
	            this.match(TPTPParser.T__39);
	            this.state = 1784;
	            this.fof_term();
	            this.state = 1785;
	            this.match(TPTPParser.T__9);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_list() {
	    let localctx = new General_listContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, TPTPParser.RULE_general_list);
	    try {
	        this.state = 1794;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.T__14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1789;
	            this.match(TPTPParser.T__14);
	            break;
	        case TPTPParser.T__10:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1790;
	            this.match(TPTPParser.T__10);
	            this.state = 1791;
	            this.general_terms();
	            this.state = 1792;
	            this.match(TPTPParser.T__11);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	general_terms() {
	    let localctx = new General_termsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, TPTPParser.RULE_general_terms);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1796;
	        this.general_term();
	        this.state = 1801;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===TPTPParser.T__1) {
	            this.state = 1797;
	            this.match(TPTPParser.T__1);
	            this.state = 1798;
	            this.general_term();
	            this.state = 1803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, TPTPParser.RULE_name);
	    try {
	        this.state = 1806;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case TPTPParser.Lower_word:
	        case TPTPParser.Single_quoted:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1804;
	            this.atomic_word();
	            break;
	        case TPTPParser.Integer:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1805;
	            this.match(TPTPParser.Integer);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_word() {
	    let localctx = new Atomic_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, TPTPParser.RULE_atomic_word);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1808;
	        _la = this._input.LA(1);
	        if(!(_la===TPTPParser.Lower_word || _la===TPTPParser.Single_quoted)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_defined_word() {
	    let localctx = new Atomic_defined_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, TPTPParser.RULE_atomic_defined_word);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1810;
	        this.match(TPTPParser.Dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	atomic_system_word() {
	    let localctx = new Atomic_system_wordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, TPTPParser.RULE_atomic_system_word);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1812;
	        this.match(TPTPParser.Dollar_dollar_word);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	number() {
	    let localctx = new NumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, TPTPParser.RULE_number);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1814;
	        _la = this._input.LA(1);
	        if(!(((((_la - 73)) & ~0x1f) == 0 && ((1 << (_la - 73)) & ((1 << (TPTPParser.Real - 73)) | (1 << (TPTPParser.Rational - 73)) | (1 << (TPTPParser.Integer - 73)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	file_name() {
	    let localctx = new File_nameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, TPTPParser.RULE_file_name);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1816;
	        this.match(TPTPParser.Single_quoted);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

TPTPParser.EOF = antlr4.Token.EOF;
TPTPParser.T__0 = 1;
TPTPParser.T__1 = 2;
TPTPParser.T__2 = 3;
TPTPParser.T__3 = 4;
TPTPParser.T__4 = 5;
TPTPParser.T__5 = 6;
TPTPParser.T__6 = 7;
TPTPParser.T__7 = 8;
TPTPParser.T__8 = 9;
TPTPParser.T__9 = 10;
TPTPParser.T__10 = 11;
TPTPParser.T__11 = 12;
TPTPParser.T__12 = 13;
TPTPParser.T__13 = 14;
TPTPParser.T__14 = 15;
TPTPParser.T__15 = 16;
TPTPParser.T__16 = 17;
TPTPParser.T__17 = 18;
TPTPParser.T__18 = 19;
TPTPParser.T__19 = 20;
TPTPParser.T__20 = 21;
TPTPParser.T__21 = 22;
TPTPParser.T__22 = 23;
TPTPParser.T__23 = 24;
TPTPParser.T__24 = 25;
TPTPParser.T__25 = 26;
TPTPParser.T__26 = 27;
TPTPParser.T__27 = 28;
TPTPParser.T__28 = 29;
TPTPParser.T__29 = 30;
TPTPParser.T__30 = 31;
TPTPParser.T__31 = 32;
TPTPParser.T__32 = 33;
TPTPParser.T__33 = 34;
TPTPParser.T__34 = 35;
TPTPParser.T__35 = 36;
TPTPParser.T__36 = 37;
TPTPParser.T__37 = 38;
TPTPParser.T__38 = 39;
TPTPParser.T__39 = 40;
TPTPParser.Or = 41;
TPTPParser.And = 42;
TPTPParser.Iff = 43;
TPTPParser.Impl = 44;
TPTPParser.If = 45;
TPTPParser.Niff = 46;
TPTPParser.Nor = 47;
TPTPParser.Nand = 48;
TPTPParser.Not = 49;
TPTPParser.ForallComb = 50;
TPTPParser.TyForall = 51;
TPTPParser.Infix_inequality = 52;
TPTPParser.Infix_equality = 53;
TPTPParser.Forall = 54;
TPTPParser.ExistsComb = 55;
TPTPParser.TyExists = 56;
TPTPParser.Exists = 57;
TPTPParser.Lambda = 58;
TPTPParser.ChoiceComb = 59;
TPTPParser.Choice = 60;
TPTPParser.DescriptionComb = 61;
TPTPParser.Description = 62;
TPTPParser.EqComb = 63;
TPTPParser.App = 64;
TPTPParser.Assignment = 65;
TPTPParser.Identical = 66;
TPTPParser.Arrow = 67;
TPTPParser.Star = 68;
TPTPParser.Plus = 69;
TPTPParser.Hash = 70;
TPTPParser.Subtype_sign = 71;
TPTPParser.Gentzen_arrow = 72;
TPTPParser.Real = 73;
TPTPParser.Signed_real = 74;
TPTPParser.Unsigned_real = 75;
TPTPParser.Rational = 76;
TPTPParser.Signed_rational = 77;
TPTPParser.Unsigned_rational = 78;
TPTPParser.Integer = 79;
TPTPParser.Signed_integer = 80;
TPTPParser.Unsigned_integer = 81;
TPTPParser.Decimal = 82;
TPTPParser.Positive_decimal = 83;
TPTPParser.Decimal_exponent = 84;
TPTPParser.Decimal_fraction = 85;
TPTPParser.Dot_decimal = 86;
TPTPParser.Exp_integer = 87;
TPTPParser.Signed_exp_integer = 88;
TPTPParser.Unsigned_exp_integer = 89;
TPTPParser.Dollar_word = 90;
TPTPParser.Dollar_dollar_word = 91;
TPTPParser.Upper_word = 92;
TPTPParser.Lower_word = 93;
TPTPParser.Single_quoted = 94;
TPTPParser.Distinct_object = 95;
TPTPParser.WS = 96;
TPTPParser.Line_comment = 97;
TPTPParser.Block_comment = 98;

TPTPParser.RULE_tptp_file = 0;
TPTPParser.RULE_tptp_input = 1;
TPTPParser.RULE_annotated_formula = 2;
TPTPParser.RULE_tpi_annotated = 3;
TPTPParser.RULE_tpi_formula = 4;
TPTPParser.RULE_thf_annotated = 5;
TPTPParser.RULE_tff_annotated = 6;
TPTPParser.RULE_tcf_annotated = 7;
TPTPParser.RULE_fof_annotated = 8;
TPTPParser.RULE_cnf_annotated = 9;
TPTPParser.RULE_annotations = 10;
TPTPParser.RULE_formula_role = 11;
TPTPParser.RULE_thf_formula = 12;
TPTPParser.RULE_thf_logic_formula = 13;
TPTPParser.RULE_thf_binary_formula = 14;
TPTPParser.RULE_thf_binary_nonassoc = 15;
TPTPParser.RULE_thf_binary_assoc = 16;
TPTPParser.RULE_thf_or_formula = 17;
TPTPParser.RULE_thf_and_formula = 18;
TPTPParser.RULE_thf_apply_formula = 19;
TPTPParser.RULE_thf_unit_formula = 20;
TPTPParser.RULE_thf_preunit_formula = 21;
TPTPParser.RULE_thf_unitary_formula = 22;
TPTPParser.RULE_thf_quantified_formula = 23;
TPTPParser.RULE_thf_quantification = 24;
TPTPParser.RULE_thf_variable_list = 25;
TPTPParser.RULE_thf_variable = 26;
TPTPParser.RULE_thf_typed_variable = 27;
TPTPParser.RULE_thf_unary_formula = 28;
TPTPParser.RULE_thf_prefix_unary = 29;
TPTPParser.RULE_thf_infix_unary = 30;
TPTPParser.RULE_thf_atomic_formula = 31;
TPTPParser.RULE_thf_plain_atomic = 32;
TPTPParser.RULE_thf_defined_atomic = 33;
TPTPParser.RULE_thf_defined_term = 34;
TPTPParser.RULE_thf_defined_infix = 35;
TPTPParser.RULE_thf_system_atomic = 36;
TPTPParser.RULE_thf_let = 37;
TPTPParser.RULE_thf_let_types = 38;
TPTPParser.RULE_thf_atom_typing_list = 39;
TPTPParser.RULE_thf_let_defns = 40;
TPTPParser.RULE_thf_let_defn = 41;
TPTPParser.RULE_thf_let_defn_list = 42;
TPTPParser.RULE_thf_unitary_term = 43;
TPTPParser.RULE_thf_conn_term = 44;
TPTPParser.RULE_thf_tuple = 45;
TPTPParser.RULE_thf_fof_function = 46;
TPTPParser.RULE_thf_arguments = 47;
TPTPParser.RULE_thf_formula_list = 48;
TPTPParser.RULE_thf_atom_typing = 49;
TPTPParser.RULE_thf_top_level_type = 50;
TPTPParser.RULE_thf_unitary_type = 51;
TPTPParser.RULE_thf_apply_type = 52;
TPTPParser.RULE_thf_binary_type = 53;
TPTPParser.RULE_thf_mapping_type = 54;
TPTPParser.RULE_thf_xprod_type = 55;
TPTPParser.RULE_thf_union_type = 56;
TPTPParser.RULE_thf_subtype = 57;
TPTPParser.RULE_thf_definition = 58;
TPTPParser.RULE_thf_sequent = 59;
TPTPParser.RULE_tff_formula = 60;
TPTPParser.RULE_tff_logic_formula = 61;
TPTPParser.RULE_tff_binary_formula = 62;
TPTPParser.RULE_tff_binary_nonassoc = 63;
TPTPParser.RULE_tff_binary_assoc = 64;
TPTPParser.RULE_tff_or_formula = 65;
TPTPParser.RULE_tff_and_formula = 66;
TPTPParser.RULE_tff_unit_formula = 67;
TPTPParser.RULE_tff_preunit_formula = 68;
TPTPParser.RULE_tff_unitary_formula = 69;
TPTPParser.RULE_txf_unitary_formula = 70;
TPTPParser.RULE_tff_quantified_formula = 71;
TPTPParser.RULE_tff_variable_list = 72;
TPTPParser.RULE_tff_variable = 73;
TPTPParser.RULE_tff_typed_variable = 74;
TPTPParser.RULE_tff_unary_formula = 75;
TPTPParser.RULE_tff_prefix_unary = 76;
TPTPParser.RULE_tff_infix_unary = 77;
TPTPParser.RULE_tff_atomic_formula = 78;
TPTPParser.RULE_tff_plain_atomic = 79;
TPTPParser.RULE_tff_defined_atomic = 80;
TPTPParser.RULE_tff_defined_plain = 81;
TPTPParser.RULE_tff_defined_infix = 82;
TPTPParser.RULE_tff_system_atomic = 83;
TPTPParser.RULE_txf_let = 84;
TPTPParser.RULE_txf_let_types = 85;
TPTPParser.RULE_tff_atom_typing_list = 86;
TPTPParser.RULE_txf_let_defns = 87;
TPTPParser.RULE_txf_let_defn = 88;
TPTPParser.RULE_txf_let_LHS = 89;
TPTPParser.RULE_txf_let_defn_list = 90;
TPTPParser.RULE_txf_ntf_atom = 91;
TPTPParser.RULE_tff_term = 92;
TPTPParser.RULE_tff_unitary_term = 93;
TPTPParser.RULE_txf_tuple = 94;
TPTPParser.RULE_tff_arguments = 95;
TPTPParser.RULE_tff_atom_typing = 96;
TPTPParser.RULE_tff_top_level_type = 97;
TPTPParser.RULE_tff_non_atomic_type = 98;
TPTPParser.RULE_tf1_quantified_type = 99;
TPTPParser.RULE_tff_monotype = 100;
TPTPParser.RULE_tff_unitary_type = 101;
TPTPParser.RULE_tff_atomic_type = 102;
TPTPParser.RULE_tff_type_arguments = 103;
TPTPParser.RULE_tff_mapping_type = 104;
TPTPParser.RULE_tff_xprod_type = 105;
TPTPParser.RULE_txf_tuple_type = 106;
TPTPParser.RULE_tff_type_list = 107;
TPTPParser.RULE_tff_subtype = 108;
TPTPParser.RULE_txf_definition = 109;
TPTPParser.RULE_txf_sequent = 110;
TPTPParser.RULE_ntf_connective = 111;
TPTPParser.RULE_ntf_short_connective = 112;
TPTPParser.RULE_ntf_long_connective = 113;
TPTPParser.RULE_ntf_connective_name = 114;
TPTPParser.RULE_ntf_parameter_list = 115;
TPTPParser.RULE_ntf_parameter = 116;
TPTPParser.RULE_ntf_index = 117;
TPTPParser.RULE_ntf_key_pair = 118;
TPTPParser.RULE_logic_defn_rule = 119;
TPTPParser.RULE_logic_defn_LHS = 120;
TPTPParser.RULE_logic_defn_RHS = 121;
TPTPParser.RULE_tcf_formula = 122;
TPTPParser.RULE_tcf_logic_formula = 123;
TPTPParser.RULE_tcf_quantified_formula = 124;
TPTPParser.RULE_fof_formula = 125;
TPTPParser.RULE_fof_logic_formula = 126;
TPTPParser.RULE_fof_binary_formula = 127;
TPTPParser.RULE_fof_binary_nonassoc = 128;
TPTPParser.RULE_fof_binary_assoc = 129;
TPTPParser.RULE_fof_or_formula = 130;
TPTPParser.RULE_fof_and_formula = 131;
TPTPParser.RULE_fof_unary_formula = 132;
TPTPParser.RULE_fof_infix_unary = 133;
TPTPParser.RULE_fof_unit_formula = 134;
TPTPParser.RULE_fof_unitary_formula = 135;
TPTPParser.RULE_fof_quantified_formula = 136;
TPTPParser.RULE_fof_variable_list = 137;
TPTPParser.RULE_fof_atomic_formula = 138;
TPTPParser.RULE_fof_plain_atomic_formula = 139;
TPTPParser.RULE_fof_defined_atomic_formula = 140;
TPTPParser.RULE_fof_defined_plain_formula = 141;
TPTPParser.RULE_fof_defined_infix_formula = 142;
TPTPParser.RULE_fof_system_atomic_formula = 143;
TPTPParser.RULE_fof_plain_term = 144;
TPTPParser.RULE_fof_defined_term = 145;
TPTPParser.RULE_fof_defined_atomic_term = 146;
TPTPParser.RULE_fof_defined_plain_term = 147;
TPTPParser.RULE_fof_system_term = 148;
TPTPParser.RULE_fof_arguments = 149;
TPTPParser.RULE_fof_term = 150;
TPTPParser.RULE_fof_function_term = 151;
TPTPParser.RULE_fof_sequent = 152;
TPTPParser.RULE_fof_formula_tuple = 153;
TPTPParser.RULE_fof_formula_tuple_list = 154;
TPTPParser.RULE_cnf_formula = 155;
TPTPParser.RULE_cnf_disjunction = 156;
TPTPParser.RULE_cnf_literal = 157;
TPTPParser.RULE_thf_quantifier = 158;
TPTPParser.RULE_th1_quantifier = 159;
TPTPParser.RULE_th0_quantifier = 160;
TPTPParser.RULE_fof_quantifier = 161;
TPTPParser.RULE_nonassoc_connective = 162;
TPTPParser.RULE_assoc_connective = 163;
TPTPParser.RULE_unary_connective = 164;
TPTPParser.RULE_type_constant = 165;
TPTPParser.RULE_type_functor = 166;
TPTPParser.RULE_defined_type = 167;
TPTPParser.RULE_system_type = 168;
TPTPParser.RULE_atom = 169;
TPTPParser.RULE_untyped_atom = 170;
TPTPParser.RULE_defined_proposition = 171;
TPTPParser.RULE_defined_predicate = 172;
TPTPParser.RULE_defined_infix_pred = 173;
TPTPParser.RULE_constant = 174;
TPTPParser.RULE_functor = 175;
TPTPParser.RULE_defined_constant = 176;
TPTPParser.RULE_defined_functor = 177;
TPTPParser.RULE_system_constant = 178;
TPTPParser.RULE_system_functor = 179;
TPTPParser.RULE_def_or_sys_constant = 180;
TPTPParser.RULE_th1_defined_term = 181;
TPTPParser.RULE_defined_term = 182;
TPTPParser.RULE_variable = 183;
TPTPParser.RULE_source = 184;
TPTPParser.RULE_sources = 185;
TPTPParser.RULE_dag_source = 186;
TPTPParser.RULE_inference_record = 187;
TPTPParser.RULE_inference_rule = 188;
TPTPParser.RULE_inference_parents = 189;
TPTPParser.RULE_parent_list = 190;
TPTPParser.RULE_parent_info = 191;
TPTPParser.RULE_parent_details = 192;
TPTPParser.RULE_internal_source = 193;
TPTPParser.RULE_intro_type = 194;
TPTPParser.RULE_external_source = 195;
TPTPParser.RULE_file_source = 196;
TPTPParser.RULE_file_info = 197;
TPTPParser.RULE_theory = 198;
TPTPParser.RULE_theory_name = 199;
TPTPParser.RULE_creator_source = 200;
TPTPParser.RULE_creator_name = 201;
TPTPParser.RULE_optional_info = 202;
TPTPParser.RULE_useful_info = 203;
TPTPParser.RULE_info_items = 204;
TPTPParser.RULE_info_item = 205;
TPTPParser.RULE_formula_item = 206;
TPTPParser.RULE_description_item = 207;
TPTPParser.RULE_iquote_item = 208;
TPTPParser.RULE_inference_item = 209;
TPTPParser.RULE_inference_status = 210;
TPTPParser.RULE_status_value = 211;
TPTPParser.RULE_inference_info = 212;
TPTPParser.RULE_assumptions_record = 213;
TPTPParser.RULE_refutation = 214;
TPTPParser.RULE_new_symbol_record = 215;
TPTPParser.RULE_new_symbol_list = 216;
TPTPParser.RULE_principal_symbol = 217;
TPTPParser.RULE_include = 218;
TPTPParser.RULE_formula_selection = 219;
TPTPParser.RULE_name_list = 220;
TPTPParser.RULE_general_term = 221;
TPTPParser.RULE_general_data = 222;
TPTPParser.RULE_general_function = 223;
TPTPParser.RULE_formula_data = 224;
TPTPParser.RULE_general_list = 225;
TPTPParser.RULE_general_terms = 226;
TPTPParser.RULE_name = 227;
TPTPParser.RULE_atomic_word = 228;
TPTPParser.RULE_atomic_defined_word = 229;
TPTPParser.RULE_atomic_system_word = 230;
TPTPParser.RULE_number = 231;
TPTPParser.RULE_file_name = 232;

class Tptp_fileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tptp_file;
    }

	EOF() {
	    return this.getToken(TPTPParser.EOF, 0);
	};

	tptp_input = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tptp_inputContext);
	    } else {
	        return this.getTypedRuleContext(Tptp_inputContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTptp_file(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTptp_file(this);
		}
	}


}



class Tptp_inputContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tptp_input;
    }

	annotated_formula() {
	    return this.getTypedRuleContext(Annotated_formulaContext,0);
	};

	include() {
	    return this.getTypedRuleContext(IncludeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTptp_input(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTptp_input(this);
		}
	}


}



class Annotated_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_annotated_formula;
    }

	thf_annotated() {
	    return this.getTypedRuleContext(Thf_annotatedContext,0);
	};

	tff_annotated() {
	    return this.getTypedRuleContext(Tff_annotatedContext,0);
	};

	tcf_annotated() {
	    return this.getTypedRuleContext(Tcf_annotatedContext,0);
	};

	fof_annotated() {
	    return this.getTypedRuleContext(Fof_annotatedContext,0);
	};

	cnf_annotated() {
	    return this.getTypedRuleContext(Cnf_annotatedContext,0);
	};

	tpi_annotated() {
	    return this.getTypedRuleContext(Tpi_annotatedContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAnnotated_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAnnotated_formula(this);
		}
	}


}



class Tpi_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tpi_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tpi_formula() {
	    return this.getTypedRuleContext(Tpi_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTpi_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTpi_annotated(this);
		}
	}


}



class Tpi_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tpi_formula;
    }

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTpi_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTpi_formula(this);
		}
	}


}



class Thf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	thf_formula() {
	    return this.getTypedRuleContext(Thf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_annotated(this);
		}
	}


}



class Tff_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tff_formula() {
	    return this.getTypedRuleContext(Tff_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_annotated(this);
		}
	}


}



class Tcf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	tcf_formula() {
	    return this.getTypedRuleContext(Tcf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_annotated(this);
		}
	}


}



class Fof_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_annotated(this);
		}
	}


}



class Cnf_annotatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_annotated;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	formula_role() {
	    return this.getTypedRuleContext(Formula_roleContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	annotations() {
	    return this.getTypedRuleContext(AnnotationsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_annotated(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_annotated(this);
		}
	}


}



class AnnotationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_annotations;
    }

	source() {
	    return this.getTypedRuleContext(SourceContext,0);
	};

	optional_info() {
	    return this.getTypedRuleContext(Optional_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAnnotations(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAnnotations(this);
		}
	}


}



class Formula_roleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_formula_role;
    }

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFormula_role(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFormula_role(this);
		}
	}


}



class Thf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_formula;
    }

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_subtype() {
	    return this.getTypedRuleContext(Thf_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_formula(this);
		}
	}


}



class Thf_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_logic_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_unary_formula() {
	    return this.getTypedRuleContext(Thf_unary_formulaContext,0);
	};

	thf_binary_formula() {
	    return this.getTypedRuleContext(Thf_binary_formulaContext,0);
	};

	thf_defined_infix() {
	    return this.getTypedRuleContext(Thf_defined_infixContext,0);
	};

	thf_definition() {
	    return this.getTypedRuleContext(Thf_definitionContext,0);
	};

	thf_sequent() {
	    return this.getTypedRuleContext(Thf_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_logic_formula(this);
		}
	}


}



class Thf_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_formula;
    }

	thf_binary_nonassoc() {
	    return this.getTypedRuleContext(Thf_binary_nonassocContext,0);
	};

	thf_binary_assoc() {
	    return this.getTypedRuleContext(Thf_binary_assocContext,0);
	};

	thf_binary_type() {
	    return this.getTypedRuleContext(Thf_binary_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_formula(this);
		}
	}


}



class Thf_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_nonassoc;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_nonassoc(this);
		}
	}


}



class Thf_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_assoc;
    }

	thf_or_formula() {
	    return this.getTypedRuleContext(Thf_or_formulaContext,0);
	};

	thf_and_formula() {
	    return this.getTypedRuleContext(Thf_and_formulaContext,0);
	};

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_assoc(this);
		}
	}


}



class Thf_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_or_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	Or() {
	    return this.getToken(TPTPParser.Or, 0);
	};

	thf_or_formula() {
	    return this.getTypedRuleContext(Thf_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_or_formula(this);
		}
	}


}



class Thf_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_and_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	And() {
	    return this.getToken(TPTPParser.And, 0);
	};

	thf_and_formula() {
	    return this.getTypedRuleContext(Thf_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_and_formula(this);
		}
	}


}



class Thf_apply_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_apply_formula;
    }

	thf_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unit_formulaContext,i);
	    }
	};

	App() {
	    return this.getToken(TPTPParser.App, 0);
	};

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_apply_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_apply_formula(this);
		}
	}


}



class Thf_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unit_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_unary_formula() {
	    return this.getTypedRuleContext(Thf_unary_formulaContext,0);
	};

	thf_defined_infix() {
	    return this.getTypedRuleContext(Thf_defined_infixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unit_formula(this);
		}
	}


}



class Thf_preunit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_preunit_formula;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	thf_prefix_unary() {
	    return this.getTypedRuleContext(Thf_prefix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_preunit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_preunit_formula(this);
		}
	}


}



class Thf_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unitary_formula;
    }

	thf_quantified_formula() {
	    return this.getTypedRuleContext(Thf_quantified_formulaContext,0);
	};

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unitary_formula(this);
		}
	}


}



class Thf_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_quantified_formula;
    }

	thf_quantification() {
	    return this.getTypedRuleContext(Thf_quantificationContext,0);
	};

	thf_unit_formula() {
	    return this.getTypedRuleContext(Thf_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_quantified_formula(this);
		}
	}


}



class Thf_quantificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_quantification;
    }

	thf_quantifier() {
	    return this.getTypedRuleContext(Thf_quantifierContext,0);
	};

	thf_variable_list() {
	    return this.getTypedRuleContext(Thf_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_quantification(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_quantification(this);
		}
	}


}



class Thf_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_variable_list;
    }

	thf_variable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_variableContext);
	    } else {
	        return this.getTypedRuleContext(Thf_variableContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_variable_list(this);
		}
	}


}



class Thf_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_variable;
    }

	thf_typed_variable() {
	    return this.getTypedRuleContext(Thf_typed_variableContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_variable(this);
		}
	}


}



class Thf_typed_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_typed_variable;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_top_level_type() {
	    return this.getTypedRuleContext(Thf_top_level_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_typed_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_typed_variable(this);
		}
	}


}



class Thf_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unary_formula;
    }

	thf_prefix_unary() {
	    return this.getTypedRuleContext(Thf_prefix_unaryContext,0);
	};

	thf_infix_unary() {
	    return this.getTypedRuleContext(Thf_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unary_formula(this);
		}
	}


}



class Thf_prefix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_prefix_unary;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	thf_preunit_formula() {
	    return this.getTypedRuleContext(Thf_preunit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_prefix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_prefix_unary(this);
		}
	}


}



class Thf_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_infix_unary;
    }

	thf_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_termContext,i);
	    }
	};

	Infix_inequality() {
	    return this.getToken(TPTPParser.Infix_inequality, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_infix_unary(this);
		}
	}


}



class Thf_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_atomic_formula;
    }

	thf_plain_atomic() {
	    return this.getTypedRuleContext(Thf_plain_atomicContext,0);
	};

	thf_defined_atomic() {
	    return this.getTypedRuleContext(Thf_defined_atomicContext,0);
	};

	thf_system_atomic() {
	    return this.getTypedRuleContext(Thf_system_atomicContext,0);
	};

	thf_fof_function() {
	    return this.getTypedRuleContext(Thf_fof_functionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_atomic_formula(this);
		}
	}


}



class Thf_plain_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_plain_atomic;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	thf_tuple() {
	    return this.getTypedRuleContext(Thf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_plain_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_plain_atomic(this);
		}
	}


}



class Thf_defined_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_defined_atomic;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	thf_defined_term() {
	    return this.getTypedRuleContext(Thf_defined_termContext,0);
	};

	thf_conn_term() {
	    return this.getTypedRuleContext(Thf_conn_termContext,0);
	};

	ntf_connective() {
	    return this.getTypedRuleContext(Ntf_connectiveContext,0);
	};

	thf_let() {
	    return this.getTypedRuleContext(Thf_letContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_defined_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_defined_atomic(this);
		}
	}


}



class Thf_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_defined_term;
    }

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	th1_defined_term() {
	    return this.getTypedRuleContext(Th1_defined_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_defined_term(this);
		}
	}


}



class Thf_defined_infixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_defined_infix;
    }

	thf_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_defined_infix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_defined_infix(this);
		}
	}


}



class Thf_system_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_system_atomic;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_system_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_system_atomic(this);
		}
	}


}



class Thf_letContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let;
    }

	thf_let_types() {
	    return this.getTypedRuleContext(Thf_let_typesContext,0);
	};

	thf_let_defns() {
	    return this.getTypedRuleContext(Thf_let_defnsContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let(this);
		}
	}


}



class Thf_let_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_types;
    }

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_atom_typing_list() {
	    return this.getTypedRuleContext(Thf_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_types(this);
		}
	}


}



class Thf_atom_typing_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_atom_typing_list;
    }

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	thf_atom_typing_list() {
	    return this.getTypedRuleContext(Thf_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_atom_typing_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_atom_typing_list(this);
		}
	}


}



class Thf_let_defnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_defns;
    }

	thf_let_defn() {
	    return this.getTypedRuleContext(Thf_let_defnContext,0);
	};

	thf_let_defn_list() {
	    return this.getTypedRuleContext(Thf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_defns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_defns(this);
		}
	}


}



class Thf_let_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_defn;
    }

	thf_logic_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_logic_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Thf_logic_formulaContext,i);
	    }
	};

	Assignment() {
	    return this.getToken(TPTPParser.Assignment, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_defn(this);
		}
	}


}



class Thf_let_defn_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_let_defn_list;
    }

	thf_let_defn() {
	    return this.getTypedRuleContext(Thf_let_defnContext,0);
	};

	thf_let_defn_list() {
	    return this.getTypedRuleContext(Thf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_let_defn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_let_defn_list(this);
		}
	}


}



class Thf_unitary_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unitary_term;
    }

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unitary_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unitary_term(this);
		}
	}


}



class Thf_conn_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_conn_term;
    }

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	assoc_connective() {
	    return this.getTypedRuleContext(Assoc_connectiveContext,0);
	};

	Infix_equality() {
	    return this.getToken(TPTPParser.Infix_equality, 0);
	};

	Infix_inequality() {
	    return this.getToken(TPTPParser.Infix_inequality, 0);
	};

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_conn_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_conn_term(this);
		}
	}


}



class Thf_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_tuple;
    }

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_tuple(this);
		}
	}


}



class Thf_fof_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_fof_function;
    }

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	thf_arguments() {
	    return this.getTypedRuleContext(Thf_argumentsContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_fof_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_fof_function(this);
		}
	}


}



class Thf_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_arguments;
    }

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_arguments(this);
		}
	}


}



class Thf_formula_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_formula_list;
    }

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	thf_formula_list() {
	    return this.getTypedRuleContext(Thf_formula_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_formula_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_formula_list(this);
		}
	}


}



class Thf_atom_typingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_atom_typing;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	thf_top_level_type() {
	    return this.getTypedRuleContext(Thf_top_level_typeContext,0);
	};

	thf_atom_typing() {
	    return this.getTypedRuleContext(Thf_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_atom_typing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_atom_typing(this);
		}
	}


}



class Thf_top_level_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_top_level_type;
    }

	thf_unitary_type() {
	    return this.getTypedRuleContext(Thf_unitary_typeContext,0);
	};

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	thf_apply_type() {
	    return this.getTypedRuleContext(Thf_apply_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_top_level_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_top_level_type(this);
		}
	}


}



class Thf_unitary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_unitary_type;
    }

	thf_unitary_formula() {
	    return this.getTypedRuleContext(Thf_unitary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_unitary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_unitary_type(this);
		}
	}


}



class Thf_apply_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_apply_type;
    }

	thf_apply_formula() {
	    return this.getTypedRuleContext(Thf_apply_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_apply_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_apply_type(this);
		}
	}


}



class Thf_binary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_binary_type;
    }

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	thf_xprod_type() {
	    return this.getTypedRuleContext(Thf_xprod_typeContext,0);
	};

	thf_union_type() {
	    return this.getTypedRuleContext(Thf_union_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_binary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_binary_type(this);
		}
	}


}



class Thf_mapping_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_mapping_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Arrow() {
	    return this.getToken(TPTPParser.Arrow, 0);
	};

	thf_mapping_type() {
	    return this.getTypedRuleContext(Thf_mapping_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_mapping_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_mapping_type(this);
		}
	}


}



class Thf_xprod_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_xprod_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Star() {
	    return this.getToken(TPTPParser.Star, 0);
	};

	thf_xprod_type() {
	    return this.getTypedRuleContext(Thf_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_xprod_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_xprod_type(this);
		}
	}


}



class Thf_union_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_union_type;
    }

	thf_unitary_type = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_unitary_typeContext);
	    } else {
	        return this.getTypedRuleContext(Thf_unitary_typeContext,i);
	    }
	};

	Plus() {
	    return this.getToken(TPTPParser.Plus, 0);
	};

	thf_union_type() {
	    return this.getTypedRuleContext(Thf_union_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_union_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_union_type(this);
		}
	}


}



class Thf_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_subtype;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	Subtype_sign() {
	    return this.getToken(TPTPParser.Subtype_sign, 0);
	};

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_subtype(this);
		}
	}


}



class Thf_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_definition;
    }

	thf_atomic_formula() {
	    return this.getTypedRuleContext(Thf_atomic_formulaContext,0);
	};

	Identical() {
	    return this.getToken(TPTPParser.Identical, 0);
	};

	thf_logic_formula() {
	    return this.getTypedRuleContext(Thf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_definition(this);
		}
	}


}



class Thf_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_sequent;
    }

	thf_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Thf_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Thf_tupleContext,i);
	    }
	};

	Gentzen_arrow() {
	    return this.getToken(TPTPParser.Gentzen_arrow, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_sequent(this);
		}
	}


}



class Tff_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_formula;
    }

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_subtype() {
	    return this.getTypedRuleContext(Tff_subtypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_formula(this);
		}
	}


}



class Tff_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_logic_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_unary_formula() {
	    return this.getTypedRuleContext(Tff_unary_formulaContext,0);
	};

	tff_binary_formula() {
	    return this.getTypedRuleContext(Tff_binary_formulaContext,0);
	};

	tff_defined_infix() {
	    return this.getTypedRuleContext(Tff_defined_infixContext,0);
	};

	txf_definition() {
	    return this.getTypedRuleContext(Txf_definitionContext,0);
	};

	txf_sequent() {
	    return this.getTypedRuleContext(Txf_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_logic_formula(this);
		}
	}


}



class Tff_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_binary_formula;
    }

	tff_binary_nonassoc() {
	    return this.getTypedRuleContext(Tff_binary_nonassocContext,0);
	};

	tff_binary_assoc() {
	    return this.getTypedRuleContext(Tff_binary_assocContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_binary_formula(this);
		}
	}


}



class Tff_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_binary_nonassoc;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_binary_nonassoc(this);
		}
	}


}



class Tff_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_binary_assoc;
    }

	tff_or_formula() {
	    return this.getTypedRuleContext(Tff_or_formulaContext,0);
	};

	tff_and_formula() {
	    return this.getTypedRuleContext(Tff_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_binary_assoc(this);
		}
	}


}



class Tff_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_or_formula;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	Or() {
	    return this.getToken(TPTPParser.Or, 0);
	};

	tff_or_formula() {
	    return this.getTypedRuleContext(Tff_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_or_formula(this);
		}
	}


}



class Tff_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_and_formula;
    }

	tff_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unit_formulaContext,i);
	    }
	};

	And() {
	    return this.getToken(TPTPParser.And, 0);
	};

	tff_and_formula() {
	    return this.getTypedRuleContext(Tff_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_and_formula(this);
		}
	}


}



class Tff_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unit_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_unary_formula() {
	    return this.getTypedRuleContext(Tff_unary_formulaContext,0);
	};

	tff_defined_infix() {
	    return this.getTypedRuleContext(Tff_defined_infixContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unit_formula(this);
		}
	}


}



class Tff_preunit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_preunit_formula;
    }

	tff_unitary_formula() {
	    return this.getTypedRuleContext(Tff_unitary_formulaContext,0);
	};

	tff_prefix_unary() {
	    return this.getTypedRuleContext(Tff_prefix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_preunit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_preunit_formula(this);
		}
	}


}



class Tff_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unitary_formula;
    }

	tff_quantified_formula() {
	    return this.getTypedRuleContext(Tff_quantified_formulaContext,0);
	};

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	txf_unitary_formula() {
	    return this.getTypedRuleContext(Txf_unitary_formulaContext,0);
	};

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unitary_formula(this);
		}
	}


}



class Txf_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_unitary_formula;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_unitary_formula(this);
		}
	}


}



class Tff_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_quantified_formula;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tff_unit_formula() {
	    return this.getTypedRuleContext(Tff_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_quantified_formula(this);
		}
	}


}



class Tff_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_variable_list;
    }

	tff_variable() {
	    return this.getTypedRuleContext(Tff_variableContext,0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_variable_list(this);
		}
	}


}



class Tff_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_variable;
    }

	tff_typed_variable() {
	    return this.getTypedRuleContext(Tff_typed_variableContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_variable(this);
		}
	}


}



class Tff_typed_variableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_typed_variable;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_typed_variable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_typed_variable(this);
		}
	}


}



class Tff_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unary_formula;
    }

	tff_prefix_unary() {
	    return this.getTypedRuleContext(Tff_prefix_unaryContext,0);
	};

	tff_infix_unary() {
	    return this.getTypedRuleContext(Tff_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unary_formula(this);
		}
	}


}



class Tff_prefix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_prefix_unary;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	tff_preunit_formula() {
	    return this.getTypedRuleContext(Tff_preunit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_prefix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_prefix_unary(this);
		}
	}


}



class Tff_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_infix_unary;
    }

	tff_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unitary_termContext,i);
	    }
	};

	Infix_inequality() {
	    return this.getToken(TPTPParser.Infix_inequality, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_infix_unary(this);
		}
	}


}



class Tff_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atomic_formula;
    }

	tff_plain_atomic() {
	    return this.getTypedRuleContext(Tff_plain_atomicContext,0);
	};

	tff_defined_atomic() {
	    return this.getTypedRuleContext(Tff_defined_atomicContext,0);
	};

	tff_system_atomic() {
	    return this.getTypedRuleContext(Tff_system_atomicContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atomic_formula(this);
		}
	}


}



class Tff_plain_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_plain_atomic;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_plain_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_plain_atomic(this);
		}
	}


}



class Tff_defined_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_defined_atomic;
    }

	tff_defined_plain() {
	    return this.getTypedRuleContext(Tff_defined_plainContext,0);
	};

	ntf_connective() {
	    return this.getTypedRuleContext(Ntf_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_defined_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_defined_atomic(this);
		}
	}


}



class Tff_defined_plainContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_defined_plain;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	txf_ntf_atom() {
	    return this.getTypedRuleContext(Txf_ntf_atomContext,0);
	};

	txf_let() {
	    return this.getTypedRuleContext(Txf_letContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_defined_plain(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_defined_plain(this);
		}
	}


}



class Tff_defined_infixContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_defined_infix;
    }

	tff_unitary_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Tff_unitary_termContext);
	    } else {
	        return this.getTypedRuleContext(Tff_unitary_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_defined_infix(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_defined_infix(this);
		}
	}


}



class Tff_system_atomicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_system_atomic;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_system_atomic(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_system_atomic(this);
		}
	}


}



class Txf_letContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let;
    }

	txf_let_types() {
	    return this.getTypedRuleContext(Txf_let_typesContext,0);
	};

	txf_let_defns() {
	    return this.getTypedRuleContext(Txf_let_defnsContext,0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let(this);
		}
	}


}



class Txf_let_typesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_types;
    }

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_atom_typing_list() {
	    return this.getTypedRuleContext(Tff_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_types(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_types(this);
		}
	}


}



class Tff_atom_typing_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atom_typing_list;
    }

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	tff_atom_typing_list() {
	    return this.getTypedRuleContext(Tff_atom_typing_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atom_typing_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atom_typing_list(this);
		}
	}


}



class Txf_let_defnsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_defns;
    }

	txf_let_defn() {
	    return this.getTypedRuleContext(Txf_let_defnContext,0);
	};

	txf_let_defn_list() {
	    return this.getTypedRuleContext(Txf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_defns(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_defns(this);
		}
	}


}



class Txf_let_defnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_defn;
    }

	txf_let_LHS() {
	    return this.getTypedRuleContext(Txf_let_LHSContext,0);
	};

	Assignment() {
	    return this.getToken(TPTPParser.Assignment, 0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_defn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_defn(this);
		}
	}


}



class Txf_let_LHSContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_LHS;
    }

	tff_plain_atomic() {
	    return this.getTypedRuleContext(Tff_plain_atomicContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_LHS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_LHS(this);
		}
	}


}



class Txf_let_defn_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_let_defn_list;
    }

	txf_let_defn() {
	    return this.getTypedRuleContext(Txf_let_defnContext,0);
	};

	txf_let_defn_list() {
	    return this.getTypedRuleContext(Txf_let_defn_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_let_defn_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_let_defn_list(this);
		}
	}


}



class Txf_ntf_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_ntf_atom;
    }

	ntf_connective() {
	    return this.getTypedRuleContext(Ntf_connectiveContext,0);
	};

	App() {
	    return this.getToken(TPTPParser.App, 0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_ntf_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_ntf_atom(this);
		}
	}


}



class Tff_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_term;
    }

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	ntf_key_pair() {
	    return this.getTypedRuleContext(Ntf_key_pairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_term(this);
		}
	}


}



class Tff_unitary_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unitary_term;
    }

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	tff_logic_formula() {
	    return this.getTypedRuleContext(Tff_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unitary_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unitary_term(this);
		}
	}


}



class Txf_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_tuple;
    }

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_tuple(this);
		}
	}


}



class Tff_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_arguments;
    }

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	tff_arguments() {
	    return this.getTypedRuleContext(Tff_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_arguments(this);
		}
	}


}



class Tff_atom_typingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atom_typing;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	tff_top_level_type() {
	    return this.getTypedRuleContext(Tff_top_level_typeContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atom_typing(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atom_typing(this);
		}
	}


}



class Tff_top_level_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_top_level_type;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_non_atomic_type() {
	    return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_top_level_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_top_level_type(this);
		}
	}


}



class Tff_non_atomic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_non_atomic_type;
    }

	tff_mapping_type() {
	    return this.getTypedRuleContext(Tff_mapping_typeContext,0);
	};

	tff_non_atomic_type() {
	    return this.getTypedRuleContext(Tff_non_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_non_atomic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_non_atomic_type(this);
		}
	}


}



class Tf1_quantified_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tf1_quantified_type;
    }

	TyForall() {
	    return this.getToken(TPTPParser.TyForall, 0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tff_monotype() {
	    return this.getTypedRuleContext(Tff_monotypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTf1_quantified_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTf1_quantified_type(this);
		}
	}


}



class Tff_monotypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_monotype;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_mapping_type() {
	    return this.getTypedRuleContext(Tff_mapping_typeContext,0);
	};

	tf1_quantified_type() {
	    return this.getTypedRuleContext(Tf1_quantified_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_monotype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_monotype(this);
		}
	}


}



class Tff_unitary_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_unitary_type;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_xprod_type() {
	    return this.getTypedRuleContext(Tff_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_unitary_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_unitary_type(this);
		}
	}


}



class Tff_atomic_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_atomic_type;
    }

	type_constant() {
	    return this.getTypedRuleContext(Type_constantContext,0);
	};

	defined_type() {
	    return this.getTypedRuleContext(Defined_typeContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	type_functor() {
	    return this.getTypedRuleContext(Type_functorContext,0);
	};

	tff_type_arguments() {
	    return this.getTypedRuleContext(Tff_type_argumentsContext,0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	txf_tuple_type() {
	    return this.getTypedRuleContext(Txf_tuple_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_atomic_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_atomic_type(this);
		}
	}


}



class Tff_type_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_type_arguments;
    }

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_type_arguments() {
	    return this.getTypedRuleContext(Tff_type_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_type_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_type_arguments(this);
		}
	}


}



class Tff_mapping_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_mapping_type;
    }

	tff_unitary_type() {
	    return this.getTypedRuleContext(Tff_unitary_typeContext,0);
	};

	Arrow() {
	    return this.getToken(TPTPParser.Arrow, 0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_mapping_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_mapping_type(this);
		}
	}


}



class Tff_xprod_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_xprod_type;
    }

	tff_unitary_type() {
	    return this.getTypedRuleContext(Tff_unitary_typeContext,0);
	};

	Star() {
	    return this.getToken(TPTPParser.Star, 0);
	};

	tff_atomic_type() {
	    return this.getTypedRuleContext(Tff_atomic_typeContext,0);
	};

	tff_xprod_type() {
	    return this.getTypedRuleContext(Tff_xprod_typeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_xprod_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_xprod_type(this);
		}
	}


}



class Txf_tuple_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_tuple_type;
    }

	tff_type_list() {
	    return this.getTypedRuleContext(Tff_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_tuple_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_tuple_type(this);
		}
	}


}



class Tff_type_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_type_list;
    }

	tff_top_level_type() {
	    return this.getTypedRuleContext(Tff_top_level_typeContext,0);
	};

	tff_type_list() {
	    return this.getTypedRuleContext(Tff_type_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_type_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_type_list(this);
		}
	}


}



class Tff_subtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tff_subtype;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	Subtype_sign() {
	    return this.getToken(TPTPParser.Subtype_sign, 0);
	};

	atom() {
	    return this.getTypedRuleContext(AtomContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTff_subtype(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTff_subtype(this);
		}
	}


}



class Txf_definitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_definition;
    }

	tff_atomic_formula() {
	    return this.getTypedRuleContext(Tff_atomic_formulaContext,0);
	};

	Identical() {
	    return this.getToken(TPTPParser.Identical, 0);
	};

	tff_term() {
	    return this.getTypedRuleContext(Tff_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_definition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_definition(this);
		}
	}


}



class Txf_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_txf_sequent;
    }

	txf_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Txf_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Txf_tupleContext,i);
	    }
	};

	Gentzen_arrow() {
	    return this.getToken(TPTPParser.Gentzen_arrow, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTxf_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTxf_sequent(this);
		}
	}


}



class Ntf_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_connective;
    }

	ntf_short_connective() {
	    return this.getTypedRuleContext(Ntf_short_connectiveContext,0);
	};

	ntf_long_connective() {
	    return this.getTypedRuleContext(Ntf_long_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_connective(this);
		}
	}


}



class Ntf_short_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_short_connective;
    }

	ntf_index() {
	    return this.getTypedRuleContext(Ntf_indexContext,0);
	};

	Arrow() {
	    return this.getToken(TPTPParser.Arrow, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_short_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_short_connective(this);
		}
	}


}



class Ntf_long_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_long_connective;
    }

	ntf_connective_name() {
	    return this.getTypedRuleContext(Ntf_connective_nameContext,0);
	};

	ntf_parameter_list() {
	    return this.getTypedRuleContext(Ntf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_long_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_long_connective(this);
		}
	}


}



class Ntf_connective_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_connective_name;
    }

	def_or_sys_constant() {
	    return this.getTypedRuleContext(Def_or_sys_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_connective_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_connective_name(this);
		}
	}


}



class Ntf_parameter_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_parameter_list;
    }

	ntf_parameter() {
	    return this.getTypedRuleContext(Ntf_parameterContext,0);
	};

	ntf_parameter_list() {
	    return this.getTypedRuleContext(Ntf_parameter_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_parameter_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_parameter_list(this);
		}
	}


}



class Ntf_parameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_parameter;
    }

	ntf_index() {
	    return this.getTypedRuleContext(Ntf_indexContext,0);
	};

	ntf_key_pair() {
	    return this.getTypedRuleContext(Ntf_key_pairContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_parameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_parameter(this);
		}
	}


}



class Ntf_indexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_index;
    }

	Hash() {
	    return this.getToken(TPTPParser.Hash, 0);
	};

	tff_unitary_term() {
	    return this.getTypedRuleContext(Tff_unitary_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_index(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_index(this);
		}
	}


}



class Ntf_key_pairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_ntf_key_pair;
    }

	def_or_sys_constant() {
	    return this.getTypedRuleContext(Def_or_sys_constantContext,0);
	};

	Assignment() {
	    return this.getToken(TPTPParser.Assignment, 0);
	};

	tff_unitary_term() {
	    return this.getTypedRuleContext(Tff_unitary_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNtf_key_pair(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNtf_key_pair(this);
		}
	}


}



class Logic_defn_ruleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_logic_defn_rule;
    }

	logic_defn_LHS() {
	    return this.getTypedRuleContext(Logic_defn_LHSContext,0);
	};

	Identical() {
	    return this.getToken(TPTPParser.Identical, 0);
	};

	logic_defn_RHS() {
	    return this.getTypedRuleContext(Logic_defn_RHSContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterLogic_defn_rule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitLogic_defn_rule(this);
		}
	}


}



class Logic_defn_LHSContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_logic_defn_LHS;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterLogic_defn_LHS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitLogic_defn_LHS(this);
		}
	}


}



class Logic_defn_RHSContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_logic_defn_RHS;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	txf_tuple() {
	    return this.getTypedRuleContext(Txf_tupleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterLogic_defn_RHS(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitLogic_defn_RHS(this);
		}
	}


}



class Tcf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_formula;
    }

	tcf_logic_formula() {
	    return this.getTypedRuleContext(Tcf_logic_formulaContext,0);
	};

	tff_atom_typing() {
	    return this.getTypedRuleContext(Tff_atom_typingContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_formula(this);
		}
	}


}



class Tcf_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_logic_formula;
    }

	tcf_quantified_formula() {
	    return this.getTypedRuleContext(Tcf_quantified_formulaContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_logic_formula(this);
		}
	}


}



class Tcf_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_tcf_quantified_formula;
    }

	Forall() {
	    return this.getToken(TPTPParser.Forall, 0);
	};

	tff_variable_list() {
	    return this.getTypedRuleContext(Tff_variable_listContext,0);
	};

	tcf_logic_formula() {
	    return this.getTypedRuleContext(Tcf_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTcf_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTcf_quantified_formula(this);
		}
	}


}



class Fof_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_formula;
    }

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	fof_sequent() {
	    return this.getTypedRuleContext(Fof_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_formula(this);
		}
	}


}



class Fof_logic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_logic_formula;
    }

	fof_binary_formula() {
	    return this.getTypedRuleContext(Fof_binary_formulaContext,0);
	};

	fof_unary_formula() {
	    return this.getTypedRuleContext(Fof_unary_formulaContext,0);
	};

	fof_unitary_formula() {
	    return this.getTypedRuleContext(Fof_unitary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_logic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_logic_formula(this);
		}
	}


}



class Fof_binary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_binary_formula;
    }

	fof_binary_nonassoc() {
	    return this.getTypedRuleContext(Fof_binary_nonassocContext,0);
	};

	fof_binary_assoc() {
	    return this.getTypedRuleContext(Fof_binary_assocContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_binary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_binary_formula(this);
		}
	}


}



class Fof_binary_nonassocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_binary_nonassoc;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	nonassoc_connective() {
	    return this.getTypedRuleContext(Nonassoc_connectiveContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_binary_nonassoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_binary_nonassoc(this);
		}
	}


}



class Fof_binary_assocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_binary_assoc;
    }

	fof_or_formula() {
	    return this.getTypedRuleContext(Fof_or_formulaContext,0);
	};

	fof_and_formula() {
	    return this.getTypedRuleContext(Fof_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_binary_assoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_binary_assoc(this);
		}
	}


}



class Fof_or_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_or_formula;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	Or() {
	    return this.getToken(TPTPParser.Or, 0);
	};

	fof_or_formula() {
	    return this.getTypedRuleContext(Fof_or_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_or_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_or_formula(this);
		}
	}


}



class Fof_and_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_and_formula;
    }

	fof_unit_formula = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_unit_formulaContext);
	    } else {
	        return this.getTypedRuleContext(Fof_unit_formulaContext,i);
	    }
	};

	And() {
	    return this.getToken(TPTPParser.And, 0);
	};

	fof_and_formula() {
	    return this.getTypedRuleContext(Fof_and_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_and_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_and_formula(this);
		}
	}


}



class Fof_unary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_unary_formula;
    }

	unary_connective() {
	    return this.getTypedRuleContext(Unary_connectiveContext,0);
	};

	fof_unit_formula() {
	    return this.getTypedRuleContext(Fof_unit_formulaContext,0);
	};

	fof_infix_unary() {
	    return this.getTypedRuleContext(Fof_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_unary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_unary_formula(this);
		}
	}


}



class Fof_infix_unaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_infix_unary;
    }

	fof_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_termContext);
	    } else {
	        return this.getTypedRuleContext(Fof_termContext,i);
	    }
	};

	Infix_inequality() {
	    return this.getToken(TPTPParser.Infix_inequality, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_infix_unary(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_infix_unary(this);
		}
	}


}



class Fof_unit_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_unit_formula;
    }

	fof_unitary_formula() {
	    return this.getTypedRuleContext(Fof_unitary_formulaContext,0);
	};

	fof_unary_formula() {
	    return this.getTypedRuleContext(Fof_unary_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_unit_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_unit_formula(this);
		}
	}


}



class Fof_unitary_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_unitary_formula;
    }

	fof_quantified_formula() {
	    return this.getTypedRuleContext(Fof_quantified_formulaContext,0);
	};

	fof_atomic_formula() {
	    return this.getTypedRuleContext(Fof_atomic_formulaContext,0);
	};

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_unitary_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_unitary_formula(this);
		}
	}


}



class Fof_quantified_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_quantified_formula;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	fof_variable_list() {
	    return this.getTypedRuleContext(Fof_variable_listContext,0);
	};

	fof_unit_formula() {
	    return this.getTypedRuleContext(Fof_unit_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_quantified_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_quantified_formula(this);
		}
	}


}



class Fof_variable_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_variable_list;
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	fof_variable_list() {
	    return this.getTypedRuleContext(Fof_variable_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_variable_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_variable_list(this);
		}
	}


}



class Fof_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_atomic_formula;
    }

	fof_plain_atomic_formula() {
	    return this.getTypedRuleContext(Fof_plain_atomic_formulaContext,0);
	};

	fof_defined_atomic_formula() {
	    return this.getTypedRuleContext(Fof_defined_atomic_formulaContext,0);
	};

	fof_system_atomic_formula() {
	    return this.getTypedRuleContext(Fof_system_atomic_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_atomic_formula(this);
		}
	}


}



class Fof_plain_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_plain_atomic_formula;
    }

	fof_plain_term() {
	    return this.getTypedRuleContext(Fof_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_plain_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_plain_atomic_formula(this);
		}
	}


}



class Fof_defined_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_atomic_formula;
    }

	fof_defined_plain_formula() {
	    return this.getTypedRuleContext(Fof_defined_plain_formulaContext,0);
	};

	fof_defined_infix_formula() {
	    return this.getTypedRuleContext(Fof_defined_infix_formulaContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_atomic_formula(this);
		}
	}


}



class Fof_defined_plain_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_plain_formula;
    }

	fof_defined_plain_term() {
	    return this.getTypedRuleContext(Fof_defined_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_plain_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_plain_formula(this);
		}
	}


}



class Fof_defined_infix_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_infix_formula;
    }

	fof_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_termContext);
	    } else {
	        return this.getTypedRuleContext(Fof_termContext,i);
	    }
	};

	defined_infix_pred() {
	    return this.getTypedRuleContext(Defined_infix_predContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_infix_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_infix_formula(this);
		}
	}


}



class Fof_system_atomic_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_system_atomic_formula;
    }

	fof_system_term() {
	    return this.getTypedRuleContext(Fof_system_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_system_atomic_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_system_atomic_formula(this);
		}
	}


}



class Fof_plain_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_plain_term;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_plain_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_plain_term(this);
		}
	}


}



class Fof_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_term;
    }

	defined_term() {
	    return this.getTypedRuleContext(Defined_termContext,0);
	};

	fof_defined_atomic_term() {
	    return this.getTypedRuleContext(Fof_defined_atomic_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_term(this);
		}
	}


}



class Fof_defined_atomic_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_atomic_term;
    }

	fof_defined_plain_term() {
	    return this.getTypedRuleContext(Fof_defined_plain_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_atomic_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_atomic_term(this);
		}
	}


}



class Fof_defined_plain_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_defined_plain_term;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_defined_plain_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_defined_plain_term(this);
		}
	}


}



class Fof_system_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_system_term;
    }

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_system_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_system_term(this);
		}
	}


}



class Fof_argumentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_arguments;
    }

	fof_term() {
	    return this.getTypedRuleContext(Fof_termContext,0);
	};

	fof_arguments() {
	    return this.getTypedRuleContext(Fof_argumentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_arguments(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_arguments(this);
		}
	}


}



class Fof_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_term;
    }

	fof_function_term() {
	    return this.getTypedRuleContext(Fof_function_termContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_term(this);
		}
	}


}



class Fof_function_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_function_term;
    }

	fof_plain_term() {
	    return this.getTypedRuleContext(Fof_plain_termContext,0);
	};

	fof_defined_term() {
	    return this.getTypedRuleContext(Fof_defined_termContext,0);
	};

	fof_system_term() {
	    return this.getTypedRuleContext(Fof_system_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_function_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_function_term(this);
		}
	}


}



class Fof_sequentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_sequent;
    }

	fof_formula_tuple = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Fof_formula_tupleContext);
	    } else {
	        return this.getTypedRuleContext(Fof_formula_tupleContext,i);
	    }
	};

	Gentzen_arrow() {
	    return this.getToken(TPTPParser.Gentzen_arrow, 0);
	};

	fof_sequent() {
	    return this.getTypedRuleContext(Fof_sequentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_sequent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_sequent(this);
		}
	}


}



class Fof_formula_tupleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_formula_tuple;
    }

	fof_formula_tuple_list() {
	    return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_formula_tuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_formula_tuple(this);
		}
	}


}



class Fof_formula_tuple_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_formula_tuple_list;
    }

	fof_logic_formula() {
	    return this.getTypedRuleContext(Fof_logic_formulaContext,0);
	};

	fof_formula_tuple_list() {
	    return this.getTypedRuleContext(Fof_formula_tuple_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_formula_tuple_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_formula_tuple_list(this);
		}
	}


}



class Cnf_formulaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_formula;
    }

	cnf_disjunction() {
	    return this.getTypedRuleContext(Cnf_disjunctionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_formula(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_formula(this);
		}
	}


}



class Cnf_disjunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_disjunction;
    }

	cnf_literal() {
	    return this.getTypedRuleContext(Cnf_literalContext,0);
	};

	cnf_disjunction() {
	    return this.getTypedRuleContext(Cnf_disjunctionContext,0);
	};

	Or() {
	    return this.getToken(TPTPParser.Or, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_disjunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_disjunction(this);
		}
	}


}



class Cnf_literalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_cnf_literal;
    }

	fof_atomic_formula() {
	    return this.getTypedRuleContext(Fof_atomic_formulaContext,0);
	};

	Not() {
	    return this.getToken(TPTPParser.Not, 0);
	};

	fof_infix_unary() {
	    return this.getTypedRuleContext(Fof_infix_unaryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCnf_literal(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCnf_literal(this);
		}
	}


}



class Thf_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_thf_quantifier;
    }

	fof_quantifier() {
	    return this.getTypedRuleContext(Fof_quantifierContext,0);
	};

	th0_quantifier() {
	    return this.getTypedRuleContext(Th0_quantifierContext,0);
	};

	th1_quantifier() {
	    return this.getTypedRuleContext(Th1_quantifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterThf_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitThf_quantifier(this);
		}
	}


}



class Th1_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_th1_quantifier;
    }

	TyForall() {
	    return this.getToken(TPTPParser.TyForall, 0);
	};

	TyExists() {
	    return this.getToken(TPTPParser.TyExists, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTh1_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTh1_quantifier(this);
		}
	}


}



class Th0_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_th0_quantifier;
    }

	Lambda() {
	    return this.getToken(TPTPParser.Lambda, 0);
	};

	Choice() {
	    return this.getToken(TPTPParser.Choice, 0);
	};

	Description() {
	    return this.getToken(TPTPParser.Description, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTh0_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTh0_quantifier(this);
		}
	}


}



class Fof_quantifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_fof_quantifier;
    }

	Forall() {
	    return this.getToken(TPTPParser.Forall, 0);
	};

	Exists() {
	    return this.getToken(TPTPParser.Exists, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFof_quantifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFof_quantifier(this);
		}
	}


}



class Nonassoc_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_nonassoc_connective;
    }

	Iff() {
	    return this.getToken(TPTPParser.Iff, 0);
	};

	Impl() {
	    return this.getToken(TPTPParser.Impl, 0);
	};

	If() {
	    return this.getToken(TPTPParser.If, 0);
	};

	Niff() {
	    return this.getToken(TPTPParser.Niff, 0);
	};

	Nor() {
	    return this.getToken(TPTPParser.Nor, 0);
	};

	Nand() {
	    return this.getToken(TPTPParser.Nand, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNonassoc_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNonassoc_connective(this);
		}
	}


}



class Assoc_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_assoc_connective;
    }

	Or() {
	    return this.getToken(TPTPParser.Or, 0);
	};

	And() {
	    return this.getToken(TPTPParser.And, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAssoc_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAssoc_connective(this);
		}
	}


}



class Unary_connectiveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_unary_connective;
    }

	Not() {
	    return this.getToken(TPTPParser.Not, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterUnary_connective(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitUnary_connective(this);
		}
	}


}



class Type_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_type_constant;
    }

	type_functor() {
	    return this.getTypedRuleContext(Type_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterType_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitType_constant(this);
		}
	}


}



class Type_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_type_functor;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterType_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitType_functor(this);
		}
	}


}



class Defined_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_type;
    }

	Dollar_word() {
	    return this.getToken(TPTPParser.Dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_type(this);
		}
	}


}



class System_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_system_type;
    }

	atomic_system_word() {
	    return this.getTypedRuleContext(Atomic_system_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSystem_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSystem_type(this);
		}
	}


}



class AtomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atom;
    }

	untyped_atom() {
	    return this.getTypedRuleContext(Untyped_atomContext,0);
	};

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtom(this);
		}
	}


}



class Untyped_atomContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_untyped_atom;
    }

	constant() {
	    return this.getTypedRuleContext(ConstantContext,0);
	};

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterUntyped_atom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitUntyped_atom(this);
		}
	}


}



class Defined_propositionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_proposition;
    }

	Dollar_word() {
	    return this.getToken(TPTPParser.Dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_proposition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_proposition(this);
		}
	}


}



class Defined_predicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_predicate;
    }

	Dollar_word() {
	    return this.getToken(TPTPParser.Dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_predicate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_predicate(this);
		}
	}


}



class Defined_infix_predContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_infix_pred;
    }

	Infix_equality() {
	    return this.getToken(TPTPParser.Infix_equality, 0);
	};

	Assignment() {
	    return this.getToken(TPTPParser.Assignment, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_infix_pred(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_infix_pred(this);
		}
	}


}



class ConstantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_constant;
    }

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterConstant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitConstant(this);
		}
	}


}



class FunctorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_functor;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFunctor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFunctor(this);
		}
	}


}



class Defined_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_constant;
    }

	defined_functor() {
	    return this.getTypedRuleContext(Defined_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_constant(this);
		}
	}


}



class Defined_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_functor;
    }

	atomic_defined_word() {
	    return this.getTypedRuleContext(Atomic_defined_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_functor(this);
		}
	}


}



class System_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_system_constant;
    }

	system_functor() {
	    return this.getTypedRuleContext(System_functorContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSystem_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSystem_constant(this);
		}
	}


}



class System_functorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_system_functor;
    }

	atomic_system_word() {
	    return this.getTypedRuleContext(Atomic_system_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSystem_functor(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSystem_functor(this);
		}
	}


}



class Def_or_sys_constantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_def_or_sys_constant;
    }

	defined_constant() {
	    return this.getTypedRuleContext(Defined_constantContext,0);
	};

	system_constant() {
	    return this.getTypedRuleContext(System_constantContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDef_or_sys_constant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDef_or_sys_constant(this);
		}
	}


}



class Th1_defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_th1_defined_term;
    }

	ForallComb() {
	    return this.getToken(TPTPParser.ForallComb, 0);
	};

	ExistsComb() {
	    return this.getToken(TPTPParser.ExistsComb, 0);
	};

	ChoiceComb() {
	    return this.getToken(TPTPParser.ChoiceComb, 0);
	};

	DescriptionComb() {
	    return this.getToken(TPTPParser.DescriptionComb, 0);
	};

	EqComb() {
	    return this.getToken(TPTPParser.EqComb, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTh1_defined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTh1_defined_term(this);
		}
	}


}



class Defined_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_defined_term;
    }

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	Distinct_object() {
	    return this.getToken(TPTPParser.Distinct_object, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDefined_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDefined_term(this);
		}
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_variable;
    }

	Upper_word() {
	    return this.getToken(TPTPParser.Upper_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterVariable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitVariable(this);
		}
	}


}



class SourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_source;
    }

	dag_source() {
	    return this.getTypedRuleContext(Dag_sourceContext,0);
	};

	internal_source() {
	    return this.getTypedRuleContext(Internal_sourceContext,0);
	};

	external_source() {
	    return this.getTypedRuleContext(External_sourceContext,0);
	};

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	sources() {
	    return this.getTypedRuleContext(SourcesContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSource(this);
		}
	}


}



class SourcesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_sources;
    }

	source = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceContext);
	    } else {
	        return this.getTypedRuleContext(SourceContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterSources(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitSources(this);
		}
	}


}



class Dag_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_dag_source;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	inference_record() {
	    return this.getTypedRuleContext(Inference_recordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDag_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDag_source(this);
		}
	}


}



class Inference_recordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_record;
    }

	inference_rule() {
	    return this.getTypedRuleContext(Inference_ruleContext,0);
	};

	useful_info() {
	    return this.getTypedRuleContext(Useful_infoContext,0);
	};

	inference_parents() {
	    return this.getTypedRuleContext(Inference_parentsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_record(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_record(this);
		}
	}


}



class Inference_ruleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_rule;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_rule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_rule(this);
		}
	}


}



class Inference_parentsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_parents;
    }

	parent_list() {
	    return this.getTypedRuleContext(Parent_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_parents(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_parents(this);
		}
	}


}



class Parent_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_parent_list;
    }

	parent_info = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Parent_infoContext);
	    } else {
	        return this.getTypedRuleContext(Parent_infoContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterParent_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitParent_list(this);
		}
	}


}



class Parent_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_parent_info;
    }

	source() {
	    return this.getTypedRuleContext(SourceContext,0);
	};

	parent_details() {
	    return this.getTypedRuleContext(Parent_detailsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterParent_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitParent_info(this);
		}
	}


}



class Parent_detailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_parent_details;
    }

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterParent_details(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitParent_details(this);
		}
	}


}



class Internal_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_internal_source;
    }

	intro_type() {
	    return this.getTypedRuleContext(Intro_typeContext,0);
	};

	optional_info() {
	    return this.getTypedRuleContext(Optional_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInternal_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInternal_source(this);
		}
	}


}



class Intro_typeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_intro_type;
    }

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterIntro_type(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitIntro_type(this);
		}
	}


}



class External_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_external_source;
    }

	file_source() {
	    return this.getTypedRuleContext(File_sourceContext,0);
	};

	theory() {
	    return this.getTypedRuleContext(TheoryContext,0);
	};

	creator_source() {
	    return this.getTypedRuleContext(Creator_sourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterExternal_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitExternal_source(this);
		}
	}


}



class File_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_file_source;
    }

	file_name() {
	    return this.getTypedRuleContext(File_nameContext,0);
	};

	file_info() {
	    return this.getTypedRuleContext(File_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFile_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFile_source(this);
		}
	}


}



class File_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_file_info;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFile_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFile_info(this);
		}
	}


}



class TheoryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_theory;
    }

	theory_name() {
	    return this.getTypedRuleContext(Theory_nameContext,0);
	};

	optional_info() {
	    return this.getTypedRuleContext(Optional_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTheory(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTheory(this);
		}
	}


}



class Theory_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_theory_name;
    }

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterTheory_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitTheory_name(this);
		}
	}


}



class Creator_sourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_creator_source;
    }

	creator_name() {
	    return this.getTypedRuleContext(Creator_nameContext,0);
	};

	optional_info() {
	    return this.getTypedRuleContext(Optional_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCreator_source(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCreator_source(this);
		}
	}


}



class Creator_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_creator_name;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterCreator_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitCreator_name(this);
		}
	}


}



class Optional_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_optional_info;
    }

	useful_info() {
	    return this.getTypedRuleContext(Useful_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterOptional_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitOptional_info(this);
		}
	}


}



class Useful_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_useful_info;
    }

	info_items() {
	    return this.getTypedRuleContext(Info_itemsContext,0);
	};

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterUseful_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitUseful_info(this);
		}
	}


}



class Info_itemsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_info_items;
    }

	info_item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Info_itemContext);
	    } else {
	        return this.getTypedRuleContext(Info_itemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInfo_items(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInfo_items(this);
		}
	}


}



class Info_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_info_item;
    }

	formula_item() {
	    return this.getTypedRuleContext(Formula_itemContext,0);
	};

	inference_item() {
	    return this.getTypedRuleContext(Inference_itemContext,0);
	};

	general_function() {
	    return this.getTypedRuleContext(General_functionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInfo_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInfo_item(this);
		}
	}


}



class Formula_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_formula_item;
    }

	description_item() {
	    return this.getTypedRuleContext(Description_itemContext,0);
	};

	iquote_item() {
	    return this.getTypedRuleContext(Iquote_itemContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFormula_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFormula_item(this);
		}
	}


}



class Description_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_description_item;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterDescription_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitDescription_item(this);
		}
	}


}



class Iquote_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_iquote_item;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterIquote_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitIquote_item(this);
		}
	}


}



class Inference_itemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_item;
    }

	inference_status() {
	    return this.getTypedRuleContext(Inference_statusContext,0);
	};

	assumptions_record() {
	    return this.getTypedRuleContext(Assumptions_recordContext,0);
	};

	new_symbol_record() {
	    return this.getTypedRuleContext(New_symbol_recordContext,0);
	};

	refutation() {
	    return this.getTypedRuleContext(RefutationContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_item(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_item(this);
		}
	}


}



class Inference_statusContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_status;
    }

	status_value() {
	    return this.getTypedRuleContext(Status_valueContext,0);
	};

	inference_info() {
	    return this.getTypedRuleContext(Inference_infoContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_status(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_status(this);
		}
	}


}



class Status_valueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_status_value;
    }

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterStatus_value(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitStatus_value(this);
		}
	}


}



class Inference_infoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_inference_info;
    }

	inference_rule() {
	    return this.getTypedRuleContext(Inference_ruleContext,0);
	};

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInference_info(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInference_info(this);
		}
	}


}



class Assumptions_recordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_assumptions_record;
    }

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAssumptions_record(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAssumptions_record(this);
		}
	}


}



class RefutationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_refutation;
    }

	file_source() {
	    return this.getTypedRuleContext(File_sourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterRefutation(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitRefutation(this);
		}
	}


}



class New_symbol_recordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_new_symbol_record;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	new_symbol_list() {
	    return this.getTypedRuleContext(New_symbol_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNew_symbol_record(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNew_symbol_record(this);
		}
	}


}



class New_symbol_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_new_symbol_list;
    }

	principal_symbol = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Principal_symbolContext);
	    } else {
	        return this.getTypedRuleContext(Principal_symbolContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNew_symbol_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNew_symbol_list(this);
		}
	}


}



class Principal_symbolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_principal_symbol;
    }

	functor() {
	    return this.getTypedRuleContext(FunctorContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterPrincipal_symbol(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitPrincipal_symbol(this);
		}
	}


}



class IncludeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_include;
    }

	file_name() {
	    return this.getTypedRuleContext(File_nameContext,0);
	};

	formula_selection() {
	    return this.getTypedRuleContext(Formula_selectionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterInclude(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitInclude(this);
		}
	}


}



class Formula_selectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_formula_selection;
    }

	name_list() {
	    return this.getTypedRuleContext(Name_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFormula_selection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFormula_selection(this);
		}
	}


}



class Name_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_name_list;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterName_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitName_list(this);
		}
	}


}



class General_termContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_term;
    }

	general_data() {
	    return this.getTypedRuleContext(General_dataContext,0);
	};

	general_term() {
	    return this.getTypedRuleContext(General_termContext,0);
	};

	general_list() {
	    return this.getTypedRuleContext(General_listContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_term(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_term(this);
		}
	}


}



class General_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_data;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	general_function() {
	    return this.getTypedRuleContext(General_functionContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	number() {
	    return this.getTypedRuleContext(NumberContext,0);
	};

	Distinct_object() {
	    return this.getToken(TPTPParser.Distinct_object, 0);
	};

	formula_data() {
	    return this.getTypedRuleContext(Formula_dataContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_data(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_data(this);
		}
	}


}



class General_functionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_function;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_function(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_function(this);
		}
	}


}



class Formula_dataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_formula_data;
    }

	thf_formula() {
	    return this.getTypedRuleContext(Thf_formulaContext,0);
	};

	tff_formula() {
	    return this.getTypedRuleContext(Tff_formulaContext,0);
	};

	fof_formula() {
	    return this.getTypedRuleContext(Fof_formulaContext,0);
	};

	cnf_formula() {
	    return this.getTypedRuleContext(Cnf_formulaContext,0);
	};

	fof_term() {
	    return this.getTypedRuleContext(Fof_termContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFormula_data(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFormula_data(this);
		}
	}


}



class General_listContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_list;
    }

	general_terms() {
	    return this.getTypedRuleContext(General_termsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_list(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_list(this);
		}
	}


}



class General_termsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_general_terms;
    }

	general_term = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(General_termContext);
	    } else {
	        return this.getTypedRuleContext(General_termContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterGeneral_terms(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitGeneral_terms(this);
		}
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_name;
    }

	atomic_word() {
	    return this.getTypedRuleContext(Atomic_wordContext,0);
	};

	Integer() {
	    return this.getToken(TPTPParser.Integer, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitName(this);
		}
	}


}



class Atomic_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atomic_word;
    }

	Lower_word() {
	    return this.getToken(TPTPParser.Lower_word, 0);
	};

	Single_quoted() {
	    return this.getToken(TPTPParser.Single_quoted, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtomic_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtomic_word(this);
		}
	}


}



class Atomic_defined_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atomic_defined_word;
    }

	Dollar_word() {
	    return this.getToken(TPTPParser.Dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtomic_defined_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtomic_defined_word(this);
		}
	}


}



class Atomic_system_wordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_atomic_system_word;
    }

	Dollar_dollar_word() {
	    return this.getToken(TPTPParser.Dollar_dollar_word, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterAtomic_system_word(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitAtomic_system_word(this);
		}
	}


}



class NumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_number;
    }

	Integer() {
	    return this.getToken(TPTPParser.Integer, 0);
	};

	Rational() {
	    return this.getToken(TPTPParser.Rational, 0);
	};

	Real() {
	    return this.getToken(TPTPParser.Real, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterNumber(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitNumber(this);
		}
	}


}



class File_nameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = TPTPParser.RULE_file_name;
    }

	Single_quoted() {
	    return this.getToken(TPTPParser.Single_quoted, 0);
	};

	enterRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.enterFile_name(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof TPTPListener ) {
	        listener.exitFile_name(this);
		}
	}


}




TPTPParser.Tptp_fileContext = Tptp_fileContext; 
TPTPParser.Tptp_inputContext = Tptp_inputContext; 
TPTPParser.Annotated_formulaContext = Annotated_formulaContext; 
TPTPParser.Tpi_annotatedContext = Tpi_annotatedContext; 
TPTPParser.Tpi_formulaContext = Tpi_formulaContext; 
TPTPParser.Thf_annotatedContext = Thf_annotatedContext; 
TPTPParser.Tff_annotatedContext = Tff_annotatedContext; 
TPTPParser.Tcf_annotatedContext = Tcf_annotatedContext; 
TPTPParser.Fof_annotatedContext = Fof_annotatedContext; 
TPTPParser.Cnf_annotatedContext = Cnf_annotatedContext; 
TPTPParser.AnnotationsContext = AnnotationsContext; 
TPTPParser.Formula_roleContext = Formula_roleContext; 
TPTPParser.Thf_formulaContext = Thf_formulaContext; 
TPTPParser.Thf_logic_formulaContext = Thf_logic_formulaContext; 
TPTPParser.Thf_binary_formulaContext = Thf_binary_formulaContext; 
TPTPParser.Thf_binary_nonassocContext = Thf_binary_nonassocContext; 
TPTPParser.Thf_binary_assocContext = Thf_binary_assocContext; 
TPTPParser.Thf_or_formulaContext = Thf_or_formulaContext; 
TPTPParser.Thf_and_formulaContext = Thf_and_formulaContext; 
TPTPParser.Thf_apply_formulaContext = Thf_apply_formulaContext; 
TPTPParser.Thf_unit_formulaContext = Thf_unit_formulaContext; 
TPTPParser.Thf_preunit_formulaContext = Thf_preunit_formulaContext; 
TPTPParser.Thf_unitary_formulaContext = Thf_unitary_formulaContext; 
TPTPParser.Thf_quantified_formulaContext = Thf_quantified_formulaContext; 
TPTPParser.Thf_quantificationContext = Thf_quantificationContext; 
TPTPParser.Thf_variable_listContext = Thf_variable_listContext; 
TPTPParser.Thf_variableContext = Thf_variableContext; 
TPTPParser.Thf_typed_variableContext = Thf_typed_variableContext; 
TPTPParser.Thf_unary_formulaContext = Thf_unary_formulaContext; 
TPTPParser.Thf_prefix_unaryContext = Thf_prefix_unaryContext; 
TPTPParser.Thf_infix_unaryContext = Thf_infix_unaryContext; 
TPTPParser.Thf_atomic_formulaContext = Thf_atomic_formulaContext; 
TPTPParser.Thf_plain_atomicContext = Thf_plain_atomicContext; 
TPTPParser.Thf_defined_atomicContext = Thf_defined_atomicContext; 
TPTPParser.Thf_defined_termContext = Thf_defined_termContext; 
TPTPParser.Thf_defined_infixContext = Thf_defined_infixContext; 
TPTPParser.Thf_system_atomicContext = Thf_system_atomicContext; 
TPTPParser.Thf_letContext = Thf_letContext; 
TPTPParser.Thf_let_typesContext = Thf_let_typesContext; 
TPTPParser.Thf_atom_typing_listContext = Thf_atom_typing_listContext; 
TPTPParser.Thf_let_defnsContext = Thf_let_defnsContext; 
TPTPParser.Thf_let_defnContext = Thf_let_defnContext; 
TPTPParser.Thf_let_defn_listContext = Thf_let_defn_listContext; 
TPTPParser.Thf_unitary_termContext = Thf_unitary_termContext; 
TPTPParser.Thf_conn_termContext = Thf_conn_termContext; 
TPTPParser.Thf_tupleContext = Thf_tupleContext; 
TPTPParser.Thf_fof_functionContext = Thf_fof_functionContext; 
TPTPParser.Thf_argumentsContext = Thf_argumentsContext; 
TPTPParser.Thf_formula_listContext = Thf_formula_listContext; 
TPTPParser.Thf_atom_typingContext = Thf_atom_typingContext; 
TPTPParser.Thf_top_level_typeContext = Thf_top_level_typeContext; 
TPTPParser.Thf_unitary_typeContext = Thf_unitary_typeContext; 
TPTPParser.Thf_apply_typeContext = Thf_apply_typeContext; 
TPTPParser.Thf_binary_typeContext = Thf_binary_typeContext; 
TPTPParser.Thf_mapping_typeContext = Thf_mapping_typeContext; 
TPTPParser.Thf_xprod_typeContext = Thf_xprod_typeContext; 
TPTPParser.Thf_union_typeContext = Thf_union_typeContext; 
TPTPParser.Thf_subtypeContext = Thf_subtypeContext; 
TPTPParser.Thf_definitionContext = Thf_definitionContext; 
TPTPParser.Thf_sequentContext = Thf_sequentContext; 
TPTPParser.Tff_formulaContext = Tff_formulaContext; 
TPTPParser.Tff_logic_formulaContext = Tff_logic_formulaContext; 
TPTPParser.Tff_binary_formulaContext = Tff_binary_formulaContext; 
TPTPParser.Tff_binary_nonassocContext = Tff_binary_nonassocContext; 
TPTPParser.Tff_binary_assocContext = Tff_binary_assocContext; 
TPTPParser.Tff_or_formulaContext = Tff_or_formulaContext; 
TPTPParser.Tff_and_formulaContext = Tff_and_formulaContext; 
TPTPParser.Tff_unit_formulaContext = Tff_unit_formulaContext; 
TPTPParser.Tff_preunit_formulaContext = Tff_preunit_formulaContext; 
TPTPParser.Tff_unitary_formulaContext = Tff_unitary_formulaContext; 
TPTPParser.Txf_unitary_formulaContext = Txf_unitary_formulaContext; 
TPTPParser.Tff_quantified_formulaContext = Tff_quantified_formulaContext; 
TPTPParser.Tff_variable_listContext = Tff_variable_listContext; 
TPTPParser.Tff_variableContext = Tff_variableContext; 
TPTPParser.Tff_typed_variableContext = Tff_typed_variableContext; 
TPTPParser.Tff_unary_formulaContext = Tff_unary_formulaContext; 
TPTPParser.Tff_prefix_unaryContext = Tff_prefix_unaryContext; 
TPTPParser.Tff_infix_unaryContext = Tff_infix_unaryContext; 
TPTPParser.Tff_atomic_formulaContext = Tff_atomic_formulaContext; 
TPTPParser.Tff_plain_atomicContext = Tff_plain_atomicContext; 
TPTPParser.Tff_defined_atomicContext = Tff_defined_atomicContext; 
TPTPParser.Tff_defined_plainContext = Tff_defined_plainContext; 
TPTPParser.Tff_defined_infixContext = Tff_defined_infixContext; 
TPTPParser.Tff_system_atomicContext = Tff_system_atomicContext; 
TPTPParser.Txf_letContext = Txf_letContext; 
TPTPParser.Txf_let_typesContext = Txf_let_typesContext; 
TPTPParser.Tff_atom_typing_listContext = Tff_atom_typing_listContext; 
TPTPParser.Txf_let_defnsContext = Txf_let_defnsContext; 
TPTPParser.Txf_let_defnContext = Txf_let_defnContext; 
TPTPParser.Txf_let_LHSContext = Txf_let_LHSContext; 
TPTPParser.Txf_let_defn_listContext = Txf_let_defn_listContext; 
TPTPParser.Txf_ntf_atomContext = Txf_ntf_atomContext; 
TPTPParser.Tff_termContext = Tff_termContext; 
TPTPParser.Tff_unitary_termContext = Tff_unitary_termContext; 
TPTPParser.Txf_tupleContext = Txf_tupleContext; 
TPTPParser.Tff_argumentsContext = Tff_argumentsContext; 
TPTPParser.Tff_atom_typingContext = Tff_atom_typingContext; 
TPTPParser.Tff_top_level_typeContext = Tff_top_level_typeContext; 
TPTPParser.Tff_non_atomic_typeContext = Tff_non_atomic_typeContext; 
TPTPParser.Tf1_quantified_typeContext = Tf1_quantified_typeContext; 
TPTPParser.Tff_monotypeContext = Tff_monotypeContext; 
TPTPParser.Tff_unitary_typeContext = Tff_unitary_typeContext; 
TPTPParser.Tff_atomic_typeContext = Tff_atomic_typeContext; 
TPTPParser.Tff_type_argumentsContext = Tff_type_argumentsContext; 
TPTPParser.Tff_mapping_typeContext = Tff_mapping_typeContext; 
TPTPParser.Tff_xprod_typeContext = Tff_xprod_typeContext; 
TPTPParser.Txf_tuple_typeContext = Txf_tuple_typeContext; 
TPTPParser.Tff_type_listContext = Tff_type_listContext; 
TPTPParser.Tff_subtypeContext = Tff_subtypeContext; 
TPTPParser.Txf_definitionContext = Txf_definitionContext; 
TPTPParser.Txf_sequentContext = Txf_sequentContext; 
TPTPParser.Ntf_connectiveContext = Ntf_connectiveContext; 
TPTPParser.Ntf_short_connectiveContext = Ntf_short_connectiveContext; 
TPTPParser.Ntf_long_connectiveContext = Ntf_long_connectiveContext; 
TPTPParser.Ntf_connective_nameContext = Ntf_connective_nameContext; 
TPTPParser.Ntf_parameter_listContext = Ntf_parameter_listContext; 
TPTPParser.Ntf_parameterContext = Ntf_parameterContext; 
TPTPParser.Ntf_indexContext = Ntf_indexContext; 
TPTPParser.Ntf_key_pairContext = Ntf_key_pairContext; 
TPTPParser.Logic_defn_ruleContext = Logic_defn_ruleContext; 
TPTPParser.Logic_defn_LHSContext = Logic_defn_LHSContext; 
TPTPParser.Logic_defn_RHSContext = Logic_defn_RHSContext; 
TPTPParser.Tcf_formulaContext = Tcf_formulaContext; 
TPTPParser.Tcf_logic_formulaContext = Tcf_logic_formulaContext; 
TPTPParser.Tcf_quantified_formulaContext = Tcf_quantified_formulaContext; 
TPTPParser.Fof_formulaContext = Fof_formulaContext; 
TPTPParser.Fof_logic_formulaContext = Fof_logic_formulaContext; 
TPTPParser.Fof_binary_formulaContext = Fof_binary_formulaContext; 
TPTPParser.Fof_binary_nonassocContext = Fof_binary_nonassocContext; 
TPTPParser.Fof_binary_assocContext = Fof_binary_assocContext; 
TPTPParser.Fof_or_formulaContext = Fof_or_formulaContext; 
TPTPParser.Fof_and_formulaContext = Fof_and_formulaContext; 
TPTPParser.Fof_unary_formulaContext = Fof_unary_formulaContext; 
TPTPParser.Fof_infix_unaryContext = Fof_infix_unaryContext; 
TPTPParser.Fof_unit_formulaContext = Fof_unit_formulaContext; 
TPTPParser.Fof_unitary_formulaContext = Fof_unitary_formulaContext; 
TPTPParser.Fof_quantified_formulaContext = Fof_quantified_formulaContext; 
TPTPParser.Fof_variable_listContext = Fof_variable_listContext; 
TPTPParser.Fof_atomic_formulaContext = Fof_atomic_formulaContext; 
TPTPParser.Fof_plain_atomic_formulaContext = Fof_plain_atomic_formulaContext; 
TPTPParser.Fof_defined_atomic_formulaContext = Fof_defined_atomic_formulaContext; 
TPTPParser.Fof_defined_plain_formulaContext = Fof_defined_plain_formulaContext; 
TPTPParser.Fof_defined_infix_formulaContext = Fof_defined_infix_formulaContext; 
TPTPParser.Fof_system_atomic_formulaContext = Fof_system_atomic_formulaContext; 
TPTPParser.Fof_plain_termContext = Fof_plain_termContext; 
TPTPParser.Fof_defined_termContext = Fof_defined_termContext; 
TPTPParser.Fof_defined_atomic_termContext = Fof_defined_atomic_termContext; 
TPTPParser.Fof_defined_plain_termContext = Fof_defined_plain_termContext; 
TPTPParser.Fof_system_termContext = Fof_system_termContext; 
TPTPParser.Fof_argumentsContext = Fof_argumentsContext; 
TPTPParser.Fof_termContext = Fof_termContext; 
TPTPParser.Fof_function_termContext = Fof_function_termContext; 
TPTPParser.Fof_sequentContext = Fof_sequentContext; 
TPTPParser.Fof_formula_tupleContext = Fof_formula_tupleContext; 
TPTPParser.Fof_formula_tuple_listContext = Fof_formula_tuple_listContext; 
TPTPParser.Cnf_formulaContext = Cnf_formulaContext; 
TPTPParser.Cnf_disjunctionContext = Cnf_disjunctionContext; 
TPTPParser.Cnf_literalContext = Cnf_literalContext; 
TPTPParser.Thf_quantifierContext = Thf_quantifierContext; 
TPTPParser.Th1_quantifierContext = Th1_quantifierContext; 
TPTPParser.Th0_quantifierContext = Th0_quantifierContext; 
TPTPParser.Fof_quantifierContext = Fof_quantifierContext; 
TPTPParser.Nonassoc_connectiveContext = Nonassoc_connectiveContext; 
TPTPParser.Assoc_connectiveContext = Assoc_connectiveContext; 
TPTPParser.Unary_connectiveContext = Unary_connectiveContext; 
TPTPParser.Type_constantContext = Type_constantContext; 
TPTPParser.Type_functorContext = Type_functorContext; 
TPTPParser.Defined_typeContext = Defined_typeContext; 
TPTPParser.System_typeContext = System_typeContext; 
TPTPParser.AtomContext = AtomContext; 
TPTPParser.Untyped_atomContext = Untyped_atomContext; 
TPTPParser.Defined_propositionContext = Defined_propositionContext; 
TPTPParser.Defined_predicateContext = Defined_predicateContext; 
TPTPParser.Defined_infix_predContext = Defined_infix_predContext; 
TPTPParser.ConstantContext = ConstantContext; 
TPTPParser.FunctorContext = FunctorContext; 
TPTPParser.Defined_constantContext = Defined_constantContext; 
TPTPParser.Defined_functorContext = Defined_functorContext; 
TPTPParser.System_constantContext = System_constantContext; 
TPTPParser.System_functorContext = System_functorContext; 
TPTPParser.Def_or_sys_constantContext = Def_or_sys_constantContext; 
TPTPParser.Th1_defined_termContext = Th1_defined_termContext; 
TPTPParser.Defined_termContext = Defined_termContext; 
TPTPParser.VariableContext = VariableContext; 
TPTPParser.SourceContext = SourceContext; 
TPTPParser.SourcesContext = SourcesContext; 
TPTPParser.Dag_sourceContext = Dag_sourceContext; 
TPTPParser.Inference_recordContext = Inference_recordContext; 
TPTPParser.Inference_ruleContext = Inference_ruleContext; 
TPTPParser.Inference_parentsContext = Inference_parentsContext; 
TPTPParser.Parent_listContext = Parent_listContext; 
TPTPParser.Parent_infoContext = Parent_infoContext; 
TPTPParser.Parent_detailsContext = Parent_detailsContext; 
TPTPParser.Internal_sourceContext = Internal_sourceContext; 
TPTPParser.Intro_typeContext = Intro_typeContext; 
TPTPParser.External_sourceContext = External_sourceContext; 
TPTPParser.File_sourceContext = File_sourceContext; 
TPTPParser.File_infoContext = File_infoContext; 
TPTPParser.TheoryContext = TheoryContext; 
TPTPParser.Theory_nameContext = Theory_nameContext; 
TPTPParser.Creator_sourceContext = Creator_sourceContext; 
TPTPParser.Creator_nameContext = Creator_nameContext; 
TPTPParser.Optional_infoContext = Optional_infoContext; 
TPTPParser.Useful_infoContext = Useful_infoContext; 
TPTPParser.Info_itemsContext = Info_itemsContext; 
TPTPParser.Info_itemContext = Info_itemContext; 
TPTPParser.Formula_itemContext = Formula_itemContext; 
TPTPParser.Description_itemContext = Description_itemContext; 
TPTPParser.Iquote_itemContext = Iquote_itemContext; 
TPTPParser.Inference_itemContext = Inference_itemContext; 
TPTPParser.Inference_statusContext = Inference_statusContext; 
TPTPParser.Status_valueContext = Status_valueContext; 
TPTPParser.Inference_infoContext = Inference_infoContext; 
TPTPParser.Assumptions_recordContext = Assumptions_recordContext; 
TPTPParser.RefutationContext = RefutationContext; 
TPTPParser.New_symbol_recordContext = New_symbol_recordContext; 
TPTPParser.New_symbol_listContext = New_symbol_listContext; 
TPTPParser.Principal_symbolContext = Principal_symbolContext; 
TPTPParser.IncludeContext = IncludeContext; 
TPTPParser.Formula_selectionContext = Formula_selectionContext; 
TPTPParser.Name_listContext = Name_listContext; 
TPTPParser.General_termContext = General_termContext; 
TPTPParser.General_dataContext = General_dataContext; 
TPTPParser.General_functionContext = General_functionContext; 
TPTPParser.Formula_dataContext = Formula_dataContext; 
TPTPParser.General_listContext = General_listContext; 
TPTPParser.General_termsContext = General_termsContext; 
TPTPParser.NameContext = NameContext; 
TPTPParser.Atomic_wordContext = Atomic_wordContext; 
TPTPParser.Atomic_defined_wordContext = Atomic_defined_wordContext; 
TPTPParser.Atomic_system_wordContext = Atomic_system_wordContext; 
TPTPParser.NumberContext = NumberContext; 
TPTPParser.File_nameContext = File_nameContext; 
